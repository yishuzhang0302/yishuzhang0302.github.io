// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
require = (function (modules, cache, entry) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof require === "function" && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof require === "function" && require;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }
      
      localRequire.resolve = resolve;

      var module = cache[name] = new newRequire.Module;

      modules[name][0].call(module.exports, localRequire, module, module.exports);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module() {
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  // Override the current require with this new one
  return newRequire;
})({285:[function(require,module,exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],287:[function(require,module,exports) {
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],292:[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],289:[function(require,module,exports) {
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":292}],281:[function(require,module,exports) {
var core = module.exports = { version: '2.5.3' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],303:[function(require,module,exports) {
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],301:[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":303}],405:[function(require,module,exports) {
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_is-object":303,"./_global":285}],406:[function(require,module,exports) {
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":289,"./_fails":292,"./_dom-create":405}],302:[function(require,module,exports) {
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":303}],308:[function(require,module,exports) {
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":301,"./_ie8-dom-define":406,"./_to-primitive":302,"./_descriptors":289}],305:[function(require,module,exports) {
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],314:[function(require,module,exports) {
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_object-dp":308,"./_property-desc":305,"./_descriptors":289}],295:[function(require,module,exports) {
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],290:[function(require,module,exports) {

var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_global":285,"./_hide":314,"./_has":287,"./_uid":295,"./_core":281}],356:[function(require,module,exports) {
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],346:[function(require,module,exports) {
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":356}],286:[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_global":285,"./_core":281,"./_hide":314,"./_redefine":290,"./_ctx":346}],291:[function(require,module,exports) {
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_uid":295,"./_is-object":303,"./_has":287,"./_object-dp":308,"./_fails":292}],293:[function(require,module,exports) {

var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};

},{"./_global":285}],296:[function(require,module,exports) {
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_shared":293,"./_uid":295,"./_global":285}],294:[function(require,module,exports) {
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_object-dp":308,"./_has":287,"./_wks":296}],297:[function(require,module,exports) {
exports.f = require('./_wks');

},{"./_wks":296}],313:[function(require,module,exports) {
module.exports = false;

},{}],298:[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_global":285,"./_core":281,"./_library":313,"./_wks-ext":297,"./_object-dp":308}],326:[function(require,module,exports) {
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],352:[function(require,module,exports) {
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":326}],390:[function(require,module,exports) {
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],304:[function(require,module,exports) {
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_iobject":352,"./_defined":390}],329:[function(require,module,exports) {
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],338:[function(require,module,exports) {
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":329}],337:[function(require,module,exports) {
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":329}],358:[function(require,module,exports) {
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-iobject":304,"./_to-length":338,"./_to-absolute-index":337}],404:[function(require,module,exports) {
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":293,"./_uid":295}],407:[function(require,module,exports) {
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_has":287,"./_to-iobject":304,"./_array-includes":358,"./_shared-key":404}],403:[function(require,module,exports) {
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],309:[function(require,module,exports) {
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_object-keys-internal":407,"./_enum-bug-keys":403}],312:[function(require,module,exports) {
exports.f = Object.getOwnPropertySymbols;

},{}],311:[function(require,module,exports) {
exports.f = {}.propertyIsEnumerable;

},{}],299:[function(require,module,exports) {
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-keys":309,"./_object-gops":312,"./_object-pie":311}],300:[function(require,module,exports) {
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":326}],315:[function(require,module,exports) {
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_object-dp":308,"./_an-object":301,"./_object-keys":309,"./_descriptors":289}],354:[function(require,module,exports) {
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":285}],288:[function(require,module,exports) {
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":301,"./_object-dps":315,"./_enum-bug-keys":403,"./_shared-key":404,"./_dom-create":405,"./_html":354}],310:[function(require,module,exports) {
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_object-keys-internal":407,"./_enum-bug-keys":403}],306:[function(require,module,exports) {
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_to-iobject":304,"./_object-gopn":310}],307:[function(require,module,exports) {
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_object-pie":311,"./_property-desc":305,"./_to-iobject":304,"./_to-primitive":302,"./_has":287,"./_ie8-dom-define":406,"./_descriptors":289}],84:[function(require,module,exports) {

'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_global":285,"./_has":287,"./_descriptors":289,"./_export":286,"./_redefine":290,"./_meta":291,"./_fails":292,"./_shared":293,"./_set-to-string-tag":294,"./_uid":295,"./_wks":296,"./_wks-ext":297,"./_wks-define":298,"./_enum-keys":299,"./_is-array":300,"./_an-object":301,"./_is-object":303,"./_to-iobject":304,"./_to-primitive":302,"./_property-desc":305,"./_object-create":288,"./_object-gopn-ext":306,"./_object-gopd":307,"./_object-dp":308,"./_object-keys":309,"./_object-gopn":310,"./_object-pie":311,"./_object-gops":312,"./_library":313,"./_hide":314}],85:[function(require,module,exports) {
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":286,"./_object-create":288}],86:[function(require,module,exports) {
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_export":286,"./_descriptors":289,"./_object-dp":308}],89:[function(require,module,exports) {
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });

},{"./_export":286,"./_descriptors":289,"./_object-dps":315}],316:[function(require,module,exports) {
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_export":286,"./_core":281,"./_fails":292}],87:[function(require,module,exports) {
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_to-iobject":304,"./_object-gopd":307,"./_object-sap":316}],317:[function(require,module,exports) {
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":390}],318:[function(require,module,exports) {
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":287,"./_to-object":317,"./_shared-key":404}],90:[function(require,module,exports) {
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_to-object":317,"./_object-gpo":318,"./_object-sap":316}],88:[function(require,module,exports) {
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_to-object":317,"./_object-keys":309,"./_object-sap":316}],91:[function(require,module,exports) {
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-sap":316,"./_object-gopn-ext":306}],92:[function(require,module,exports) {
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":303,"./_meta":291,"./_object-sap":316}],93:[function(require,module,exports) {
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"./_is-object":303,"./_meta":291,"./_object-sap":316}],94:[function(require,module,exports) {
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":303,"./_meta":291,"./_object-sap":316}],95:[function(require,module,exports) {
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"./_is-object":303,"./_object-sap":316}],97:[function(require,module,exports) {
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"./_is-object":303,"./_object-sap":316}],96:[function(require,module,exports) {
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":303,"./_object-sap":316}],319:[function(require,module,exports) {
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"./_object-keys":309,"./_object-gops":312,"./_object-pie":311,"./_to-object":317,"./_iobject":352,"./_fails":292}],98:[function(require,module,exports) {
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":286,"./_object-assign":319}],320:[function(require,module,exports) {
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],99:[function(require,module,exports) {
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":286,"./_same-value":320}],322:[function(require,module,exports) {
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_is-object":303,"./_an-object":301,"./_ctx":346,"./_object-gopd":307}],100:[function(require,module,exports) {
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":286,"./_set-proto":322}],321:[function(require,module,exports) {
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":326,"./_wks":296}],101:[function(require,module,exports) {
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof');
var test = {};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"./_classof":321,"./_wks":296,"./_redefine":290}],408:[function(require,module,exports) {
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],323:[function(require,module,exports) {
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":356,"./_is-object":303,"./_invoke":408}],102:[function(require,module,exports) {
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', { bind: require('./_bind') });

},{"./_export":286,"./_bind":323}],103:[function(require,module,exports) {
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_object-dp":308,"./_descriptors":289}],104:[function(require,module,exports) {
'use strict';
var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });

},{"./_is-object":303,"./_object-gpo":318,"./_wks":296,"./_object-dp":308}],409:[function(require,module,exports) {
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],328:[function(require,module,exports) {
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_export":286,"./_defined":390,"./_fails":292,"./_string-ws":409}],324:[function(require,module,exports) {
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":285,"./_string-trim":328,"./_string-ws":409}],105:[function(require,module,exports) {
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

},{"./_export":286,"./_parse-int":324}],325:[function(require,module,exports) {
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":285,"./_string-trim":328,"./_string-ws":409}],106:[function(require,module,exports) {
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

},{"./_export":286,"./_parse-float":325}],327:[function(require,module,exports) {
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"./_is-object":303,"./_set-proto":322}],107:[function(require,module,exports) {

'use strict';
var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}

},{"./_global":285,"./_has":287,"./_cof":326,"./_inherit-if-required":327,"./_to-primitive":302,"./_fails":292,"./_object-gopn":310,"./_object-gopd":307,"./_object-dp":308,"./_string-trim":328,"./_object-create":288,"./_descriptors":289,"./_redefine":290}],330:[function(require,module,exports) {
var cof = require('./_cof');
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

},{"./_cof":326}],331:[function(require,module,exports) {
'use strict';
var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_to-integer":329,"./_defined":390}],108:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toInteger = require('./_to-integer');
var aNumberValue = require('./_a-number-value');
var repeat = require('./_string-repeat');
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});

},{"./_export":286,"./_to-integer":329,"./_a-number-value":330,"./_string-repeat":331,"./_fails":292}],109:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $fails = require('./_fails');
var aNumberValue = require('./_a-number-value');
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

},{"./_export":286,"./_fails":292,"./_a-number-value":330}],110:[function(require,module,exports) {
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"./_export":286}],111:[function(require,module,exports) {
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"./_export":286,"./_global":285}],332:[function(require,module,exports) {
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":303}],112:[function(require,module,exports) {
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":286,"./_is-integer":332}],113:[function(require,module,exports) {
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":286}],114:[function(require,module,exports) {
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":286,"./_is-integer":332}],115:[function(require,module,exports) {
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"./_export":286}],117:[function(require,module,exports) {
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"./_export":286}],118:[function(require,module,exports) {
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"./_export":286,"./_parse-float":325}],119:[function(require,module,exports) {
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"./_export":286,"./_parse-int":324}],333:[function(require,module,exports) {
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],120:[function(require,module,exports) {
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":286,"./_math-log1p":333}],121:[function(require,module,exports) {
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":286}],122:[function(require,module,exports) {
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":286}],334:[function(require,module,exports) {
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],123:[function(require,module,exports) {
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"./_export":286,"./_math-sign":334}],124:[function(require,module,exports) {
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"./_export":286}],125:[function(require,module,exports) {
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":286}],336:[function(require,module,exports) {
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],126:[function(require,module,exports) {
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":286,"./_math-expm1":336}],335:[function(require,module,exports) {
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"./_math-sign":334}],127:[function(require,module,exports) {
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');

$export($export.S, 'Math', { fround: require('./_math-fround') });

},{"./_export":286,"./_math-fround":335}],128:[function(require,module,exports) {
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export');
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"./_export":286}],129:[function(require,module,exports) {
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":286,"./_fails":292}],130:[function(require,module,exports) {
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"./_export":286}],131:[function(require,module,exports) {
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":286,"./_math-log1p":333}],132:[function(require,module,exports) {
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"./_export":286}],133:[function(require,module,exports) {
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":286,"./_math-sign":334}],134:[function(require,module,exports) {
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":286,"./_math-expm1":336,"./_fails":292}],135:[function(require,module,exports) {
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":286,"./_math-expm1":336}],136:[function(require,module,exports) {
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"./_export":286}],137:[function(require,module,exports) {
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"./_export":286,"./_to-absolute-index":337}],138:[function(require,module,exports) {
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"./_export":286,"./_to-iobject":304,"./_to-length":338}],139:[function(require,module,exports) {
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"./_string-trim":328}],339:[function(require,module,exports) {
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_to-integer":329,"./_defined":390}],366:[function(require,module,exports) {
module.exports = {};

},{}],384:[function(require,module,exports) {
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_object-create":288,"./_property-desc":305,"./_set-to-string-tag":294,"./_hide":314,"./_wks":296}],340:[function(require,module,exports) {
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var has = require('./_has');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = (!BUGGY && $native) || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_library":313,"./_export":286,"./_redefine":290,"./_hide":314,"./_has":287,"./_iterators":366,"./_iter-create":384,"./_set-to-string-tag":294,"./_object-gpo":318,"./_wks":296}],140:[function(require,module,exports) {
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_string-at":339,"./_iter-define":340}],141:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":286,"./_string-at":339}],362:[function(require,module,exports) {
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_is-object":303,"./_cof":326,"./_wks":296}],341:[function(require,module,exports) {
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_is-regexp":362,"./_defined":390}],342:[function(require,module,exports) {
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"./_wks":296}],142:[function(require,module,exports) {
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":286,"./_to-length":338,"./_string-context":341,"./_fails-is-regexp":342}],143:[function(require,module,exports) {
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":286,"./_string-context":341,"./_fails-is-regexp":342}],144:[function(require,module,exports) {
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":286,"./_string-repeat":331}],145:[function(require,module,exports) {
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":286,"./_to-length":338,"./_string-context":341,"./_fails-is-regexp":342}],343:[function(require,module,exports) {
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_export":286,"./_fails":292,"./_defined":390}],146:[function(require,module,exports) {
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":343}],147:[function(require,module,exports) {
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":343}],148:[function(require,module,exports) {
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":343}],149:[function(require,module,exports) {
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":343}],150:[function(require,module,exports) {
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":343}],151:[function(require,module,exports) {
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":343}],153:[function(require,module,exports) {
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":343}],152:[function(require,module,exports) {
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":343}],154:[function(require,module,exports) {
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":343}],156:[function(require,module,exports) {
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":343}],155:[function(require,module,exports) {
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":343}],157:[function(require,module,exports) {
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":343}],158:[function(require,module,exports) {
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":343}],159:[function(require,module,exports) {
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });

},{"./_export":286}],160:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"./_export":286,"./_to-object":317,"./_to-primitive":302,"./_fails":292}],344:[function(require,module,exports) {
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = require('./_fails');
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"./_fails":292}],161:[function(require,module,exports) {
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export');
var toISOString = require('./_date-to-iso-string');

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

},{"./_export":286,"./_date-to-iso-string":344}],162:[function(require,module,exports) {
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  require('./_redefine')(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

},{"./_redefine":290}],345:[function(require,module,exports) {
'use strict';
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":301,"./_to-primitive":302}],163:[function(require,module,exports) {
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_wks":296,"./_hide":314,"./_date-to-primitive":345}],164:[function(require,module,exports) {
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', { isArray: require('./_is-array') });

},{"./_export":286,"./_is-array":300}],347:[function(require,module,exports) {
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":301}],348:[function(require,module,exports) {
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":366,"./_wks":296}],349:[function(require,module,exports) {
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":308,"./_property-desc":305}],350:[function(require,module,exports) {
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":321,"./_wks":296,"./_iterators":366,"./_core":281}],351:[function(require,module,exports) {
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":296}],165:[function(require,module,exports) {
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_ctx":346,"./_export":286,"./_to-object":317,"./_iter-call":347,"./_is-array-iter":348,"./_to-length":338,"./_create-property":349,"./core.get-iterator-method":350,"./_iter-detect":351}],166:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_export":286,"./_create-property":349,"./_fails":292}],353:[function(require,module,exports) {
'use strict';
var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"./_fails":292}],167:[function(require,module,exports) {
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

},{"./_export":286,"./_to-iobject":304,"./_iobject":352,"./_strict-method":353}],168:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var html = require('./_html');
var cof = require('./_cof');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

},{"./_export":286,"./_html":354,"./_cof":326,"./_to-absolute-index":337,"./_to-length":338,"./_fails":292}],169:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_export":286,"./_a-function":356,"./_to-object":317,"./_fails":292,"./_strict-method":353}],411:[function(require,module,exports) {
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-object":303,"./_is-array":300,"./_wks":296}],387:[function(require,module,exports) {
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":411}],355:[function(require,module,exports) {
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_ctx":346,"./_iobject":352,"./_to-object":317,"./_to-length":338,"./_array-species-create":387}],170:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"./_export":286,"./_array-methods":355,"./_strict-method":353}],171:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_export":286,"./_array-methods":355,"./_strict-method":353}],172:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"./_export":286,"./_array-methods":355,"./_strict-method":353}],173:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $some = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"./_export":286,"./_array-methods":355,"./_strict-method":353}],174:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $every = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"./_export":286,"./_array-methods":355,"./_strict-method":353}],357:[function(require,module,exports) {
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var toLength = require('./_to-length');

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"./_a-function":356,"./_to-object":317,"./_iobject":352,"./_to-length":338}],175:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"./_export":286,"./_array-reduce":357,"./_strict-method":353}],176:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"./_export":286,"./_array-reduce":357,"./_strict-method":353}],177:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"./_export":286,"./_array-includes":358,"./_strict-method":353}],178:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"./_export":286,"./_to-iobject":304,"./_to-integer":329,"./_to-length":338,"./_strict-method":353}],359:[function(require,module,exports) {
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"./_to-object":317,"./_to-absolute-index":337,"./_to-length":338}],360:[function(require,module,exports) {
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_wks":296,"./_hide":314}],179:[function(require,module,exports) {
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_export":286,"./_array-copy-within":359,"./_add-to-unscopables":360}],361:[function(require,module,exports) {
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-object":317,"./_to-absolute-index":337,"./_to-length":338}],180:[function(require,module,exports) {
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_export":286,"./_array-fill":361,"./_add-to-unscopables":360}],181:[function(require,module,exports) {
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_export":286,"./_array-methods":355,"./_add-to-unscopables":360}],182:[function(require,module,exports) {
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_export":286,"./_array-methods":355,"./_add-to-unscopables":360}],364:[function(require,module,exports) {

'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_global":285,"./_object-dp":308,"./_descriptors":289,"./_wks":296}],183:[function(require,module,exports) {
require('./_set-species')('Array');

},{"./_set-species":364}],365:[function(require,module,exports) {
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],185:[function(require,module,exports) {
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":360,"./_iter-step":365,"./_iterators":366,"./_to-iobject":304,"./_iter-define":340}],363:[function(require,module,exports) {
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":301}],184:[function(require,module,exports) {

var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_global":285,"./_inherit-if-required":327,"./_object-dp":308,"./_object-gopn":310,"./_is-regexp":362,"./_flags":363,"./_descriptors":289,"./_fails":292,"./_wks":296,"./_redefine":290,"./_set-species":364}],187:[function(require,module,exports) {
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":289,"./_object-dp":308,"./_flags":363}],186:[function(require,module,exports) {
'use strict';
require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./es6.regexp.flags":187,"./_an-object":301,"./_flags":363,"./_descriptors":289,"./_redefine":290,"./_fails":292}],367:[function(require,module,exports) {
'use strict';
var hide = require('./_hide');
var redefine = require('./_redefine');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./_hide":314,"./_redefine":290,"./_fails":292,"./_defined":390,"./_wks":296}],188:[function(require,module,exports) {
// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});

},{"./_fix-re-wks":367}],189:[function(require,module,exports) {
// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});

},{"./_fix-re-wks":367}],190:[function(require,module,exports) {
// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});

},{"./_fix-re-wks":367}],191:[function(require,module,exports) {
// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {
  'use strict';
  var isRegExp = require('./_is-regexp');
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});

},{"./_fix-re-wks":367,"./_is-regexp":362}],371:[function(require,module,exports) {
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],372:[function(require,module,exports) {
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_ctx":346,"./_iter-call":347,"./_is-array-iter":348,"./_an-object":301,"./_to-length":338,"./core.get-iterator-method":350}],373:[function(require,module,exports) {
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_an-object":301,"./_a-function":356,"./_wks":296}],374:[function(require,module,exports) {


var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_ctx":346,"./_invoke":408,"./_html":354,"./_dom-create":405,"./_global":285,"./_cof":326}],375:[function(require,module,exports) {


var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    var promise = Promise.resolve();
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_global":285,"./_task":374,"./_cof":326}],376:[function(require,module,exports) {
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":356}],377:[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],378:[function(require,module,exports) {
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":301,"./_is-object":303,"./_new-promise-capability":376}],379:[function(require,module,exports) {
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":290}],193:[function(require,module,exports) {


'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value);
            if (domain) domain.exit();
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_library":313,"./_global":285,"./_ctx":346,"./_classof":321,"./_export":286,"./_is-object":303,"./_a-function":356,"./_an-instance":371,"./_for-of":372,"./_species-constructor":373,"./_task":374,"./_microtask":375,"./_new-promise-capability":376,"./_perform":377,"./_promise-resolve":378,"./_wks":296,"./_redefine-all":379,"./_set-to-string-tag":294,"./_set-species":364,"./_core":281,"./_iter-detect":351}],369:[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":303}],368:[function(require,module,exports) {
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_object-dp":308,"./_object-create":288,"./_redefine-all":379,"./_ctx":346,"./_an-instance":371,"./_for-of":372,"./_iter-define":340,"./_iter-step":365,"./_set-species":364,"./_descriptors":289,"./_meta":291,"./_validate-collection":369}],370:[function(require,module,exports) {

'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_global":285,"./_export":286,"./_redefine":290,"./_redefine-all":379,"./_meta":291,"./_for-of":372,"./_an-instance":371,"./_is-object":303,"./_fails":292,"./_iter-detect":351,"./_set-to-string-tag":294,"./_inherit-if-required":327}],192:[function(require,module,exports) {
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection-strong":368,"./_validate-collection":369,"./_collection":370}],194:[function(require,module,exports) {
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection-strong":368,"./_validate-collection":369,"./_collection":370}],380:[function(require,module,exports) {
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_redefine-all":379,"./_meta":291,"./_an-object":301,"./_is-object":303,"./_an-instance":371,"./_for-of":372,"./_array-methods":355,"./_has":287,"./_validate-collection":369}],195:[function(require,module,exports) {
'use strict';
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var fails = require('./_fails');
var validate = require('./_validate-collection');
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":355,"./_redefine":290,"./_meta":291,"./_object-assign":319,"./_collection-weak":380,"./_is-object":303,"./_fails":292,"./_validate-collection":369,"./_collection":370}],196:[function(require,module,exports) {
'use strict';
var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"./_collection-weak":380,"./_validate-collection":369,"./_collection":370}],381:[function(require,module,exports) {

var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"./_global":285,"./_hide":314,"./_uid":295}],410:[function(require,module,exports) {
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"./_to-integer":329,"./_to-length":338}],382:[function(require,module,exports) {

'use strict';
var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_global":285,"./_descriptors":289,"./_library":313,"./_typed":381,"./_hide":314,"./_redefine-all":379,"./_fails":292,"./_an-instance":371,"./_to-integer":329,"./_to-length":338,"./_to-index":410,"./_object-gopn":310,"./_object-dp":308,"./_array-fill":361,"./_set-to-string-tag":294}],197:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var final = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < final) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);

},{"./_export":286,"./_typed":381,"./_typed-buffer":382,"./_an-object":301,"./_to-absolute-index":337,"./_to-length":338,"./_is-object":303,"./_global":285,"./_species-constructor":373,"./_fails":292,"./_set-species":364}],198:[function(require,module,exports) {
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});

},{"./_export":286,"./_typed":381,"./_typed-buffer":382}],383:[function(require,module,exports) {
var global = (1,eval)("this");
'use strict';
if (require('./_descriptors')) {
  var LIBRARY = require('./_library');
  var global = require('./_global');
  var fails = require('./_fails');
  var $export = require('./_export');
  var $typed = require('./_typed');
  var $buffer = require('./_typed-buffer');
  var ctx = require('./_ctx');
  var anInstance = require('./_an-instance');
  var propertyDesc = require('./_property-desc');
  var hide = require('./_hide');
  var redefineAll = require('./_redefine-all');
  var toInteger = require('./_to-integer');
  var toLength = require('./_to-length');
  var toIndex = require('./_to-index');
  var toAbsoluteIndex = require('./_to-absolute-index');
  var toPrimitive = require('./_to-primitive');
  var has = require('./_has');
  var classof = require('./_classof');
  var isObject = require('./_is-object');
  var toObject = require('./_to-object');
  var isArrayIter = require('./_is-array-iter');
  var create = require('./_object-create');
  var getPrototypeOf = require('./_object-gpo');
  var gOPN = require('./_object-gopn').f;
  var getIterFn = require('./core.get-iterator-method');
  var uid = require('./_uid');
  var wks = require('./_wks');
  var createArrayMethod = require('./_array-methods');
  var createArrayIncludes = require('./_array-includes');
  var speciesConstructor = require('./_species-constructor');
  var ArrayIterators = require('./es6.array.iterator');
  var Iterators = require('./_iterators');
  var $iterDetect = require('./_iter-detect');
  var setSpecies = require('./_set-species');
  var arrayFill = require('./_array-fill');
  var arrayCopyWithin = require('./_array-copy-within');
  var $DP = require('./_object-dp');
  var $GOPD = require('./_object-gopd');
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };

},{"./_descriptors":289,"./_library":313,"./_global":285,"./_fails":292,"./_export":286,"./_typed":381,"./_typed-buffer":382,"./_ctx":346,"./_an-instance":371,"./_property-desc":305,"./_hide":314,"./_redefine-all":379,"./_to-integer":329,"./_to-length":338,"./_to-index":410,"./_to-absolute-index":337,"./_to-primitive":302,"./_has":287,"./_classof":321,"./_is-object":303,"./_to-object":317,"./_is-array-iter":348,"./_object-create":288,"./_object-gpo":318,"./_object-gopn":310,"./core.get-iterator-method":350,"./_uid":295,"./_wks":296,"./_array-methods":355,"./_array-includes":358,"./_species-constructor":373,"./es6.array.iterator":185,"./_iterators":366,"./_iter-detect":351,"./_set-species":364,"./_array-fill":361,"./_array-copy-within":359,"./_object-dp":308,"./_object-gopd":307}],199:[function(require,module,exports) {
require('./_typed-array')('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":383}],200:[function(require,module,exports) {
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":383}],201:[function(require,module,exports) {
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"./_typed-array":383}],202:[function(require,module,exports) {
require('./_typed-array')('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":383}],203:[function(require,module,exports) {
require('./_typed-array')('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":383}],204:[function(require,module,exports) {
require('./_typed-array')('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":383}],205:[function(require,module,exports) {
require('./_typed-array')('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":383}],206:[function(require,module,exports) {
require('./_typed-array')('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":383}],207:[function(require,module,exports) {
require('./_typed-array')('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":383}],208:[function(require,module,exports) {
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_export":286,"./_a-function":356,"./_an-object":301,"./_global":285,"./_fails":292}],209:[function(require,module,exports) {
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_export":286,"./_object-create":288,"./_a-function":356,"./_an-object":301,"./_is-object":303,"./_fails":292,"./_bind":323,"./_global":285}],210:[function(require,module,exports) {
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_object-dp":308,"./_export":286,"./_an-object":301,"./_to-primitive":302,"./_fails":292}],211:[function(require,module,exports) {
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"./_export":286,"./_object-gopd":307,"./_an-object":301}],212:[function(require,module,exports) {
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

},{"./_export":286,"./_an-object":301,"./_iter-create":384}],213:[function(require,module,exports) {
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"./_object-gopd":307,"./_object-gpo":318,"./_has":287,"./_export":286,"./_is-object":303,"./_an-object":301}],215:[function(require,module,exports) {
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"./_object-gopd":307,"./_export":286,"./_an-object":301}],214:[function(require,module,exports) {
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"./_export":286,"./_object-gpo":318,"./_an-object":301}],216:[function(require,module,exports) {
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"./_export":286}],217:[function(require,module,exports) {
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"./_export":286,"./_an-object":301}],385:[function(require,module,exports) {
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_object-gopn":310,"./_object-gops":312,"./_an-object":301,"./_global":285}],218:[function(require,module,exports) {
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });

},{"./_export":286,"./_own-keys":385}],219:[function(require,module,exports) {
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":286,"./_an-object":301}],220:[function(require,module,exports) {
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"./_object-dp":308,"./_object-gopd":307,"./_object-gpo":318,"./_has":287,"./_export":286,"./_property-desc":305,"./_an-object":301,"./_is-object":303}],221:[function(require,module,exports) {
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":286,"./_set-proto":322}],222:[function(require,module,exports) {
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_export":286,"./_array-includes":358,"./_add-to-unscopables":360}],386:[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ctx = require('./_ctx');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"./_is-array":300,"./_is-object":303,"./_to-length":338,"./_ctx":346,"./_wks":296}],224:[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var aFunction = require('./_a-function');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

require('./_add-to-unscopables')('flatMap');

},{"./_export":286,"./_flatten-into-array":386,"./_to-object":317,"./_to-length":338,"./_a-function":356,"./_array-species-create":387,"./_add-to-unscopables":360}],223:[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

require('./_add-to-unscopables')('flatten');

},{"./_export":286,"./_flatten-into-array":386,"./_to-object":317,"./_to-length":338,"./_to-integer":329,"./_array-species-create":387,"./_add-to-unscopables":360}],225:[function(require,module,exports) {
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export');
var $at = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});

},{"./_export":286,"./_string-at":339}],388:[function(require,module,exports) {
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_to-length":338,"./_string-repeat":331,"./_defined":390}],389:[function(require,module,exports) {

var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":285}],226:[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"./_export":286,"./_string-pad":388,"./_user-agent":389}],227:[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"./_export":286,"./_string-pad":388,"./_user-agent":389}],228:[function(require,module,exports) {
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

},{"./_string-trim":328}],229:[function(require,module,exports) {
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

},{"./_string-trim":328}],230:[function(require,module,exports) {
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export = require('./_export');
var defined = require('./_defined');
var toLength = require('./_to-length');
var isRegExp = require('./_is-regexp');
var getFlags = require('./_flags');
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});

},{"./_export":286,"./_defined":390,"./_to-length":338,"./_is-regexp":362,"./_flags":363,"./_iter-create":384}],231:[function(require,module,exports) {
require('./_wks-define')('asyncIterator');

},{"./_wks-define":298}],232:[function(require,module,exports) {
require('./_wks-define')('observable');

},{"./_wks-define":298}],233:[function(require,module,exports) {
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"./_export":286,"./_own-keys":385,"./_to-iobject":304,"./_object-gopd":307,"./_create-property":349}],391:[function(require,module,exports) {
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};

},{"./_object-keys":309,"./_to-iobject":304,"./_object-pie":311}],234:[function(require,module,exports) {
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"./_export":286,"./_object-to-array":391}],235:[function(require,module,exports) {
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":286,"./_object-to-array":391}],392:[function(require,module,exports) {
'use strict';
// Forced replacement prototype accessors methods
module.exports = require('./_library') || !require('./_fails')(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete require('./_global')[K];
});

},{"./_library":313,"./_fails":292,"./_global":285}],236:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});

},{"./_export":286,"./_to-object":317,"./_a-function":356,"./_object-dp":308,"./_descriptors":289,"./_object-forced-pam":392}],237:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});

},{"./_export":286,"./_to-object":317,"./_a-function":356,"./_object-dp":308,"./_descriptors":289,"./_object-forced-pam":392}],238:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_export":286,"./_to-object":317,"./_to-primitive":302,"./_object-gpo":318,"./_object-gopd":307,"./_descriptors":289,"./_object-forced-pam":392}],239:[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_export":286,"./_to-object":317,"./_to-primitive":302,"./_object-gpo":318,"./_object-gopd":307,"./_descriptors":289,"./_object-forced-pam":392}],398:[function(require,module,exports) {
var forOf = require('./_for-of');

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":372}],393:[function(require,module,exports) {
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof');
var from = require('./_array-from-iterable');
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

},{"./_classof":321,"./_array-from-iterable":398}],240:[function(require,module,exports) {
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });

},{"./_export":286,"./_collection-to-json":393}],241:[function(require,module,exports) {
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });

},{"./_export":286,"./_collection-to-json":393}],394:[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};

},{"./_export":286}],242:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
require('./_set-collection-of')('Map');

},{"./_set-collection-of":394}],243:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
require('./_set-collection-of')('Set');

},{"./_set-collection-of":394}],244:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
require('./_set-collection-of')('WeakMap');

},{"./_set-collection-of":394}],245:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
require('./_set-collection-of')('WeakSet');

},{"./_set-collection-of":394}],395:[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');
var aFunction = require('./_a-function');
var ctx = require('./_ctx');
var forOf = require('./_for-of');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};

},{"./_export":286,"./_a-function":356,"./_ctx":346,"./_for-of":372}],246:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
require('./_set-collection-from')('Map');

},{"./_set-collection-from":395}],247:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
require('./_set-collection-from')('Set');

},{"./_set-collection-from":395}],248:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
require('./_set-collection-from')('WeakMap');

},{"./_set-collection-from":395}],249:[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
require('./_set-collection-from')('WeakSet');

},{"./_set-collection-from":395}],250:[function(require,module,exports) {
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.G, { global: require('./_global') });

},{"./_export":286,"./_global":285}],251:[function(require,module,exports) {
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.S, 'System', { global: require('./_global') });

},{"./_export":286,"./_global":285}],252:[function(require,module,exports) {
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export');
var cof = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});

},{"./_export":286,"./_cof":326}],253:[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});

},{"./_export":286}],254:[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });

},{"./_export":286}],255:[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});

},{"./_export":286}],396:[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};

},{}],256:[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var scale = require('./_math-scale');
var fround = require('./_math-fround');

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});

},{"./_export":286,"./_math-scale":396,"./_math-fround":335}],257:[function(require,module,exports) {
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});

},{"./_export":286}],258:[function(require,module,exports) {
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});

},{"./_export":286}],259:[function(require,module,exports) {
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});

},{"./_export":286}],260:[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });

},{"./_export":286}],261:[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});

},{"./_export":286}],262:[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { scale: require('./_math-scale') });

},{"./_export":286,"./_math-scale":396}],263:[function(require,module,exports) {
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});

},{"./_export":286}],264:[function(require,module,exports) {
// http://jfbastien.github.io/papers/Math.signbit.html
var $export = require('./_export');

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });

},{"./_export":286}],265:[function(require,module,exports) {

// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_export":286,"./_core":281,"./_global":285,"./_species-constructor":373,"./_promise-resolve":378}],266:[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-promise-try
var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });

},{"./_export":286,"./_new-promise-capability":376,"./_perform":377}],397:[function(require,module,exports) {
var Map = require('./es6.map');
var $export = require('./_export');
var shared = require('./_shared')('metadata');
var store = shared.store || (shared.store = new (require('./es6.weak-map'))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};

},{"./es6.map":192,"./_export":286,"./_shared":293,"./es6.weak-map":195}],267:[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });

},{"./_metadata":397,"./_an-object":301}],268:[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });

},{"./_metadata":397,"./_an-object":301}],269:[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_metadata":397,"./_an-object":301,"./_object-gpo":318}],270:[function(require,module,exports) {
var Set = require('./es6.set');
var from = require('./_array-from-iterable');
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });

},{"./es6.set":194,"./_array-from-iterable":398,"./_metadata":397,"./_an-object":301,"./_object-gpo":318}],271:[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_metadata":397,"./_an-object":301}],272:[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });

},{"./_metadata":397,"./_an-object":301}],273:[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_metadata":397,"./_an-object":301,"./_object-gpo":318}],274:[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_metadata":397,"./_an-object":301}],275:[function(require,module,exports) {
var $metadata = require('./_metadata');
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });

},{"./_metadata":397,"./_an-object":301,"./_a-function":356}],276:[function(require,module,exports) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = require('./_export');
var microtask = require('./_microtask')();
var process = require('./_global').process;
var isNode = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

},{"./_export":286,"./_microtask":375,"./_global":285,"./_cof":326}],277:[function(require,module,exports) {

'use strict';
// https://github.com/zenparsing/es-observable
var $export = require('./_export');
var global = require('./_global');
var core = require('./_core');
var microtask = require('./_microtask')();
var OBSERVABLE = require('./_wks')('observable');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var anInstance = require('./_an-instance');
var redefineAll = require('./_redefine-all');
var hide = require('./_hide');
var forOf = require('./_for-of');
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

require('./_set-species')('Observable');

},{"./_export":286,"./_global":285,"./_core":281,"./_microtask":375,"./_wks":296,"./_a-function":356,"./_an-object":301,"./_an-instance":371,"./_redefine-all":379,"./_hide":314,"./_for-of":372,"./_set-species":364}],278:[function(require,module,exports) {

// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"./_global":285,"./_export":286,"./_user-agent":389}],279:[function(require,module,exports) {
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"./_export":286,"./_task":374}],280:[function(require,module,exports) {

var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./es6.array.iterator":185,"./_object-keys":309,"./_redefine":290,"./_global":285,"./_hide":314,"./_iterators":366,"./_wks":296}],83:[function(require,module,exports) {
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.array.flat-map');
require('./modules/es7.array.flatten');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.map.of');
require('./modules/es7.set.of');
require('./modules/es7.weak-map.of');
require('./modules/es7.weak-set.of');
require('./modules/es7.map.from');
require('./modules/es7.set.from');
require('./modules/es7.weak-map.from');
require('./modules/es7.weak-set.from');
require('./modules/es7.global');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.clamp');
require('./modules/es7.math.deg-per-rad');
require('./modules/es7.math.degrees');
require('./modules/es7.math.fscale');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.rad-per-deg');
require('./modules/es7.math.radians');
require('./modules/es7.math.scale');
require('./modules/es7.math.umulh');
require('./modules/es7.math.signbit');
require('./modules/es7.promise.finally');
require('./modules/es7.promise.try');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');

},{"./modules/es6.symbol":84,"./modules/es6.object.create":85,"./modules/es6.object.define-property":86,"./modules/es6.object.define-properties":89,"./modules/es6.object.get-own-property-descriptor":87,"./modules/es6.object.get-prototype-of":90,"./modules/es6.object.keys":88,"./modules/es6.object.get-own-property-names":91,"./modules/es6.object.freeze":92,"./modules/es6.object.seal":93,"./modules/es6.object.prevent-extensions":94,"./modules/es6.object.is-frozen":95,"./modules/es6.object.is-sealed":97,"./modules/es6.object.is-extensible":96,"./modules/es6.object.assign":98,"./modules/es6.object.is":99,"./modules/es6.object.set-prototype-of":100,"./modules/es6.object.to-string":101,"./modules/es6.function.bind":102,"./modules/es6.function.name":103,"./modules/es6.function.has-instance":104,"./modules/es6.parse-int":105,"./modules/es6.parse-float":106,"./modules/es6.number.constructor":107,"./modules/es6.number.to-fixed":108,"./modules/es6.number.to-precision":109,"./modules/es6.number.epsilon":110,"./modules/es6.number.is-finite":111,"./modules/es6.number.is-integer":112,"./modules/es6.number.is-nan":113,"./modules/es6.number.is-safe-integer":114,"./modules/es6.number.max-safe-integer":115,"./modules/es6.number.min-safe-integer":117,"./modules/es6.number.parse-float":118,"./modules/es6.number.parse-int":119,"./modules/es6.math.acosh":120,"./modules/es6.math.asinh":121,"./modules/es6.math.atanh":122,"./modules/es6.math.cbrt":123,"./modules/es6.math.clz32":124,"./modules/es6.math.cosh":125,"./modules/es6.math.expm1":126,"./modules/es6.math.fround":127,"./modules/es6.math.hypot":128,"./modules/es6.math.imul":129,"./modules/es6.math.log10":130,"./modules/es6.math.log1p":131,"./modules/es6.math.log2":132,"./modules/es6.math.sign":133,"./modules/es6.math.sinh":134,"./modules/es6.math.tanh":135,"./modules/es6.math.trunc":136,"./modules/es6.string.from-code-point":137,"./modules/es6.string.raw":138,"./modules/es6.string.trim":139,"./modules/es6.string.iterator":140,"./modules/es6.string.code-point-at":141,"./modules/es6.string.ends-with":142,"./modules/es6.string.includes":143,"./modules/es6.string.repeat":144,"./modules/es6.string.starts-with":145,"./modules/es6.string.anchor":146,"./modules/es6.string.big":147,"./modules/es6.string.blink":148,"./modules/es6.string.bold":149,"./modules/es6.string.fixed":150,"./modules/es6.string.fontcolor":151,"./modules/es6.string.fontsize":153,"./modules/es6.string.italics":152,"./modules/es6.string.link":154,"./modules/es6.string.small":156,"./modules/es6.string.strike":155,"./modules/es6.string.sub":157,"./modules/es6.string.sup":158,"./modules/es6.date.now":159,"./modules/es6.date.to-json":160,"./modules/es6.date.to-iso-string":161,"./modules/es6.date.to-string":162,"./modules/es6.date.to-primitive":163,"./modules/es6.array.is-array":164,"./modules/es6.array.from":165,"./modules/es6.array.of":166,"./modules/es6.array.join":167,"./modules/es6.array.slice":168,"./modules/es6.array.sort":169,"./modules/es6.array.for-each":170,"./modules/es6.array.map":171,"./modules/es6.array.filter":172,"./modules/es6.array.some":173,"./modules/es6.array.every":174,"./modules/es6.array.reduce":175,"./modules/es6.array.reduce-right":176,"./modules/es6.array.index-of":177,"./modules/es6.array.last-index-of":178,"./modules/es6.array.copy-within":179,"./modules/es6.array.fill":180,"./modules/es6.array.find":181,"./modules/es6.array.find-index":182,"./modules/es6.array.species":183,"./modules/es6.array.iterator":185,"./modules/es6.regexp.constructor":184,"./modules/es6.regexp.to-string":186,"./modules/es6.regexp.flags":187,"./modules/es6.regexp.match":188,"./modules/es6.regexp.replace":189,"./modules/es6.regexp.search":190,"./modules/es6.regexp.split":191,"./modules/es6.promise":193,"./modules/es6.map":192,"./modules/es6.set":194,"./modules/es6.weak-map":195,"./modules/es6.weak-set":196,"./modules/es6.typed.array-buffer":197,"./modules/es6.typed.data-view":198,"./modules/es6.typed.int8-array":199,"./modules/es6.typed.uint8-array":200,"./modules/es6.typed.uint8-clamped-array":201,"./modules/es6.typed.int16-array":202,"./modules/es6.typed.uint16-array":203,"./modules/es6.typed.int32-array":204,"./modules/es6.typed.uint32-array":205,"./modules/es6.typed.float32-array":206,"./modules/es6.typed.float64-array":207,"./modules/es6.reflect.apply":208,"./modules/es6.reflect.construct":209,"./modules/es6.reflect.define-property":210,"./modules/es6.reflect.delete-property":211,"./modules/es6.reflect.enumerate":212,"./modules/es6.reflect.get":213,"./modules/es6.reflect.get-own-property-descriptor":215,"./modules/es6.reflect.get-prototype-of":214,"./modules/es6.reflect.has":216,"./modules/es6.reflect.is-extensible":217,"./modules/es6.reflect.own-keys":218,"./modules/es6.reflect.prevent-extensions":219,"./modules/es6.reflect.set":220,"./modules/es6.reflect.set-prototype-of":221,"./modules/es7.array.includes":222,"./modules/es7.array.flat-map":224,"./modules/es7.array.flatten":223,"./modules/es7.string.at":225,"./modules/es7.string.pad-start":226,"./modules/es7.string.pad-end":227,"./modules/es7.string.trim-left":228,"./modules/es7.string.trim-right":229,"./modules/es7.string.match-all":230,"./modules/es7.symbol.async-iterator":231,"./modules/es7.symbol.observable":232,"./modules/es7.object.get-own-property-descriptors":233,"./modules/es7.object.values":234,"./modules/es7.object.entries":235,"./modules/es7.object.define-getter":236,"./modules/es7.object.define-setter":237,"./modules/es7.object.lookup-getter":238,"./modules/es7.object.lookup-setter":239,"./modules/es7.map.to-json":240,"./modules/es7.set.to-json":241,"./modules/es7.map.of":242,"./modules/es7.set.of":243,"./modules/es7.weak-map.of":244,"./modules/es7.weak-set.of":245,"./modules/es7.map.from":246,"./modules/es7.set.from":247,"./modules/es7.weak-map.from":248,"./modules/es7.weak-set.from":249,"./modules/es7.global":250,"./modules/es7.system.global":251,"./modules/es7.error.is-error":252,"./modules/es7.math.clamp":253,"./modules/es7.math.deg-per-rad":254,"./modules/es7.math.degrees":255,"./modules/es7.math.fscale":256,"./modules/es7.math.iaddh":257,"./modules/es7.math.isubh":258,"./modules/es7.math.imulh":259,"./modules/es7.math.rad-per-deg":260,"./modules/es7.math.radians":261,"./modules/es7.math.scale":262,"./modules/es7.math.umulh":263,"./modules/es7.math.signbit":264,"./modules/es7.promise.finally":265,"./modules/es7.promise.try":266,"./modules/es7.reflect.define-metadata":267,"./modules/es7.reflect.delete-metadata":268,"./modules/es7.reflect.get-metadata":269,"./modules/es7.reflect.get-metadata-keys":270,"./modules/es7.reflect.get-own-metadata":271,"./modules/es7.reflect.get-own-metadata-keys":272,"./modules/es7.reflect.has-metadata":273,"./modules/es7.reflect.has-own-metadata":274,"./modules/es7.reflect.metadata":275,"./modules/es7.asap":276,"./modules/es7.observable":277,"./modules/web.timers":278,"./modules/web.immediate":279,"./modules/web.dom.iterable":280,"./modules/_core":281}],76:[function(require,module,exports) {
var global = (1,eval)("this");
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

},{}],434:[function(require,module,exports) {
module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};

},{}],418:[function(require,module,exports) {
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export');
var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });

},{"./_export":286,"./_replacer":434}],417:[function(require,module,exports) {
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;

},{"../../modules/core.regexp.escape":418,"../../modules/_core":281}],58:[function(require,module,exports) {
var global = (1,eval)("this");
"use strict";

require("core-js/shim");

require("regenerator-runtime/runtime");

require("core-js/fn/regexp/escape");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
},{"core-js/shim":83,"regenerator-runtime/runtime":76,"core-js/fn/regexp/escape":417}],445:[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var ctx = require('./_ctx');
var hide = require('./_hide');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && key in exports) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_global":285,"./_core":281,"./_ctx":346,"./_hide":314}],498:[function(require,module,exports) {
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/_core').Object.setPrototypeOf;

},{"../../modules/es6.object.set-prototype-of":100,"../../modules/_core":281}],421:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":498}],504:[function(require,module,exports) {
require('../../modules/es6.math.sign');
module.exports = require('../../modules/_core').Math.sign;

},{"../../modules/es6.math.sign":133,"../../modules/_core":281}],420:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/math/sign"), __esModule: true };
},{"core-js/library/fn/math/sign":504}],447:[function(require,module,exports) {
module.exports = require('./_hide');

},{"./_hide":314}],468:[function(require,module,exports) {
module.exports = true;

},{}],437:[function(require,module,exports) {

},{}],435:[function(require,module,exports) {
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;

},{"../../modules/es6.symbol":84,"../../modules/es6.object.to-string":437,"../../modules/es7.symbol.async-iterator":231,"../../modules/es7.symbol.observable":232,"../../modules/_core":281}],415:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":435}],499:[function(require,module,exports) {
require('../../modules/es6.object.assign');
module.exports = require('../../modules/_core').Object.assign;

},{"../../modules/es6.object.assign":98,"../../modules/_core":281}],422:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":499}],512:[function(require,module,exports) {
var core = require('../../modules/_core');
var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};

},{"../../modules/_core":281}],423:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/json/stringify"), __esModule: true };
},{"core-js/library/fn/json/stringify":512}],500:[function(require,module,exports) {
require('../../modules/es6.object.is-frozen');
module.exports = require('../../modules/_core').Object.isFrozen;

},{"../../modules/es6.object.is-frozen":95,"../../modules/_core":281}],419:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/is-frozen"), __esModule: true };
},{"core-js/library/fn/object/is-frozen":500}],503:[function(require,module,exports) {
require('../../modules/es6.object.prevent-extensions');
module.exports = require('../../modules/_core').Object.preventExtensions;

},{"../../modules/es6.object.prevent-extensions":94,"../../modules/_core":281}],424:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/prevent-extensions"), __esModule: true };
},{"core-js/library/fn/object/prevent-extensions":503}],501:[function(require,module,exports) {
require('../../modules/es6.object.is-extensible');
module.exports = require('../../modules/_core').Object.isExtensible;

},{"../../modules/es6.object.is-extensible":96,"../../modules/_core":281}],425:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/is-extensible"), __esModule: true };
},{"core-js/library/fn/object/is-extensible":501}],502:[function(require,module,exports) {
require('../../modules/es6.object.define-properties');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperties(T, D) {
  return $Object.defineProperties(T, D);
};

},{"../../modules/es6.object.define-properties":89,"../../modules/_core":281}],426:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/define-properties"), __esModule: true };
},{"core-js/library/fn/object/define-properties":502}],507:[function(require,module,exports) {
require('../../modules/es6.object.get-own-property-descriptor');
var $Object = require('../../modules/_core').Object;
module.exports = function getOwnPropertyDescriptor(it, key) {
  return $Object.getOwnPropertyDescriptor(it, key);
};

},{"../../modules/es6.object.get-own-property-descriptor":87,"../../modules/_core":281}],429:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":507}],505:[function(require,module,exports) {
require('../../modules/es6.object.get-own-property-names');
var $Object = require('../../modules/_core').Object;
module.exports = function getOwnPropertyNames(it) {
  return $Object.getOwnPropertyNames(it);
};

},{"../../modules/es6.object.get-own-property-names":91,"../../modules/_core":281}],427:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/get-own-property-names"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-names":505}],506:[function(require,module,exports) {
require('../../modules/es6.object.get-prototype-of');
module.exports = require('../../modules/_core').Object.getPrototypeOf;

},{"../../modules/es6.object.get-prototype-of":90,"../../modules/_core":281}],428:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/get-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/get-prototype-of":506}],508:[function(require,module,exports) {
require('../../modules/es6.symbol');
module.exports = require('../../modules/_core').Object.getOwnPropertySymbols;

},{"../../modules/es6.symbol":84,"../../modules/_core":281}],430:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/get-own-property-symbols"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-symbols":508}],509:[function(require,module,exports) {
require('../../modules/es6.object.create');
var $Object = require('../../modules/_core').Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};

},{"../../modules/es6.object.create":85,"../../modules/_core":281}],431:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":509}],511:[function(require,module,exports) {
require('../../modules/es6.object.keys');
module.exports = require('../../modules/_core').Object.keys;

},{"../../modules/es6.object.keys":88,"../../modules/_core":281}],433:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":511}],510:[function(require,module,exports) {
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};

},{"../../modules/es6.object.define-property":86,"../../modules/_core":281}],432:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":510}],494:[function(require,module,exports) {
module.exports = function () { /* empty */ };

},{}],488:[function(require,module,exports) {

require('./es6.array.iterator');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var TO_STRING_TAG = require('./_wks')('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

},{"./es6.array.iterator":185,"./_global":285,"./_hide":314,"./_iterators":366,"./_wks":296}],487:[function(require,module,exports) {
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');

},{"../../modules/es6.string.iterator":140,"../../modules/web.dom.iterable":488,"../../modules/_wks-ext":297}],416:[function(require,module,exports) {
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":487}],414:[function(require,module,exports) {
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol/iterator":416,"../core-js/symbol":415}],59:[function(require,module,exports) {
var global = (1,eval)("this");
/**
 * vis.js
 * https://github.com/almende/vis
 *
 * A dynamic, browser-based visualization library.
 *
 * @version 4.21.0
 * @date    2017-10-12
 *
 * @license
 * Copyright (C) 2011-2017 Almende B.V, http://almende.com
 *
 * Vis.js is dual licensed under both
 *
 * * The Apache 2.0 License
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * and
 *
 * * The MIT License
 *   http://opensource.org/licenses/MIT
 *
 * Vis.js may be distributed under either license.
 */

"use strict";

var _setPrototypeOf3 = require('babel-runtime/core-js/object/set-prototype-of');

var _setPrototypeOf4 = _interopRequireDefault2(_setPrototypeOf3);

var _sign3 = require('babel-runtime/core-js/math/sign');

var _sign4 = _interopRequireDefault2(_sign3);

var _symbol3 = require('babel-runtime/core-js/symbol');

var _symbol4 = _interopRequireDefault2(_symbol3);

var _assign3 = require('babel-runtime/core-js/object/assign');

var _assign4 = _interopRequireDefault2(_assign3);

var _stringify3 = require('babel-runtime/core-js/json/stringify');

var _stringify4 = _interopRequireDefault2(_stringify3);

var _isFrozen = require('babel-runtime/core-js/object/is-frozen');

var _isFrozen2 = _interopRequireDefault2(_isFrozen);

var _preventExtensions = require('babel-runtime/core-js/object/prevent-extensions');

var _preventExtensions2 = _interopRequireDefault2(_preventExtensions);

var _isExtensible = require('babel-runtime/core-js/object/is-extensible');

var _isExtensible2 = _interopRequireDefault2(_isExtensible);

var _defineProperties = require('babel-runtime/core-js/object/define-properties');

var _defineProperties2 = _interopRequireDefault2(_defineProperties);

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault2(_getOwnPropertyDescriptor);

var _getOwnPropertyNames = require('babel-runtime/core-js/object/get-own-property-names');

var _getOwnPropertyNames2 = _interopRequireDefault2(_getOwnPropertyNames);

var _getPrototypeOf3 = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf4 = _interopRequireDefault2(_getPrototypeOf3);

var _getOwnPropertySymbols = require('babel-runtime/core-js/object/get-own-property-symbols');

var _getOwnPropertySymbols2 = _interopRequireDefault2(_getOwnPropertySymbols);

var _create3 = require('babel-runtime/core-js/object/create');

var _create4 = _interopRequireDefault2(_create3);

var _keys3 = require('babel-runtime/core-js/object/keys');

var _keys4 = _interopRequireDefault2(_keys3);

var _defineProperty3 = require('babel-runtime/core-js/object/define-property');

var _defineProperty4 = _interopRequireDefault2(_defineProperty3);

var _typeof5 = require('babel-runtime/helpers/typeof');

var _typeof6 = _interopRequireDefault2(_typeof5);

function _interopRequireDefault2(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

(function webpackUniversalModuleDefinition(root, factory) {
  if ((typeof exports === 'undefined' ? 'undefined' : (0, _typeof6['default'])(exports)) === 'object' && (typeof module === 'undefined' ? 'undefined' : (0, _typeof6['default'])(module)) === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if ((typeof exports === 'undefined' ? 'undefined' : (0, _typeof6['default'])(exports)) === 'object') exports["vis"] = factory();else root["vis"] = factory();
})(undefined, function () {
  return (/******/function (modules) {
      // webpackBootstrap
      /******/ // The module cache
      /******/var installedModules = {};
      /******/
      /******/ // The require function
      /******/function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/if (installedModules[moduleId]) {
          /******/return installedModules[moduleId].exports;
          /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/var module = installedModules[moduleId] = {
          /******/i: moduleId,
          /******/l: false,
          /******/exports: {}
          /******/ };
        /******/
        /******/ // Execute the module function
        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ // Flag the module as loaded
        /******/module.l = true;
        /******/
        /******/ // Return the exports of the module
        /******/return module.exports;
        /******/
      }
      /******/
      /******/
      /******/ // expose the modules object (__webpack_modules__)
      /******/__webpack_require__.m = modules;
      /******/
      /******/ // expose the module cache
      /******/__webpack_require__.c = installedModules;
      /******/
      /******/ // define getter function for harmony exports
      /******/__webpack_require__.d = function (exports, name, getter) {
        /******/if (!__webpack_require__.o(exports, name)) {
          /******/(0, _defineProperty4['default'])(exports, name, {
            /******/configurable: false,
            /******/enumerable: true,
            /******/get: getter
            /******/ });
          /******/
        }
        /******/
      };
      /******/
      /******/ // getDefaultExport function for compatibility with non-harmony modules
      /******/__webpack_require__.n = function (module) {
        /******/var getter = module && module.__esModule ?
        /******/function getDefault() {
          return module['default'];
        } :
        /******/function getModuleExports() {
          return module;
        };
        /******/__webpack_require__.d(getter, 'a', getter);
        /******/return getter;
        /******/
      };
      /******/
      /******/ // Object.prototype.hasOwnProperty.call
      /******/__webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/
      /******/ // __webpack_public_path__
      /******/__webpack_require__.p = "";
      /******/
      /******/ // Load entry module and return exports
      /******/return __webpack_require__(__webpack_require__.s = 123);
      /******/
    }(
    /************************************************************************/
    /******/[
    /* 0 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      exports.__esModule = true;

      exports['default'] = function (instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      };

      /***/
    },
    /* 1 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      exports.__esModule = true;

      var _defineProperty = __webpack_require__(169);

      var _defineProperty2 = _interopRequireDefault(_defineProperty);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      exports['default'] = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            (0, _defineProperty2['default'])(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();

      /***/
    },
    /* 2 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _getIterator2 = __webpack_require__(77);

      var _getIterator3 = _interopRequireDefault(_getIterator2);

      var _create = __webpack_require__(29);

      var _create2 = _interopRequireDefault(_create);

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      // utility functions

      // first check if moment.js is already loaded in the browser window, if so,
      // use this instance. Else, load via commonjs.


      var moment = __webpack_require__(9);
      var uuid = __webpack_require__(157);

      /**
       * Test whether given object is a number
       * @param {*} object
       * @return {Boolean} isNumber
       */
      exports.isNumber = function (object) {
        return object instanceof Number || typeof object == 'number';
      };

      /**
       * Remove everything in the DOM object
       * @param {Element} DOMobject
       */
      exports.recursiveDOMDelete = function (DOMobject) {
        if (DOMobject) {
          while (DOMobject.hasChildNodes() === true) {
            exports.recursiveDOMDelete(DOMobject.firstChild);
            DOMobject.removeChild(DOMobject.firstChild);
          }
        }
      };

      /**
       * this function gives you a range between 0 and 1 based on the min and max values in the set, the total sum of all values and the current value.
       *
       * @param {number} min
       * @param {number} max
       * @param {number} total
       * @param {number} value
       * @returns {number}
       */
      exports.giveRange = function (min, max, total, value) {
        if (max == min) {
          return 0.5;
        } else {
          var scale = 1 / (max - min);
          return Math.max(0, (value - min) * scale);
        }
      };

      /**
       * Test whether given object is a string
       * @param {*} object
       * @return {Boolean} isString
       */
      exports.isString = function (object) {
        return object instanceof String || typeof object == 'string';
      };

      /**
       * Test whether given object is a Date, or a String containing a Date
       * @param {Date | String} object
       * @return {Boolean} isDate
       */
      exports.isDate = function (object) {
        if (object instanceof Date) {
          return true;
        } else if (exports.isString(object)) {
          // test whether this string contains a date
          var match = ASPDateRegex.exec(object);
          if (match) {
            return true;
          } else if (!isNaN(Date.parse(object))) {
            return true;
          }
        }

        return false;
      };

      /**
       * Create a semi UUID
       * source: http://stackoverflow.com/a/105074/1262753
       * @return {string} uuid
       */
      exports.randomUUID = function () {
        return uuid.v4();
      };

      /**
       * assign all keys of an object that are not nested objects to a certain value (used for color objects).
       * @param {object} obj
       * @param {number} value
       */
      exports.assignAllKeys = function (obj, value) {
        for (var prop in obj) {
          if (obj.hasOwnProperty(prop)) {
            if ((0, _typeof3['default'])(obj[prop]) !== 'object') {
              obj[prop] = value;
            }
          }
        }
      };

      /**
       * Copy property from b to a if property present in a.
       * If property in b explicitly set to null, delete it if `allowDeletion` set.
       *
       * Internal helper routine, should not be exported. Not added to `exports` for that reason.
       *
       * @param {object} a  target object
       * @param {object} b  source object
       * @param {string} prop  name of property to copy to a
       * @param {boolean} allowDeletion  if true, delete property in a if explicitly set to null in b 
       * @private
       */
      function copyOrDelete(a, b, prop, allowDeletion) {
        var doDeletion = false;
        if (allowDeletion === true) {
          doDeletion = b[prop] === null && a[prop] !== undefined;
        }

        if (doDeletion) {
          delete a[prop];
        } else {
          a[prop] = b[prop]; // Remember, this is a reference copy!
        }
      }

      /**
       * Fill an object with a possibly partially defined other object.
       *
       * Only copies values for the properties already present in a.
       * That means an object is not created on a property if only the b object has it.
       *
       * @param {object} a
       * @param {object} b
       * @param {boolean} [allowDeletion=false]  if true, delete properties in a that are explicitly set to null in b 
       */
      exports.fillIfDefined = function (a, b) {
        var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        // NOTE: iteration of properties of a
        // NOTE: prototype properties iterated over as well
        for (var prop in a) {
          if (b[prop] !== undefined) {
            if (b[prop] === null || (0, _typeof3['default'])(b[prop]) !== 'object') {
              // Note: typeof null === 'object'
              copyOrDelete(a, b, prop, allowDeletion);
            } else {
              if ((0, _typeof3['default'])(a[prop]) === 'object') {
                exports.fillIfDefined(a[prop], b[prop], allowDeletion);
              }
            }
          }
        }
      };

      /**
       * Extend object a with the properties of object b or a series of objects
       * Only properties with defined values are copied
       * @param {Object} a
       * @param {...Object} b
       * @return {Object} a
       */
      exports.extend = function (a, b) {
        // eslint-disable-line no-unused-vars
        for (var i = 1; i < arguments.length; i++) {
          var other = arguments[i];
          for (var prop in other) {
            if (other.hasOwnProperty(prop)) {
              a[prop] = other[prop];
            }
          }
        }
        return a;
      };

      /**
       * Extend object a with selected properties of object b or a series of objects
       * Only properties with defined values are copied
       * @param {Array.<string>} props
       * @param {Object} a
       * @param {Object} b
       * @return {Object} a
       */
      exports.selectiveExtend = function (props, a, b) {
        // eslint-disable-line no-unused-vars
        if (!Array.isArray(props)) {
          throw new Error('Array with property names expected as first argument');
        }

        for (var i = 2; i < arguments.length; i++) {
          var other = arguments[i];

          for (var p = 0; p < props.length; p++) {
            var prop = props[p];
            if (other && other.hasOwnProperty(prop)) {
              a[prop] = other[prop];
            }
          }
        }
        return a;
      };

      /**
       * Extend object a with selected properties of object b.
       * Only properties with defined values are copied.
       *
       * **Note:** Previous version of this routine implied that multiple source objects
       *           could be used; however, the implementation was **wrong**.
       *           Since multiple (>1) sources weren't used anywhere in the `vis.js` code,
       *           this has been removed
       *
       * @param {Array.<string>} props names of first-level properties to copy over
       * @param {object} a  target object
       * @param {object} b  source object
       * @param {boolean} [allowDeletion=false]  if true, delete property in a if explicitly set to null in b 
       * @returns {Object} a
       */
      exports.selectiveDeepExtend = function (props, a, b) {
        var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        // TODO: add support for Arrays to deepExtend
        if (Array.isArray(b)) {
          throw new TypeError('Arrays are not supported by deepExtend');
        }

        for (var p = 0; p < props.length; p++) {
          var prop = props[p];
          if (b.hasOwnProperty(prop)) {
            if (b[prop] && b[prop].constructor === Object) {
              if (a[prop] === undefined) {
                a[prop] = {};
              }
              if (a[prop].constructor === Object) {
                exports.deepExtend(a[prop], b[prop], false, allowDeletion);
              } else {
                copyOrDelete(a, b, prop, allowDeletion);
              }
            } else if (Array.isArray(b[prop])) {
              throw new TypeError('Arrays are not supported by deepExtend');
            } else {
              copyOrDelete(a, b, prop, allowDeletion);
            }
          }
        }
        return a;
      };

      /**
       * Extend object `a` with properties of object `b`, ignoring properties which are explicitly 
       * specified to be excluded.
       * 
       * The properties of `b` are considered for copying.
       * Properties which are themselves objects are are also extended.
       * Only properties with defined values are copied
       *
       * @param {Array.<string>} propsToExclude  names of properties which should *not* be copied
       * @param {Object}                      a  object to extend
       * @param {Object}                      b  object to take properties from for extension
       * @param {boolean} [allowDeletion=false]  if true, delete properties in a that are explicitly set to null in b 
       * @return {Object} a
       */
      exports.selectiveNotDeepExtend = function (propsToExclude, a, b) {
        var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        // TODO: add support for Arrays to deepExtend
        // NOTE: array properties have an else-below; apparently, there is a problem here. 
        if (Array.isArray(b)) {
          throw new TypeError('Arrays are not supported by deepExtend');
        }

        for (var prop in b) {
          if (!b.hasOwnProperty(prop)) continue; // Handle local properties only 
          if (propsToExclude.indexOf(prop) !== -1) continue; // In exclusion list, skip

          if (b[prop] && b[prop].constructor === Object) {
            if (a[prop] === undefined) {
              a[prop] = {};
            }
            if (a[prop].constructor === Object) {
              exports.deepExtend(a[prop], b[prop]); // NOTE: allowDeletion not propagated!
            } else {
              copyOrDelete(a, b, prop, allowDeletion);
            }
          } else if (Array.isArray(b[prop])) {
            a[prop] = [];
            for (var i = 0; i < b[prop].length; i++) {
              a[prop].push(b[prop][i]);
            }
          } else {
            copyOrDelete(a, b, prop, allowDeletion);
          }
        }

        return a;
      };

      /**
       * Deep extend an object a with the properties of object b
       *
       * @param {Object} a
       * @param {Object} b
       * @param {boolean} [protoExtend=false]  If true, the prototype values will also be extended.
       *                          (ie. the options objects that inherit from others will also get the inherited options)
       * @param {boolean} [allowDeletion=false] If true, the values of fields that are null will be deleted
       * @returns {Object}
       */
      exports.deepExtend = function (a, b) {
        var protoExtend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        for (var prop in b) {
          if (b.hasOwnProperty(prop) || protoExtend === true) {
            if (b[prop] && b[prop].constructor === Object) {
              if (a[prop] === undefined) {
                a[prop] = {};
              }
              if (a[prop].constructor === Object) {
                exports.deepExtend(a[prop], b[prop], protoExtend); // NOTE: allowDeletion not propagated!
              } else {
                copyOrDelete(a, b, prop, allowDeletion);
              }
            } else if (Array.isArray(b[prop])) {
              a[prop] = [];
              for (var i = 0; i < b[prop].length; i++) {
                a[prop].push(b[prop][i]);
              }
            } else {
              copyOrDelete(a, b, prop, allowDeletion);
            }
          }
        }
        return a;
      };

      /**
       * Test whether all elements in two arrays are equal.
       * @param {Array} a
       * @param {Array} b
       * @return {boolean} Returns true if both arrays have the same length and same
       *                   elements.
       */
      exports.equalArray = function (a, b) {
        if (a.length != b.length) return false;

        for (var i = 0, len = a.length; i < len; i++) {
          if (a[i] != b[i]) return false;
        }

        return true;
      };

      /**
       * Convert an object to another type
       * @param {boolean | number | string | Date | Moment | Null | undefined} object
       * @param {string | undefined} type   Name of the type. Available types:
       *                                    'Boolean', 'Number', 'String',
       *                                    'Date', 'Moment', ISODate', 'ASPDate'.
       * @return {*} object
       * @throws Error
       */
      exports.convert = function (object, type) {
        var match;

        if (object === undefined) {
          return undefined;
        }
        if (object === null) {
          return null;
        }

        if (!type) {
          return object;
        }
        if (!(typeof type === 'string') && !(type instanceof String)) {
          throw new Error('Type must be a string');
        }

        //noinspection FallthroughInSwitchStatementJS
        switch (type) {
          case 'boolean':
          case 'Boolean':
            return Boolean(object);

          case 'number':
          case 'Number':
            if (exports.isString(object) && !isNaN(Date.parse(object))) {
              return moment(object).valueOf();
            } else {
              return Number(object.valueOf());
            }
          case 'string':
          case 'String':
            return String(object);

          case 'Date':
            if (exports.isNumber(object)) {
              return new Date(object);
            }
            if (object instanceof Date) {
              return new Date(object.valueOf());
            } else if (moment.isMoment(object)) {
              return new Date(object.valueOf());
            }
            if (exports.isString(object)) {
              match = ASPDateRegex.exec(object);
              if (match) {
                // object is an ASP date
                return new Date(Number(match[1])); // parse number
              } else {
                return moment(new Date(object)).toDate(); // parse string
              }
            } else {
              throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type Date');
            }

          case 'Moment':
            if (exports.isNumber(object)) {
              return moment(object);
            }
            if (object instanceof Date) {
              return moment(object.valueOf());
            } else if (moment.isMoment(object)) {
              return moment(object);
            }
            if (exports.isString(object)) {
              match = ASPDateRegex.exec(object);
              if (match) {
                // object is an ASP date
                return moment(Number(match[1])); // parse number
              } else {
                return moment(object); // parse string
              }
            } else {
              throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type Date');
            }

          case 'ISODate':
            if (exports.isNumber(object)) {
              return new Date(object);
            } else if (object instanceof Date) {
              return object.toISOString();
            } else if (moment.isMoment(object)) {
              return object.toDate().toISOString();
            } else if (exports.isString(object)) {
              match = ASPDateRegex.exec(object);
              if (match) {
                // object is an ASP date
                return new Date(Number(match[1])).toISOString(); // parse number
              } else {
                return moment(object).format(); // ISO 8601
              }
            } else {
              throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type ISODate');
            }

          case 'ASPDate':
            if (exports.isNumber(object)) {
              return '/Date(' + object + ')/';
            } else if (object instanceof Date) {
              return '/Date(' + object.valueOf() + ')/';
            } else if (exports.isString(object)) {
              match = ASPDateRegex.exec(object);
              var value;
              if (match) {
                // object is an ASP date
                value = new Date(Number(match[1])).valueOf(); // parse number
              } else {
                value = new Date(object).valueOf(); // parse string
              }
              return '/Date(' + value + ')/';
            } else {
              throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type ASPDate');
            }

          default:
            throw new Error('Unknown type "' + type + '"');
        }
      };

      // parse ASP.Net Date pattern,
      // for example '/Date(1198908717056)/' or '/Date(1198908717056-0700)/'
      // code from http://momentjs.com/
      var ASPDateRegex = /^\/?Date\((\-?\d+)/i;

      /**
       * Get the type of an object, for example exports.getType([]) returns 'Array'
       * @param {*} object
       * @return {string} type
       */
      exports.getType = function (object) {
        var type = typeof object === 'undefined' ? 'undefined' : (0, _typeof3['default'])(object);

        if (type == 'object') {
          if (object === null) {
            return 'null';
          }
          if (object instanceof Boolean) {
            return 'Boolean';
          }
          if (object instanceof Number) {
            return 'Number';
          }
          if (object instanceof String) {
            return 'String';
          }
          if (Array.isArray(object)) {
            return 'Array';
          }
          if (object instanceof Date) {
            return 'Date';
          }
          return 'Object';
        } else if (type == 'number') {
          return 'Number';
        } else if (type == 'boolean') {
          return 'Boolean';
        } else if (type == 'string') {
          return 'String';
        } else if (type === undefined) {
          return 'undefined';
        }

        return type;
      };

      /**
       * Used to extend an array and copy it. This is used to propagate paths recursively.
       *
       * @param {Array} arr
       * @param {*} newValue
       * @returns {Array}
       */
      exports.copyAndExtendArray = function (arr, newValue) {
        var newArr = [];
        for (var i = 0; i < arr.length; i++) {
          newArr.push(arr[i]);
        }
        newArr.push(newValue);
        return newArr;
      };

      /**
       * Used to extend an array and copy it. This is used to propagate paths recursively.
       *
       * @param {Array} arr
       * @returns {Array}
       */
      exports.copyArray = function (arr) {
        var newArr = [];
        for (var i = 0; i < arr.length; i++) {
          newArr.push(arr[i]);
        }
        return newArr;
      };

      /**
       * Retrieve the absolute left value of a DOM element
       * @param {Element} elem        A dom element, for example a div
       * @return {number} left        The absolute left position of this element
       *                              in the browser page.
       */
      exports.getAbsoluteLeft = function (elem) {
        return elem.getBoundingClientRect().left;
      };

      exports.getAbsoluteRight = function (elem) {
        return elem.getBoundingClientRect().right;
      };

      /**
       * Retrieve the absolute top value of a DOM element
       * @param {Element} elem        A dom element, for example a div
       * @return {number} top        The absolute top position of this element
       *                              in the browser page.
       */
      exports.getAbsoluteTop = function (elem) {
        return elem.getBoundingClientRect().top;
      };

      /**
       * add a className to the given elements style
       * @param {Element} elem
       * @param {string} classNames
       */
      exports.addClassName = function (elem, classNames) {
        var classes = elem.className.split(' ');
        var newClasses = classNames.split(' ');
        classes = classes.concat(newClasses.filter(function (className) {
          return classes.indexOf(className) < 0;
        }));
        elem.className = classes.join(' ');
      };

      /**
       * add a className to the given elements style
       * @param {Element} elem
       * @param {string} classNames
       */
      exports.removeClassName = function (elem, classNames) {
        var classes = elem.className.split(' ');
        var oldClasses = classNames.split(' ');
        classes = classes.filter(function (className) {
          return oldClasses.indexOf(className) < 0;
        });
        elem.className = classes.join(' ');
      };

      /**
       * For each method for both arrays and objects.
       * In case of an array, the built-in Array.forEach() is applied. (**No, it's not!**)
       * In case of an Object, the method loops over all properties of the object.
       * @param {Object | Array} object   An Object or Array
       * @param {function} callback       Callback method, called for each item in
       *                                  the object or array with three parameters:
       *                                  callback(value, index, object)
       */
      exports.forEach = function (object, callback) {
        var i, len;
        if (Array.isArray(object)) {
          // array
          for (i = 0, len = object.length; i < len; i++) {
            callback(object[i], i, object);
          }
        } else {
          // object
          for (i in object) {
            if (object.hasOwnProperty(i)) {
              callback(object[i], i, object);
            }
          }
        }
      };

      /**
       * Convert an object into an array: all objects properties are put into the
       * array. The resulting array is unordered.
       * @param {Object} object
       * @returns {Array} array
       */
      exports.toArray = function (object) {
        var array = [];

        for (var prop in object) {
          if (object.hasOwnProperty(prop)) array.push(object[prop]);
        }

        return array;
      };

      /**
       * Update a property in an object
       * @param {Object} object
       * @param {string} key
       * @param {*} value
       * @return {Boolean} changed
       */
      exports.updateProperty = function (object, key, value) {
        if (object[key] !== value) {
          object[key] = value;
          return true;
        } else {
          return false;
        }
      };

      /**
       * Throttle the given function to be only executed once per animation frame
       * @param {function} fn
       * @returns {function} Returns the throttled function
       */
      exports.throttle = function (fn) {
        var scheduled = false;

        return function throttled() {
          if (!scheduled) {
            scheduled = true;
            requestAnimationFrame(function () {
              scheduled = false;
              fn();
            });
          }
        };
      };

      /**
       * Add and event listener. Works for all browsers
       * @param {Element}     element    An html element
       * @param {string}      action     The action, for example "click",
       *                                 without the prefix "on"
       * @param {function}    listener   The callback function to be executed
       * @param {boolean}     [useCapture]
       */
      exports.addEventListener = function (element, action, listener, useCapture) {
        if (element.addEventListener) {
          if (useCapture === undefined) useCapture = false;

          if (action === "mousewheel" && navigator.userAgent.indexOf("Firefox") >= 0) {
            action = "DOMMouseScroll"; // For Firefox
          }

          element.addEventListener(action, listener, useCapture);
        } else {
          element.attachEvent("on" + action, listener); // IE browsers
        }
      };

      /**
       * Remove an event listener from an element
       * @param {Element}     element         An html dom element
       * @param {string}      action          The name of the event, for example "mousedown"
       * @param {function}    listener        The listener function
       * @param {boolean}     [useCapture]
       */
      exports.removeEventListener = function (element, action, listener, useCapture) {
        if (element.removeEventListener) {
          // non-IE browsers
          if (useCapture === undefined) useCapture = false;

          if (action === "mousewheel" && navigator.userAgent.indexOf("Firefox") >= 0) {
            action = "DOMMouseScroll"; // For Firefox
          }

          element.removeEventListener(action, listener, useCapture);
        } else {
          // IE browsers
          element.detachEvent("on" + action, listener);
        }
      };

      /**
       * Cancels the event if it is cancelable, without stopping further propagation of the event.
       * @param {Event} event
       */
      exports.preventDefault = function (event) {
        if (!event) event = window.event;

        if (event.preventDefault) {
          event.preventDefault(); // non-IE browsers
        } else {
          event.returnValue = false; // IE browsers
        }
      };

      /**
       * Get HTML element which is the target of the event
       * @param {Event} event
       * @return {Element} target element
       */
      exports.getTarget = function (event) {
        // code from http://www.quirksmode.org/js/events_properties.html
        if (!event) {
          event = window.event;
        }

        var target;

        if (event.target) {
          target = event.target;
        } else if (event.srcElement) {
          target = event.srcElement;
        }

        if (target.nodeType != undefined && target.nodeType == 3) {
          // defeat Safari bug
          target = target.parentNode;
        }

        return target;
      };

      /**
       * Check if given element contains given parent somewhere in the DOM tree
       * @param {Element} element
       * @param {Element} parent
       * @returns {boolean}
       */
      exports.hasParent = function (element, parent) {
        var e = element;

        while (e) {
          if (e === parent) {
            return true;
          }
          e = e.parentNode;
        }

        return false;
      };

      exports.option = {};

      /**
       * Convert a value into a boolean
       * @param {Boolean | function | undefined} value
       * @param {boolean} [defaultValue]
       * @returns {Boolean} bool
       */
      exports.option.asBoolean = function (value, defaultValue) {
        if (typeof value == 'function') {
          value = value();
        }

        if (value != null) {
          return value != false;
        }

        return defaultValue || null;
      };

      /**
       * Convert a value into a number
       * @param {Boolean | function | undefined} value
       * @param {number} [defaultValue]
       * @returns {number} number
       */
      exports.option.asNumber = function (value, defaultValue) {
        if (typeof value == 'function') {
          value = value();
        }

        if (value != null) {
          return Number(value) || defaultValue || null;
        }

        return defaultValue || null;
      };

      /**
       * Convert a value into a string
       * @param {string | function | undefined} value
       * @param {string} [defaultValue]
       * @returns {String} str
       */
      exports.option.asString = function (value, defaultValue) {
        if (typeof value == 'function') {
          value = value();
        }

        if (value != null) {
          return String(value);
        }

        return defaultValue || null;
      };

      /**
       * Convert a size or location into a string with pixels or a percentage
       * @param {string | number | function | undefined} value
       * @param {string} [defaultValue]
       * @returns {String} size
       */
      exports.option.asSize = function (value, defaultValue) {
        if (typeof value == 'function') {
          value = value();
        }

        if (exports.isString(value)) {
          return value;
        } else if (exports.isNumber(value)) {
          return value + 'px';
        } else {
          return defaultValue || null;
        }
      };

      /**
       * Convert a value into a DOM element
       * @param {HTMLElement | function | undefined} value
       * @param {HTMLElement} [defaultValue]
       * @returns {HTMLElement | null} dom
       */
      exports.option.asElement = function (value, defaultValue) {
        if (typeof value == 'function') {
          value = value();
        }

        return value || defaultValue || null;
      };

      /**
       * http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
       *
       * @param {string} hex
       * @returns {{r: *, g: *, b: *}} | 255 range
       */
      exports.hexToRGB = function (hex) {
        // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function (m, r, g, b) {
          return r + r + g + g + b + b;
        });
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
          r: parseInt(result[1], 16),
          g: parseInt(result[2], 16),
          b: parseInt(result[3], 16)
        } : null;
      };

      /**
       * This function takes color in hex format or rgb() or rgba() format and overrides the opacity. Returns rgba() string.
       * @param {string} color
       * @param {number} opacity
       * @returns {String}
       */
      exports.overrideOpacity = function (color, opacity) {
        var rgb;
        if (color.indexOf("rgba") != -1) {
          return color;
        } else if (color.indexOf("rgb") != -1) {
          rgb = color.substr(color.indexOf("(") + 1).replace(")", "").split(",");
          return "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + "," + opacity + ")";
        } else {
          rgb = exports.hexToRGB(color);
          if (rgb == null) {
            return color;
          } else {
            return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + opacity + ")";
          }
        }
      };

      /**
       *
       * @param {number} red     0 -- 255
       * @param {number} green   0 -- 255
       * @param {number} blue    0 -- 255
       * @returns {String}
       * @constructor
       */
      exports.RGBToHex = function (red, green, blue) {
        return "#" + ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1);
      };

      /**
       * Parse a color property into an object with border, background, and
       * highlight colors
       * @param {Object | String} color
       * @return {Object} colorObject
       */
      exports.parseColor = function (color) {
        var c;
        if (exports.isString(color) === true) {
          if (exports.isValidRGB(color) === true) {
            var rgb = color.substr(4).substr(0, color.length - 5).split(',').map(function (value) {
              return parseInt(value);
            });
            color = exports.RGBToHex(rgb[0], rgb[1], rgb[2]);
          }
          if (exports.isValidHex(color) === true) {
            var hsv = exports.hexToHSV(color);
            var lighterColorHSV = { h: hsv.h, s: hsv.s * 0.8, v: Math.min(1, hsv.v * 1.02) };
            var darkerColorHSV = { h: hsv.h, s: Math.min(1, hsv.s * 1.25), v: hsv.v * 0.8 };
            var darkerColorHex = exports.HSVToHex(darkerColorHSV.h, darkerColorHSV.s, darkerColorHSV.v);
            var lighterColorHex = exports.HSVToHex(lighterColorHSV.h, lighterColorHSV.s, lighterColorHSV.v);
            c = {
              background: color,
              border: darkerColorHex,
              highlight: {
                background: lighterColorHex,
                border: darkerColorHex
              },
              hover: {
                background: lighterColorHex,
                border: darkerColorHex
              }
            };
          } else {
            c = {
              background: color,
              border: color,
              highlight: {
                background: color,
                border: color
              },
              hover: {
                background: color,
                border: color
              }
            };
          }
        } else {
          c = {};
          c.background = color.background || undefined;
          c.border = color.border || undefined;

          if (exports.isString(color.highlight)) {
            c.highlight = {
              border: color.highlight,
              background: color.highlight
            };
          } else {
            c.highlight = {};
            c.highlight.background = color.highlight && color.highlight.background || undefined;
            c.highlight.border = color.highlight && color.highlight.border || undefined;
          }

          if (exports.isString(color.hover)) {
            c.hover = {
              border: color.hover,
              background: color.hover
            };
          } else {
            c.hover = {};
            c.hover.background = color.hover && color.hover.background || undefined;
            c.hover.border = color.hover && color.hover.border || undefined;
          }
        }

        return c;
      };

      /**
       * http://www.javascripter.net/faq/rgb2hsv.htm
       *
       * @param {number} red
       * @param {number} green
       * @param {number} blue
       * @returns {{h: number, s: number, v: number}}
       * @constructor
       */
      exports.RGBToHSV = function (red, green, blue) {
        red = red / 255;green = green / 255;blue = blue / 255;
        var minRGB = Math.min(red, Math.min(green, blue));
        var maxRGB = Math.max(red, Math.max(green, blue));

        // Black-gray-white
        if (minRGB == maxRGB) {
          return { h: 0, s: 0, v: minRGB };
        }

        // Colors other than black-gray-white:
        var d = red == minRGB ? green - blue : blue == minRGB ? red - green : blue - red;
        var h = red == minRGB ? 3 : blue == minRGB ? 1 : 5;
        var hue = 60 * (h - d / (maxRGB - minRGB)) / 360;
        var saturation = (maxRGB - minRGB) / maxRGB;
        var value = maxRGB;
        return { h: hue, s: saturation, v: value };
      };

      var cssUtil = {
        // split a string with css styles into an object with key/values
        split: function split(cssText) {
          var styles = {};

          cssText.split(';').forEach(function (style) {
            if (style.trim() != '') {
              var parts = style.split(':');
              var key = parts[0].trim();
              var value = parts[1].trim();
              styles[key] = value;
            }
          });

          return styles;
        },

        // build a css text string from an object with key/values
        join: function join(styles) {
          return (0, _keys2['default'])(styles).map(function (key) {
            return key + ': ' + styles[key];
          }).join('; ');
        }
      };

      /**
       * Append a string with css styles to an element
       * @param {Element} element
       * @param {string} cssText
       */
      exports.addCssText = function (element, cssText) {
        var currentStyles = cssUtil.split(element.style.cssText);
        var newStyles = cssUtil.split(cssText);
        var styles = exports.extend(currentStyles, newStyles);

        element.style.cssText = cssUtil.join(styles);
      };

      /**
       * Remove a string with css styles from an element
       * @param {Element} element
       * @param {string} cssText
       */
      exports.removeCssText = function (element, cssText) {
        var styles = cssUtil.split(element.style.cssText);
        var removeStyles = cssUtil.split(cssText);

        for (var key in removeStyles) {
          if (removeStyles.hasOwnProperty(key)) {
            delete styles[key];
          }
        }

        element.style.cssText = cssUtil.join(styles);
      };

      /**
       * https://gist.github.com/mjijackson/5311256
       * @param {number} h
       * @param {number} s
       * @param {number} v
       * @returns {{r: number, g: number, b: number}}
       * @constructor
       */
      exports.HSVToRGB = function (h, s, v) {
        var r, g, b;

        var i = Math.floor(h * 6);
        var f = h * 6 - i;
        var p = v * (1 - s);
        var q = v * (1 - f * s);
        var t = v * (1 - (1 - f) * s);

        switch (i % 6) {
          case 0:
            r = v, g = t, b = p;break;
          case 1:
            r = q, g = v, b = p;break;
          case 2:
            r = p, g = v, b = t;break;
          case 3:
            r = p, g = q, b = v;break;
          case 4:
            r = t, g = p, b = v;break;
          case 5:
            r = v, g = p, b = q;break;
        }

        return { r: Math.floor(r * 255), g: Math.floor(g * 255), b: Math.floor(b * 255) };
      };

      exports.HSVToHex = function (h, s, v) {
        var rgb = exports.HSVToRGB(h, s, v);
        return exports.RGBToHex(rgb.r, rgb.g, rgb.b);
      };

      exports.hexToHSV = function (hex) {
        var rgb = exports.hexToRGB(hex);
        return exports.RGBToHSV(rgb.r, rgb.g, rgb.b);
      };

      exports.isValidHex = function (hex) {
        var isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
        return isOk;
      };

      exports.isValidRGB = function (rgb) {
        rgb = rgb.replace(" ", "");
        var isOk = /rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/i.test(rgb);
        return isOk;
      };
      exports.isValidRGBA = function (rgba) {
        rgba = rgba.replace(" ", "");
        var isOk = /rgba\((\d{1,3}),(\d{1,3}),(\d{1,3}),(.{1,3})\)/i.test(rgba);
        return isOk;
      };

      /**
       * This recursively redirects the prototype of JSON objects to the referenceObject
       * This is used for default options.
       *
       * @param {Array.<string>} fields
       * @param {Object} referenceObject
       * @returns {*}
       */
      exports.selectiveBridgeObject = function (fields, referenceObject) {
        if (referenceObject !== null && (typeof referenceObject === 'undefined' ? 'undefined' : (0, _typeof3['default'])(referenceObject)) === "object") {
          // !!! typeof null === 'object'
          var objectTo = (0, _create2['default'])(referenceObject);
          for (var i = 0; i < fields.length; i++) {
            if (referenceObject.hasOwnProperty(fields[i])) {
              if ((0, _typeof3['default'])(referenceObject[fields[i]]) == "object") {
                objectTo[fields[i]] = exports.bridgeObject(referenceObject[fields[i]]);
              }
            }
          }
          return objectTo;
        } else {
          return null;
        }
      };

      /**
       * This recursively redirects the prototype of JSON objects to the referenceObject
       * This is used for default options.
       *
       * @param {Object} referenceObject
       * @returns {*}
       */
      exports.bridgeObject = function (referenceObject) {
        if (referenceObject !== null && (typeof referenceObject === 'undefined' ? 'undefined' : (0, _typeof3['default'])(referenceObject)) === "object") {
          // !!! typeof null === 'object'
          var objectTo = (0, _create2['default'])(referenceObject);
          if (referenceObject instanceof Element) {
            // Avoid bridging DOM objects
            objectTo = referenceObject;
          } else {
            objectTo = (0, _create2['default'])(referenceObject);
            for (var i in referenceObject) {
              if (referenceObject.hasOwnProperty(i)) {
                if ((0, _typeof3['default'])(referenceObject[i]) == "object") {
                  objectTo[i] = exports.bridgeObject(referenceObject[i]);
                }
              }
            }
          }
          return objectTo;
        } else {
          return null;
        }
      };

      /**
       * This method provides a stable sort implementation, very fast for presorted data
       *
       * @param {Array} a the array
       * @param {function} compare an order comparator
       * @returns {Array}
       */
      exports.insertSort = function (a, compare) {
        for (var i = 0; i < a.length; i++) {
          var k = a[i];
          for (var j = i; j > 0 && compare(k, a[j - 1]) < 0; j--) {
            a[j] = a[j - 1];
          }
          a[j] = k;
        }
        return a;
      };

      /**
       * This is used to set the options of subobjects in the options object.
       *
       * A requirement of these subobjects is that they have an 'enabled' element
       * which is optional for the user but mandatory for the program.
       *
       * The added value here of the merge is that option 'enabled' is set as required.
       *
       *
       * @param {object} mergeTarget   | either this.options or the options used for the groups.
       * @param {object} options       | options
       * @param {string} option        | option key in the options argument
       * @param {object} globalOptions | global options, passed in to determine value of option 'enabled'
       */
      exports.mergeOptions = function (mergeTarget, options, option) {
        var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        // Local helpers
        var isPresent = function isPresent(obj) {
          return obj !== null && obj !== undefined;
        };

        var isObject = function isObject(obj) {
          return obj !== null && (typeof obj === 'undefined' ? 'undefined' : (0, _typeof3['default'])(obj)) === 'object';
        };

        // https://stackoverflow.com/a/34491287/1223531
        var isEmpty = function isEmpty(obj) {
          for (var x in obj) {
            if (obj.hasOwnProperty(x)) return false;
          }
          return true;
        };

        // Guards
        if (!isObject(mergeTarget)) {
          throw new Error('Parameter mergeTarget must be an object');
        }

        if (!isObject(options)) {
          throw new Error('Parameter options must be an object');
        }

        if (!isPresent(option)) {
          throw new Error('Parameter option must have a value');
        }

        if (!isObject(globalOptions)) {
          throw new Error('Parameter globalOptions must be an object');
        }

        //
        // Actual merge routine, separated from main logic
        // Only a single level of options is merged. Deeper levels are ref'd. This may actually be an issue.
        //
        var doMerge = function doMerge(target, options, option) {
          if (!isObject(target[option])) {
            target[option] = {};
          }

          var src = options[option];
          var dst = target[option];
          for (var prop in src) {
            if (src.hasOwnProperty(prop)) {
              dst[prop] = src[prop];
            }
          }
        };

        // Local initialization
        var srcOption = options[option];
        var globalPassed = isObject(globalOptions) && !isEmpty(globalOptions);
        var globalOption = globalPassed ? globalOptions[option] : undefined;
        var globalEnabled = globalOption ? globalOption.enabled : undefined;

        /////////////////////////////////////////
        // Main routine
        /////////////////////////////////////////
        if (srcOption === undefined) {
          return; // Nothing to do
        }

        if (typeof srcOption === 'boolean') {
          if (!isObject(mergeTarget[option])) {
            mergeTarget[option] = {};
          }

          mergeTarget[option].enabled = srcOption;
          return;
        }

        if (srcOption === null && !isObject(mergeTarget[option])) {
          // If possible, explicit copy from globals
          if (isPresent(globalOption)) {
            mergeTarget[option] = (0, _create2['default'])(globalOption);
          } else {
            return; // Nothing to do
          }
        }

        if (!isObject(srcOption)) {
          return;
        }

        //
        // Ensure that 'enabled' is properly set. It is required internally
        // Note that the value from options will always overwrite the existing value
        //
        var enabled = true; // default value

        if (srcOption.enabled !== undefined) {
          enabled = srcOption.enabled;
        } else {
          // Take from globals, if present
          if (globalEnabled !== undefined) {
            enabled = globalOption.enabled;
          }
        }

        doMerge(mergeTarget, options, option);
        mergeTarget[option].enabled = enabled;
      };

      /**
       * This function does a binary search for a visible item in a sorted list. If we find a visible item, the code that uses
       * this function will then iterate in both directions over this sorted list to find all visible items.
       *
       * @param {Item[]} orderedItems       | Items ordered by start
       * @param {function} comparator       | -1 is lower, 0 is equal, 1 is higher
       * @param {string} field
       * @param {string} field2
       * @returns {number}
       * @private
       */
      exports.binarySearchCustom = function (orderedItems, comparator, field, field2) {
        var maxIterations = 10000;
        var iteration = 0;
        var low = 0;
        var high = orderedItems.length - 1;

        while (low <= high && iteration < maxIterations) {
          var middle = Math.floor((low + high) / 2);

          var item = orderedItems[middle];
          var value = field2 === undefined ? item[field] : item[field][field2];

          var searchResult = comparator(value);
          if (searchResult == 0) {
            // jihaa, found a visible item!
            return middle;
          } else if (searchResult == -1) {
            // it is too small --> increase low
            low = middle + 1;
          } else {
            // it is too big --> decrease high
            high = middle - 1;
          }

          iteration++;
        }

        return -1;
      };

      /**
       * This function does a binary search for a specific value in a sorted array. If it does not exist but is in between of
       * two values, we return either the one before or the one after, depending on user input
       * If it is found, we return the index, else -1.
       *
       * @param {Array} orderedItems
       * @param {{start: number, end: number}} target
       * @param {string} field
       * @param {string} sidePreference   'before' or 'after'
       * @param {function} comparator an optional comparator, returning -1,0,1 for <,==,>.
       * @returns {number}
       * @private
       */
      exports.binarySearchValue = function (orderedItems, target, field, sidePreference, comparator) {
        var maxIterations = 10000;
        var iteration = 0;
        var low = 0;
        var high = orderedItems.length - 1;
        var prevValue, value, nextValue, middle;

        comparator = comparator != undefined ? comparator : function (a, b) {
          return a == b ? 0 : a < b ? -1 : 1;
        };

        while (low <= high && iteration < maxIterations) {
          // get a new guess
          middle = Math.floor(0.5 * (high + low));
          prevValue = orderedItems[Math.max(0, middle - 1)][field];
          value = orderedItems[middle][field];
          nextValue = orderedItems[Math.min(orderedItems.length - 1, middle + 1)][field];

          if (comparator(value, target) == 0) {
            // we found the target
            return middle;
          } else if (comparator(prevValue, target) < 0 && comparator(value, target) > 0) {
            // target is in between of the previous and the current
            return sidePreference == 'before' ? Math.max(0, middle - 1) : middle;
          } else if (comparator(value, target) < 0 && comparator(nextValue, target) > 0) {
            // target is in between of the current and the next
            return sidePreference == 'before' ? middle : Math.min(orderedItems.length - 1, middle + 1);
          } else {
            // didnt find the target, we need to change our boundaries.
            if (comparator(value, target) < 0) {
              // it is too small --> increase low
              low = middle + 1;
            } else {
              // it is too big --> decrease high
              high = middle - 1;
            }
          }
          iteration++;
        }

        // didnt find anything. Return -1.
        return -1;
      };

      /*
       * Easing Functions - inspired from http://gizma.com/easing/
       * only considering the t value for the range [0, 1] => [0, 1]
       * https://gist.github.com/gre/1650294
       */
      exports.easingFunctions = {
        // no easing, no acceleration
        linear: function linear(t) {
          return t;
        },
        // accelerating from zero velocity
        easeInQuad: function easeInQuad(t) {
          return t * t;
        },
        // decelerating to zero velocity
        easeOutQuad: function easeOutQuad(t) {
          return t * (2 - t);
        },
        // acceleration until halfway, then deceleration
        easeInOutQuad: function easeInOutQuad(t) {
          return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
        },
        // accelerating from zero velocity
        easeInCubic: function easeInCubic(t) {
          return t * t * t;
        },
        // decelerating to zero velocity
        easeOutCubic: function easeOutCubic(t) {
          return --t * t * t + 1;
        },
        // acceleration until halfway, then deceleration
        easeInOutCubic: function easeInOutCubic(t) {
          return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
        },
        // accelerating from zero velocity
        easeInQuart: function easeInQuart(t) {
          return t * t * t * t;
        },
        // decelerating to zero velocity
        easeOutQuart: function easeOutQuart(t) {
          return 1 - --t * t * t * t;
        },
        // acceleration until halfway, then deceleration
        easeInOutQuart: function easeInOutQuart(t) {
          return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
        },
        // accelerating from zero velocity
        easeInQuint: function easeInQuint(t) {
          return t * t * t * t * t;
        },
        // decelerating to zero velocity
        easeOutQuint: function easeOutQuint(t) {
          return 1 + --t * t * t * t * t;
        },
        // acceleration until halfway, then deceleration
        easeInOutQuint: function easeInOutQuint(t) {
          return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
        }
      };

      exports.getScrollBarWidth = function () {
        var inner = document.createElement('p');
        inner.style.width = "100%";
        inner.style.height = "200px";

        var outer = document.createElement('div');
        outer.style.position = "absolute";
        outer.style.top = "0px";
        outer.style.left = "0px";
        outer.style.visibility = "hidden";
        outer.style.width = "200px";
        outer.style.height = "150px";
        outer.style.overflow = "hidden";
        outer.appendChild(inner);

        document.body.appendChild(outer);
        var w1 = inner.offsetWidth;
        outer.style.overflow = 'scroll';
        var w2 = inner.offsetWidth;
        if (w1 == w2) w2 = outer.clientWidth;

        document.body.removeChild(outer);

        return w1 - w2;
      };

      exports.topMost = function (pile, accessors) {
        var candidate = void 0;
        if (!Array.isArray(accessors)) {
          accessors = [accessors];
        }
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = (0, _getIterator3['default'])(pile), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var member = _step.value;

            if (member) {
              candidate = member[accessors[0]];
              for (var i = 1; i < accessors.length; i++) {
                if (candidate) {
                  candidate = candidate[accessors[i]];
                } else {
                  continue;
                }
              }
              if (typeof candidate != 'undefined') {
                break;
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return candidate;
      };

      /***/
    },
    /* 3 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = { "default": __webpack_require__(194), __esModule: true };

      /***/
    },
    /* 4 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      exports.__esModule = true;

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      exports['default'] = function (self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3['default'])(call)) === "object" || typeof call === "function") ? call : self;
      };

      /***/
    },
    /* 5 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      exports.__esModule = true;

      var _setPrototypeOf = __webpack_require__(196);

      var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

      var _create = __webpack_require__(29);

      var _create2 = _interopRequireDefault(_create);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      exports['default'] = function (subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3['default'])(superClass)));
        }

        subClass.prototype = (0, _create2['default'])(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf2['default'] ? (0, _setPrototypeOf2['default'])(subClass, superClass) : subClass.__proto__ = superClass;
      };

      /***/
    },
    /* 6 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      exports.__esModule = true;

      var _iterator = __webpack_require__(142);

      var _iterator2 = _interopRequireDefault(_iterator);

      var _symbol = __webpack_require__(144);

      var _symbol2 = _interopRequireDefault(_symbol);

      var _typeof = typeof _symbol2['default'] === "function" && (0, _typeof6['default'])(_iterator2['default']) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : (0, _typeof6['default'])(obj);
      } : function (obj) {
        return obj && typeof _symbol2['default'] === "function" && obj.constructor === _symbol2['default'] && obj !== _symbol2['default'].prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : (0, _typeof6['default'])(obj);
      };

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      exports['default'] = typeof _symbol2['default'] === "function" && _typeof(_iterator2['default']) === "symbol" ? function (obj) {
        return typeof obj === "undefined" ? "undefined" : _typeof(obj);
      } : function (obj) {
        return obj && typeof _symbol2['default'] === "function" && obj.constructor === _symbol2['default'] && obj !== _symbol2['default'].prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
      };

      /***/
    },
    /* 7 */
    /***/function (module, exports) {

      var core = module.exports = { version: '2.5.1' };
      if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


      /***/
    },
    /* 8 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = { "default": __webpack_require__(140), __esModule: true };

      /***/
    },
    /* 9 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // first check if moment.js is already loaded in the browser window, if so,
      // use this instance. Else, load via commonjs.

      module.exports = typeof window !== 'undefined' && window['moment'] || __webpack_require__(154);

      /***/
    },
    /* 10 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       * Setup a mock hammer.js object, for unit testing.
       *
       * Inspiration: https://github.com/uber/deck.gl/pull/658
       *
       * @returns {{on: noop, off: noop, destroy: noop, emit: noop, get: get}}
       */

      function hammerMock() {
        var noop = function noop() {};

        return {
          on: noop,
          off: noop,
          destroy: noop,
          emit: noop,

          get: function get(m) {
            //eslint-disable-line no-unused-vars
            return {
              set: noop
            };
          }
        };
      }

      if (typeof window !== 'undefined') {
        var propagating = __webpack_require__(175);
        var Hammer = window['Hammer'] || __webpack_require__(176);
        module.exports = propagating(Hammer, {
          preventDefault: 'mouse'
        });
      } else {
        module.exports = function () {
          // hammer.js is only available in a browser, not in node.js. Replacing it with a mock object.
          return hammerMock();
        };
      }

      /***/
    },
    /* 11 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _stringify = __webpack_require__(19);

      var _stringify2 = _interopRequireDefault(_stringify);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var Queue = __webpack_require__(43);

      /**
       * DataSet
       * // TODO: add a DataSet constructor DataSet(data, options)
       *
       * Usage:
       *     var dataSet = new DataSet({
       *         fieldId: '_id',
       *         type: {
       *             // ...
       *         }
       *     });
       *
       *     dataSet.add(item);
       *     dataSet.add(data);
       *     dataSet.update(item);
       *     dataSet.update(data);
       *     dataSet.remove(id);
       *     dataSet.remove(ids);
       *     var data = dataSet.get();
       *     var data = dataSet.get(id);
       *     var data = dataSet.get(ids);
       *     var data = dataSet.get(ids, options, data);
       *     dataSet.clear();
       *
       * A data set can:
       * - add/remove/update data
       * - gives triggers upon changes in the data
       * - can  import/export data in various data formats
       *
       * @param {Array} [data]    Optional array with initial data
       * @param {Object} [options]   Available options:
       *                             {string} fieldId Field name of the id in the
       *                                              items, 'id' by default.
       *                             {Object.<string, string} type
       *                                              A map with field names as key,
       *                                              and the field type as value.
       *                             {Object} queue   Queue changes to the DataSet,
       *                                              flush them all at once.
       *                                              Queue options:
       *                                              - {number} delay  Delay in ms, null by default
       *                                              - {number} max    Maximum number of entries in the queue, Infinity by default
       * @constructor DataSet
       */
      function DataSet(data, options) {
        // correctly read optional arguments
        if (data && !Array.isArray(data)) {
          options = data;
          data = null;
        }

        this._options = options || {};
        this._data = {}; // map with data indexed by id
        this.length = 0; // number of items in the DataSet
        this._fieldId = this._options.fieldId || 'id'; // name of the field containing id
        this._type = {}; // internal field types (NOTE: this can differ from this._options.type)

        // all variants of a Date are internally stored as Date, so we can convert
        // from everything to everything (also from ISODate to Number for example)
        if (this._options.type) {
          var fields = (0, _keys2['default'])(this._options.type);
          for (var i = 0, len = fields.length; i < len; i++) {
            var field = fields[i];
            var value = this._options.type[field];
            if (value == 'Date' || value == 'ISODate' || value == 'ASPDate') {
              this._type[field] = 'Date';
            } else {
              this._type[field] = value;
            }
          }
        }

        this._subscribers = {}; // event subscribers

        // add initial data when provided
        if (data) {
          this.add(data);
        }

        this.setOptions(options);
      }

      /**
       * @param {Object} options   Available options:
       *                             {Object} queue   Queue changes to the DataSet,
       *                                              flush them all at once.
       *                                              Queue options:
       *                                              - {number} delay  Delay in ms, null by default
       *                                              - {number} max    Maximum number of entries in the queue, Infinity by default
       */
      DataSet.prototype.setOptions = function (options) {
        if (options && options.queue !== undefined) {
          if (options.queue === false) {
            // delete queue if loaded
            if (this._queue) {
              this._queue.destroy();
              delete this._queue;
            }
          } else {
            // create queue and update its options
            if (!this._queue) {
              this._queue = Queue.extend(this, {
                replace: ['add', 'update', 'remove']
              });
            }

            if ((0, _typeof3['default'])(options.queue) === 'object') {
              this._queue.setOptions(options.queue);
            }
          }
        }
      };

      /**
       * Subscribe to an event, add an event listener
       * @param {string} event        Event name. Available events: 'add', 'update',
       *                              'remove'
       * @param {function} callback   Callback method. Called with three parameters:
       *                                  {string} event
       *                                  {Object | null} params
       *                                  {string | number} senderId
       */
      DataSet.prototype.on = function (event, callback) {
        var subscribers = this._subscribers[event];
        if (!subscribers) {
          subscribers = [];
          this._subscribers[event] = subscribers;
        }

        subscribers.push({
          callback: callback
        });
      };

      /**
       * Unsubscribe from an event, remove an event listener
       * @param {string} event
       * @param {function} callback
       */
      DataSet.prototype.off = function (event, callback) {
        var subscribers = this._subscribers[event];
        if (subscribers) {
          this._subscribers[event] = subscribers.filter(function (listener) {
            return listener.callback != callback;
          });
        }
      };

      /**
       * Trigger an event
       * @param {string} event
       * @param {Object | null} params
       * @param {string} [senderId]       Optional id of the sender.
       * @private
       */
      DataSet.prototype._trigger = function (event, params, senderId) {
        if (event == '*') {
          throw new Error('Cannot trigger event *');
        }

        var subscribers = [];
        if (event in this._subscribers) {
          subscribers = subscribers.concat(this._subscribers[event]);
        }
        if ('*' in this._subscribers) {
          subscribers = subscribers.concat(this._subscribers['*']);
        }

        for (var i = 0, len = subscribers.length; i < len; i++) {
          var subscriber = subscribers[i];
          if (subscriber.callback) {
            subscriber.callback(event, params, senderId || null);
          }
        }
      };

      /**
       * Add data.
       * Adding an item will fail when there already is an item with the same id.
       * @param {Object | Array} data
       * @param {string} [senderId] Optional sender id
       * @return {Array.<string|number>} addedIds      Array with the ids of the added items
       */
      DataSet.prototype.add = function (data, senderId) {
        var addedIds = [],
            id,
            me = this;

        if (Array.isArray(data)) {
          // Array
          for (var i = 0, len = data.length; i < len; i++) {
            id = me._addItem(data[i]);
            addedIds.push(id);
          }
        } else if (data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3['default'])(data)) === 'object') {
          // Single item
          id = me._addItem(data);
          addedIds.push(id);
        } else {
          throw new Error('Unknown dataType');
        }

        if (addedIds.length) {
          this._trigger('add', { items: addedIds }, senderId);
        }

        return addedIds;
      };

      /**
       * Update existing items. When an item does not exist, it will be created
       * @param {Object | Array} data
       * @param {string} [senderId] Optional sender id
       * @return {Array.<string|number>} updatedIds     The ids of the added or updated items
       * @throws {Error} Unknown Datatype
       */
      DataSet.prototype.update = function (data, senderId) {
        var addedIds = [];
        var updatedIds = [];
        var oldData = [];
        var updatedData = [];
        var me = this;
        var fieldId = me._fieldId;

        var addOrUpdate = function addOrUpdate(item) {
          var id = item[fieldId];
          if (me._data[id]) {
            var oldItem = util.extend({}, me._data[id]);
            // update item
            id = me._updateItem(item);
            updatedIds.push(id);
            updatedData.push(item);
            oldData.push(oldItem);
          } else {
            // add new item
            id = me._addItem(item);
            addedIds.push(id);
          }
        };

        if (Array.isArray(data)) {
          // Array
          for (var i = 0, len = data.length; i < len; i++) {
            if (data[i] && (0, _typeof3['default'])(data[i]) === 'object') {
              addOrUpdate(data[i]);
            } else {
              console.warn('Ignoring input item, which is not an object at index ' + i);
            }
          }
        } else if (data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3['default'])(data)) === 'object') {
          // Single item
          addOrUpdate(data);
        } else {
          throw new Error('Unknown dataType');
        }

        if (addedIds.length) {
          this._trigger('add', { items: addedIds }, senderId);
        }
        if (updatedIds.length) {
          var props = { items: updatedIds, oldData: oldData, data: updatedData };
          // TODO: remove deprecated property 'data' some day
          //Object.defineProperty(props, 'data', {
          //  'get': (function() {
          //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
          //    return updatedData;
          //  }).bind(this)
          //});
          this._trigger('update', props, senderId);
        }

        return addedIds.concat(updatedIds);
      };

      /**
       * Get a data item or multiple items.
       *
       * Usage:
       *
       *     get()
       *     get(options: Object)
       *
       *     get(id: number | string)
       *     get(id: number | string, options: Object)
       *
       *     get(ids: number[] | string[])
       *     get(ids: number[] | string[], options: Object)
       *
       * Where:
       *
       * {number | string} id         The id of an item
       * {number[] | string{}} ids    An array with ids of items
       * {Object} options             An Object with options. Available options:
       * {string} [returnType]        Type of data to be returned.
       *                              Can be 'Array' (default) or 'Object'.
       * {Object.<string, string>} [type]
       * {string[]} [fields]          field names to be returned
       * {function} [filter]          filter items
       * {string | function} [order]  Order the items by a field name or custom sort function.
       * @param {Array} args
       * @returns {DataSet}
       * @throws Error
       */
      DataSet.prototype.get = function (args) {
        // eslint-disable-line no-unused-vars
        var me = this;

        // parse the arguments
        var id, ids, options;
        var firstType = util.getType(arguments[0]);
        if (firstType == 'String' || firstType == 'Number') {
          // get(id [, options])
          id = arguments[0];
          options = arguments[1];
        } else if (firstType == 'Array') {
          // get(ids [, options])
          ids = arguments[0];
          options = arguments[1];
        } else {
          // get([, options])
          options = arguments[0];
        }

        // determine the return type
        var returnType;
        if (options && options.returnType) {
          var allowedValues = ['Array', 'Object'];
          returnType = allowedValues.indexOf(options.returnType) == -1 ? 'Array' : options.returnType;
        } else {
          returnType = 'Array';
        }

        // build options
        var type = options && options.type || this._options.type;
        var filter = options && options.filter;
        var items = [],
            item,
            itemIds,
            itemId,
            i,
            len;

        // convert items
        if (id != undefined) {
          // return a single item
          item = me._getItem(id, type);
          if (item && filter && !filter(item)) {
            item = null;
          }
        } else if (ids != undefined) {
          // return a subset of items
          for (i = 0, len = ids.length; i < len; i++) {
            item = me._getItem(ids[i], type);
            if (!filter || filter(item)) {
              items.push(item);
            }
          }
        } else {
          // return all items
          itemIds = (0, _keys2['default'])(this._data);
          for (i = 0, len = itemIds.length; i < len; i++) {
            itemId = itemIds[i];
            item = me._getItem(itemId, type);
            if (!filter || filter(item)) {
              items.push(item);
            }
          }
        }

        // order the results
        if (options && options.order && id == undefined) {
          this._sort(items, options.order);
        }

        // filter fields of the items
        if (options && options.fields) {
          var fields = options.fields;
          if (id != undefined) {
            item = this._filterFields(item, fields);
          } else {
            for (i = 0, len = items.length; i < len; i++) {
              items[i] = this._filterFields(items[i], fields);
            }
          }
        }

        // return the results
        if (returnType == 'Object') {
          var result = {},
              resultant;
          for (i = 0, len = items.length; i < len; i++) {
            resultant = items[i];
            result[resultant.id] = resultant;
          }
          return result;
        } else {
          if (id != undefined) {
            // a single item
            return item;
          } else {
            // just return our array
            return items;
          }
        }
      };

      /**
       * Get ids of all items or from a filtered set of items.
       * @param {Object} [options]    An Object with options. Available options:
       *                              {function} [filter] filter items
       *                              {string | function} [order] Order the items by
       *                                  a field name or custom sort function.
       * @return {Array.<string|number>} ids
       */
      DataSet.prototype.getIds = function (options) {
        var data = this._data,
            filter = options && options.filter,
            order = options && options.order,
            type = options && options.type || this._options.type,
            itemIds = (0, _keys2['default'])(data),
            i,
            len,
            id,
            item,
            items,
            ids = [];

        if (filter) {
          // get filtered items
          if (order) {
            // create ordered list
            items = [];
            for (i = 0, len = itemIds.length; i < len; i++) {
              id = itemIds[i];
              item = this._getItem(id, type);
              if (filter(item)) {
                items.push(item);
              }
            }

            this._sort(items, order);

            for (i = 0, len = items.length; i < len; i++) {
              ids.push(items[i][this._fieldId]);
            }
          } else {
            // create unordered list
            for (i = 0, len = itemIds.length; i < len; i++) {
              id = itemIds[i];
              item = this._getItem(id, type);
              if (filter(item)) {
                ids.push(item[this._fieldId]);
              }
            }
          }
        } else {
          // get all items
          if (order) {
            // create an ordered list
            items = [];
            for (i = 0, len = itemIds.length; i < len; i++) {
              id = itemIds[i];
              items.push(data[id]);
            }

            this._sort(items, order);

            for (i = 0, len = items.length; i < len; i++) {
              ids.push(items[i][this._fieldId]);
            }
          } else {
            // create unordered list
            for (i = 0, len = itemIds.length; i < len; i++) {
              id = itemIds[i];
              item = data[id];
              ids.push(item[this._fieldId]);
            }
          }
        }

        return ids;
      };

      /**
       * Returns the DataSet itself. Is overwritten for example by the DataView,
       * which returns the DataSet it is connected to instead.
       * @returns {DataSet}
       */
      DataSet.prototype.getDataSet = function () {
        return this;
      };

      /**
       * Execute a callback function for every item in the dataset.
       * @param {function} callback
       * @param {Object} [options]    Available options:
       *                              {Object.<string, string>} [type]
       *                              {string[]} [fields] filter fields
       *                              {function} [filter] filter items
       *                              {string | function} [order] Order the items by
       *                                  a field name or custom sort function.
       */
      DataSet.prototype.forEach = function (callback, options) {
        var filter = options && options.filter,
            type = options && options.type || this._options.type,
            data = this._data,
            itemIds = (0, _keys2['default'])(data),
            i,
            len,
            item,
            id;

        if (options && options.order) {
          // execute forEach on ordered list
          var items = this.get(options);

          for (i = 0, len = items.length; i < len; i++) {
            item = items[i];
            id = item[this._fieldId];
            callback(item, id);
          }
        } else {
          // unordered
          for (i = 0, len = itemIds.length; i < len; i++) {
            id = itemIds[i];
            item = this._getItem(id, type);
            if (!filter || filter(item)) {
              callback(item, id);
            }
          }
        }
      };

      /**
       * Map every item in the dataset.
       * @param {function} callback
       * @param {Object} [options]    Available options:
       *                              {Object.<string, string>} [type]
       *                              {string[]} [fields] filter fields
       *                              {function} [filter] filter items
       *                              {string | function} [order] Order the items by
       *                                  a field name or custom sort function.
       * @return {Object[]} mappedItems
       */
      DataSet.prototype.map = function (callback, options) {
        var filter = options && options.filter,
            type = options && options.type || this._options.type,
            mappedItems = [],
            data = this._data,
            itemIds = (0, _keys2['default'])(data),
            i,
            len,
            id,
            item;

        // convert and filter items
        for (i = 0, len = itemIds.length; i < len; i++) {
          id = itemIds[i];
          item = this._getItem(id, type);
          if (!filter || filter(item)) {
            mappedItems.push(callback(item, id));
          }
        }

        // order items
        if (options && options.order) {
          this._sort(mappedItems, options.order);
        }

        return mappedItems;
      };

      /**
       * Filter the fields of an item
       * @param {Object | null} item
       * @param {string[]} fields     Field names
       * @return {Object | null} filteredItem or null if no item is provided
       * @private
       */
      DataSet.prototype._filterFields = function (item, fields) {
        if (!item) {
          // item is null
          return item;
        }

        var filteredItem = {},
            itemFields = (0, _keys2['default'])(item),
            len = itemFields.length,
            i,
            field;

        if (Array.isArray(fields)) {
          for (i = 0; i < len; i++) {
            field = itemFields[i];
            if (fields.indexOf(field) != -1) {
              filteredItem[field] = item[field];
            }
          }
        } else {
          for (i = 0; i < len; i++) {
            field = itemFields[i];
            if (fields.hasOwnProperty(field)) {
              filteredItem[fields[field]] = item[field];
            }
          }
        }

        return filteredItem;
      };

      /**
       * Sort the provided array with items
       * @param {Object[]} items
       * @param {string | function} order      A field name or custom sort function.
       * @private
       */
      DataSet.prototype._sort = function (items, order) {
        if (util.isString(order)) {
          // order by provided field name
          var name = order; // field name
          items.sort(function (a, b) {
            var av = a[name];
            var bv = b[name];
            return av > bv ? 1 : av < bv ? -1 : 0;
          });
        } else if (typeof order === 'function') {
          // order by sort function
          items.sort(order);
        }
        // TODO: extend order by an Object {field:string, direction:string}
        //       where direction can be 'asc' or 'desc'
        else {
            throw new TypeError('Order must be a function or a string');
          }
      };

      /**
       * Remove an object by pointer or by id
       * @param {string | number | Object | Array.<string|number>} id Object or id, or an array with
       *                                              objects or ids to be removed
       * @param {string} [senderId] Optional sender id
       * @return {Array.<string|number>} removedIds
       */
      DataSet.prototype.remove = function (id, senderId) {
        var removedIds = [],
            removedItems = [],
            ids = [],
            i,
            len,
            itemId,
            item;

        // force everything to be an array for simplicity
        ids = Array.isArray(id) ? id : [id];

        for (i = 0, len = ids.length; i < len; i++) {
          item = this._remove(ids[i]);
          if (item) {
            itemId = item[this._fieldId];
            if (itemId != undefined) {
              removedIds.push(itemId);
              removedItems.push(item);
            }
          }
        }

        if (removedIds.length) {
          this._trigger('remove', { items: removedIds, oldData: removedItems }, senderId);
        }

        return removedIds;
      };

      /**
       * Remove an item by its id
       * @param {number | string | Object} id   id or item
       * @returns {number | string | null} id
       * @private
       */
      DataSet.prototype._remove = function (id) {
        var item, ident;

        // confirm the id to use based on the args type
        if (util.isNumber(id) || util.isString(id)) {
          ident = id;
        } else if (id && (typeof id === 'undefined' ? 'undefined' : (0, _typeof3['default'])(id)) === 'object') {
          ident = id[this._fieldId]; // look for the identifier field using _fieldId
        }

        // do the remove if the item is found
        if (ident !== undefined && this._data[ident]) {
          item = this._data[ident];
          delete this._data[ident];
          this.length--;
          return item;
        }
        return null;
      };

      /**
       * Clear the data
       * @param {string} [senderId] Optional sender id
       * @return {Array.<string|number>} removedIds    The ids of all removed items
       */
      DataSet.prototype.clear = function (senderId) {
        var i, len;
        var ids = (0, _keys2['default'])(this._data);
        var items = [];

        for (i = 0, len = ids.length; i < len; i++) {
          items.push(this._data[ids[i]]);
        }

        this._data = {};
        this.length = 0;

        this._trigger('remove', { items: ids, oldData: items }, senderId);

        return ids;
      };

      /**
       * Find the item with maximum value of a specified field
       * @param {string} field
       * @return {Object | null} item  Item containing max value, or null if no items
       */
      DataSet.prototype.max = function (field) {
        var data = this._data,
            itemIds = (0, _keys2['default'])(data),
            max = null,
            maxField = null,
            i,
            len;

        for (i = 0, len = itemIds.length; i < len; i++) {
          var id = itemIds[i];
          var item = data[id];
          var itemField = item[field];
          if (itemField != null && (!max || itemField > maxField)) {
            max = item;
            maxField = itemField;
          }
        }

        return max;
      };

      /**
       * Find the item with minimum value of a specified field
       * @param {string} field
       * @return {Object | null} item  Item containing max value, or null if no items
       */
      DataSet.prototype.min = function (field) {
        var data = this._data,
            itemIds = (0, _keys2['default'])(data),
            min = null,
            minField = null,
            i,
            len;

        for (i = 0, len = itemIds.length; i < len; i++) {
          var id = itemIds[i];
          var item = data[id];
          var itemField = item[field];
          if (itemField != null && (!min || itemField < minField)) {
            min = item;
            minField = itemField;
          }
        }

        return min;
      };

      /**
       * Find all distinct values of a specified field
       * @param {string} field
       * @return {Array} values  Array containing all distinct values. If data items
       *                         do not contain the specified field are ignored.
       *                         The returned array is unordered.
       */
      DataSet.prototype.distinct = function (field) {
        var data = this._data;
        var itemIds = (0, _keys2['default'])(data);
        var values = [];
        var fieldType = this._options.type && this._options.type[field] || null;
        var count = 0;
        var i, j, len;

        for (i = 0, len = itemIds.length; i < len; i++) {
          var id = itemIds[i];
          var item = data[id];
          var value = item[field];
          var exists = false;
          for (j = 0; j < count; j++) {
            if (values[j] == value) {
              exists = true;
              break;
            }
          }
          if (!exists && value !== undefined) {
            values[count] = value;
            count++;
          }
        }

        if (fieldType) {
          for (i = 0, len = values.length; i < len; i++) {
            values[i] = util.convert(values[i], fieldType);
          }
        }

        return values;
      };

      /**
       * Add a single item. Will fail when an item with the same id already exists.
       * @param {Object} item
       * @return {string} id
       * @private
       */
      DataSet.prototype._addItem = function (item) {
        var id = item[this._fieldId];

        if (id != undefined) {
          // check whether this id is already taken
          if (this._data[id]) {
            // item already exists
            throw new Error('Cannot add item: item with id ' + id + ' already exists');
          }
        } else {
          // generate an id
          id = util.randomUUID();
          item[this._fieldId] = id;
        }

        var d = {},
            fields = (0, _keys2['default'])(item),
            i,
            len;
        for (i = 0, len = fields.length; i < len; i++) {
          var field = fields[i];
          var fieldType = this._type[field]; // type may be undefined
          d[field] = util.convert(item[field], fieldType);
        }
        this._data[id] = d;
        this.length++;

        return id;
      };

      /**
       * Get an item. Fields can be converted to a specific type
       * @param {string} id
       * @param {Object.<string, string>} [types]  field types to convert
       * @return {Object | null} item
       * @private
       */
      DataSet.prototype._getItem = function (id, types) {
        var field, value, i, len;

        // get the item from the dataset
        var raw = this._data[id];
        if (!raw) {
          return null;
        }

        // convert the items field types
        var converted = {},
            fields = (0, _keys2['default'])(raw);

        if (types) {
          for (i = 0, len = fields.length; i < len; i++) {
            field = fields[i];
            value = raw[field];
            converted[field] = util.convert(value, types[field]);
          }
        } else {
          // no field types specified, no converting needed
          for (i = 0, len = fields.length; i < len; i++) {
            field = fields[i];
            value = raw[field];
            converted[field] = value;
          }
        }

        if (!converted[this._fieldId]) {
          converted[this._fieldId] = raw.id;
        }

        return converted;
      };

      /**
       * Update a single item: merge with existing item.
       * Will fail when the item has no id, or when there does not exist an item
       * with the same id.
       * @param {Object} item
       * @return {string} id
       * @private
       */
      DataSet.prototype._updateItem = function (item) {
        var id = item[this._fieldId];
        if (id == undefined) {
          throw new Error('Cannot update item: item has no id (item: ' + (0, _stringify2['default'])(item) + ')');
        }
        var d = this._data[id];
        if (!d) {
          // item doesn't exist
          throw new Error('Cannot update item: no item with id ' + id + ' found');
        }

        // merge with current item
        var fields = (0, _keys2['default'])(item);
        for (var i = 0, len = fields.length; i < len; i++) {
          var field = fields[i];
          var fieldType = this._type[field]; // type may be undefined
          d[field] = util.convert(item[field], fieldType);
        }

        return id;
      };

      module.exports = DataSet;

      /***/
    },
    /* 12 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var DataSet = __webpack_require__(11);

      /**
       * DataView
       *
       * a dataview offers a filtered view on a dataset or an other dataview.
       *
       * @param {DataSet | DataView} data
       * @param {Object} [options]   Available options: see method get
       *
       * @constructor DataView
       */
      function DataView(data, options) {
        this._data = null;
        this._ids = {}; // ids of the items currently in memory (just contains a boolean true)
        this.length = 0; // number of items in the DataView
        this._options = options || {};
        this._fieldId = 'id'; // name of the field containing id
        this._subscribers = {}; // event subscribers

        var me = this;
        this.listener = function () {
          me._onEvent.apply(me, arguments);
        };

        this.setData(data);
      }

      // TODO: implement a function .config() to dynamically update things like configured filter
      // and trigger changes accordingly

      /**
       * Set a data source for the view
       * @param {DataSet | DataView} data
       */
      DataView.prototype.setData = function (data) {
        var ids, id, i, len, items;

        if (this._data) {
          // unsubscribe from current dataset
          if (this._data.off) {
            this._data.off('*', this.listener);
          }

          // trigger a remove of all items in memory
          ids = this._data.getIds({ filter: this._options && this._options.filter });
          items = [];

          for (i = 0, len = ids.length; i < len; i++) {
            items.push(this._data._data[ids[i]]);
          }

          this._ids = {};
          this.length = 0;
          this._trigger('remove', { items: ids, oldData: items });
        }

        this._data = data;

        if (this._data) {
          // update fieldId
          this._fieldId = this._options.fieldId || this._data && this._data.options && this._data.options.fieldId || 'id';

          // trigger an add of all added items
          ids = this._data.getIds({ filter: this._options && this._options.filter });
          for (i = 0, len = ids.length; i < len; i++) {
            id = ids[i];
            this._ids[id] = true;
          }
          this.length = ids.length;
          this._trigger('add', { items: ids });

          // subscribe to new dataset
          if (this._data.on) {
            this._data.on('*', this.listener);
          }
        }
      };

      /**
       * Refresh the DataView. Useful when the DataView has a filter function
       * containing a variable parameter.
       */
      DataView.prototype.refresh = function () {
        var id, i, len;
        var ids = this._data.getIds({ filter: this._options && this._options.filter }),
            oldIds = (0, _keys2['default'])(this._ids),
            newIds = {},
            addedIds = [],
            removedIds = [],
            removedItems = [];

        // check for additions
        for (i = 0, len = ids.length; i < len; i++) {
          id = ids[i];
          newIds[id] = true;
          if (!this._ids[id]) {
            addedIds.push(id);
            this._ids[id] = true;
          }
        }

        // check for removals
        for (i = 0, len = oldIds.length; i < len; i++) {
          id = oldIds[i];
          if (!newIds[id]) {
            removedIds.push(id);
            removedItems.push(this._data._data[id]);
            delete this._ids[id];
          }
        }

        this.length += addedIds.length - removedIds.length;

        // trigger events
        if (addedIds.length) {
          this._trigger('add', { items: addedIds });
        }
        if (removedIds.length) {
          this._trigger('remove', { items: removedIds, oldData: removedItems });
        }
      };

      /**
       * Get data from the data view
       *
       * Usage:
       *
       *     get()
       *     get(options: Object)
       *     get(options: Object, data: Array | DataTable)
       *
       *     get(id: Number)
       *     get(id: Number, options: Object)
       *     get(id: Number, options: Object, data: Array | DataTable)
       *
       *     get(ids: Number[])
       *     get(ids: Number[], options: Object)
       *     get(ids: Number[], options: Object, data: Array | DataTable)
       *
       * Where:
       *
       * {number | string} id         The id of an item
       * {number[] | string{}} ids    An array with ids of items
       * {Object} options             An Object with options. Available options:
       *                              {string} [type] Type of data to be returned. Can
       *                                              be 'DataTable' or 'Array' (default)
       *                              {Object.<string, string>} [convert]
       *                              {string[]} [fields] field names to be returned
       *                              {function} [filter] filter items
       *                              {string | function} [order] Order the items by
       *                                  a field name or custom sort function.
       * {Array | DataTable} [data]   If provided, items will be appended to this
       *                              array or table. Required in case of Google
       *                              DataTable.
       * @param {Array} args
       * @return {DataSet|DataView}
       */
      DataView.prototype.get = function (args) {
        // eslint-disable-line no-unused-vars
        var me = this;

        // parse the arguments
        var ids, options, data;
        var firstType = util.getType(arguments[0]);
        if (firstType == 'String' || firstType == 'Number' || firstType == 'Array') {
          // get(id(s) [, options] [, data])
          ids = arguments[0]; // can be a single id or an array with ids
          options = arguments[1];
          data = arguments[2];
        } else {
          // get([, options] [, data])
          options = arguments[0];
          data = arguments[1];
        }

        // extend the options with the default options and provided options
        var viewOptions = util.extend({}, this._options, options);

        // create a combined filter method when needed
        if (this._options.filter && options && options.filter) {
          viewOptions.filter = function (item) {
            return me._options.filter(item) && options.filter(item);
          };
        }

        // build up the call to the linked data set
        var getArguments = [];
        if (ids != undefined) {
          getArguments.push(ids);
        }
        getArguments.push(viewOptions);
        getArguments.push(data);

        return this._data && this._data.get.apply(this._data, getArguments);
      };

      /**
       * Get ids of all items or from a filtered set of items.
       * @param {Object} [options]    An Object with options. Available options:
       *                              {function} [filter] filter items
       *                              {string | function} [order] Order the items by
       *                                  a field name or custom sort function.
       * @return {Array.<string|number>} ids
       */
      DataView.prototype.getIds = function (options) {
        var ids;

        if (this._data) {
          var defaultFilter = this._options.filter;
          var filter;

          if (options && options.filter) {
            if (defaultFilter) {
              filter = function filter(item) {
                return defaultFilter(item) && options.filter(item);
              };
            } else {
              filter = options.filter;
            }
          } else {
            filter = defaultFilter;
          }

          ids = this._data.getIds({
            filter: filter,
            order: options && options.order
          });
        } else {
          ids = [];
        }

        return ids;
      };

      /**
       * Map every item in the dataset.
       * @param {function} callback
       * @param {Object} [options]    Available options:
       *                              {Object.<string, string>} [type]
       *                              {string[]} [fields] filter fields
       *                              {function} [filter] filter items
       *                              {string | function} [order] Order the items by
       *                                  a field name or custom sort function.
       * @return {Object[]} mappedItems
       */
      DataView.prototype.map = function (callback, options) {
        var mappedItems = [];
        if (this._data) {
          var defaultFilter = this._options.filter;
          var filter;

          if (options && options.filter) {
            if (defaultFilter) {
              filter = function filter(item) {
                return defaultFilter(item) && options.filter(item);
              };
            } else {
              filter = options.filter;
            }
          } else {
            filter = defaultFilter;
          }

          mappedItems = this._data.map(callback, {
            filter: filter,
            order: options && options.order
          });
        } else {
          mappedItems = [];
        }

        return mappedItems;
      };

      /**
       * Get the DataSet to which this DataView is connected. In case there is a chain
       * of multiple DataViews, the root DataSet of this chain is returned.
       * @return {DataSet} dataSet
       */
      DataView.prototype.getDataSet = function () {
        var dataSet = this;
        while (dataSet instanceof DataView) {
          dataSet = dataSet._data;
        }
        return dataSet || null;
      };

      /**
       * Event listener. Will propagate all events from the connected data set to
       * the subscribers of the DataView, but will filter the items and only trigger
       * when there are changes in the filtered data set.
       * @param {string} event
       * @param {Object | null} params
       * @param {string} senderId
       * @private
       */
      DataView.prototype._onEvent = function (event, params, senderId) {
        var i, len, id, item;
        var ids = params && params.items;
        var addedIds = [],
            updatedIds = [],
            removedIds = [],
            oldItems = [],
            updatedItems = [],
            removedItems = [];

        if (ids && this._data) {
          switch (event) {
            case 'add':
              // filter the ids of the added items
              for (i = 0, len = ids.length; i < len; i++) {
                id = ids[i];
                item = this.get(id);
                if (item) {
                  this._ids[id] = true;
                  addedIds.push(id);
                }
              }

              break;

            case 'update':
              // determine the event from the views viewpoint: an updated
              // item can be added, updated, or removed from this view.
              for (i = 0, len = ids.length; i < len; i++) {
                id = ids[i];
                item = this.get(id);

                if (item) {
                  if (this._ids[id]) {
                    updatedIds.push(id);
                    updatedItems.push(params.data[i]);
                    oldItems.push(params.oldData[i]);
                  } else {
                    this._ids[id] = true;
                    addedIds.push(id);
                  }
                } else {
                  if (this._ids[id]) {
                    delete this._ids[id];
                    removedIds.push(id);
                    removedItems.push(params.oldData[i]);
                  } else {
                    // nothing interesting for me :-(
                  }
                }
              }

              break;

            case 'remove':
              // filter the ids of the removed items
              for (i = 0, len = ids.length; i < len; i++) {
                id = ids[i];
                if (this._ids[id]) {
                  delete this._ids[id];
                  removedIds.push(id);
                  removedItems.push(params.oldData[i]);
                }
              }

              break;
          }

          this.length += addedIds.length - removedIds.length;

          if (addedIds.length) {
            this._trigger('add', { items: addedIds }, senderId);
          }
          if (updatedIds.length) {
            this._trigger('update', { items: updatedIds, oldData: oldItems, data: updatedItems }, senderId);
          }
          if (removedIds.length) {
            this._trigger('remove', { items: removedIds, oldData: removedItems }, senderId);
          }
        }
      };

      // copy subscription functionality from DataSet
      DataView.prototype.on = DataSet.prototype.on;
      DataView.prototype.off = DataSet.prototype.off;
      DataView.prototype._trigger = DataSet.prototype._trigger;

      // TODO: make these functions deprecated (replaced with `on` and `off` since version 0.5)
      DataView.prototype.subscribe = DataView.prototype.on;
      DataView.prototype.unsubscribe = DataView.prototype.off;

      module.exports = DataView;

      /***/
    },
    /* 13 */
    /***/function (module, exports, __webpack_require__) {

      var store = __webpack_require__(57)('wks');
      var uid = __webpack_require__(40);
      var _Symbol = __webpack_require__(18).Symbol;
      var USE_SYMBOL = typeof _Symbol == 'function';

      var $exports = module.exports = function (name) {
        return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
      };

      $exports.store = store;

      /***/
    },
    /* 14 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // DOM utility methods

      /**
       * this prepares the JSON container for allocating SVG elements
       * @param {Object} JSONcontainer
       * @private
       */

      exports.prepareElements = function (JSONcontainer) {
        // cleanup the redundant svgElements;
        for (var elementType in JSONcontainer) {
          if (JSONcontainer.hasOwnProperty(elementType)) {
            JSONcontainer[elementType].redundant = JSONcontainer[elementType].used;
            JSONcontainer[elementType].used = [];
          }
        }
      };

      /**
       * this cleans up all the unused SVG elements. By asking for the parentNode, we only need to supply the JSON container from
       * which to remove the redundant elements.
       *
       * @param {Object} JSONcontainer
       * @private
       */
      exports.cleanupElements = function (JSONcontainer) {
        // cleanup the redundant svgElements;
        for (var elementType in JSONcontainer) {
          if (JSONcontainer.hasOwnProperty(elementType)) {
            if (JSONcontainer[elementType].redundant) {
              for (var i = 0; i < JSONcontainer[elementType].redundant.length; i++) {
                JSONcontainer[elementType].redundant[i].parentNode.removeChild(JSONcontainer[elementType].redundant[i]);
              }
              JSONcontainer[elementType].redundant = [];
            }
          }
        }
      };

      /**
       * Ensures that all elements are removed first up so they can be recreated cleanly
       * @param {Object} JSONcontainer
       */
      exports.resetElements = function (JSONcontainer) {
        exports.prepareElements(JSONcontainer);
        exports.cleanupElements(JSONcontainer);
        exports.prepareElements(JSONcontainer);
      };

      /**
       * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
       * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
       *
       * @param {string} elementType
       * @param {Object} JSONcontainer
       * @param {Object} svgContainer
       * @returns {Element}
       * @private
       */
      exports.getSVGElement = function (elementType, JSONcontainer, svgContainer) {
        var element;
        // allocate SVG element, if it doesnt yet exist, create one.
        if (JSONcontainer.hasOwnProperty(elementType)) {
          // this element has been created before
          // check if there is an redundant element
          if (JSONcontainer[elementType].redundant.length > 0) {
            element = JSONcontainer[elementType].redundant[0];
            JSONcontainer[elementType].redundant.shift();
          } else {
            // create a new element and add it to the SVG
            element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
            svgContainer.appendChild(element);
          }
        } else {
          // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
          element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
          JSONcontainer[elementType] = { used: [], redundant: [] };
          svgContainer.appendChild(element);
        }
        JSONcontainer[elementType].used.push(element);
        return element;
      };

      /**
       * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
       * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
       *
       * @param {string} elementType
       * @param {Object} JSONcontainer
       * @param {Element} DOMContainer
       * @param {Element} insertBefore
       * @returns {*}
       */
      exports.getDOMElement = function (elementType, JSONcontainer, DOMContainer, insertBefore) {
        var element;
        // allocate DOM element, if it doesnt yet exist, create one.
        if (JSONcontainer.hasOwnProperty(elementType)) {
          // this element has been created before
          // check if there is an redundant element
          if (JSONcontainer[elementType].redundant.length > 0) {
            element = JSONcontainer[elementType].redundant[0];
            JSONcontainer[elementType].redundant.shift();
          } else {
            // create a new element and add it to the SVG
            element = document.createElement(elementType);
            if (insertBefore !== undefined) {
              DOMContainer.insertBefore(element, insertBefore);
            } else {
              DOMContainer.appendChild(element);
            }
          }
        } else {
          // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
          element = document.createElement(elementType);
          JSONcontainer[elementType] = { used: [], redundant: [] };
          if (insertBefore !== undefined) {
            DOMContainer.insertBefore(element, insertBefore);
          } else {
            DOMContainer.appendChild(element);
          }
        }
        JSONcontainer[elementType].used.push(element);
        return element;
      };

      /**
       * Draw a point object. This is a separate function because it can also be called by the legend.
       * The reason the JSONcontainer and the target SVG svgContainer have to be supplied is so the legend can use these functions
       * as well.
       *
       * @param {number} x
       * @param {number} y
       * @param {Object} groupTemplate: A template containing the necessary information to draw the datapoint e.g., {style: 'circle', size: 5, className: 'className' }
       * @param {Object} JSONcontainer
       * @param {Object} svgContainer
       * @param {Object} labelObj
       * @returns {vis.PointItem}
       */
      exports.drawPoint = function (x, y, groupTemplate, JSONcontainer, svgContainer, labelObj) {
        var point;
        if (groupTemplate.style == 'circle') {
          point = exports.getSVGElement('circle', JSONcontainer, svgContainer);
          point.setAttributeNS(null, "cx", x);
          point.setAttributeNS(null, "cy", y);
          point.setAttributeNS(null, "r", 0.5 * groupTemplate.size);
        } else {
          point = exports.getSVGElement('rect', JSONcontainer, svgContainer);
          point.setAttributeNS(null, "x", x - 0.5 * groupTemplate.size);
          point.setAttributeNS(null, "y", y - 0.5 * groupTemplate.size);
          point.setAttributeNS(null, "width", groupTemplate.size);
          point.setAttributeNS(null, "height", groupTemplate.size);
        }

        if (groupTemplate.styles !== undefined) {
          point.setAttributeNS(null, "style", groupTemplate.styles);
        }
        point.setAttributeNS(null, "class", groupTemplate.className + " vis-point");
        //handle label


        if (labelObj) {
          var label = exports.getSVGElement('text', JSONcontainer, svgContainer);
          if (labelObj.xOffset) {
            x = x + labelObj.xOffset;
          }

          if (labelObj.yOffset) {
            y = y + labelObj.yOffset;
          }
          if (labelObj.content) {
            label.textContent = labelObj.content;
          }

          if (labelObj.className) {
            label.setAttributeNS(null, "class", labelObj.className + " vis-label");
          }
          label.setAttributeNS(null, "x", x);
          label.setAttributeNS(null, "y", y);
        }

        return point;
      };

      /**
       * draw a bar SVG element centered on the X coordinate
       *
       * @param {number} x
       * @param {number} y
       * @param {number} width
       * @param {number} height
       * @param {string} className
       * @param {Object} JSONcontainer
       * @param {Object} svgContainer
       * @param {string} style
       */
      exports.drawBar = function (x, y, width, height, className, JSONcontainer, svgContainer, style) {
        if (height != 0) {
          if (height < 0) {
            height *= -1;
            y -= height;
          }
          var rect = exports.getSVGElement('rect', JSONcontainer, svgContainer);
          rect.setAttributeNS(null, "x", x - 0.5 * width);
          rect.setAttributeNS(null, "y", y);
          rect.setAttributeNS(null, "width", width);
          rect.setAttributeNS(null, "height", height);
          rect.setAttributeNS(null, "class", className);
          if (style) {
            rect.setAttributeNS(null, "style", style);
          }
        }
      };

      /***/
    },
    /* 15 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.printStyle = undefined;

      var _stringify = __webpack_require__(19);

      var _stringify2 = _interopRequireDefault(_stringify);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);

      var errorFound = false;
      var allOptions = void 0;
      var printStyle = 'background: #FFeeee; color: #dd0000';
      /**
       *  Used to validate options.
       */

      var Validator = function () {
        /**
         * @ignore
         */
        function Validator() {
          (0, _classCallCheck3['default'])(this, Validator);
        }

        /**
         * Main function to be called
         * @param {Object} options
         * @param {Object} referenceOptions
         * @param {Object} subObject
         * @returns {boolean}
         * @static
         */

        (0, _createClass3['default'])(Validator, null, [{
          key: 'validate',
          value: function validate(options, referenceOptions, subObject) {
            errorFound = false;
            allOptions = referenceOptions;
            var usedOptions = referenceOptions;
            if (subObject !== undefined) {
              usedOptions = referenceOptions[subObject];
            }
            Validator.parse(options, usedOptions, []);
            return errorFound;
          }

          /**
           * Will traverse an object recursively and check every value
           * @param {Object} options
           * @param {Object} referenceOptions
           * @param {array} path    | where to look for the actual option
           * @static
           */

        }, {
          key: 'parse',
          value: function parse(options, referenceOptions, path) {
            for (var option in options) {
              if (options.hasOwnProperty(option)) {
                Validator.check(option, options, referenceOptions, path);
              }
            }
          }

          /**
           * Check every value. If the value is an object, call the parse function on that object.
           * @param {string} option
           * @param {Object} options
           * @param {Object} referenceOptions
           * @param {array} path    | where to look for the actual option
           * @static
           */

        }, {
          key: 'check',
          value: function check(option, options, referenceOptions, path) {
            if (referenceOptions[option] === undefined && referenceOptions.__any__ === undefined) {
              Validator.getSuggestion(option, referenceOptions, path);
              return;
            }

            var referenceOption = option;
            var is_object = true;

            if (referenceOptions[option] === undefined && referenceOptions.__any__ !== undefined) {
              // NOTE: This only triggers if the __any__ is in the top level of the options object.
              //       THAT'S A REALLY BAD PLACE TO ALLOW IT!!!!
              // TODO: Examine if needed, remove if possible

              // __any__ is a wildcard. Any value is accepted and will be further analysed by reference.
              referenceOption = '__any__';

              // if the any-subgroup is not a predefined object in the configurator,
              // we do not look deeper into the object.
              is_object = Validator.getType(options[option]) === 'object';
            } else {
              // Since all options in the reference are objects, we can check whether 
              // they are supposed to be the object to look for the __type__ field.
              // if this is an object, we check if the correct type has been supplied to account for shorthand options.
            }

            var refOptionObj = referenceOptions[referenceOption];
            if (is_object && refOptionObj.__type__ !== undefined) {
              refOptionObj = refOptionObj.__type__;
            }

            Validator.checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path);
          }

          /**
           *
           * @param {string}  option           | the option property
           * @param {Object}  options          | The supplied options object
           * @param {Object}  referenceOptions | The reference options containing all options and their allowed formats
           * @param {string}  referenceOption  | Usually this is the same as option, except when handling an __any__ tag.
           * @param {string}  refOptionObj     | This is the type object from the reference options
           * @param {Array}   path             | where in the object is the option
           * @static
           */

        }, {
          key: 'checkFields',
          value: function checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path) {
            var log = function log(message) {
              console.log('%c' + message + Validator.printLocation(path, option), printStyle);
            };

            var optionType = Validator.getType(options[option]);
            var refOptionType = refOptionObj[optionType];

            if (refOptionType !== undefined) {
              // if the type is correct, we check if it is supposed to be one of a few select values
              if (Validator.getType(refOptionType) === 'array' && refOptionType.indexOf(options[option]) === -1) {
                log('Invalid option detected in "' + option + '".' + ' Allowed values are:' + Validator.print(refOptionType) + ' not "' + options[option] + '". ');
                errorFound = true;
              } else if (optionType === 'object' && referenceOption !== "__any__") {
                path = util.copyAndExtendArray(path, option);
                Validator.parse(options[option], referenceOptions[referenceOption], path);
              }
            } else if (refOptionObj['any'] === undefined) {
              // type of the field is incorrect and the field cannot be any
              log('Invalid type received for "' + option + '". Expected: ' + Validator.print((0, _keys2['default'])(refOptionObj)) + '. Received [' + optionType + '] "' + options[option] + '"');
              errorFound = true;
            }
          }

          /**
           *
           * @param {Object|boolean|number|string|Array.<number>|Date|Node|Moment|undefined|null} object
           * @returns {string}
           * @static
           */

        }, {
          key: 'getType',
          value: function getType(object) {
            var type = typeof object === 'undefined' ? 'undefined' : (0, _typeof3['default'])(object);

            if (type === 'object') {
              if (object === null) {
                return 'null';
              }
              if (object instanceof Boolean) {
                return 'boolean';
              }
              if (object instanceof Number) {
                return 'number';
              }
              if (object instanceof String) {
                return 'string';
              }
              if (Array.isArray(object)) {
                return 'array';
              }
              if (object instanceof Date) {
                return 'date';
              }
              if (object.nodeType !== undefined) {
                return 'dom';
              }
              if (object._isAMomentObject === true) {
                return 'moment';
              }
              return 'object';
            } else if (type === 'number') {
              return 'number';
            } else if (type === 'boolean') {
              return 'boolean';
            } else if (type === 'string') {
              return 'string';
            } else if (type === undefined) {
              return 'undefined';
            }
            return type;
          }

          /**
           * @param {string} option
           * @param {Object} options
           * @param {Array.<string>} path
           * @static
           */

        }, {
          key: 'getSuggestion',
          value: function getSuggestion(option, options, path) {
            var localSearch = Validator.findInOptions(option, options, path, false);
            var globalSearch = Validator.findInOptions(option, allOptions, [], true);

            var localSearchThreshold = 8;
            var globalSearchThreshold = 4;

            var msg = void 0;
            if (localSearch.indexMatch !== undefined) {
              msg = ' in ' + Validator.printLocation(localSearch.path, option, '') + 'Perhaps it was incomplete? Did you mean: "' + localSearch.indexMatch + '"?\n\n';
            } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {
              msg = ' in ' + Validator.printLocation(localSearch.path, option, '') + 'Perhaps it was misplaced? Matching option found at: ' + Validator.printLocation(globalSearch.path, globalSearch.closestMatch, '');
            } else if (localSearch.distance <= localSearchThreshold) {
              msg = '. Did you mean "' + localSearch.closestMatch + '"?' + Validator.printLocation(localSearch.path, option);
            } else {
              msg = '. Did you mean one of these: ' + Validator.print((0, _keys2['default'])(options)) + Validator.printLocation(path, option);
            }

            console.log('%cUnknown option detected: "' + option + '"' + msg, printStyle);
            errorFound = true;
          }

          /**
           * traverse the options in search for a match.
           * @param {string} option
           * @param {Object} options
           * @param {Array} path    | where to look for the actual option
           * @param {boolean} [recursive=false]
           * @returns {{closestMatch: string, path: Array, distance: number}}
           * @static
           */

        }, {
          key: 'findInOptions',
          value: function findInOptions(option, options, path) {
            var recursive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            var min = 1e9;
            var closestMatch = '';
            var closestMatchPath = [];
            var lowerCaseOption = option.toLowerCase();
            var indexMatch = undefined;
            for (var op in options) {
              // eslint-disable-line guard-for-in
              var distance = void 0;
              if (options[op].__type__ !== undefined && recursive === true) {
                var result = Validator.findInOptions(option, options[op], util.copyAndExtendArray(path, op));
                if (min > result.distance) {
                  closestMatch = result.closestMatch;
                  closestMatchPath = result.path;
                  min = result.distance;
                  indexMatch = result.indexMatch;
                }
              } else {
                if (op.toLowerCase().indexOf(lowerCaseOption) !== -1) {
                  indexMatch = op;
                }
                distance = Validator.levenshteinDistance(option, op);
                if (min > distance) {
                  closestMatch = op;
                  closestMatchPath = util.copyArray(path);
                  min = distance;
                }
              }
            }
            return { closestMatch: closestMatch, path: closestMatchPath, distance: min, indexMatch: indexMatch };
          }

          /**
           * @param {Array.<string>} path
           * @param {Object} option
           * @param {string} prefix
           * @returns {String}
           * @static
           */

        }, {
          key: 'printLocation',
          value: function printLocation(path, option) {
            var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Problem value found at: \n';

            var str = '\n\n' + prefix + 'options = {\n';
            for (var i = 0; i < path.length; i++) {
              for (var j = 0; j < i + 1; j++) {
                str += '  ';
              }
              str += path[i] + ': {\n';
            }
            for (var _j = 0; _j < path.length + 1; _j++) {
              str += '  ';
            }
            str += option + '\n';
            for (var _i = 0; _i < path.length + 1; _i++) {
              for (var _j2 = 0; _j2 < path.length - _i; _j2++) {
                str += '  ';
              }
              str += '}\n';
            }
            return str + '\n\n';
          }

          /**
           * @param {Object} options
           * @returns {String}
           * @static
           */

        }, {
          key: 'print',
          value: function print(options) {
            return (0, _stringify2['default'])(options).replace(/(\")|(\[)|(\])|(,"__type__")/g, "").replace(/(\,)/g, ', ');
          }

          /**
           *  Compute the edit distance between the two given strings
           * http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript
           *
           * Copyright (c) 2011 Andrei Mackenzie
           *
           * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
           *
           * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
           *
           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
           *
           * @param {string} a
           * @param {string} b
           * @returns {Array.<Array.<number>>}}
           * @static
           */

        }, {
          key: 'levenshteinDistance',
          value: function levenshteinDistance(a, b) {
            if (a.length === 0) return b.length;
            if (b.length === 0) return a.length;

            var matrix = [];

            // increment along the first column of each row
            var i;
            for (i = 0; i <= b.length; i++) {
              matrix[i] = [i];
            }

            // increment each column in the first row
            var j;
            for (j = 0; j <= a.length; j++) {
              matrix[0][j] = j;
            }

            // Fill in the rest of the matrix
            for (i = 1; i <= b.length; i++) {
              for (j = 1; j <= a.length; j++) {
                if (b.charAt(i - 1) == a.charAt(j - 1)) {
                  matrix[i][j] = matrix[i - 1][j - 1];
                } else {
                  matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution
                  Math.min(matrix[i][j - 1] + 1, // insertion
                  matrix[i - 1][j] + 1)); // deletion
                }
              }
            }

            return matrix[b.length][a.length];
          }
        }]);
        return Validator;
      }();

      exports['default'] = Validator;
      exports.printStyle = printStyle;

      /***/
    },
    /* 16 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(2);

      /**
       * Prototype for visual components
       * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} [body]
       * @param {Object} [options]
       */
      function Component(body, options) {
        // eslint-disable-line no-unused-vars
        this.options = null;
        this.props = null;
      }

      /**
       * Set options for the component. The new options will be merged into the
       * current options.
       * @param {Object} options
       */
      Component.prototype.setOptions = function (options) {
        if (options) {
          util.extend(this.options, options);
        }
      };

      /**
       * Repaint the component
       * @return {boolean} Returns true if the component is resized
       */
      Component.prototype.redraw = function () {
        // should be implemented by the component
        return false;
      };

      /**
       * Destroy the component. Cleanup DOM and event listeners
       */
      Component.prototype.destroy = function () {
        // should be implemented by the component
      };

      /**
       * Test whether the component is resized since the last time _isResized() was
       * called.
       * @return {Boolean} Returns true if the component is resized
       * @protected
       */
      Component.prototype._isResized = function () {
        var resized = this.props._previousWidth !== this.props.width || this.props._previousHeight !== this.props.height;

        this.props._previousWidth = this.props.width;
        this.props._previousHeight = this.props.height;

        return resized;
      };

      module.exports = Component;

      /***/
    },
    /* 17 */
    /***/function (module, exports, __webpack_require__) {

      var global = __webpack_require__(18);
      var core = __webpack_require__(7);
      var ctx = __webpack_require__(80);
      var hide = __webpack_require__(26);
      var PROTOTYPE = 'prototype';

      var $export = function $export(type, name, source) {
        var IS_FORCED = type & $export.F;
        var IS_GLOBAL = type & $export.G;
        var IS_STATIC = type & $export.S;
        var IS_PROTO = type & $export.P;
        var IS_BIND = type & $export.B;
        var IS_WRAP = type & $export.W;
        var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
        var expProto = exports[PROTOTYPE];
        var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
        var key, own, out;
        if (IS_GLOBAL) source = name;
        for (key in source) {
          // contains in native
          own = !IS_FORCED && target && target[key] !== undefined;
          if (own && key in exports) continue;
          // export native or passed
          out = own ? target[key] : source[key];
          // prevent global pollution for namespaces
          exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
          // bind timers to global for call from export context
          : IS_BIND && own ? ctx(out, global)
          // wrap global constructors for prevent change them in library
          : IS_WRAP && target[key] == out ? function (C) {
            var F = function F(a, b, c) {
              if (this instanceof C) {
                switch (arguments.length) {
                  case 0:
                    return new C();
                  case 1:
                    return new C(a);
                  case 2:
                    return new C(a, b);
                }return new C(a, b, c);
              }return C.apply(this, arguments);
            };
            F[PROTOTYPE] = C[PROTOTYPE];
            return F;
            // make static versions for prototype methods
          }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
          // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
          if (IS_PROTO) {
            (exports.virtual || (exports.virtual = {}))[key] = out;
            // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
            if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
          }
        }
      };
      // type bitmap
      $export.F = 1; // forced
      $export.G = 2; // global
      $export.S = 4; // static
      $export.P = 8; // proto
      $export.B = 16; // bind
      $export.W = 32; // wrap
      $export.U = 64; // safe
      $export.R = 128; // real proto method for `library`
      module.exports = $export;

      /***/
    },
    /* 18 */
    /***/function (module, exports) {

      // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
      var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
      // eslint-disable-next-line no-new-func
      : Function('return this')();
      if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


      /***/
    },
    /* 19 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = { "default": __webpack_require__(160), __esModule: true };

      /***/
    },
    /* 20 */
    /***/function (module, exports, __webpack_require__) {

      var anObject = __webpack_require__(27);
      var IE8_DOM_DEFINE = __webpack_require__(81);
      var toPrimitive = __webpack_require__(53);
      var dP = _defineProperty4['default'];

      exports.f = __webpack_require__(21) ? _defineProperty4['default'] : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE) try {
          return dP(O, P, Attributes);
        } catch (e) {/* empty */}
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
      };

      /***/
    },
    /* 21 */
    /***/function (module, exports, __webpack_require__) {

      // Thank's IE8 for his funny defineProperty
      module.exports = !__webpack_require__(28)(function () {
        return Object.defineProperty({}, 'a', { get: function get() {
            return 7;
          } }).a != 7;
      });

      /***/
    },
    /* 22 */
    /***/function (module, exports) {

      var hasOwnProperty = {}.hasOwnProperty;
      module.exports = function (it, key) {
        return hasOwnProperty.call(it, key);
      };

      /***/
    },
    /* 23 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * The Base class for all Nodes.
       */
      var NodeBase = function () {
        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function NodeBase(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, NodeBase);

          this.body = body;
          this.labelModule = labelModule;
          this.setOptions(options);
          this.top = undefined;
          this.left = undefined;
          this.height = undefined;
          this.width = undefined;
          this.radius = undefined;
          this.margin = undefined;
          this.refreshNeeded = true;
          this.boundingBox = { top: 0, left: 0, right: 0, bottom: 0 };
        }

        /**
         *
         * @param {Object} options
         */

        (0, _createClass3['default'])(NodeBase, [{
          key: 'setOptions',
          value: function setOptions(options) {
            this.options = options;
          }

          /**
           *
           * @param {Label} labelModule
           * @private
           */

        }, {
          key: '_setMargins',
          value: function _setMargins(labelModule) {
            this.margin = {};
            if (this.options.margin) {
              if ((0, _typeof3['default'])(this.options.margin) == 'object') {
                this.margin.top = this.options.margin.top;
                this.margin.right = this.options.margin.right;
                this.margin.bottom = this.options.margin.bottom;
                this.margin.left = this.options.margin.left;
              } else {
                this.margin.top = this.options.margin;
                this.margin.right = this.options.margin;
                this.margin.bottom = this.options.margin;
                this.margin.left = this.options.margin;
              }
            }
            labelModule.adjustSizes(this.margin);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           * @private
           */

        }, {
          key: '_distanceToBorder',
          value: function _distanceToBorder(ctx, angle) {
            var borderWidth = this.options.borderWidth;
            this.resize(ctx);
            return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'enableShadow',
          value: function enableShadow(ctx, values) {
            if (values.shadow) {
              ctx.shadowColor = values.shadowColor;
              ctx.shadowBlur = values.shadowSize;
              ctx.shadowOffsetX = values.shadowX;
              ctx.shadowOffsetY = values.shadowY;
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'disableShadow',
          value: function disableShadow(ctx, values) {
            if (values.shadow) {
              ctx.shadowColor = 'rgba(0,0,0,0)';
              ctx.shadowBlur = 0;
              ctx.shadowOffsetX = 0;
              ctx.shadowOffsetY = 0;
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'enableBorderDashes',
          value: function enableBorderDashes(ctx, values) {
            if (values.borderDashes !== false) {
              if (ctx.setLineDash !== undefined) {
                var dashes = values.borderDashes;
                if (dashes === true) {
                  dashes = [5, 15];
                }
                ctx.setLineDash(dashes);
              } else {
                console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
                this.options.shapeProperties.borderDashes = false;
                values.borderDashes = false;
              }
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'disableBorderDashes',
          value: function disableBorderDashes(ctx, values) {
            if (values.borderDashes !== false) {
              if (ctx.setLineDash !== undefined) {
                ctx.setLineDash([0]);
              } else {
                console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
                this.options.shapeProperties.borderDashes = false;
                values.borderDashes = false;
              }
            }
          }

          /**
           * Determine if the shape of a node needs to be recalculated.
           *
           * @param {boolean} selected
           * @param {boolean} hover
           * @returns {boolean}
           * @protected
           */

        }, {
          key: 'needsRefresh',
          value: function needsRefresh(selected, hover) {
            if (this.refreshNeeded === true) {
              // This is probably not the best location to reset this member.
              // However, in the current logic, it is the most convenient one.
              this.refreshNeeded = false;
              return true;
            }

            return this.width === undefined || this.labelModule.differentState(selected, hover);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'initContextForDraw',
          value: function initContextForDraw(ctx, values) {
            var borderWidth = values.borderWidth / this.body.view.scale;

            ctx.lineWidth = Math.min(this.width, borderWidth);
            ctx.strokeStyle = values.borderColor;
            ctx.fillStyle = values.color;
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'performStroke',
          value: function performStroke(ctx, values) {
            var borderWidth = values.borderWidth / this.body.view.scale;

            //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
            ctx.save();
            // if borders are zero width, they will be drawn with width 1 by default. This prevents that
            if (borderWidth > 0) {
              this.enableBorderDashes(ctx, values);
              //draw the border
              ctx.stroke();
              //disable dashed border for other elements
              this.disableBorderDashes(ctx, values);
            }
            ctx.restore();
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'performFill',
          value: function performFill(ctx, values) {
            // draw shadow if enabled
            this.enableShadow(ctx, values);
            // draw the background
            ctx.fill();
            // disable shadows for other elements.
            this.disableShadow(ctx, values);

            this.performStroke(ctx, values);
          }

          /**
           *
           * @param {number} margin
           * @private
           */

        }, {
          key: '_addBoundingBoxMargin',
          value: function _addBoundingBoxMargin(margin) {
            this.boundingBox.left -= margin;
            this.boundingBox.top -= margin;
            this.boundingBox.bottom += margin;
            this.boundingBox.right += margin;
          }

          /**
           * Actual implementation of this method call.
           *
           * Doing it like this makes it easier to override
           * in the child classes.
           *
           * @param {number} x width
           * @param {number} y height
           * @param {CanvasRenderingContext2D} ctx
           * @param {boolean} selected
           * @param {boolean} hover
           * @private
           */

        }, {
          key: '_updateBoundingBox',
          value: function _updateBoundingBox(x, y, ctx, selected, hover) {
            if (ctx !== undefined) {
              this.resize(ctx, selected, hover);
            }

            this.left = x - this.width / 2;
            this.top = y - this.height / 2;

            this.boundingBox.left = this.left;
            this.boundingBox.top = this.top;
            this.boundingBox.bottom = this.top + this.height;
            this.boundingBox.right = this.left + this.width;
          }

          /**
           * Default implementation of this method call.
           * This acts as a stub which can be overridden.
           *
           * @param {number} x width
           * @param {number} y height
           * @param {CanvasRenderingContext2D} ctx
           * @param {boolean} selected
           * @param {boolean} hover
           */

        }, {
          key: 'updateBoundingBox',
          value: function updateBoundingBox(x, y, ctx, selected, hover) {
            this._updateBoundingBox(x, y, ctx, selected, hover);
          }

          /**
           * Determine the dimensions to use for nodes with an internal label
           *
           * Currently, these are: Circle, Ellipse, Database, Box
           * The other nodes have external labels, and will not call this method
           *
           * If there is no label, decent default values are supplied.
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {boolean} [selected]
           * @param {boolean} [hover]
           * @returns {{width:number, height:number}}
           */

        }, {
          key: 'getDimensionsFromLabel',
          value: function getDimensionsFromLabel(ctx, selected, hover) {
            // NOTE: previously 'textSize' was not put in 'this' for Ellipse
            // TODO: examine the consequences.
            this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
            var width = this.textSize.width;
            var height = this.textSize.height;

            var DEFAULT_SIZE = 14;
            if (width === 0) {
              // This happens when there is no label text set
              width = DEFAULT_SIZE; // use a decent default
              height = DEFAULT_SIZE; // if width zero, then height also always zero
            }

            return { width: width, height: height };
          }
        }]);
        return NodeBase;
      }();

      exports['default'] = NodeBase;

      /***/
    },
    /* 24 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _NodeBase2 = __webpack_require__(23);

      var _NodeBase3 = _interopRequireDefault(_NodeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * Base class for constructing Node/Cluster Shapes.
       *
       * @extends NodeBase
       */
      var ShapeBase = function (_NodeBase) {
        (0, _inherits3['default'])(ShapeBase, _NodeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function ShapeBase(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, ShapeBase);
          return (0, _possibleConstructorReturn3['default'])(this, (ShapeBase.__proto__ || (0, _getPrototypeOf2['default'])(ShapeBase)).call(this, options, body, labelModule));
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {boolean} [selected]
         * @param {boolean} [hover]
         * @param {Object} [values={size: this.options.size}]
         */

        (0, _createClass3['default'])(ShapeBase, [{
          key: 'resize',
          value: function resize(ctx) {
            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;
            var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { size: this.options.size };

            if (this.needsRefresh(selected, hover)) {
              this.labelModule.getTextSize(ctx, selected, hover);
              var size = 2 * values.size;
              this.width = size;
              this.height = size;
              this.radius = 0.5 * this.width;
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {string} shape
           * @param {number} sizeMultiplier - Unused! TODO: Remove next major release
           * @param {number} x
           * @param {number} y
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           * @private
           */

        }, {
          key: '_drawShape',
          value: function _drawShape(ctx, shape, sizeMultiplier, x, y, selected, hover, values) {
            this.resize(ctx, selected, hover, values);
            this.left = x - this.width / 2;
            this.top = y - this.height / 2;

            this.initContextForDraw(ctx, values);
            ctx[shape](x, y, values.size);
            this.performFill(ctx, values);

            if (this.options.label !== undefined) {
              // Need to call following here in order to ensure value for `this.labelModule.size.height`
              this.labelModule.calculateLabelSize(ctx, selected, hover, x, y, 'hanging');
              var yLabel = y + 0.5 * this.height + 0.5 * this.labelModule.size.height;
              this.labelModule.draw(ctx, x, yLabel, selected, hover, 'hanging');
            }

            this.updateBoundingBox(x, y);
          }

          /**
           *
           * @param {number} x
           * @param {number} y
           */

        }, {
          key: 'updateBoundingBox',
          value: function updateBoundingBox(x, y) {
            this.boundingBox.top = y - this.options.size;
            this.boundingBox.left = x - this.options.size;
            this.boundingBox.right = x + this.options.size;
            this.boundingBox.bottom = y + this.options.size;

            if (this.options.label !== undefined && this.labelModule.size.width > 0) {
              this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
              this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
              this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height);
            }
          }
        }]);
        return ShapeBase;
      }(_NodeBase3['default']);

      exports['default'] = ShapeBase;

      /***/
    },
    /* 25 */
    /***/function (module, exports, __webpack_require__) {

      // to indexed object, toObject with fallback for non-array-like ES3 strings
      var IObject = __webpack_require__(78);
      var defined = __webpack_require__(51);
      module.exports = function (it) {
        return IObject(defined(it));
      };

      /***/
    },
    /* 26 */
    /***/function (module, exports, __webpack_require__) {

      var dP = __webpack_require__(20);
      var createDesc = __webpack_require__(39);
      module.exports = __webpack_require__(21) ? function (object, key, value) {
        return dP.f(object, key, createDesc(1, value));
      } : function (object, key, value) {
        object[key] = value;
        return object;
      };

      /***/
    },
    /* 27 */
    /***/function (module, exports, __webpack_require__) {

      var isObject = __webpack_require__(32);
      module.exports = function (it) {
        if (!isObject(it)) throw TypeError(it + ' is not an object!');
        return it;
      };

      /***/
    },
    /* 28 */
    /***/function (module, exports) {

      module.exports = function (exec) {
        try {
          return !!exec();
        } catch (e) {
          return true;
        }
      };

      /***/
    },
    /* 29 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = { "default": __webpack_require__(138), __esModule: true };

      /***/
    },
    /* 30 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      exports.__esModule = true;

      var _isIterable2 = __webpack_require__(188);

      var _isIterable3 = _interopRequireDefault(_isIterable2);

      var _getIterator2 = __webpack_require__(77);

      var _getIterator3 = _interopRequireDefault(_getIterator2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      exports['default'] = function () {
        function sliceIterator(arr, i) {
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = undefined;

          try {
            for (var _i = (0, _getIterator3['default'])(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);

              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"]) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }

          return _arr;
        }

        return function (arr, i) {
          if (Array.isArray(arr)) {
            return arr;
          } else if ((0, _isIterable3['default'])(Object(arr))) {
            return sliceIterator(arr, i);
          } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }
        };
      }();

      /***/
    },
    /* 31 */
    /***/function (module, exports) {

      module.exports = {};

      /***/
    },
    /* 32 */
    /***/function (module, exports) {

      module.exports = function (it) {
        return (typeof it === 'undefined' ? 'undefined' : (0, _typeof6['default'])(it)) === 'object' ? it !== null : typeof it === 'function';
      };

      /***/
    },
    /* 33 */
    /***/function (module, exports, __webpack_require__) {

      // 19.1.2.14 / 15.2.3.14 Object.keys(O)
      var $keys = __webpack_require__(84);
      var enumBugKeys = __webpack_require__(58);

      module.exports = _keys4['default'] || function keys(O) {
        return $keys(O, enumBugKeys);
      };

      /***/
    },
    /* 34 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       * @prototype Point3d
       * @param {number} [x]
       * @param {number} [y]
       * @param {number} [z]
       */

      function Point3d(x, y, z) {
        this.x = x !== undefined ? x : 0;
        this.y = y !== undefined ? y : 0;
        this.z = z !== undefined ? z : 0;
      }

      /**
       * Subtract the two provided points, returns a-b
       * @param {Point3d} a
       * @param {Point3d} b
       * @return {Point3d} a-b
       */
      Point3d.subtract = function (a, b) {
        var sub = new Point3d();
        sub.x = a.x - b.x;
        sub.y = a.y - b.y;
        sub.z = a.z - b.z;
        return sub;
      };

      /**
       * Add the two provided points, returns a+b
       * @param {Point3d} a
       * @param {Point3d} b
       * @return {Point3d} a+b
       */
      Point3d.add = function (a, b) {
        var sum = new Point3d();
        sum.x = a.x + b.x;
        sum.y = a.y + b.y;
        sum.z = a.z + b.z;
        return sum;
      };

      /**
       * Calculate the average of two 3d points
       * @param {Point3d} a
       * @param {Point3d} b
       * @return {Point3d} The average, (a+b)/2
       */
      Point3d.avg = function (a, b) {
        return new Point3d((a.x + b.x) / 2, (a.y + b.y) / 2, (a.z + b.z) / 2);
      };

      /**
       * Calculate the cross product of the two provided points, returns axb
       * Documentation: http://en.wikipedia.org/wiki/Cross_product
       * @param {Point3d} a
       * @param {Point3d} b
       * @return {Point3d} cross product axb
       */
      Point3d.crossProduct = function (a, b) {
        var crossproduct = new Point3d();

        crossproduct.x = a.y * b.z - a.z * b.y;
        crossproduct.y = a.z * b.x - a.x * b.z;
        crossproduct.z = a.x * b.y - a.y * b.x;

        return crossproduct;
      };

      /**
       * Rtrieve the length of the vector (or the distance from this point to the origin
       * @return {number}  length
       */
      Point3d.prototype.length = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      };

      module.exports = Point3d;

      /***/
    },
    /* 35 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
      /**
       * Created by Alex on 11/6/2014.
       */

      // https://github.com/umdjs/umd/blob/master/returnExports.js#L40-L60
      // if the module has no dependencies, the above pattern can be simplified to
      (function (root, factory) {
        if (true) {
          // AMD. Register as an anonymous module.
          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if ((typeof exports === 'undefined' ? 'undefined' : (0, _typeof6['default'])(exports)) === 'object') {
          // Node. Does not work with strict CommonJS, but
          // only CommonJS-like environments that support module.exports,
          // like Node.
          module.exports = factory();
        } else {
          // Browser globals (root is window)
          root.keycharm = factory();
        }
      })(this, function () {

        function keycharm(options) {
          var preventDefault = options && options.preventDefault || false;

          var container = options && options.container || window;

          var _exportFunctions = {};
          var _bound = { keydown: {}, keyup: {} };
          var _keys = {};
          var i;

          // a - z
          for (i = 97; i <= 122; i++) {
            _keys[String.fromCharCode(i)] = { code: 65 + (i - 97), shift: false };
          }
          // A - Z
          for (i = 65; i <= 90; i++) {
            _keys[String.fromCharCode(i)] = { code: i, shift: true };
          }
          // 0 - 9
          for (i = 0; i <= 9; i++) {
            _keys['' + i] = { code: 48 + i, shift: false };
          }
          // F1 - F12
          for (i = 1; i <= 12; i++) {
            _keys['F' + i] = { code: 111 + i, shift: false };
          }
          // num0 - num9
          for (i = 0; i <= 9; i++) {
            _keys['num' + i] = { code: 96 + i, shift: false };
          }

          // numpad misc
          _keys['num*'] = { code: 106, shift: false };
          _keys['num+'] = { code: 107, shift: false };
          _keys['num-'] = { code: 109, shift: false };
          _keys['num/'] = { code: 111, shift: false };
          _keys['num.'] = { code: 110, shift: false };
          // arrows
          _keys['left'] = { code: 37, shift: false };
          _keys['up'] = { code: 38, shift: false };
          _keys['right'] = { code: 39, shift: false };
          _keys['down'] = { code: 40, shift: false };
          // extra keys
          _keys['space'] = { code: 32, shift: false };
          _keys['enter'] = { code: 13, shift: false };
          _keys['shift'] = { code: 16, shift: undefined };
          _keys['esc'] = { code: 27, shift: false };
          _keys['backspace'] = { code: 8, shift: false };
          _keys['tab'] = { code: 9, shift: false };
          _keys['ctrl'] = { code: 17, shift: false };
          _keys['alt'] = { code: 18, shift: false };
          _keys['delete'] = { code: 46, shift: false };
          _keys['pageup'] = { code: 33, shift: false };
          _keys['pagedown'] = { code: 34, shift: false };
          // symbols
          _keys['='] = { code: 187, shift: false };
          _keys['-'] = { code: 189, shift: false };
          _keys[']'] = { code: 221, shift: false };
          _keys['['] = { code: 219, shift: false };

          var down = function down(event) {
            handleEvent(event, 'keydown');
          };
          var up = function up(event) {
            handleEvent(event, 'keyup');
          };

          // handle the actualy bound key with the event
          var handleEvent = function handleEvent(event, type) {
            if (_bound[type][event.keyCode] !== undefined) {
              var bound = _bound[type][event.keyCode];
              for (var i = 0; i < bound.length; i++) {
                if (bound[i].shift === undefined) {
                  bound[i].fn(event);
                } else if (bound[i].shift == true && event.shiftKey == true) {
                  bound[i].fn(event);
                } else if (bound[i].shift == false && event.shiftKey == false) {
                  bound[i].fn(event);
                }
              }

              if (preventDefault == true) {
                event.preventDefault();
              }
            }
          };

          // bind a key to a callback
          _exportFunctions.bind = function (key, callback, type) {
            if (type === undefined) {
              type = 'keydown';
            }
            if (_keys[key] === undefined) {
              throw new Error("unsupported key: " + key);
            }
            if (_bound[type][_keys[key].code] === undefined) {
              _bound[type][_keys[key].code] = [];
            }
            _bound[type][_keys[key].code].push({ fn: callback, shift: _keys[key].shift });
          };

          // bind all keys to a call back (demo purposes)
          _exportFunctions.bindAll = function (callback, type) {
            if (type === undefined) {
              type = 'keydown';
            }
            for (var key in _keys) {
              if (_keys.hasOwnProperty(key)) {
                _exportFunctions.bind(key, callback, type);
              }
            }
          };

          // get the key label from an event
          _exportFunctions.getKey = function (event) {
            for (var key in _keys) {
              if (_keys.hasOwnProperty(key)) {
                if (event.shiftKey == true && _keys[key].shift == true && event.keyCode == _keys[key].code) {
                  return key;
                } else if (event.shiftKey == false && _keys[key].shift == false && event.keyCode == _keys[key].code) {
                  return key;
                } else if (event.keyCode == _keys[key].code && key == 'shift') {
                  return key;
                }
              }
            }
            return "unknown key, currently not supported";
          };

          // unbind either a specific callback from a key or all of them (by leaving callback undefined)
          _exportFunctions.unbind = function (key, callback, type) {
            if (type === undefined) {
              type = 'keydown';
            }
            if (_keys[key] === undefined) {
              throw new Error("unsupported key: " + key);
            }
            if (callback !== undefined) {
              var newBindings = [];
              var bound = _bound[type][_keys[key].code];
              if (bound !== undefined) {
                for (var i = 0; i < bound.length; i++) {
                  if (!(bound[i].fn == callback && bound[i].shift == _keys[key].shift)) {
                    newBindings.push(_bound[type][_keys[key].code][i]);
                  }
                }
              }
              _bound[type][_keys[key].code] = newBindings;
            } else {
              _bound[type][_keys[key].code] = [];
            }
          };

          // reset all bound variables.
          _exportFunctions.reset = function () {
            _bound = { keydown: {}, keyup: {} };
          };

          // unbind all listeners and reset all variables.
          _exportFunctions.destroy = function () {
            _bound = { keydown: {}, keyup: {} };
            container.removeEventListener('keydown', down, true);
            container.removeEventListener('keyup', up, true);
          };

          // create listeners.
          container.addEventListener('keydown', down, true);
          container.addEventListener('keyup', up, true);

          // return the public functions.
          return _exportFunctions;
        }

        return keycharm;
      });

      /***/
    },
    /* 36 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       * used in Core to convert the options into a volatile variable
       * 
       * @param {function} moment
       * @param {Object} body
       * @param {Array | Object} hiddenDates
       * @returns {number}
       */

      exports.convertHiddenOptions = function (moment, body, hiddenDates) {
        if (hiddenDates && !Array.isArray(hiddenDates)) {
          return exports.convertHiddenOptions(moment, body, [hiddenDates]);
        }

        body.hiddenDates = [];
        if (hiddenDates) {
          if (Array.isArray(hiddenDates) == true) {
            for (var i = 0; i < hiddenDates.length; i++) {
              if (hiddenDates[i].repeat === undefined) {
                var dateItem = {};
                dateItem.start = moment(hiddenDates[i].start).toDate().valueOf();
                dateItem.end = moment(hiddenDates[i].end).toDate().valueOf();
                body.hiddenDates.push(dateItem);
              }
            }
            body.hiddenDates.sort(function (a, b) {
              return a.start - b.start;
            }); // sort by start time
          }
        }
      };

      /**
       * create new entrees for the repeating hidden dates
       *
       * @param {function} moment
       * @param {Object} body
       * @param {Array | Object} hiddenDates
       * @returns {null}
       */
      exports.updateHiddenDates = function (moment, body, hiddenDates) {
        if (hiddenDates && !Array.isArray(hiddenDates)) {
          return exports.updateHiddenDates(moment, body, [hiddenDates]);
        }

        if (hiddenDates && body.domProps.centerContainer.width !== undefined) {
          exports.convertHiddenOptions(moment, body, hiddenDates);

          var start = moment(body.range.start);
          var end = moment(body.range.end);

          var totalRange = body.range.end - body.range.start;
          var pixelTime = totalRange / body.domProps.centerContainer.width;

          for (var i = 0; i < hiddenDates.length; i++) {
            if (hiddenDates[i].repeat !== undefined) {
              var startDate = moment(hiddenDates[i].start);
              var endDate = moment(hiddenDates[i].end);

              if (startDate._d == "Invalid Date") {
                throw new Error("Supplied start date is not valid: " + hiddenDates[i].start);
              }
              if (endDate._d == "Invalid Date") {
                throw new Error("Supplied end date is not valid: " + hiddenDates[i].end);
              }

              var duration = endDate - startDate;
              if (duration >= 4 * pixelTime) {

                var offset = 0;
                var runUntil = end.clone();
                switch (hiddenDates[i].repeat) {
                  case "daily":
                    // case of time
                    if (startDate.day() != endDate.day()) {
                      offset = 1;
                    }
                    startDate.dayOfYear(start.dayOfYear());
                    startDate.year(start.year());
                    startDate.subtract(7, 'days');

                    endDate.dayOfYear(start.dayOfYear());
                    endDate.year(start.year());
                    endDate.subtract(7 - offset, 'days');

                    runUntil.add(1, 'weeks');
                    break;
                  case "weekly":
                    var dayOffset = endDate.diff(startDate, 'days');
                    var day = startDate.day();

                    // set the start date to the range.start
                    startDate.date(start.date());
                    startDate.month(start.month());
                    startDate.year(start.year());
                    endDate = startDate.clone();

                    // force
                    startDate.day(day);
                    endDate.day(day);
                    endDate.add(dayOffset, 'days');

                    startDate.subtract(1, 'weeks');
                    endDate.subtract(1, 'weeks');

                    runUntil.add(1, 'weeks');
                    break;
                  case "monthly":
                    if (startDate.month() != endDate.month()) {
                      offset = 1;
                    }
                    startDate.month(start.month());
                    startDate.year(start.year());
                    startDate.subtract(1, 'months');

                    endDate.month(start.month());
                    endDate.year(start.year());
                    endDate.subtract(1, 'months');
                    endDate.add(offset, 'months');

                    runUntil.add(1, 'months');
                    break;
                  case "yearly":
                    if (startDate.year() != endDate.year()) {
                      offset = 1;
                    }
                    startDate.year(start.year());
                    startDate.subtract(1, 'years');
                    endDate.year(start.year());
                    endDate.subtract(1, 'years');
                    endDate.add(offset, 'years');

                    runUntil.add(1, 'years');
                    break;
                  default:
                    console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:", hiddenDates[i].repeat);
                    return;
                }
                while (startDate < runUntil) {
                  body.hiddenDates.push({ start: startDate.valueOf(), end: endDate.valueOf() });
                  switch (hiddenDates[i].repeat) {
                    case "daily":
                      startDate.add(1, 'days');
                      endDate.add(1, 'days');
                      break;
                    case "weekly":
                      startDate.add(1, 'weeks');
                      endDate.add(1, 'weeks');
                      break;
                    case "monthly":
                      startDate.add(1, 'months');
                      endDate.add(1, 'months');
                      break;
                    case "yearly":
                      startDate.add(1, 'y');
                      endDate.add(1, 'y');
                      break;
                    default:
                      console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:", hiddenDates[i].repeat);
                      return;
                  }
                }
                body.hiddenDates.push({ start: startDate.valueOf(), end: endDate.valueOf() });
              }
            }
          }
          // remove duplicates, merge where possible
          exports.removeDuplicates(body);
          // ensure the new positions are not on hidden dates
          var startHidden = exports.isHidden(body.range.start, body.hiddenDates);
          var endHidden = exports.isHidden(body.range.end, body.hiddenDates);
          var rangeStart = body.range.start;
          var rangeEnd = body.range.end;
          if (startHidden.hidden == true) {
            rangeStart = body.range.startToFront == true ? startHidden.startDate - 1 : startHidden.endDate + 1;
          }
          if (endHidden.hidden == true) {
            rangeEnd = body.range.endToFront == true ? endHidden.startDate - 1 : endHidden.endDate + 1;
          }
          if (startHidden.hidden == true || endHidden.hidden == true) {
            body.range._applyRange(rangeStart, rangeEnd);
          }
        }
      };

      /**
       * remove duplicates from the hidden dates list. Duplicates are evil. They mess everything up.
       * Scales with N^2
       *
       * @param {Object} body
       */
      exports.removeDuplicates = function (body) {
        var hiddenDates = body.hiddenDates;
        var safeDates = [];
        for (var i = 0; i < hiddenDates.length; i++) {
          for (var j = 0; j < hiddenDates.length; j++) {
            if (i != j && hiddenDates[j].remove != true && hiddenDates[i].remove != true) {
              // j inside i
              if (hiddenDates[j].start >= hiddenDates[i].start && hiddenDates[j].end <= hiddenDates[i].end) {
                hiddenDates[j].remove = true;
              }
              // j start inside i
              else if (hiddenDates[j].start >= hiddenDates[i].start && hiddenDates[j].start <= hiddenDates[i].end) {
                  hiddenDates[i].end = hiddenDates[j].end;
                  hiddenDates[j].remove = true;
                }
                // j end inside i
                else if (hiddenDates[j].end >= hiddenDates[i].start && hiddenDates[j].end <= hiddenDates[i].end) {
                    hiddenDates[i].start = hiddenDates[j].start;
                    hiddenDates[j].remove = true;
                  }
            }
          }
        }

        for (i = 0; i < hiddenDates.length; i++) {
          if (hiddenDates[i].remove !== true) {
            safeDates.push(hiddenDates[i]);
          }
        }

        body.hiddenDates = safeDates;
        body.hiddenDates.sort(function (a, b) {
          return a.start - b.start;
        }); // sort by start time
      };

      exports.printDates = function (dates) {
        for (var i = 0; i < dates.length; i++) {
          console.log(i, new Date(dates[i].start), new Date(dates[i].end), dates[i].start, dates[i].end, dates[i].remove);
        }
      };

      /**
       * Used in TimeStep to avoid the hidden times.
       * @param {function} moment
       * @param {TimeStep} timeStep
       * @param {Date} previousTime
       */
      exports.stepOverHiddenDates = function (moment, timeStep, previousTime) {
        var stepInHidden = false;
        var currentValue = timeStep.current.valueOf();
        for (var i = 0; i < timeStep.hiddenDates.length; i++) {
          var startDate = timeStep.hiddenDates[i].start;
          var endDate = timeStep.hiddenDates[i].end;
          if (currentValue >= startDate && currentValue < endDate) {
            stepInHidden = true;
            break;
          }
        }

        if (stepInHidden == true && currentValue < timeStep._end.valueOf() && currentValue != previousTime) {
          var prevValue = moment(previousTime);
          var newValue = moment(endDate);
          //check if the next step should be major
          if (prevValue.year() != newValue.year()) {
            timeStep.switchedYear = true;
          } else if (prevValue.month() != newValue.month()) {
            timeStep.switchedMonth = true;
          } else if (prevValue.dayOfYear() != newValue.dayOfYear()) {
            timeStep.switchedDay = true;
          }

          timeStep.current = newValue;
        }
      };

      ///**
      // * Used in TimeStep to avoid the hidden times.
      // * @param timeStep
      // * @param previousTime
      // */
      //exports.checkFirstStep = function(timeStep) {
      //  var stepInHidden = false;
      //  var currentValue = timeStep.current.valueOf();
      //  for (var i = 0; i < timeStep.hiddenDates.length; i++) {
      //    var startDate = timeStep.hiddenDates[i].start;
      //    var endDate = timeStep.hiddenDates[i].end;
      //    if (currentValue >= startDate && currentValue < endDate) {
      //      stepInHidden = true;
      //      break;
      //    }
      //  }
      //
      //  if (stepInHidden == true && currentValue <= timeStep._end.valueOf()) {
      //    var newValue = moment(endDate);
      //    timeStep.current = newValue.toDate();
      //  }
      //};

      /**
       * replaces the Core toScreen methods
       *
       * @param {vis.Core} Core
       * @param {Date} time
       * @param {number} width
       * @returns {number}
       */
      exports.toScreen = function (Core, time, width) {
        var conversion;
        if (Core.body.hiddenDates.length == 0) {
          conversion = Core.range.conversion(width);
          return (time.valueOf() - conversion.offset) * conversion.scale;
        } else {
          var hidden = exports.isHidden(time, Core.body.hiddenDates);
          if (hidden.hidden == true) {
            time = hidden.startDate;
          }

          var duration = exports.getHiddenDurationBetween(Core.body.hiddenDates, Core.range.start, Core.range.end);
          if (time < Core.range.start) {
            conversion = Core.range.conversion(width, duration);
            var hiddenBeforeStart = exports.getHiddenDurationBeforeStart(Core.body.hiddenDates, time, conversion.offset);
            time = Core.options.moment(time).toDate().valueOf();
            time = time + hiddenBeforeStart;
            return -(conversion.offset - time.valueOf()) * conversion.scale;
          } else if (time > Core.range.end) {
            var rangeAfterEnd = { start: Core.range.start, end: time };
            time = exports.correctTimeForHidden(Core.options.moment, Core.body.hiddenDates, rangeAfterEnd, time);
            conversion = Core.range.conversion(width, duration);
            return (time.valueOf() - conversion.offset) * conversion.scale;
          } else {
            time = exports.correctTimeForHidden(Core.options.moment, Core.body.hiddenDates, Core.range, time);
            conversion = Core.range.conversion(width, duration);
            return (time.valueOf() - conversion.offset) * conversion.scale;
          }
        }
      };

      /**
       * Replaces the core toTime methods
       *
       * @param {vis.Core} Core
       * @param {number} x
       * @param {number} width
       * @returns {Date}
       */
      exports.toTime = function (Core, x, width) {
        if (Core.body.hiddenDates.length == 0) {
          var conversion = Core.range.conversion(width);
          return new Date(x / conversion.scale + conversion.offset);
        } else {
          var hiddenDuration = exports.getHiddenDurationBetween(Core.body.hiddenDates, Core.range.start, Core.range.end);
          var totalDuration = Core.range.end - Core.range.start - hiddenDuration;
          var partialDuration = totalDuration * x / width;
          var accumulatedHiddenDuration = exports.getAccumulatedHiddenDuration(Core.body.hiddenDates, Core.range, partialDuration);

          return new Date(accumulatedHiddenDuration + partialDuration + Core.range.start);
        }
      };

      /**
       * Support function
       *
       * @param {Array.<{start: Window.start, end: *}>} hiddenDates
       * @param {number} start
       * @param {number} end
       * @returns {number}
       */
      exports.getHiddenDurationBetween = function (hiddenDates, start, end) {
        var duration = 0;
        for (var i = 0; i < hiddenDates.length; i++) {
          var startDate = hiddenDates[i].start;
          var endDate = hiddenDates[i].end;
          // if time after the cutout, and the
          if (startDate >= start && endDate < end) {
            duration += endDate - startDate;
          }
        }
        return duration;
      };

      /**
       * Support function
       *
       * @param {Array.<{start: Window.start, end: *}>} hiddenDates
       * @param {number} start
       * @param {number} end
       * @returns {number}
       */
      exports.getHiddenDurationBeforeStart = function (hiddenDates, start, end) {
        var duration = 0;
        for (var i = 0; i < hiddenDates.length; i++) {
          var startDate = hiddenDates[i].start;
          var endDate = hiddenDates[i].end;

          if (startDate >= start && endDate <= end) {
            duration += endDate - startDate;
          }
        }
        return duration;
      };

      /**
       * Support function
       * @param {function} moment
       * @param {Array.<{start: Window.start, end: *}>} hiddenDates
       * @param {{start: number, end: number}} range
       * @param {Date} time
       * @returns {number}
       */
      exports.correctTimeForHidden = function (moment, hiddenDates, range, time) {
        time = moment(time).toDate().valueOf();
        time -= exports.getHiddenDurationBefore(moment, hiddenDates, range, time);
        return time;
      };

      exports.getHiddenDurationBefore = function (moment, hiddenDates, range, time) {
        var timeOffset = 0;
        time = moment(time).toDate().valueOf();

        for (var i = 0; i < hiddenDates.length; i++) {
          var startDate = hiddenDates[i].start;
          var endDate = hiddenDates[i].end;
          // if time after the cutout, and the
          if (startDate >= range.start && endDate < range.end) {
            if (time >= endDate) {
              timeOffset += endDate - startDate;
            }
          }
        }
        return timeOffset;
      };

      /**
       * sum the duration from start to finish, including the hidden duration,
       * until the required amount has been reached, return the accumulated hidden duration
       * @param {Array.<{start: Window.start, end: *}>} hiddenDates
       * @param {{start: number, end: number}} range
       * @param {number} [requiredDuration=0]
       * @returns {number}
       */
      exports.getAccumulatedHiddenDuration = function (hiddenDates, range, requiredDuration) {
        var hiddenDuration = 0;
        var duration = 0;
        var previousPoint = range.start;
        //exports.printDates(hiddenDates)
        for (var i = 0; i < hiddenDates.length; i++) {
          var startDate = hiddenDates[i].start;
          var endDate = hiddenDates[i].end;
          // if time after the cutout, and the
          if (startDate >= range.start && endDate < range.end) {
            duration += startDate - previousPoint;
            previousPoint = endDate;
            if (duration >= requiredDuration) {
              break;
            } else {
              hiddenDuration += endDate - startDate;
            }
          }
        }

        return hiddenDuration;
      };

      /**
       * used to step over to either side of a hidden block. Correction is disabled on tablets, might be set to true
       * @param {Array.<{start: Window.start, end: *}>} hiddenDates
       * @param {Date} time
       * @param {number} direction
       * @param {boolean} correctionEnabled
       * @returns {Date|number}
       */
      exports.snapAwayFromHidden = function (hiddenDates, time, direction, correctionEnabled) {
        var isHidden = exports.isHidden(time, hiddenDates);
        if (isHidden.hidden == true) {
          if (direction < 0) {
            if (correctionEnabled == true) {
              return isHidden.startDate - (isHidden.endDate - time) - 1;
            } else {
              return isHidden.startDate - 1;
            }
          } else {
            if (correctionEnabled == true) {
              return isHidden.endDate + (time - isHidden.startDate) + 1;
            } else {
              return isHidden.endDate + 1;
            }
          }
        } else {
          return time;
        }
      };

      /**
       * Check if a time is hidden
       *
       * @param {Date} time
       * @param {Array.<{start: Window.start, end: *}>} hiddenDates
       * @returns {{hidden: boolean, startDate: Window.start, endDate: *}}
       */
      exports.isHidden = function (time, hiddenDates) {
        for (var i = 0; i < hiddenDates.length; i++) {
          var startDate = hiddenDates[i].start;
          var endDate = hiddenDates[i].end;

          if (time >= startDate && time < endDate) {
            // if the start is entering a hidden zone
            return { hidden: true, startDate: startDate, endDate: endDate };
          }
        }
        return { hidden: false, startDate: startDate, endDate: endDate };
      };

      /***/
    },
    /* 37 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       * Register a touch event, taking place before a gesture
       * @param {Hammer} hammer       A hammer instance
       * @param {function} callback   Callback, called as callback(event)
       */

      exports.onTouch = function (hammer, callback) {
        callback.inputHandler = function (event) {
          if (event.isFirst) {
            callback(event);
          }
        };

        hammer.on('hammer.input', callback.inputHandler);
      };

      /**
       * Register a release event, taking place after a gesture
       * @param {Hammer} hammer       A hammer instance
       * @param {function} callback   Callback, called as callback(event)
       * @returns {*}
       */
      exports.onRelease = function (hammer, callback) {
        callback.inputHandler = function (event) {
          if (event.isFinal) {
            callback(event);
          }
        };

        return hammer.on('hammer.input', callback.inputHandler);
      };

      /**
       * Unregister a touch event, taking place before a gesture
       * @param {Hammer} hammer       A hammer instance
       * @param {function} callback   Callback, called as callback(event)
       */
      exports.offTouch = function (hammer, callback) {
        hammer.off('hammer.input', callback.inputHandler);
      };

      /**
       * Unregister a release event, taking place before a gesture
       * @param {Hammer} hammer       A hammer instance
       * @param {function} callback   Callback, called as callback(event)
       */
      exports.offRelease = exports.offTouch;

      /**
       * Hack the PinchRecognizer such that it doesn't prevent default behavior
       * for vertical panning.
       *
       * Yeah ... this is quite a hack ... see https://github.com/hammerjs/hammer.js/issues/932
       *
       * @param {Hammer.Pinch} pinchRecognizer
       * @return {Hammer.Pinch} returns the pinchRecognizer
       */
      exports.disablePreventDefaultVertically = function (pinchRecognizer) {
        var TOUCH_ACTION_PAN_Y = 'pan-y';

        pinchRecognizer.getTouchAction = function () {
          // default method returns [TOUCH_ACTION_NONE]
          return [TOUCH_ACTION_PAN_Y];
        };

        return pinchRecognizer;
      };

      /***/
    },
    /* 38 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var Hammer = __webpack_require__(10);
      var util = __webpack_require__(2);
      var moment = __webpack_require__(9);

      /**
       * @constructor Item
       * @param {Object} data             Object containing (optional) parameters type,
       *                                  start, end, content, group, className.
       * @param {{toScreen: function, toTime: function}} conversion
       *                                  Conversion functions from time to screen and vice versa
       * @param {Object} options          Configuration options
       *                                  // TODO: describe available options
       */
      function Item(data, conversion, options) {
        this.id = null;
        this.parent = null;
        this.data = data;
        this.dom = null;
        this.conversion = conversion || {};
        this.options = options || {};
        this.selected = false;
        this.displayed = false;
        this.groupShowing = true;
        this.dirty = true;

        this.top = null;
        this.right = null;
        this.left = null;
        this.width = null;
        this.height = null;

        this.editable = null;
        this._updateEditStatus();
      }

      Item.prototype.stack = true;

      /**
       * Select current item
       */
      Item.prototype.select = function () {
        this.selected = true;
        this.dirty = true;
        if (this.displayed) this.redraw();
      };

      /**
       * Unselect current item
       */
      Item.prototype.unselect = function () {
        this.selected = false;
        this.dirty = true;
        if (this.displayed) this.redraw();
      };

      /**
       * Set data for the item. Existing data will be updated. The id should not
       * be changed. When the item is displayed, it will be redrawn immediately.
       * @param {Object} data
       */
      Item.prototype.setData = function (data) {
        var groupChanged = data.group != undefined && this.data.group != data.group;
        if (groupChanged && this.parent != null) {
          this.parent.itemSet._moveToGroup(this, data.group);
        }

        if (this.parent) {
          this.parent.stackDirty = true;
        }

        var subGroupChanged = data.subgroup != undefined && this.data.subgroup != data.subgroup;
        if (subGroupChanged && this.parent != null) {
          this.parent.changeSubgroup(this, this.data.subgroup, data.subgroup);
        }

        this.data = data;
        this._updateEditStatus();
        this.dirty = true;
        if (this.displayed) this.redraw();
      };

      /**
       * Set a parent for the item
       * @param {Group} parent
       */
      Item.prototype.setParent = function (parent) {
        if (this.displayed) {
          this.hide();
          this.parent = parent;
          if (this.parent) {
            this.show();
          }
        } else {
          this.parent = parent;
        }
      };

      /**
       * Check whether this item is visible inside given range
       * @param {vis.Range} range with a timestamp for start and end
       * @returns {boolean} True if visible
       */
      Item.prototype.isVisible = function (range) {
        // eslint-disable-line no-unused-vars
        return false;
      };

      /**
       * Show the Item in the DOM (when not already visible)
       * @return {Boolean} changed
       */
      Item.prototype.show = function () {
        return false;
      };

      /**
       * Hide the Item from the DOM (when visible)
       * @return {Boolean} changed
       */
      Item.prototype.hide = function () {
        return false;
      };

      /**
       * Repaint the item
       */
      Item.prototype.redraw = function () {
        // should be implemented by the item
      };

      /**
       * Reposition the Item horizontally
       */
      Item.prototype.repositionX = function () {
        // should be implemented by the item
      };

      /**
       * Reposition the Item vertically
       */
      Item.prototype.repositionY = function () {
        // should be implemented by the item
      };

      /**
       * Repaint a drag area on the center of the item when the item is selected
       * @protected
       */
      Item.prototype._repaintDragCenter = function () {
        if (this.selected && this.options.editable.updateTime && !this.dom.dragCenter) {
          var me = this;
          // create and show drag area
          var dragCenter = document.createElement('div');
          dragCenter.className = 'vis-drag-center';
          dragCenter.dragCenterItem = this;
          var hammer = new Hammer(dragCenter);

          hammer.on('tap', function (event) {
            me.parent.itemSet.body.emitter.emit('click', {
              event: event,
              item: me.id
            });
          });
          hammer.on('doubletap', function (event) {
            event.stopPropagation();
            me.parent.itemSet._onUpdateItem(me);
            me.parent.itemSet.body.emitter.emit('doubleClick', {
              event: event,
              item: me.id
            });
          });

          if (this.dom.box) {
            if (this.dom.dragLeft) {
              this.dom.box.insertBefore(dragCenter, this.dom.dragLeft);
            } else {
              this.dom.box.appendChild(dragCenter);
            }
          } else if (this.dom.point) {
            this.dom.point.appendChild(dragCenter);
          }

          this.dom.dragCenter = dragCenter;
        } else if (!this.selected && this.dom.dragCenter) {
          // delete drag area
          if (this.dom.dragCenter.parentNode) {
            this.dom.dragCenter.parentNode.removeChild(this.dom.dragCenter);
          }
          this.dom.dragCenter = null;
        }
      };

      /**
       * Repaint a delete button on the top right of the item when the item is selected
       * @param {HTMLElement} anchor
       * @protected
       */
      Item.prototype._repaintDeleteButton = function (anchor) {
        var editable = (this.options.editable.overrideItems || this.editable == null) && this.options.editable.remove || !this.options.editable.overrideItems && this.editable != null && this.editable.remove;

        if (this.selected && editable && !this.dom.deleteButton) {
          // create and show button
          var me = this;

          var deleteButton = document.createElement('div');

          if (this.options.rtl) {
            deleteButton.className = 'vis-delete-rtl';
          } else {
            deleteButton.className = 'vis-delete';
          }
          deleteButton.title = 'Delete this item';

          // TODO: be able to destroy the delete button
          new Hammer(deleteButton).on('tap', function (event) {
            event.stopPropagation();
            me.parent.removeFromDataSet(me);
          });

          anchor.appendChild(deleteButton);
          this.dom.deleteButton = deleteButton;
        } else if (!this.selected && this.dom.deleteButton) {
          // remove button
          if (this.dom.deleteButton.parentNode) {
            this.dom.deleteButton.parentNode.removeChild(this.dom.deleteButton);
          }
          this.dom.deleteButton = null;
        }
      };

      /**
       * Repaint a onChange tooltip on the top right of the item when the item is selected
       * @param {HTMLElement} anchor
       * @protected
       */
      Item.prototype._repaintOnItemUpdateTimeTooltip = function (anchor) {
        if (!this.options.tooltipOnItemUpdateTime) return;

        var editable = (this.options.editable.updateTime || this.data.editable === true) && this.data.editable !== false;

        if (this.selected && editable && !this.dom.onItemUpdateTimeTooltip) {
          var onItemUpdateTimeTooltip = document.createElement('div');

          onItemUpdateTimeTooltip.className = 'vis-onUpdateTime-tooltip';
          anchor.appendChild(onItemUpdateTimeTooltip);
          this.dom.onItemUpdateTimeTooltip = onItemUpdateTimeTooltip;
        } else if (!this.selected && this.dom.onItemUpdateTimeTooltip) {
          // remove button
          if (this.dom.onItemUpdateTimeTooltip.parentNode) {
            this.dom.onItemUpdateTimeTooltip.parentNode.removeChild(this.dom.onItemUpdateTimeTooltip);
          }
          this.dom.onItemUpdateTimeTooltip = null;
        }

        // position onChange tooltip
        if (this.dom.onItemUpdateTimeTooltip) {

          // only show when editing
          this.dom.onItemUpdateTimeTooltip.style.visibility = this.parent.itemSet.touchParams.itemIsDragging ? 'visible' : 'hidden';

          // position relative to item's content
          if (this.options.rtl) {
            this.dom.onItemUpdateTimeTooltip.style.right = this.dom.content.style.right;
          } else {
            this.dom.onItemUpdateTimeTooltip.style.left = this.dom.content.style.left;
          }

          // position above or below the item depending on the item's position in the window
          var tooltipOffset = 50; // TODO: should be tooltip height (depends on template)
          var scrollTop = this.parent.itemSet.body.domProps.scrollTop;

          // TODO: this.top for orientation:true is actually the items distance from the bottom... 
          // (should be this.bottom)
          var itemDistanceFromTop;
          if (this.options.orientation.item == 'top') {
            itemDistanceFromTop = this.top;
          } else {
            itemDistanceFromTop = this.parent.height - this.top - this.height;
          }
          var isCloseToTop = itemDistanceFromTop + this.parent.top - tooltipOffset < -scrollTop;

          if (isCloseToTop) {
            this.dom.onItemUpdateTimeTooltip.style.bottom = "";
            this.dom.onItemUpdateTimeTooltip.style.top = this.height + 2 + "px";
          } else {
            this.dom.onItemUpdateTimeTooltip.style.top = "";
            this.dom.onItemUpdateTimeTooltip.style.bottom = this.height + 2 + "px";
          }

          // handle tooltip content
          var content;
          var templateFunction;

          if (this.options.tooltipOnItemUpdateTime && this.options.tooltipOnItemUpdateTime.template) {
            templateFunction = this.options.tooltipOnItemUpdateTime.template.bind(this);
            content = templateFunction(this.data);
          } else {
            content = 'start: ' + moment(this.data.start).format('MM/DD/YYYY hh:mm');
            if (this.data.end) {
              content += '<br> end: ' + moment(this.data.end).format('MM/DD/YYYY hh:mm');
            }
          }
          this.dom.onItemUpdateTimeTooltip.innerHTML = content;
        }
      };

      /**
       * Set HTML contents for the item
       * @param {Element} element   HTML element to fill with the contents
       * @private
       */
      Item.prototype._updateContents = function (element) {
        var content;
        var changed;
        var templateFunction;
        var itemVisibleFrameContent;
        var visibleFrameTemplateFunction;
        var itemData = this.parent.itemSet.itemsData.get(this.id); // get a clone of the data from the dataset

        var frameElement = this.dom.box || this.dom.point;
        var itemVisibleFrameContentElement = frameElement.getElementsByClassName('vis-item-visible-frame')[0];

        if (this.options.visibleFrameTemplate) {
          visibleFrameTemplateFunction = this.options.visibleFrameTemplate.bind(this);
          itemVisibleFrameContent = visibleFrameTemplateFunction(itemData, frameElement);
        } else {
          itemVisibleFrameContent = '';
        }

        if (itemVisibleFrameContentElement) {
          if (itemVisibleFrameContent instanceof Object && !(itemVisibleFrameContent instanceof Element)) {
            visibleFrameTemplateFunction(itemData, itemVisibleFrameContentElement);
          } else {
            changed = this._contentToString(this.itemVisibleFrameContent) !== this._contentToString(itemVisibleFrameContent);
            if (changed) {
              // only replace the content when changed
              if (itemVisibleFrameContent instanceof Element) {
                itemVisibleFrameContentElement.innerHTML = '';
                itemVisibleFrameContentElement.appendChild(itemVisibleFrameContent);
              } else if (itemVisibleFrameContent != undefined) {
                itemVisibleFrameContentElement.innerHTML = itemVisibleFrameContent;
              } else {
                if (!(this.data.type == 'background' && this.data.content === undefined)) {
                  throw new Error('Property "content" missing in item ' + this.id);
                }
              }

              this.itemVisibleFrameContent = itemVisibleFrameContent;
            }
          }
        }

        if (this.options.template) {
          templateFunction = this.options.template.bind(this);
          content = templateFunction(itemData, element, this.data);
        } else {
          content = this.data.content;
        }

        if (content instanceof Object && !(content instanceof Element)) {
          templateFunction(itemData, element);
        } else {
          changed = this._contentToString(this.content) !== this._contentToString(content);
          if (changed) {
            // only replace the content when changed
            if (content instanceof Element) {
              element.innerHTML = '';
              element.appendChild(content);
            } else if (content != undefined) {
              element.innerHTML = content;
            } else {
              if (!(this.data.type == 'background' && this.data.content === undefined)) {
                throw new Error('Property "content" missing in item ' + this.id);
              }
            }
            this.content = content;
          }
        }
      };

      /**
       * Process dataAttributes timeline option and set as data- attributes on dom.content
       * @param {Element} element   HTML element to which the attributes will be attached
       * @private
       */
      Item.prototype._updateDataAttributes = function (element) {
        if (this.options.dataAttributes && this.options.dataAttributes.length > 0) {
          var attributes = [];

          if (Array.isArray(this.options.dataAttributes)) {
            attributes = this.options.dataAttributes;
          } else if (this.options.dataAttributes == 'all') {
            attributes = (0, _keys2['default'])(this.data);
          } else {
            return;
          }

          for (var i = 0; i < attributes.length; i++) {
            var name = attributes[i];
            var value = this.data[name];

            if (value != null) {
              element.setAttribute('data-' + name, value);
            } else {
              element.removeAttribute('data-' + name);
            }
          }
        }
      };

      /**
       * Update custom styles of the element
       * @param {Element} element
       * @private
       */
      Item.prototype._updateStyle = function (element) {
        // remove old styles
        if (this.style) {
          util.removeCssText(element, this.style);
          this.style = null;
        }

        // append new styles
        if (this.data.style) {
          util.addCssText(element, this.data.style);
          this.style = this.data.style;
        }
      };

      /**
       * Stringify the items contents
       * @param {string | Element | undefined} content
       * @returns {string | undefined}
       * @private
       */
      Item.prototype._contentToString = function (content) {
        if (typeof content === 'string') return content;
        if (content && 'outerHTML' in content) return content.outerHTML;
        return content;
      };

      /**
       * Update the editability of this item.
       */
      Item.prototype._updateEditStatus = function () {
        if (this.options) {
          if (typeof this.options.editable === 'boolean') {
            this.editable = {
              updateTime: this.options.editable,
              updateGroup: this.options.editable,
              remove: this.options.editable
            };
          } else if ((0, _typeof3['default'])(this.options.editable) === 'object') {
            this.editable = {};
            util.selectiveExtend(['updateTime', 'updateGroup', 'remove'], this.editable, this.options.editable);
          }
        }
        // Item data overrides, except if options.editable.overrideItems is set.
        if (!this.options || !this.options.editable || this.options.editable.overrideItems !== true) {
          if (this.data) {
            if (typeof this.data.editable === 'boolean') {
              this.editable = {
                updateTime: this.data.editable,
                updateGroup: this.data.editable,
                remove: this.data.editable
              };
            } else if ((0, _typeof3['default'])(this.data.editable) === 'object') {
              // TODO: in vis.js 5.0, we should change this to not reset options from the timeline configuration.
              // Basically just remove the next line...
              this.editable = {};
              util.selectiveExtend(['updateTime', 'updateGroup', 'remove'], this.editable, this.data.editable);
            }
          }
        }
      };

      /**
       * Return the width of the item left from its start date
       * @return {number}
       */
      Item.prototype.getWidthLeft = function () {
        return 0;
      };

      /**
       * Return the width of the item right from the max of its start and end date
       * @return {number}
       */
      Item.prototype.getWidthRight = function () {
        return 0;
      };

      /**
       * Return the title of the item
       * @return {string | undefined}
       */
      Item.prototype.getTitle = function () {
        return this.data.title;
      };

      module.exports = Item;

      /***/
    },
    /* 39 */
    /***/function (module, exports) {

      module.exports = function (bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value: value
        };
      };

      /***/
    },
    /* 40 */
    /***/function (module, exports) {

      var id = 0;
      var px = Math.random();
      module.exports = function (key) {
        return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
      };

      /***/
    },
    /* 41 */
    /***/function (module, exports, __webpack_require__) {

      // 7.1.13 ToObject(argument)
      var defined = __webpack_require__(51);
      module.exports = function (it) {
        return Object(defined(it));
      };

      /***/
    },
    /* 42 */
    /***/function (module, exports) {

      exports.f = {}.propertyIsEnumerable;

      /***/
    },
    /* 43 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       * A queue
       * @param {Object} options
       *            Available options:
       *            - delay: number    When provided, the queue will be flushed
       *                               automatically after an inactivity of this delay
       *                               in milliseconds.
       *                               Default value is null.
       *            - max: number      When the queue exceeds the given maximum number
       *                               of entries, the queue is flushed automatically.
       *                               Default value of max is Infinity.
       * @constructor Queue
       */

      function Queue(options) {
        // options
        this.delay = null;
        this.max = Infinity;

        // properties
        this._queue = [];
        this._timeout = null;
        this._extended = null;

        this.setOptions(options);
      }

      /**
       * Update the configuration of the queue
       * @param {Object} options
       *            Available options:
       *            - delay: number    When provided, the queue will be flushed
       *                               automatically after an inactivity of this delay
       *                               in milliseconds.
       *                               Default value is null.
       *            - max: number      When the queue exceeds the given maximum number
       *                               of entries, the queue is flushed automatically.
       *                               Default value of max is Infinity.
       */
      Queue.prototype.setOptions = function (options) {
        if (options && typeof options.delay !== 'undefined') {
          this.delay = options.delay;
        }
        if (options && typeof options.max !== 'undefined') {
          this.max = options.max;
        }

        this._flushIfNeeded();
      };

      /**
       * Extend an object with queuing functionality.
       * The object will be extended with a function flush, and the methods provided
       * in options.replace will be replaced with queued ones.
       * @param {Object} object
       * @param {Object} options
       *            Available options:
       *            - replace: Array.<string>
       *                               A list with method names of the methods
       *                               on the object to be replaced with queued ones.
       *            - delay: number    When provided, the queue will be flushed
       *                               automatically after an inactivity of this delay
       *                               in milliseconds.
       *                               Default value is null.
       *            - max: number      When the queue exceeds the given maximum number
       *                               of entries, the queue is flushed automatically.
       *                               Default value of max is Infinity.
       * @return {Queue} Returns the created queue
       */
      Queue.extend = function (object, options) {
        var queue = new Queue(options);

        if (object.flush !== undefined) {
          throw new Error('Target object already has a property flush');
        }
        object.flush = function () {
          queue.flush();
        };

        var methods = [{
          name: 'flush',
          original: undefined
        }];

        if (options && options.replace) {
          for (var i = 0; i < options.replace.length; i++) {
            var name = options.replace[i];
            methods.push({
              name: name,
              original: object[name]
            });
            queue.replace(object, name);
          }
        }

        queue._extended = {
          object: object,
          methods: methods
        };

        return queue;
      };

      /**
       * Destroy the queue. The queue will first flush all queued actions, and in
       * case it has extended an object, will restore the original object.
       */
      Queue.prototype.destroy = function () {
        this.flush();

        if (this._extended) {
          var object = this._extended.object;
          var methods = this._extended.methods;
          for (var i = 0; i < methods.length; i++) {
            var method = methods[i];
            if (method.original) {
              object[method.name] = method.original;
            } else {
              delete object[method.name];
            }
          }
          this._extended = null;
        }
      };

      /**
       * Replace a method on an object with a queued version
       * @param {Object} object   Object having the method
       * @param {string} method   The method name
       */
      Queue.prototype.replace = function (object, method) {
        var me = this;
        var original = object[method];
        if (!original) {
          throw new Error('Method ' + method + ' undefined');
        }

        object[method] = function () {
          // create an Array with the arguments
          var args = [];
          for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
          }

          // add this call to the queue
          me.queue({
            args: args,
            fn: original,
            context: this
          });
        };
      };

      /**
       * Queue a call
       * @param {function | {fn: function, args: Array} | {fn: function, args: Array, context: Object}} entry
       */
      Queue.prototype.queue = function (entry) {
        if (typeof entry === 'function') {
          this._queue.push({ fn: entry });
        } else {
          this._queue.push(entry);
        }

        this._flushIfNeeded();
      };

      /**
       * Check whether the queue needs to be flushed
       * @private
       */
      Queue.prototype._flushIfNeeded = function () {
        // flush when the maximum is exceeded.
        if (this._queue.length > this.max) {
          this.flush();
        }

        // flush after a period of inactivity when a delay is configured
        clearTimeout(this._timeout);
        if (this.queue.length > 0 && typeof this.delay === 'number') {
          var me = this;
          this._timeout = setTimeout(function () {
            me.flush();
          }, this.delay);
        }
      };

      /**
       * Flush all queued calls
       */
      Queue.prototype.flush = function () {
        while (this._queue.length > 0) {
          var entry = this._queue.shift();
          entry.fn.apply(entry.context || entry.fn, entry.args || []);
        }
      };

      module.exports = Queue;

      /***/
    },
    /* 44 */
    /***/function (module, exports) {

      /**
       * Expose `Emitter`.
       */

      module.exports = Emitter;

      /**
       * Initialize a new `Emitter`.
       *
       * @api public
       */

      function Emitter(obj) {
        if (obj) return mixin(obj);
      };

      /**
       * Mixin the emitter properties.
       *
       * @param {Object} obj
       * @return {Object}
       * @api private
       */

      function mixin(obj) {
        for (var key in Emitter.prototype) {
          obj[key] = Emitter.prototype[key];
        }
        return obj;
      }

      /**
       * Listen on the given `event` with `fn`.
       *
       * @param {String} event
       * @param {Function} fn
       * @return {Emitter}
       * @api public
       */

      Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
        this._callbacks = this._callbacks || {};
        (this._callbacks[event] = this._callbacks[event] || []).push(fn);
        return this;
      };

      /**
       * Adds an `event` listener that will be invoked a single
       * time then automatically removed.
       *
       * @param {String} event
       * @param {Function} fn
       * @return {Emitter}
       * @api public
       */

      Emitter.prototype.once = function (event, fn) {
        var self = this;
        this._callbacks = this._callbacks || {};

        function on() {
          self.off(event, on);
          fn.apply(this, arguments);
        }

        on.fn = fn;
        this.on(event, on);
        return this;
      };

      /**
       * Remove the given callback for `event` or all
       * registered callbacks.
       *
       * @param {String} event
       * @param {Function} fn
       * @return {Emitter}
       * @api public
       */

      Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
        this._callbacks = this._callbacks || {};

        // all
        if (0 == arguments.length) {
          this._callbacks = {};
          return this;
        }

        // specific event
        var callbacks = this._callbacks[event];
        if (!callbacks) return this;

        // remove all handlers
        if (1 == arguments.length) {
          delete this._callbacks[event];
          return this;
        }

        // remove specific handler
        var cb;
        for (var i = 0; i < callbacks.length; i++) {
          cb = callbacks[i];
          if (cb === fn || cb.fn === fn) {
            callbacks.splice(i, 1);
            break;
          }
        }
        return this;
      };

      /**
       * Emit `event` with the given args.
       *
       * @param {String} event
       * @param {Mixed} ...
       * @return {Emitter}
       */

      Emitter.prototype.emit = function (event) {
        this._callbacks = this._callbacks || {};
        var args = [].slice.call(arguments, 1),
            callbacks = this._callbacks[event];

        if (callbacks) {
          callbacks = callbacks.slice(0);
          for (var i = 0, len = callbacks.length; i < len; ++i) {
            callbacks[i].apply(this, args);
          }
        }

        return this;
      };

      /**
       * Return array of callbacks for `event`.
       *
       * @param {String} event
       * @return {Array}
       * @api public
       */

      Emitter.prototype.listeners = function (event) {
        this._callbacks = this._callbacks || {};
        return this._callbacks[event] || [];
      };

      /**
       * Check if this emitter has `event` handlers.
       *
       * @param {String} event
       * @return {Boolean}
       * @api public
       */

      Emitter.prototype.hasListeners = function (event) {
        return !!this.listeners(event).length;
      };

      /***/
    },
    /* 45 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var Component = __webpack_require__(16);
      var TimeStep = __webpack_require__(66);
      var DateUtil = __webpack_require__(36);
      var moment = __webpack_require__(9);

      /**
       * A horizontal time axis
       * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} body
       * @param {Object} [options]        See TimeAxis.setOptions for the available
       *                                  options.
       * @constructor TimeAxis
       * @extends Component
       */
      function TimeAxis(body, options) {
        this.dom = {
          foreground: null,
          lines: [],
          majorTexts: [],
          minorTexts: [],
          redundant: {
            lines: [],
            majorTexts: [],
            minorTexts: []
          }
        };
        this.props = {
          range: {
            start: 0,
            end: 0,
            minimumStep: 0
          },
          lineTop: 0
        };

        this.defaultOptions = {
          orientation: {
            axis: 'bottom'
          }, // axis orientation: 'top' or 'bottom'
          showMinorLabels: true,
          showMajorLabels: true,
          maxMinorChars: 7,
          format: TimeStep.FORMAT,
          moment: moment,
          timeAxis: null
        };
        this.options = util.extend({}, this.defaultOptions);

        this.body = body;

        // create the HTML DOM
        this._create();

        this.setOptions(options);
      }

      TimeAxis.prototype = new Component();

      /**
       * Set options for the TimeAxis.
       * Parameters will be merged in current options.
       * @param {Object} options  Available options:
       *                          {string} [orientation.axis]
       *                          {boolean} [showMinorLabels]
       *                          {boolean} [showMajorLabels]
       */
      TimeAxis.prototype.setOptions = function (options) {
        if (options) {
          // copy all options that we know
          util.selectiveExtend(['showMinorLabels', 'showMajorLabels', 'maxMinorChars', 'hiddenDates', 'timeAxis', 'moment', 'rtl'], this.options, options);

          // deep copy the format options
          util.selectiveDeepExtend(['format'], this.options, options);

          if ('orientation' in options) {
            if (typeof options.orientation === 'string') {
              this.options.orientation.axis = options.orientation;
            } else if ((0, _typeof3['default'])(options.orientation) === 'object' && 'axis' in options.orientation) {
              this.options.orientation.axis = options.orientation.axis;
            }
          }

          // apply locale to moment.js
          // TODO: not so nice, this is applied globally to moment.js
          if ('locale' in options) {
            if (typeof moment.locale === 'function') {
              // moment.js 2.8.1+
              moment.locale(options.locale);
            } else {
              moment.lang(options.locale);
            }
          }
        }
      };

      /**
       * Create the HTML DOM for the TimeAxis
       */
      TimeAxis.prototype._create = function () {
        this.dom.foreground = document.createElement('div');
        this.dom.background = document.createElement('div');

        this.dom.foreground.className = 'vis-time-axis vis-foreground';
        this.dom.background.className = 'vis-time-axis vis-background';
      };

      /**
       * Destroy the TimeAxis
       */
      TimeAxis.prototype.destroy = function () {
        // remove from DOM
        if (this.dom.foreground.parentNode) {
          this.dom.foreground.parentNode.removeChild(this.dom.foreground);
        }
        if (this.dom.background.parentNode) {
          this.dom.background.parentNode.removeChild(this.dom.background);
        }

        this.body = null;
      };

      /**
       * Repaint the component
       * @return {boolean} Returns true if the component is resized
       */
      TimeAxis.prototype.redraw = function () {
        var props = this.props;
        var foreground = this.dom.foreground;
        var background = this.dom.background;

        // determine the correct parent DOM element (depending on option orientation)
        var parent = this.options.orientation.axis == 'top' ? this.body.dom.top : this.body.dom.bottom;
        var parentChanged = foreground.parentNode !== parent;

        // calculate character width and height
        this._calculateCharSize();

        // TODO: recalculate sizes only needed when parent is resized or options is changed
        var showMinorLabels = this.options.showMinorLabels && this.options.orientation.axis !== 'none';
        var showMajorLabels = this.options.showMajorLabels && this.options.orientation.axis !== 'none';

        // determine the width and height of the elemens for the axis
        props.minorLabelHeight = showMinorLabels ? props.minorCharHeight : 0;
        props.majorLabelHeight = showMajorLabels ? props.majorCharHeight : 0;
        props.height = props.minorLabelHeight + props.majorLabelHeight;
        props.width = foreground.offsetWidth;

        props.minorLineHeight = this.body.domProps.root.height - props.majorLabelHeight - (this.options.orientation.axis == 'top' ? this.body.domProps.bottom.height : this.body.domProps.top.height);
        props.minorLineWidth = 1; // TODO: really calculate width
        props.majorLineHeight = props.minorLineHeight + props.majorLabelHeight;
        props.majorLineWidth = 1; // TODO: really calculate width

        //  take foreground and background offline while updating (is almost twice as fast)
        var foregroundNextSibling = foreground.nextSibling;
        var backgroundNextSibling = background.nextSibling;
        foreground.parentNode && foreground.parentNode.removeChild(foreground);
        background.parentNode && background.parentNode.removeChild(background);

        foreground.style.height = this.props.height + 'px';

        this._repaintLabels();

        // put DOM online again (at the same place)
        if (foregroundNextSibling) {
          parent.insertBefore(foreground, foregroundNextSibling);
        } else {
          parent.appendChild(foreground);
        }
        if (backgroundNextSibling) {
          this.body.dom.backgroundVertical.insertBefore(background, backgroundNextSibling);
        } else {
          this.body.dom.backgroundVertical.appendChild(background);
        }
        return this._isResized() || parentChanged;
      };

      /**
       * Repaint major and minor text labels and vertical grid lines
       * @private
       */
      TimeAxis.prototype._repaintLabels = function () {
        var orientation = this.options.orientation.axis;

        // calculate range and step (step such that we have space for 7 characters per label)
        var start = util.convert(this.body.range.start, 'Number');
        var end = util.convert(this.body.range.end, 'Number');
        var timeLabelsize = this.body.util.toTime((this.props.minorCharWidth || 10) * this.options.maxMinorChars).valueOf();
        var minimumStep = timeLabelsize - DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this.body.range, timeLabelsize);
        minimumStep -= this.body.util.toTime(0).valueOf();

        var step = new TimeStep(new Date(start), new Date(end), minimumStep, this.body.hiddenDates, this.options);
        step.setMoment(this.options.moment);
        if (this.options.format) {
          step.setFormat(this.options.format);
        }
        if (this.options.timeAxis) {
          step.setScale(this.options.timeAxis);
        }
        this.step = step;

        // Move all DOM elements to a "redundant" list, where they
        // can be picked for re-use, and clear the lists with lines and texts.
        // At the end of the function _repaintLabels, left over elements will be cleaned up
        var dom = this.dom;
        dom.redundant.lines = dom.lines;
        dom.redundant.majorTexts = dom.majorTexts;
        dom.redundant.minorTexts = dom.minorTexts;
        dom.lines = [];
        dom.majorTexts = [];
        dom.minorTexts = [];

        var current; // eslint-disable-line no-unused-vars
        var next;
        var x;
        var xNext;
        var isMajor;
        var nextIsMajor; // eslint-disable-line no-unused-vars
        var showMinorGrid;
        var width = 0,
            prevWidth;
        var line;
        var labelMinor;
        var xFirstMajorLabel = undefined;
        var count = 0;
        var MAX = 1000;
        var className;

        step.start();
        next = step.getCurrent();
        xNext = this.body.util.toScreen(next);
        while (step.hasNext() && count < MAX) {
          count++;

          isMajor = step.isMajor();
          className = step.getClassName();
          labelMinor = step.getLabelMinor();

          current = next;
          x = xNext;

          step.next();
          next = step.getCurrent();
          nextIsMajor = step.isMajor();
          xNext = this.body.util.toScreen(next);

          prevWidth = width;
          width = xNext - x;
          switch (step.scale) {
            case 'week':
              showMinorGrid = true;break;
            default:
              showMinorGrid = width >= prevWidth * 0.4;break; // prevent displaying of the 31th of the month on a scale of 5 days
          }

          if (this.options.showMinorLabels && showMinorGrid) {
            var label = this._repaintMinorText(x, labelMinor, orientation, className);
            label.style.width = width + 'px'; // set width to prevent overflow
          }

          if (isMajor && this.options.showMajorLabels) {
            if (x > 0) {
              if (xFirstMajorLabel == undefined) {
                xFirstMajorLabel = x;
              }
              label = this._repaintMajorText(x, step.getLabelMajor(), orientation, className);
            }
            line = this._repaintMajorLine(x, width, orientation, className);
          } else {
            // minor line
            if (showMinorGrid) {
              line = this._repaintMinorLine(x, width, orientation, className);
            } else {
              if (line) {
                // adjust the width of the previous grid
                line.style.width = parseInt(line.style.width) + width + 'px';
              }
            }
          }
        }

        if (count === MAX && !warnedForOverflow) {
          console.warn('Something is wrong with the Timeline scale. Limited drawing of grid lines to ' + MAX + ' lines.');
          warnedForOverflow = true;
        }

        // create a major label on the left when needed
        if (this.options.showMajorLabels) {
          var leftTime = this.body.util.toTime(0),
              leftText = step.getLabelMajor(leftTime),
              widthText = leftText.length * (this.props.majorCharWidth || 10) + 10; // upper bound estimation

          if (xFirstMajorLabel == undefined || widthText < xFirstMajorLabel) {
            this._repaintMajorText(0, leftText, orientation, className);
          }
        }

        // Cleanup leftover DOM elements from the redundant list
        util.forEach(this.dom.redundant, function (arr) {
          while (arr.length) {
            var elem = arr.pop();
            if (elem && elem.parentNode) {
              elem.parentNode.removeChild(elem);
            }
          }
        });
      };

      /**
       * Create a minor label for the axis at position x
       * @param {number} x
       * @param {string} text
       * @param {string} orientation   "top" or "bottom" (default)
       * @param {string} className
       * @return {Element} Returns the HTML element of the created label
       * @private
       */
      TimeAxis.prototype._repaintMinorText = function (x, text, orientation, className) {
        // reuse redundant label
        var label = this.dom.redundant.minorTexts.shift();

        if (!label) {
          // create new label
          var content = document.createTextNode('');
          label = document.createElement('div');
          label.appendChild(content);
          this.dom.foreground.appendChild(label);
        }
        this.dom.minorTexts.push(label);
        label.innerHTML = text;

        label.style.top = orientation == 'top' ? this.props.majorLabelHeight + 'px' : '0';

        if (this.options.rtl) {
          label.style.left = "";
          label.style.right = x + 'px';
        } else {
          label.style.left = x + 'px';
        }
        label.className = 'vis-text vis-minor ' + className;
        //label.title = title;  // TODO: this is a heavy operation

        return label;
      };

      /**
       * Create a Major label for the axis at position x
       * @param {number} x
       * @param {string} text
       * @param {string} orientation   "top" or "bottom" (default)
       * @param {string} className
       * @return {Element} Returns the HTML element of the created label
       * @private
       */
      TimeAxis.prototype._repaintMajorText = function (x, text, orientation, className) {
        // reuse redundant label
        var label = this.dom.redundant.majorTexts.shift();

        if (!label) {
          // create label
          var content = document.createElement('div');
          label = document.createElement('div');
          label.appendChild(content);
          this.dom.foreground.appendChild(label);
        }

        label.childNodes[0].innerHTML = text;
        label.className = 'vis-text vis-major ' + className;
        //label.title = title; // TODO: this is a heavy operation

        label.style.top = orientation == 'top' ? '0' : this.props.minorLabelHeight + 'px';
        if (this.options.rtl) {
          label.style.left = "";
          label.style.right = x + 'px';
        } else {
          label.style.left = x + 'px';
        }

        this.dom.majorTexts.push(label);
        return label;
      };

      /**
       * Create a minor line for the axis at position x
       * @param {number} x
       * @param {number} width
       * @param {string} orientation   "top" or "bottom" (default)
       * @param {string} className
       * @return {Element} Returns the created line
       * @private
       */
      TimeAxis.prototype._repaintMinorLine = function (x, width, orientation, className) {
        // reuse redundant line
        var line = this.dom.redundant.lines.shift();
        if (!line) {
          // create vertical line
          line = document.createElement('div');
          this.dom.background.appendChild(line);
        }
        this.dom.lines.push(line);

        var props = this.props;
        if (orientation == 'top') {
          line.style.top = props.majorLabelHeight + 'px';
        } else {
          line.style.top = this.body.domProps.top.height + 'px';
        }
        line.style.height = props.minorLineHeight + 'px';
        if (this.options.rtl) {
          line.style.left = "";
          line.style.right = x - props.minorLineWidth / 2 + 'px';
          line.className = 'vis-grid vis-vertical-rtl vis-minor ' + className;
        } else {
          line.style.left = x - props.minorLineWidth / 2 + 'px';
          line.className = 'vis-grid vis-vertical vis-minor ' + className;
        }
        line.style.width = width + 'px';

        return line;
      };

      /**
       * Create a Major line for the axis at position x
       * @param {number} x
       * @param {number} width
       * @param {string} orientation   "top" or "bottom" (default)
       * @param {string} className
       * @return {Element} Returns the created line
       * @private
       */
      TimeAxis.prototype._repaintMajorLine = function (x, width, orientation, className) {
        // reuse redundant line
        var line = this.dom.redundant.lines.shift();
        if (!line) {
          // create vertical line
          line = document.createElement('div');
          this.dom.background.appendChild(line);
        }
        this.dom.lines.push(line);

        var props = this.props;
        if (orientation == 'top') {
          line.style.top = '0';
        } else {
          line.style.top = this.body.domProps.top.height + 'px';
        }

        if (this.options.rtl) {
          line.style.left = "";
          line.style.right = x - props.majorLineWidth / 2 + 'px';
          line.className = 'vis-grid vis-vertical-rtl vis-major ' + className;
        } else {
          line.style.left = x - props.majorLineWidth / 2 + 'px';
          line.className = 'vis-grid vis-vertical vis-major ' + className;
        }

        line.style.height = props.majorLineHeight + 'px';
        line.style.width = width + 'px';

        return line;
      };

      /**
       * Determine the size of text on the axis (both major and minor axis).
       * The size is calculated only once and then cached in this.props.
       * @private
       */
      TimeAxis.prototype._calculateCharSize = function () {
        // Note: We calculate char size with every redraw. Size may change, for
        // example when any of the timelines parents had display:none for example.

        // determine the char width and height on the minor axis
        if (!this.dom.measureCharMinor) {
          this.dom.measureCharMinor = document.createElement('DIV');
          this.dom.measureCharMinor.className = 'vis-text vis-minor vis-measure';
          this.dom.measureCharMinor.style.position = 'absolute';

          this.dom.measureCharMinor.appendChild(document.createTextNode('0'));
          this.dom.foreground.appendChild(this.dom.measureCharMinor);
        }
        this.props.minorCharHeight = this.dom.measureCharMinor.clientHeight;
        this.props.minorCharWidth = this.dom.measureCharMinor.clientWidth;

        // determine the char width and height on the major axis
        if (!this.dom.measureCharMajor) {
          this.dom.measureCharMajor = document.createElement('DIV');
          this.dom.measureCharMajor.className = 'vis-text vis-major vis-measure';
          this.dom.measureCharMajor.style.position = 'absolute';

          this.dom.measureCharMajor.appendChild(document.createTextNode('0'));
          this.dom.foreground.appendChild(this.dom.measureCharMajor);
        }
        this.props.majorCharHeight = this.dom.measureCharMajor.clientHeight;
        this.props.majorCharWidth = this.dom.measureCharMajor.clientWidth;
      };

      var warnedForOverflow = false;

      module.exports = TimeAxis;

      /***/
    },
    /* 46 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var Hammer = __webpack_require__(10);
      var util = __webpack_require__(2);
      var Component = __webpack_require__(16);
      var moment = __webpack_require__(9);
      var locales = __webpack_require__(98);

      /**
       * A custom time bar
       * @param {{range: Range, dom: Object}} body
       * @param {Object} [options]        Available parameters:
       *                                  {number | string} id
       *                                  {string} locales
       *                                  {string} locale
       * @constructor CustomTime
       * @extends Component
       */
      function CustomTime(body, options) {
        this.body = body;

        // default options
        this.defaultOptions = {
          moment: moment,
          locales: locales,
          locale: 'en',
          id: undefined,
          title: undefined
        };
        this.options = util.extend({}, this.defaultOptions);

        if (options && options.time) {
          this.customTime = options.time;
        } else {
          this.customTime = new Date();
        }

        this.eventParams = {}; // stores state parameters while dragging the bar

        this.setOptions(options);

        // create the DOM
        this._create();
      }

      CustomTime.prototype = new Component();

      /**
       * Set options for the component. Options will be merged in current options.
       * @param {Object} options  Available parameters:
       *                                  {number | string} id
       *                                  {string} locales
       *                                  {string} locale
       */
      CustomTime.prototype.setOptions = function (options) {
        if (options) {
          // copy all options that we know
          util.selectiveExtend(['moment', 'locale', 'locales', 'id'], this.options, options);
        }
      };

      /**
       * Create the DOM for the custom time
       * @private
       */
      CustomTime.prototype._create = function () {
        var bar = document.createElement('div');
        bar['custom-time'] = this;
        bar.className = 'vis-custom-time ' + (this.options.id || '');
        bar.style.position = 'absolute';
        bar.style.top = '0px';
        bar.style.height = '100%';
        this.bar = bar;

        var drag = document.createElement('div');
        drag.style.position = 'relative';
        drag.style.top = '0px';
        drag.style.left = '-10px';
        drag.style.height = '100%';
        drag.style.width = '20px';

        /**
         *
         * @param {WheelEvent} e
         */
        function onMouseWheel(e) {
          this.body.range._onMouseWheel(e);
        }

        if (drag.addEventListener) {
          // IE9, Chrome, Safari, Opera
          drag.addEventListener("mousewheel", onMouseWheel.bind(this), false);
          // Firefox
          drag.addEventListener("DOMMouseScroll", onMouseWheel.bind(this), false);
        } else {
          // IE 6/7/8
          drag.attachEvent("onmousewheel", onMouseWheel.bind(this));
        }

        bar.appendChild(drag);
        // attach event listeners
        this.hammer = new Hammer(drag);
        this.hammer.on('panstart', this._onDragStart.bind(this));
        this.hammer.on('panmove', this._onDrag.bind(this));
        this.hammer.on('panend', this._onDragEnd.bind(this));
        this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });
      };

      /**
       * Destroy the CustomTime bar
       */
      CustomTime.prototype.destroy = function () {
        this.hide();

        this.hammer.destroy();
        this.hammer = null;

        this.body = null;
      };

      /**
       * Repaint the component
       * @return {boolean} Returns true if the component is resized
       */
      CustomTime.prototype.redraw = function () {
        var parent = this.body.dom.backgroundVertical;
        if (this.bar.parentNode != parent) {
          // attach to the dom
          if (this.bar.parentNode) {
            this.bar.parentNode.removeChild(this.bar);
          }
          parent.appendChild(this.bar);
        }

        var x = this.body.util.toScreen(this.customTime);

        var locale = this.options.locales[this.options.locale];
        if (!locale) {
          if (!this.warned) {
            console.log('WARNING: options.locales[\'' + this.options.locale + '\'] not found. See http://visjs.org/docs/timeline/#Localization');
            this.warned = true;
          }
          locale = this.options.locales['en']; // fall back on english when not available
        }

        var title = this.options.title;
        // To hide the title completely use empty string ''.
        if (title === undefined) {
          title = locale.time + ': ' + this.options.moment(this.customTime).format('dddd, MMMM Do YYYY, H:mm:ss');
          title = title.charAt(0).toUpperCase() + title.substring(1);
        } else if (typeof title === "function") {
          title = title.call(this.customTime);
        }

        this.bar.style.left = x + 'px';
        this.bar.title = title;

        return false;
      };

      /**
       * Remove the CustomTime from the DOM
       */
      CustomTime.prototype.hide = function () {
        // remove the line from the DOM
        if (this.bar.parentNode) {
          this.bar.parentNode.removeChild(this.bar);
        }
      };

      /**
       * Set custom time.
       * @param {Date | number | string} time
       */
      CustomTime.prototype.setCustomTime = function (time) {
        this.customTime = util.convert(time, 'Date');
        this.redraw();
      };

      /**
       * Retrieve the current custom time.
       * @return {Date} customTime
       */
      CustomTime.prototype.getCustomTime = function () {
        return new Date(this.customTime.valueOf());
      };

      /**
        * Set custom title.
        * @param {Date | number | string} title
        */
      CustomTime.prototype.setCustomTitle = function (title) {
        this.options.title = title;
      };

      /**
       * Start moving horizontally
       * @param {Event} event
       * @private
       */
      CustomTime.prototype._onDragStart = function (event) {
        this.eventParams.dragging = true;
        this.eventParams.customTime = this.customTime;

        event.stopPropagation();
      };

      /**
       * Perform moving operating.
       * @param {Event} event
       * @private
       */
      CustomTime.prototype._onDrag = function (event) {
        if (!this.eventParams.dragging) return;

        var x = this.body.util.toScreen(this.eventParams.customTime) + event.deltaX;
        var time = this.body.util.toTime(x);

        this.setCustomTime(time);

        // fire a timechange event
        this.body.emitter.emit('timechange', {
          id: this.options.id,
          time: new Date(this.customTime.valueOf()),
          event: event
        });

        event.stopPropagation();
      };

      /**
       * Stop moving operating.
       * @param {Event} event
       * @private
       */
      CustomTime.prototype._onDragEnd = function (event) {
        if (!this.eventParams.dragging) return;

        // fire a timechanged event
        this.body.emitter.emit('timechanged', {
          id: this.options.id,
          time: new Date(this.customTime.valueOf()),
          event: event
        });

        event.stopPropagation();
      };

      /**
       * Find a custom time from an event target:
       * searches for the attribute 'custom-time' in the event target's element tree
       * @param {Event} event
       * @return {CustomTime | null} customTime
       */
      CustomTime.customTimeFromTarget = function (event) {
        var target = event.target;
        while (target) {
          if (target.hasOwnProperty('custom-time')) {
            return target['custom-time'];
          }
          target = target.parentNode;
        }

        return null;
      };

      module.exports = CustomTime;

      /***/
    },
    /* 47 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);

      var Label = __webpack_require__(117)['default'];
      var ComponentUtil = __webpack_require__(48)['default'];
      var Box = __webpack_require__(193)['default'];
      var Circle = __webpack_require__(200)['default'];
      var CircularImage = __webpack_require__(201)['default'];
      var Database = __webpack_require__(202)['default'];
      var Diamond = __webpack_require__(203)['default'];
      var Dot = __webpack_require__(204)['default'];
      var Ellipse = __webpack_require__(205)['default'];
      var Icon = __webpack_require__(206)['default'];
      var Image = __webpack_require__(207)['default'];
      var Square = __webpack_require__(208)['default'];
      var Hexagon = __webpack_require__(209)['default'];
      var Star = __webpack_require__(210)['default'];
      var Text = __webpack_require__(211)['default'];
      var Triangle = __webpack_require__(212)['default'];
      var TriangleDown = __webpack_require__(213)['default'];

      var _require = __webpack_require__(15),
          printStyle = _require.printStyle;

      /**
       * A node. A node can be connected to other nodes via one or multiple edges.
       */

      var Node = function () {
        /**
         *
         * @param {object} options An object containing options for the node. All
         *                            options are optional, except for the id.
         *                              {number} id     Id of the node. Required
         *                              {string} label  Text label for the node
         *                              {number} x      Horizontal position of the node
         *                              {number} y      Vertical position of the node
         *                              {string} shape  Node shape
         *                              {string} image  An image url
         *                              {string} title  A title text, can be HTML
         *                              {anytype} group A group name or number
         *
         * @param {Object} body               Shared state of current network instance
         * @param {Network.Images} imagelist  A list with images. Only needed when the node has an image
         * @param {Groups} grouplist          A list with groups. Needed for retrieving group options
         * @param {Object} globalOptions      Current global node options; these serve as defaults for the node instance
         * @param {Object} defaultOptions     Global default options for nodes; note that this is also the prototype
         *                                    for parameter `globalOptions`.
         */
        function Node(options, body, imagelist, grouplist, globalOptions, defaultOptions) {
          (0, _classCallCheck3['default'])(this, Node);

          this.options = util.bridgeObject(globalOptions);
          this.globalOptions = globalOptions;
          this.defaultOptions = defaultOptions;
          this.body = body;

          this.edges = []; // all edges connected to this node

          // set defaults for the options
          this.id = undefined;
          this.imagelist = imagelist;
          this.grouplist = grouplist;

          // state options
          this.x = undefined;
          this.y = undefined;
          this.baseSize = this.options.size;
          this.baseFontSize = this.options.font.size;
          this.predefinedPosition = false; // used to check if initial fit should just take the range or approximate
          this.selected = false;
          this.hover = false;

          this.labelModule = new Label(this.body, this.options, false /* Not edge label */);
          this.setOptions(options);
        }

        /**
         * Attach a edge to the node
         * @param {Edge} edge
         */

        (0, _createClass3['default'])(Node, [{
          key: 'attachEdge',
          value: function attachEdge(edge) {
            if (this.edges.indexOf(edge) === -1) {
              this.edges.push(edge);
            }
          }

          /**
           * Detach a edge from the node
           *
           * @param {Edge} edge
           */

        }, {
          key: 'detachEdge',
          value: function detachEdge(edge) {
            var index = this.edges.indexOf(edge);
            if (index != -1) {
              this.edges.splice(index, 1);
            }
          }

          /**
           * Set or overwrite options for the node
           *
           * @param {Object} options an object with options
           * @returns {null|boolean}
           */

        }, {
          key: 'setOptions',
          value: function setOptions(options) {
            var currentShape = this.options.shape;
            if (!options) {
              return; // Note that the return value will be 'undefined'! This is OK.
            }

            // basic options
            if (options.id !== undefined) {
              this.id = options.id;
            }

            if (this.id === undefined) {
              throw new Error("Node must have an id");
            }

            Node.checkMass(options, this.id);

            // set these options locally
            // clear x and y positions
            if (options.x !== undefined) {
              if (options.x === null) {
                this.x = undefined;this.predefinedPosition = false;
              } else {
                this.x = parseInt(options.x);this.predefinedPosition = true;
              }
            }
            if (options.y !== undefined) {
              if (options.y === null) {
                this.y = undefined;this.predefinedPosition = false;
              } else {
                this.y = parseInt(options.y);this.predefinedPosition = true;
              }
            }
            if (options.size !== undefined) {
              this.baseSize = options.size;
            }
            if (options.value !== undefined) {
              options.value = parseFloat(options.value);
            }

            // this transforms all shorthands into fully defined options
            Node.parseOptions(this.options, options, true, this.globalOptions, this.grouplist);

            var pile = [options, this.options, this.defaultOptions];
            this.chooser = ComponentUtil.choosify('node', pile);

            this._load_images();
            this.updateLabelModule(options);
            this.updateShape(currentShape);

            return options.hidden !== undefined || options.physics !== undefined;
          }

          /**
           * Load the images from the options, for the nodes that need them.
           *
           * TODO: The imageObj members should be moved to CircularImageBase.
           *       It's the only place where they are required.
           *
           * @private
           */

        }, {
          key: '_load_images',
          value: function _load_images() {
            // Don't bother loading for nodes without images
            if (this.options.shape !== 'circularImage' && this.options.shape !== 'image') {
              return;
            }

            if (this.options.image === undefined) {
              throw new Error("Option image must be defined for node type '" + this.options.shape + "'");
            }

            if (this.imagelist === undefined) {
              throw new Error("Internal Error: No images provided");
            }

            if (typeof this.options.image === 'string') {
              this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);
            } else {
              if (this.options.image.unselected === undefined) {
                throw new Error("No unselected image provided");
              }

              this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id);

              if (this.options.image.selected !== undefined) {
                this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id);
              } else {
                this.imageObjAlt = undefined;
              }
            }
          }

          /**
           * Copy group option values into the node options.
           *
           * The group options override the global node options, so the copy of group options
           *  must happen *after* the global node options have been set.
           *
           * This method must also be called also if the global node options have changed and the group options did not.
           *
           * @param {Object} parentOptions
           * @param {Object} newOptions  new values for the options, currently only passed in for check
           * @param {Object} groupList
           */

        }, {
          key: 'getFormattingValues',

          /**
           *
           * @returns {{color: *, borderWidth: *, borderColor: *, size: *, borderDashes: (boolean|Array|allOptions.nodes.shapeProperties.borderDashes|{boolean, array}), borderRadius: (number|allOptions.nodes.shapeProperties.borderRadius|{number}|Array), shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *}}
           */
          value: function getFormattingValues() {
            var values = {
              color: this.options.color.background,
              borderWidth: this.options.borderWidth,
              borderColor: this.options.color.border,
              size: this.options.size,
              borderDashes: this.options.shapeProperties.borderDashes,
              borderRadius: this.options.shapeProperties.borderRadius,
              shadow: this.options.shadow.enabled,
              shadowColor: this.options.shadow.color,
              shadowSize: this.options.shadow.size,
              shadowX: this.options.shadow.x,
              shadowY: this.options.shadow.y
            };
            if (this.selected || this.hover) {
              if (this.chooser === true) {
                if (this.selected) {
                  values.borderWidth *= 2;
                  values.color = this.options.color.highlight.background;
                  values.borderColor = this.options.color.highlight.border;
                  values.shadow = this.options.shadow.enabled;
                } else if (this.hover) {
                  values.color = this.options.color.hover.background;
                  values.borderColor = this.options.color.hover.border;
                  values.shadow = this.options.shadow.enabled;
                }
              } else if (typeof this.chooser === 'function') {
                this.chooser(values, this.options.id, this.selected, this.hover);
                if (values.shadow === false) {
                  if (values.shadowColor !== this.options.shadow.color || values.shadowSize !== this.options.shadow.size || values.shadowX !== this.options.shadow.x || values.shadowY !== this.options.shadow.y) {
                    values.shadow = true;
                  }
                }
              }
            } else {
              values.shadow = this.options.shadow.enabled;
            }
            return values;
          }

          /**
           *
           * @param {Object} options
           */

        }, {
          key: 'updateLabelModule',
          value: function updateLabelModule(options) {
            if (this.options.label === undefined || this.options.label === null) {
              this.options.label = '';
            }

            Node.updateGroupOptions(this.options, options, this.grouplist);

            //
            // Note:The prototype chain for this.options is:
            //
            // this.options ->    NodesHandler.options    -> NodesHandler.defaultOptions
            //                 (also: this.globalOptions)
            //
            // Note that the prototypes are mentioned explicitly in the pile list below;
            // WE DON'T WANT THE ORDER OF THE PROTOTYPES!!!! At least, not for font handling of labels.
            // This is a good indication that the prototype usage of options is deficient.
            //
            var currentGroup = this.grouplist.get(this.options.group, false);
            var pile = [options, // new options
            this.options, // current node options, see comment above for prototype
            currentGroup, // group options, if any
            this.globalOptions, // Currently set global node options
            this.defaultOptions // Default global node options
            ];
            this.labelModule.update(this.options, pile);

            if (this.labelModule.baseSize !== undefined) {
              this.baseFontSize = this.labelModule.baseSize;
            }
          }

          /**
           *
           * @param {string} currentShape
           */

        }, {
          key: 'updateShape',
          value: function updateShape(currentShape) {
            if (currentShape === this.options.shape && this.shape) {
              this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);
            } else {
              // choose draw method depending on the shape
              switch (this.options.shape) {
                case 'box':
                  this.shape = new Box(this.options, this.body, this.labelModule);
                  break;
                case 'circle':
                  this.shape = new Circle(this.options, this.body, this.labelModule);
                  break;
                case 'circularImage':
                  this.shape = new CircularImage(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
                  break;
                case 'database':
                  this.shape = new Database(this.options, this.body, this.labelModule);
                  break;
                case 'diamond':
                  this.shape = new Diamond(this.options, this.body, this.labelModule);
                  break;
                case 'dot':
                  this.shape = new Dot(this.options, this.body, this.labelModule);
                  break;
                case 'ellipse':
                  this.shape = new Ellipse(this.options, this.body, this.labelModule);
                  break;
                case 'icon':
                  this.shape = new Icon(this.options, this.body, this.labelModule);
                  break;
                case 'image':
                  this.shape = new Image(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
                  break;
                case 'square':
                  this.shape = new Square(this.options, this.body, this.labelModule);
                  break;
                case 'hexagon':
                  this.shape = new Hexagon(this.options, this.body, this.labelModule);
                  break;
                case 'star':
                  this.shape = new Star(this.options, this.body, this.labelModule);
                  break;
                case 'text':
                  this.shape = new Text(this.options, this.body, this.labelModule);
                  break;
                case 'triangle':
                  this.shape = new Triangle(this.options, this.body, this.labelModule);
                  break;
                case 'triangleDown':
                  this.shape = new TriangleDown(this.options, this.body, this.labelModule);
                  break;
                default:
                  this.shape = new Ellipse(this.options, this.body, this.labelModule);
                  break;
              }
            }
            this.needsRefresh();
          }

          /**
           * select this node
           */

        }, {
          key: 'select',
          value: function select() {
            this.selected = true;
            this.needsRefresh();
          }

          /**
           * unselect this node
           */

        }, {
          key: 'unselect',
          value: function unselect() {
            this.selected = false;
            this.needsRefresh();
          }

          /**
           * Reset the calculated size of the node, forces it to recalculate its size
           */

        }, {
          key: 'needsRefresh',
          value: function needsRefresh() {
            this.shape.refreshNeeded = true;
          }

          /**
           * get the title of this node.
           * @return {string} title    The title of the node, or undefined when no title
           *                           has been set.
           */

        }, {
          key: 'getTitle',
          value: function getTitle() {
            return this.options.title;
          }

          /**
           * Calculate the distance to the border of the Node
           * @param {CanvasRenderingContext2D}   ctx
           * @param {number} angle        Angle in radians
           * @returns {number} distance   Distance to the border in pixels
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            return this.shape.distanceToBorder(ctx, angle);
          }

          /**
           * Check if this node has a fixed x and y position
           * @return {boolean}      true if fixed, false if not
           */

        }, {
          key: 'isFixed',
          value: function isFixed() {
            return this.options.fixed.x && this.options.fixed.y;
          }

          /**
           * check if this node is selecte
           * @return {boolean} selected   True if node is selected, else false
           */

        }, {
          key: 'isSelected',
          value: function isSelected() {
            return this.selected;
          }

          /**
           * Retrieve the value of the node. Can be undefined
           * @return {number} value
           */

        }, {
          key: 'getValue',
          value: function getValue() {
            return this.options.value;
          }

          /**
           * Get the current dimensions of the label
           *
           * @return {rect}
           */

        }, {
          key: 'getLabelSize',
          value: function getLabelSize() {
            return this.labelModule.size();
          }

          /**
           * Adjust the value range of the node. The node will adjust it's size
           * based on its value.
           * @param {number} min
           * @param {number} max
           * @param {number} total
           */

        }, {
          key: 'setValueRange',
          value: function setValueRange(min, max, total) {
            if (this.options.value !== undefined) {
              var scale = this.options.scaling.customScalingFunction(min, max, total, this.options.value);
              var sizeDiff = this.options.scaling.max - this.options.scaling.min;
              if (this.options.scaling.label.enabled === true) {
                var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
                this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
              }
              this.options.size = this.options.scaling.min + scale * sizeDiff;
            } else {
              this.options.size = this.baseSize;
              this.options.font.size = this.baseFontSize;
            }

            this.updateLabelModule();
          }

          /**
           * Draw this node in the given canvas
           * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
           * @param {CanvasRenderingContext2D}   ctx
           */

        }, {
          key: 'draw',
          value: function draw(ctx) {
            var values = this.getFormattingValues();
            this.shape.draw(ctx, this.x, this.y, this.selected, this.hover, values);
          }

          /**
           * Update the bounding box of the shape
           * @param {CanvasRenderingContext2D}   ctx
           */

        }, {
          key: 'updateBoundingBox',
          value: function updateBoundingBox(ctx) {
            this.shape.updateBoundingBox(this.x, this.y, ctx);
          }

          /**
           * Recalculate the size of this node in the given canvas
           * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
           * @param {CanvasRenderingContext2D}   ctx
           */

        }, {
          key: 'resize',
          value: function resize(ctx) {
            var values = this.getFormattingValues();
            this.shape.resize(ctx, this.selected, this.hover, values);
          }

          /**
           * Determine all visual elements of this node instance, in which the given
           * point falls within the bounding shape.
           *
           * @param {point} point
           * @returns {Array.<nodeClickItem|nodeLabelClickItem>} list with the items which are on the point
           */

        }, {
          key: 'getItemsOnPoint',
          value: function getItemsOnPoint(point) {
            var ret = [];

            if (this.labelModule.visible()) {
              if (ComponentUtil.pointInRect(this.labelModule.getSize(), point)) {
                ret.push({ nodeId: this.id, labelId: 0 });
              }
            }

            if (ComponentUtil.pointInRect(this.shape.boundingBox, point)) {
              ret.push({ nodeId: this.id });
            }

            return ret;
          }

          /**
           * Check if this object is overlapping with the provided object
           * @param {Object} obj   an object with parameters left, top, right, bottom
           * @return {boolean}     True if location is located on node
           */

        }, {
          key: 'isOverlappingWith',
          value: function isOverlappingWith(obj) {
            return this.shape.left < obj.right && this.shape.left + this.shape.width > obj.left && this.shape.top < obj.bottom && this.shape.top + this.shape.height > obj.top;
          }

          /**
           * Check if this object is overlapping with the provided object
           * @param {Object} obj   an object with parameters left, top, right, bottom
           * @return {boolean}     True if location is located on node
           */

        }, {
          key: 'isBoundingBoxOverlappingWith',
          value: function isBoundingBoxOverlappingWith(obj) {
            return this.shape.boundingBox.left < obj.right && this.shape.boundingBox.right > obj.left && this.shape.boundingBox.top < obj.bottom && this.shape.boundingBox.bottom > obj.top;
          }

          /**
          * Check valid values for mass
          *
          * The mass may not be negative or zero. If it is, reset to 1
          *
          * @param {object} options
          * @param {Node.id} id
           * @static
          */

        }], [{
          key: 'updateGroupOptions',
          value: function updateGroupOptions(parentOptions, newOptions, groupList) {
            if (groupList === undefined) return; // No groups, nothing to do

            var group = parentOptions.group;

            // paranoia: the selected group is already merged into node options, check.
            if (newOptions !== undefined && newOptions.group !== undefined && group !== newOptions.group) {
              throw new Error("updateGroupOptions: group values in options don't match.");
            }

            var hasGroup = typeof group === 'number' || typeof group === 'string' && group != '';
            if (!hasGroup) return; // current node has no group, no need to merge

            var groupObj = groupList.get(group);

            // Skip merging of group font options into parent; these are required to be distinct for labels
            // TODO: It might not be a good idea either to merge the rest of the options, investigate this. 
            util.selectiveNotDeepExtend(['font'], parentOptions, groupObj);

            // the color object needs to be completely defined.
            // Since groups can partially overwrite the colors, we parse it again, just in case.
            parentOptions.color = util.parseColor(parentOptions.color);
          }

          /**
           * This process all possible shorthands in the new options and makes sure that the parentOptions are fully defined.
           * Static so it can also be used by the handler.
           *
           * @param {Object} parentOptions
           * @param {Object} newOptions
           * @param {boolean} [allowDeletion=false]
           * @param {Object} [globalOptions={}]
           * @param {Object} [groupList]
           * @static
           */

        }, {
          key: 'parseOptions',
          value: function parseOptions(parentOptions, newOptions) {
            var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var groupList = arguments[4];

            var fields = ['color', 'fixed', 'shadow'];
            util.selectiveNotDeepExtend(fields, parentOptions, newOptions, allowDeletion);

            Node.checkMass(newOptions);

            // merge the shadow options into the parent.
            util.mergeOptions(parentOptions, newOptions, 'shadow', globalOptions);

            // individual shape newOptions
            if (newOptions.color !== undefined && newOptions.color !== null) {
              var parsedColor = util.parseColor(newOptions.color);
              util.fillIfDefined(parentOptions.color, parsedColor);
            } else if (allowDeletion === true && newOptions.color === null) {
              parentOptions.color = util.bridgeObject(globalOptions.color); // set the object back to the global options
            }

            // handle the fixed options
            if (newOptions.fixed !== undefined && newOptions.fixed !== null) {
              if (typeof newOptions.fixed === 'boolean') {
                parentOptions.fixed.x = newOptions.fixed;
                parentOptions.fixed.y = newOptions.fixed;
              } else {
                if (newOptions.fixed.x !== undefined && typeof newOptions.fixed.x === 'boolean') {
                  parentOptions.fixed.x = newOptions.fixed.x;
                }
                if (newOptions.fixed.y !== undefined && typeof newOptions.fixed.y === 'boolean') {
                  parentOptions.fixed.y = newOptions.fixed.y;
                }
              }
            }

            if (allowDeletion === true && newOptions.font === null) {
              parentOptions.font = util.bridgeObject(globalOptions.font); // set the object back to the global options
            }

            Node.updateGroupOptions(parentOptions, newOptions, groupList);

            // handle the scaling options, specifically the label part
            if (newOptions.scaling !== undefined) {
              util.mergeOptions(parentOptions.scaling, newOptions.scaling, 'label', globalOptions.scaling);
            }
          }
        }, {
          key: 'checkMass',
          value: function checkMass(options, id) {
            if (options.mass !== undefined && options.mass <= 0) {
              var strId = '';
              if (id !== undefined) {
                strId = ' in node id: ' + id;
              }
              console.log('%cNegative or zero mass disallowed' + strId + ', setting mass to 1.', printStyle);
              options.mass = 1;
            }
          }
        }]);
        return Node;
      }();

      exports['default'] = Node;

      /***/
    },
    /* 48 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * Definitions for param's in jsdoc.
       * These are more or less global within Network. Putting them here until I can figure out
       * where to really put them
       * 
       * @typedef {string|number} Id
       * @typedef {Id} NodeId
       * @typedef {Id} EdgeId
       * @typedef {Id} LabelId
       *
       * @typedef {{x: number, y: number}} point
       * @typedef {{left: number, top: number, width: number, height: number}} rect
       * @typedef {{x: number, y:number, angle: number}} rotationPoint
       *   - point to rotate around and the angle in radians to rotate. angle == 0 means no rotation
       * @typedef {{nodeId:NodeId}} nodeClickItem
       * @typedef {{nodeId:NodeId, labelId:LabelId}} nodeLabelClickItem
       * @typedef {{edgeId:EdgeId}} edgeClickItem
       * @typedef {{edgeId:EdgeId, labelId:LabelId}} edgeLabelClickItem
       */

      var util = __webpack_require__(2);

      /**
       * Helper functions for components
       * @class
       */

      var ComponentUtil = function () {
        function ComponentUtil() {
          (0, _classCallCheck3['default'])(this, ComponentUtil);
        }

        (0, _createClass3['default'])(ComponentUtil, null, [{
          key: 'choosify',

          /**
           * Determine values to use for (sub)options of 'chosen'.
           *
           * This option is either a boolean or an object whose values should be examined further.
           * The relevant structures are:
           *
           * - chosen: <boolean value>
           * - chosen: { subOption: <boolean or function> }
           *
           * Where subOption is 'node', 'edge' or 'label'.
           *
           * The intention of this method appears to be to set a specific priority to the options;
           * Since most properties are either bridged or merged into the local options objects, there
           * is not much point in handling them separately.
           * TODO: examine if 'most' in previous sentence can be replaced with 'all'. In that case, we
           *       should be able to get rid of this method.
           *
           * @param {string}  subOption  option within object 'chosen' to consider; either 'node', 'edge' or 'label'
           * @param {Object}  pile       array of options objects to consider
           * 
           * @return {boolean|function}  value for passed subOption of 'chosen' to use
           */
          value: function choosify(subOption, pile) {
            // allowed values for subOption
            var allowed = ['node', 'edge', 'label'];
            var value = true;

            var chosen = util.topMost(pile, 'chosen');
            if (typeof chosen === 'boolean') {
              value = chosen;
            } else if ((typeof chosen === 'undefined' ? 'undefined' : (0, _typeof3['default'])(chosen)) === 'object') {
              if (allowed.indexOf(subOption) === -1) {
                throw new Error('choosify: subOption \'' + subOption + '\' should be one of ' + "'" + allowed.join("', '") + "'");
              }

              var chosenEdge = util.topMost(pile, ['chosen', subOption]);
              if (typeof chosenEdge === 'boolean' || typeof chosenEdge === 'function') {
                value = chosenEdge;
              }
            }

            return value;
          }

          /**
           * Check if the point falls within the given rectangle.
           *
           * @param {rect} rect
           * @param {point} point
           * @param {rotationPoint} [rotationPoint] if specified, the rotation that applies to the rectangle.
           * @returns {boolean}  true if point within rectangle, false otherwise
           * @static
           */

        }, {
          key: 'pointInRect',
          value: function pointInRect(rect, point, rotationPoint) {
            if (rect.width <= 0 || rect.height <= 0) {
              return false; // early out
            }

            if (rotationPoint !== undefined) {
              // Rotate the point the same amount as the rectangle
              var tmp = {
                x: point.x - rotationPoint.x,
                y: point.y - rotationPoint.y
              };

              if (rotationPoint.angle !== 0) {
                // In order to get the coordinates the same, you need to 
                // rotate in the reverse direction
                var angle = -rotationPoint.angle;

                var tmp2 = {
                  x: Math.cos(angle) * tmp.x - Math.sin(angle) * tmp.y,
                  y: Math.sin(angle) * tmp.x + Math.cos(angle) * tmp.y
                };
                point = tmp2;
              } else {
                point = tmp;
              }

              // Note that if a rotation is specified, the rectangle coordinates
              // are **not* the full canvas coordinates. They are relative to the
              // rotationPoint. Hence, the point coordinates need not be translated
              // back in this case.
            }

            var right = rect.x + rect.width;
            var bottom = rect.y + rect.width;

            return rect.left < point.x && right > point.x && rect.top < point.y && bottom > point.y;
          }

          /**
           * Check if given value is acceptable as a label text.
           *
           * @param {*} text value to check; can be anything at this point
           * @returns {boolean} true if valid label value, false otherwise
           */

        }, {
          key: 'isValidLabel',
          value: function isValidLabel(text) {
            // Note that this is quite strict: types that *might* be converted to string are disallowed
            return typeof text === 'string' && text !== '';
          }
        }]);
        return ComponentUtil;
      }();

      exports['default'] = ComponentUtil;

      /***/
    },
    /* 49 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(125);
      var global = __webpack_require__(18);
      var hide = __webpack_require__(26);
      var Iterators = __webpack_require__(31);
      var TO_STRING_TAG = __webpack_require__(13)('toStringTag');

      var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + 'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + 'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + 'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + 'TextTrackList,TouchList').split(',');

      for (var i = 0; i < DOMIterables.length; i++) {
        var NAME = DOMIterables[i];
        var Collection = global[NAME];
        var proto = Collection && Collection.prototype;
        if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
        Iterators[NAME] = Iterators.Array;
      }

      /***/
    },
    /* 50 */
    /***/function (module, exports) {

      var toString = {}.toString;

      module.exports = function (it) {
        return toString.call(it).slice(8, -1);
      };

      /***/
    },
    /* 51 */
    /***/function (module, exports) {

      // 7.2.1 RequireObjectCoercible(argument)
      module.exports = function (it) {
        if (it == undefined) throw TypeError("Can't call method on  " + it);
        return it;
      };

      /***/
    },
    /* 52 */
    /***/function (module, exports) {

      module.exports = true;

      /***/
    },
    /* 53 */
    /***/function (module, exports, __webpack_require__) {

      // 7.1.1 ToPrimitive(input [, PreferredType])
      var isObject = __webpack_require__(32);
      // instead of the ES6 spec version, we didn't implement @@toPrimitive case
      // and the second argument - flag - preferred type is a string
      module.exports = function (it, S) {
        if (!isObject(it)) return it;
        var fn, val;
        if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
        if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        throw TypeError("Can't convert object to primitive value");
      };

      /***/
    },
    /* 54 */
    /***/function (module, exports, __webpack_require__) {

      // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
      var anObject = __webpack_require__(27);
      var dPs = __webpack_require__(130);
      var enumBugKeys = __webpack_require__(58);
      var IE_PROTO = __webpack_require__(56)('IE_PROTO');
      var Empty = function Empty() {/* empty */};
      var PROTOTYPE = 'prototype';

      // Create object with fake `null` prototype: use iframe Object with cleared prototype
      var _createDict = function createDict() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = __webpack_require__(82)('iframe');
        var i = enumBugKeys.length;
        var lt = '<';
        var gt = '>';
        var iframeDocument;
        iframe.style.display = 'none';
        __webpack_require__(134).appendChild(iframe);
        iframe.src = 'javascript:'; // eslint-disable-line no-script-url
        // createDict = iframe.contentWindow.Object;
        // html.removeChild(iframe);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
        iframeDocument.close();
        _createDict = iframeDocument.F;
        while (i--) {
          delete _createDict[PROTOTYPE][enumBugKeys[i]];
        }return _createDict();
      };

      module.exports = _create4['default'] || function create(O, Properties) {
        var result;
        if (O !== null) {
          Empty[PROTOTYPE] = anObject(O);
          result = new Empty();
          Empty[PROTOTYPE] = null;
          // add "__proto__" for Object.getPrototypeOf polyfill
          result[IE_PROTO] = O;
        } else result = _createDict();
        return Properties === undefined ? result : dPs(result, Properties);
      };

      /***/
    },
    /* 55 */
    /***/function (module, exports) {

      // 7.1.4 ToInteger
      var ceil = Math.ceil;
      var floor = Math.floor;
      module.exports = function (it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
      };

      /***/
    },
    /* 56 */
    /***/function (module, exports, __webpack_require__) {

      var shared = __webpack_require__(57)('keys');
      var uid = __webpack_require__(40);
      module.exports = function (key) {
        return shared[key] || (shared[key] = uid(key));
      };

      /***/
    },
    /* 57 */
    /***/function (module, exports, __webpack_require__) {

      var global = __webpack_require__(18);
      var SHARED = '__core-js_shared__';
      var store = global[SHARED] || (global[SHARED] = {});
      module.exports = function (key) {
        return store[key] || (store[key] = {});
      };

      /***/
    },
    /* 58 */
    /***/function (module, exports) {

      // IE 8- don't enum bug keys
      module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

      /***/
    },
    /* 59 */
    /***/function (module, exports, __webpack_require__) {

      var def = __webpack_require__(20).f;
      var has = __webpack_require__(22);
      var TAG = __webpack_require__(13)('toStringTag');

      module.exports = function (it, tag, stat) {
        if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
      };

      /***/
    },
    /* 60 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var $at = __webpack_require__(135)(true);

      // 21.1.3.27 String.prototype[@@iterator]()
      __webpack_require__(79)(String, 'String', function (iterated) {
        this._t = String(iterated); // target
        this._i = 0; // next index
        // 21.1.5.2.1 %StringIteratorPrototype%.next()
      }, function () {
        var O = this._t;
        var index = this._i;
        var point;
        if (index >= O.length) return { value: undefined, done: true };
        point = $at(O, index);
        this._i += point.length;
        return { value: point, done: false };
      });

      /***/
    },
    /* 61 */
    /***/function (module, exports, __webpack_require__) {

      exports.f = __webpack_require__(13);

      /***/
    },
    /* 62 */
    /***/function (module, exports, __webpack_require__) {

      var global = __webpack_require__(18);
      var core = __webpack_require__(7);
      var LIBRARY = __webpack_require__(52);
      var wksExt = __webpack_require__(61);
      var defineProperty = __webpack_require__(20).f;
      module.exports = function (name) {
        var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
        if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
      };

      /***/
    },
    /* 63 */
    /***/function (module, exports) {

      exports.f = _getOwnPropertySymbols2['default'];

      /***/
    },
    /* 64 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      var _stringify = __webpack_require__(19);

      var _stringify2 = _interopRequireDefault(_stringify);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var moment = __webpack_require__(9);
      var Component = __webpack_require__(16);
      var DateUtil = __webpack_require__(36);

      /**
       * A Range controls a numeric range with a start and end value.
       * The Range adjusts the range based on mouse events or programmatic changes,
       * and triggers events when the range is changing or has been changed.
       * @param {{dom: Object, domProps: Object, emitter: Emitter}} body
       * @param {Object} [options]    See description at Range.setOptions
       * @constructor Range
       * @extends Component
       */
      function Range(body, options) {
        var now = moment().hours(0).minutes(0).seconds(0).milliseconds(0);
        var start = now.clone().add(-3, 'days').valueOf();
        var end = now.clone().add(3, 'days').valueOf();
        this.millisecondsPerPixelCache = undefined;

        if (options === undefined) {
          this.start = start;
          this.end = end;
        } else {
          this.start = options.start || start;
          this.end = options.end || end;
        }

        this.rolling = false;

        this.body = body;
        this.deltaDifference = 0;
        this.scaleOffset = 0;
        this.startToFront = false;
        this.endToFront = true;

        // default options
        this.defaultOptions = {
          rtl: false,
          start: null,
          end: null,
          moment: moment,
          direction: 'horizontal', // 'horizontal' or 'vertical'
          moveable: true,
          zoomable: true,
          min: null,
          max: null,
          zoomMin: 10, // milliseconds
          zoomMax: 1000 * 60 * 60 * 24 * 365 * 10000, // milliseconds
          rollingMode: {
            follow: false,
            offset: 0.5
          }
        };
        this.options = util.extend({}, this.defaultOptions);
        this.props = {
          touch: {}
        };
        this.animationTimer = null;

        // drag listeners for dragging
        this.body.emitter.on('panstart', this._onDragStart.bind(this));
        this.body.emitter.on('panmove', this._onDrag.bind(this));
        this.body.emitter.on('panend', this._onDragEnd.bind(this));

        // mouse wheel for zooming
        this.body.emitter.on('mousewheel', this._onMouseWheel.bind(this));

        // pinch to zoom
        this.body.emitter.on('touch', this._onTouch.bind(this));
        this.body.emitter.on('pinch', this._onPinch.bind(this));

        // on click of rolling mode button
        this.body.dom.rollingModeBtn.addEventListener('click', this.startRolling.bind(this));

        this.setOptions(options);
      }

      Range.prototype = new Component();

      /**
       * Set options for the range controller
       * @param {Object} options      Available options:
       *                              {number | Date | String} start  Start date for the range
       *                              {number | Date | String} end    End date for the range
       *                              {number} min    Minimum value for start
       *                              {number} max    Maximum value for end
       *                              {number} zoomMin    Set a minimum value for
       *                                                  (end - start).
       *                              {number} zoomMax    Set a maximum value for
       *                                                  (end - start).
       *                              {boolean} moveable Enable moving of the range
       *                                                 by dragging. True by default
       *                              {boolean} zoomable Enable zooming of the range
       *                                                 by pinching/scrolling. True by default
       */
      Range.prototype.setOptions = function (options) {
        if (options) {
          // copy the options that we know
          var fields = ['animation', 'direction', 'min', 'max', 'zoomMin', 'zoomMax', 'moveable', 'zoomable', 'moment', 'activate', 'hiddenDates', 'zoomKey', 'rtl', 'showCurrentTime', 'rollingMode', 'horizontalScroll'];
          util.selectiveExtend(fields, this.options, options);

          if (options.rollingMode && options.rollingMode.follow) {
            this.startRolling();
          }
          if ('start' in options || 'end' in options) {
            // apply a new range. both start and end are optional
            this.setRange(options.start, options.end);
          }
        }
      };

      /**
       * Test whether direction has a valid value
       * @param {string} direction    'horizontal' or 'vertical'
       */
      function validateDirection(direction) {
        if (direction != 'horizontal' && direction != 'vertical') {
          throw new TypeError('Unknown direction "' + direction + '". ' + 'Choose "horizontal" or "vertical".');
        }
      }

      /**
       * Start auto refreshing the current time bar
       */
      Range.prototype.startRolling = function () {
        var me = this;

        /**
         *  Updates the current time.
         */
        function update() {
          me.stopRolling();
          me.rolling = true;

          var interval = me.end - me.start;
          var t = util.convert(new Date(), 'Date').valueOf();

          var start = t - interval * me.options.rollingMode.offset;
          var end = t + interval * (1 - me.options.rollingMode.offset);

          var options = {
            animation: false
          };
          me.setRange(start, end, options);

          // determine interval to refresh
          var scale = me.conversion(me.body.domProps.center.width).scale;
          interval = 1 / scale / 10;
          if (interval < 30) interval = 30;
          if (interval > 1000) interval = 1000;

          me.body.dom.rollingModeBtn.style.visibility = "hidden";
          // start a renderTimer to adjust for the new time
          me.currentTimeTimer = setTimeout(update, interval);
        }

        update();
      };

      /**
       * Stop auto refreshing the current time bar
       */
      Range.prototype.stopRolling = function () {
        if (this.currentTimeTimer !== undefined) {
          clearTimeout(this.currentTimeTimer);
          this.rolling = false;
          this.body.dom.rollingModeBtn.style.visibility = "visible";
        }
      };

      /**
       * Set a new start and end range
       * @param {Date | number | string} [start]
       * @param {Date | number | string} [end]
       * @param {Object} options      Available options:
       *                              {boolean | {duration: number, easingFunction: string}} [animation=false]
       *                                    If true, the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       *                              {boolean} [byUser=false]
       *                              {Event}  event  Mouse event
       * @param {Function} callback     a callback function to be executed at the end of this function  
       * @param {Function} frameCallback    a callback function executed each frame of the range animation.
       *                                    The callback will be passed three parameters:
       *                                    {number} easeCoefficient    an easing coefficent
       *                                    {boolean} willDraw          If true the caller will redraw after the callback completes
       *                                    {boolean} done              If true then animation is ending after the current frame
       */

      Range.prototype.setRange = function (start, end, options, callback, frameCallback) {
        if (!options) {
          options = {};
        }
        if (options.byUser !== true) {
          options.byUser = false;
        }
        var me = this;
        var finalStart = start != undefined ? util.convert(start, 'Date').valueOf() : null;
        var finalEnd = end != undefined ? util.convert(end, 'Date').valueOf() : null;
        this._cancelAnimation();
        this.millisecondsPerPixelCache = undefined;

        if (options.animation) {
          // true or an Object
          var initStart = this.start;
          var initEnd = this.end;
          var duration = (0, _typeof3['default'])(options.animation) === 'object' && 'duration' in options.animation ? options.animation.duration : 500;
          var easingName = (0, _typeof3['default'])(options.animation) === 'object' && 'easingFunction' in options.animation ? options.animation.easingFunction : 'easeInOutQuad';
          var easingFunction = util.easingFunctions[easingName];
          if (!easingFunction) {
            throw new Error('Unknown easing function ' + (0, _stringify2['default'])(easingName) + '. ' + 'Choose from: ' + (0, _keys2['default'])(util.easingFunctions).join(', '));
          }

          var initTime = new Date().valueOf();
          var anyChanged = false;

          var next = function next() {
            if (!me.props.touch.dragging) {
              var now = new Date().valueOf();
              var time = now - initTime;
              var ease = easingFunction(time / duration);
              var done = time > duration;
              var s = done || finalStart === null ? finalStart : initStart + (finalStart - initStart) * ease;
              var e = done || finalEnd === null ? finalEnd : initEnd + (finalEnd - initEnd) * ease;

              changed = me._applyRange(s, e);
              DateUtil.updateHiddenDates(me.options.moment, me.body, me.options.hiddenDates);
              anyChanged = anyChanged || changed;

              var params = {
                start: new Date(me.start),
                end: new Date(me.end),
                byUser: options.byUser,
                event: options.event
              };

              if (frameCallback) {
                frameCallback(ease, changed, done);
              }

              if (changed) {
                me.body.emitter.emit('rangechange', params);
              }

              if (done) {
                if (anyChanged) {
                  me.body.emitter.emit('rangechanged', params);
                  if (callback) {
                    return callback();
                  }
                }
              } else {
                // animate with as high as possible frame rate, leave 20 ms in between
                // each to prevent the browser from blocking
                me.animationTimer = setTimeout(next, 20);
              }
            }
          };

          return next();
        } else {
          var changed = this._applyRange(finalStart, finalEnd);
          DateUtil.updateHiddenDates(this.options.moment, this.body, this.options.hiddenDates);
          if (changed) {
            var params = {
              start: new Date(this.start),
              end: new Date(this.end),
              byUser: options.byUser,
              event: options.event
            };

            this.body.emitter.emit('rangechange', params);
            clearTimeout(me.timeoutID);
            me.timeoutID = setTimeout(function () {
              me.body.emitter.emit('rangechanged', params);
            }, 200);
            if (callback) {
              return callback();
            }
          }
        }
      };

      /**
       * Get the number of milliseconds per pixel.
       *
       * @returns {undefined|number}
       */
      Range.prototype.getMillisecondsPerPixel = function () {
        if (this.millisecondsPerPixelCache === undefined) {
          this.millisecondsPerPixelCache = (this.end - this.start) / this.body.dom.center.clientWidth;
        }
        return this.millisecondsPerPixelCache;
      };

      /**
       * Stop an animation
       * @private
       */
      Range.prototype._cancelAnimation = function () {
        if (this.animationTimer) {
          clearTimeout(this.animationTimer);
          this.animationTimer = null;
        }
      };

      /**
       * Set a new start and end range. This method is the same as setRange, but
       * does not trigger a range change and range changed event, and it returns
       * true when the range is changed
       * @param {number} [start]
       * @param {number} [end]
       * @return {boolean} changed
       * @private
       */
      Range.prototype._applyRange = function (start, end) {
        var newStart = start != null ? util.convert(start, 'Date').valueOf() : this.start,
            newEnd = end != null ? util.convert(end, 'Date').valueOf() : this.end,
            max = this.options.max != null ? util.convert(this.options.max, 'Date').valueOf() : null,
            min = this.options.min != null ? util.convert(this.options.min, 'Date').valueOf() : null,
            diff;

        // check for valid number
        if (isNaN(newStart) || newStart === null) {
          throw new Error('Invalid start "' + start + '"');
        }
        if (isNaN(newEnd) || newEnd === null) {
          throw new Error('Invalid end "' + end + '"');
        }

        // prevent end < start
        if (newEnd < newStart) {
          newEnd = newStart;
        }

        // prevent start < min
        if (min !== null) {
          if (newStart < min) {
            diff = min - newStart;
            newStart += diff;
            newEnd += diff;

            // prevent end > max
            if (max != null) {
              if (newEnd > max) {
                newEnd = max;
              }
            }
          }
        }

        // prevent end > max
        if (max !== null) {
          if (newEnd > max) {
            diff = newEnd - max;
            newStart -= diff;
            newEnd -= diff;

            // prevent start < min
            if (min != null) {
              if (newStart < min) {
                newStart = min;
              }
            }
          }
        }

        // prevent (end-start) < zoomMin
        if (this.options.zoomMin !== null) {
          var zoomMin = parseFloat(this.options.zoomMin);
          if (zoomMin < 0) {
            zoomMin = 0;
          }
          if (newEnd - newStart < zoomMin) {
            // compensate for a scale of 0.5 ms
            var compensation = 0.5;
            if (this.end - this.start === zoomMin && newStart >= this.start - compensation && newEnd <= this.end) {
              // ignore this action, we are already zoomed to the minimum
              newStart = this.start;
              newEnd = this.end;
            } else {
              // zoom to the minimum
              diff = zoomMin - (newEnd - newStart);
              newStart -= diff / 2;
              newEnd += diff / 2;
            }
          }
        }

        // prevent (end-start) > zoomMax
        if (this.options.zoomMax !== null) {
          var zoomMax = parseFloat(this.options.zoomMax);
          if (zoomMax < 0) {
            zoomMax = 0;
          }

          if (newEnd - newStart > zoomMax) {
            if (this.end - this.start === zoomMax && newStart < this.start && newEnd > this.end) {
              // ignore this action, we are already zoomed to the maximum
              newStart = this.start;
              newEnd = this.end;
            } else {
              // zoom to the maximum
              diff = newEnd - newStart - zoomMax;
              newStart += diff / 2;
              newEnd -= diff / 2;
            }
          }
        }

        var changed = this.start != newStart || this.end != newEnd;

        // if the new range does NOT overlap with the old range, emit checkRangedItems to avoid not showing ranged items (ranged meaning has end time, not necessarily of type Range)
        if (!(newStart >= this.start && newStart <= this.end || newEnd >= this.start && newEnd <= this.end) && !(this.start >= newStart && this.start <= newEnd || this.end >= newStart && this.end <= newEnd)) {
          this.body.emitter.emit('checkRangedItems');
        }

        this.start = newStart;
        this.end = newEnd;
        return changed;
      };

      /**
       * Retrieve the current range.
       * @return {Object} An object with start and end properties
       */
      Range.prototype.getRange = function () {
        return {
          start: this.start,
          end: this.end
        };
      };

      /**
       * Calculate the conversion offset and scale for current range, based on
       * the provided width
       * @param {number} width
       * @param {number} [totalHidden=0]
       * @returns {{offset: number, scale: number}} conversion
       */
      Range.prototype.conversion = function (width, totalHidden) {
        return Range.conversion(this.start, this.end, width, totalHidden);
      };

      /**
       * Static method to calculate the conversion offset and scale for a range,
       * based on the provided start, end, and width
       * @param {number} start
       * @param {number} end
       * @param {number} width
       * @param {number} [totalHidden=0]
       * @returns {{offset: number, scale: number}} conversion
       */
      Range.conversion = function (start, end, width, totalHidden) {
        if (totalHidden === undefined) {
          totalHidden = 0;
        }
        if (width != 0 && end - start != 0) {
          return {
            offset: start,
            scale: width / (end - start - totalHidden)
          };
        } else {
          return {
            offset: 0,
            scale: 1
          };
        }
      };

      /**
       * Start dragging horizontally or vertically
       * @param {Event} event
       * @private
       */
      Range.prototype._onDragStart = function (event) {
        this.deltaDifference = 0;
        this.previousDelta = 0;

        // only allow dragging when configured as movable
        if (!this.options.moveable) return;

        // only start dragging when the mouse is inside the current range
        if (!this._isInsideRange(event)) return;

        // refuse to drag when we where pinching to prevent the timeline make a jump
        // when releasing the fingers in opposite order from the touch screen
        if (!this.props.touch.allowDragging) return;

        this.stopRolling();

        this.props.touch.start = this.start;
        this.props.touch.end = this.end;
        this.props.touch.dragging = true;

        if (this.body.dom.root) {
          this.body.dom.root.style.cursor = 'move';
        }
      };

      /**
       * Perform dragging operation
       * @param {Event} event
       * @private
       */
      Range.prototype._onDrag = function (event) {
        if (!event) return;

        if (!this.props.touch.dragging) return;

        // only allow dragging when configured as movable
        if (!this.options.moveable) return;

        // TODO: this may be redundant in hammerjs2
        // refuse to drag when we where pinching to prevent the timeline make a jump
        // when releasing the fingers in opposite order from the touch screen
        if (!this.props.touch.allowDragging) return;

        var direction = this.options.direction;
        validateDirection(direction);
        var delta = direction == 'horizontal' ? event.deltaX : event.deltaY;
        delta -= this.deltaDifference;
        var interval = this.props.touch.end - this.props.touch.start;

        // normalize dragging speed if cutout is in between.
        var duration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
        interval -= duration;

        var width = direction == 'horizontal' ? this.body.domProps.center.width : this.body.domProps.center.height;
        var diffRange;
        if (this.options.rtl) {
          diffRange = delta / width * interval;
        } else {
          diffRange = -delta / width * interval;
        }

        var newStart = this.props.touch.start + diffRange;
        var newEnd = this.props.touch.end + diffRange;

        // snapping times away from hidden zones
        var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, this.previousDelta - delta, true);
        var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, this.previousDelta - delta, true);
        if (safeStart != newStart || safeEnd != newEnd) {
          this.deltaDifference += delta;
          this.props.touch.start = safeStart;
          this.props.touch.end = safeEnd;
          this._onDrag(event);
          return;
        }

        this.previousDelta = delta;
        this._applyRange(newStart, newEnd);

        var startDate = new Date(this.start);
        var endDate = new Date(this.end);

        // fire a rangechange event
        this.body.emitter.emit('rangechange', {
          start: startDate,
          end: endDate,
          byUser: true,
          event: event
        });

        // fire a panmove event
        this.body.emitter.emit('panmove');
      };

      /**
       * Stop dragging operation
       * @param {event} event
       * @private
       */
      Range.prototype._onDragEnd = function (event) {
        if (!this.props.touch.dragging) return;

        // only allow dragging when configured as movable
        if (!this.options.moveable) return;

        // TODO: this may be redundant in hammerjs2
        // refuse to drag when we where pinching to prevent the timeline make a jump
        // when releasing the fingers in opposite order from the touch screen
        if (!this.props.touch.allowDragging) return;

        this.props.touch.dragging = false;
        if (this.body.dom.root) {
          this.body.dom.root.style.cursor = 'auto';
        }

        // fire a rangechanged event
        this.body.emitter.emit('rangechanged', {
          start: new Date(this.start),
          end: new Date(this.end),
          byUser: true,
          event: event
        });
      };

      /**
       * Event handler for mouse wheel event, used to zoom
       * Code from http://adomas.org/javascript-mouse-wheel/
       * @param {Event} event
       * @private
       */
      Range.prototype._onMouseWheel = function (event) {
        // retrieve delta
        var delta = 0;
        if (event.wheelDelta) {
          /* IE/Opera. */
          delta = event.wheelDelta / 120;
        } else if (event.detail) {
          /* Mozilla case. */
          // In Mozilla, sign of delta is different than in IE.
          // Also, delta is multiple of 3.
          delta = -event.detail / 3;
        }

        // don't allow zoom when the according key is pressed and the zoomKey option or not zoomable but movable
        if (this.options.zoomKey && !event[this.options.zoomKey] && this.options.zoomable || !this.options.zoomable && this.options.moveable) {
          return;
        }

        // only allow zooming when configured as zoomable and moveable
        if (!(this.options.zoomable && this.options.moveable)) return;

        // only zoom when the mouse is inside the current range
        if (!this._isInsideRange(event)) return;

        // If delta is nonzero, handle it.
        // Basically, delta is now positive if wheel was scrolled up,
        // and negative, if wheel was scrolled down.
        if (delta) {
          // perform the zoom action. Delta is normally 1 or -1

          // adjust a negative delta such that zooming in with delta 0.1
          // equals zooming out with a delta -0.1
          var scale;
          if (delta < 0) {
            scale = 1 - delta / 5;
          } else {
            scale = 1 / (1 + delta / 5);
          }

          // calculate center, the date to zoom around
          var pointerDate;
          if (this.rolling) {
            pointerDate = this.start + (this.end - this.start) * this.options.rollingMode.offset;
          } else {
            var pointer = this.getPointer({ x: event.clientX, y: event.clientY }, this.body.dom.center);
            pointerDate = this._pointerToDate(pointer);
          }
          this.zoom(scale, pointerDate, delta, event);

          // Prevent default actions caused by mouse wheel
          // (else the page and timeline both scroll)
          event.preventDefault();
        }
      };

      /**
       * Start of a touch gesture
       * @param {Event} event
       * @private
       */
      Range.prototype._onTouch = function (event) {
        // eslint-disable-line no-unused-vars
        this.props.touch.start = this.start;
        this.props.touch.end = this.end;
        this.props.touch.allowDragging = true;
        this.props.touch.center = null;
        this.scaleOffset = 0;
        this.deltaDifference = 0;
        // Disable the browser default handling of this event.
        util.preventDefault(event);
      };

      /**
       * Handle pinch event
       * @param {Event} event
       * @private
       */
      Range.prototype._onPinch = function (event) {
        // only allow zooming when configured as zoomable and moveable
        if (!(this.options.zoomable && this.options.moveable)) return;

        // Disable the browser default handling of this event.
        util.preventDefault(event);

        this.props.touch.allowDragging = false;

        if (!this.props.touch.center) {
          this.props.touch.center = this.getPointer(event.center, this.body.dom.center);
        }

        this.stopRolling();

        var scale = 1 / (event.scale + this.scaleOffset);
        var centerDate = this._pointerToDate(this.props.touch.center);

        var hiddenDuration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
        var hiddenDurationBefore = DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this, centerDate);
        var hiddenDurationAfter = hiddenDuration - hiddenDurationBefore;

        // calculate new start and end
        var newStart = centerDate - hiddenDurationBefore + (this.props.touch.start - (centerDate - hiddenDurationBefore)) * scale;
        var newEnd = centerDate + hiddenDurationAfter + (this.props.touch.end - (centerDate + hiddenDurationAfter)) * scale;

        // snapping times away from hidden zones
        this.startToFront = 1 - scale <= 0; // used to do the right auto correction with periodic hidden times
        this.endToFront = scale - 1 <= 0; // used to do the right auto correction with periodic hidden times

        var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, 1 - scale, true);
        var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, scale - 1, true);
        if (safeStart != newStart || safeEnd != newEnd) {
          this.props.touch.start = safeStart;
          this.props.touch.end = safeEnd;
          this.scaleOffset = 1 - event.scale;
          newStart = safeStart;
          newEnd = safeEnd;
        }

        var options = {
          animation: false,
          byUser: true,
          event: event
        };
        this.setRange(newStart, newEnd, options);

        this.startToFront = false; // revert to default
        this.endToFront = true; // revert to default
      };

      /**
       * Test whether the mouse from a mouse event is inside the visible window,
       * between the current start and end date
       * @param {Object} event
       * @return {boolean} Returns true when inside the visible window
       * @private
       */
      Range.prototype._isInsideRange = function (event) {
        // calculate the time where the mouse is, check whether inside
        // and no scroll action should happen.
        var clientX = event.center ? event.center.x : event.clientX;
        var x;
        if (this.options.rtl) {
          x = clientX - util.getAbsoluteLeft(this.body.dom.centerContainer);
        } else {
          x = util.getAbsoluteRight(this.body.dom.centerContainer) - clientX;
        }
        var time = this.body.util.toTime(x);

        return time >= this.start && time <= this.end;
      };

      /**
       * Helper function to calculate the center date for zooming
       * @param {{x: number, y: number}} pointer
       * @return {number} date
       * @private
       */
      Range.prototype._pointerToDate = function (pointer) {
        var conversion;
        var direction = this.options.direction;

        validateDirection(direction);

        if (direction == 'horizontal') {
          return this.body.util.toTime(pointer.x).valueOf();
        } else {
          var height = this.body.domProps.center.height;
          conversion = this.conversion(height);
          return pointer.y / conversion.scale + conversion.offset;
        }
      };

      /**
       * Get the pointer location relative to the location of the dom element
       * @param {{x: number, y: number}} touch
       * @param {Element} element   HTML DOM element
       * @return {{x: number, y: number}} pointer
       * @private
       */
      Range.prototype.getPointer = function (touch, element) {
        if (this.options.rtl) {
          return {
            x: util.getAbsoluteRight(element) - touch.x,
            y: touch.y - util.getAbsoluteTop(element)
          };
        } else {
          return {
            x: touch.x - util.getAbsoluteLeft(element),
            y: touch.y - util.getAbsoluteTop(element)
          };
        }
      };

      /**
       * Zoom the range the given scale in or out. Start and end date will
       * be adjusted, and the timeline will be redrawn. You can optionally give a
       * date around which to zoom.
       * For example, try scale = 0.9 or 1.1
       * @param {number} scale      Scaling factor. Values above 1 will zoom out,
       *                            values below 1 will zoom in.
       * @param {number} [center]   Value representing a date around which will
       *                            be zoomed.
       * @param {number} delta
       * @param {Event} event
       */
      Range.prototype.zoom = function (scale, center, delta, event) {
        // if centerDate is not provided, take it half between start Date and end Date
        if (center == null) {
          center = (this.start + this.end) / 2;
        }

        var hiddenDuration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
        var hiddenDurationBefore = DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this, center);
        var hiddenDurationAfter = hiddenDuration - hiddenDurationBefore;

        // calculate new start and end
        var newStart = center - hiddenDurationBefore + (this.start - (center - hiddenDurationBefore)) * scale;
        var newEnd = center + hiddenDurationAfter + (this.end - (center + hiddenDurationAfter)) * scale;

        // snapping times away from hidden zones
        this.startToFront = delta > 0 ? false : true; // used to do the right autocorrection with periodic hidden times
        this.endToFront = -delta > 0 ? false : true; // used to do the right autocorrection with periodic hidden times
        var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, delta, true);
        var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, -delta, true);
        if (safeStart != newStart || safeEnd != newEnd) {
          newStart = safeStart;
          newEnd = safeEnd;
        }

        var options = {
          animation: false,
          byUser: true,
          event: event
        };
        this.setRange(newStart, newEnd, options);

        this.startToFront = false; // revert to default
        this.endToFront = true; // revert to default
      };

      /**
       * Move the range with a given delta to the left or right. Start and end
       * value will be adjusted. For example, try delta = 0.1 or -0.1
       * @param {number}  delta     Moving amount. Positive value will move right,
       *                            negative value will move left
       */
      Range.prototype.move = function (delta) {
        // zoom start Date and end Date relative to the centerDate
        var diff = this.end - this.start;

        // apply new values
        var newStart = this.start + diff * delta;
        var newEnd = this.end + diff * delta;

        // TODO: reckon with min and max range

        this.start = newStart;
        this.end = newEnd;
      };

      /**
       * Move the range to a new center point
       * @param {number} moveTo      New center point of the range
       */
      Range.prototype.moveTo = function (moveTo) {
        var center = (this.start + this.end) / 2;

        var diff = center - moveTo;

        // calculate new start and end
        var newStart = this.start - diff;
        var newEnd = this.end - diff;

        var options = {
          animation: false,
          byUser: true,
          event: null
        };
        this.setRange(newStart, newEnd, options);
      };

      module.exports = Range;

      /***/
    },
    /* 65 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _stringify = __webpack_require__(19);

      var _stringify2 = _interopRequireDefault(_stringify);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var Emitter = __webpack_require__(44);
      var Hammer = __webpack_require__(10);
      var hammerUtil = __webpack_require__(37);
      var util = __webpack_require__(2);
      var TimeAxis = __webpack_require__(45);
      var Activator = __webpack_require__(97);
      var DateUtil = __webpack_require__(36);
      var CustomTime = __webpack_require__(46);

      /**
       * Create a timeline visualization
       * @constructor Core
       */
      function Core() {}

      // turn Core into an event emitter
      Emitter(Core.prototype);

      /**
       * Create the main DOM for the Core: a root panel containing left, right,
       * top, bottom, content, and background panel.
       * @param {Element} container  The container element where the Core will
       *                             be attached.
       * @protected
       */
      Core.prototype._create = function (container) {
        this.dom = {};

        this.dom.container = container;

        this.dom.root = document.createElement('div');
        this.dom.background = document.createElement('div');
        this.dom.backgroundVertical = document.createElement('div');
        this.dom.backgroundHorizontal = document.createElement('div');
        this.dom.centerContainer = document.createElement('div');
        this.dom.leftContainer = document.createElement('div');
        this.dom.rightContainer = document.createElement('div');
        this.dom.center = document.createElement('div');
        this.dom.left = document.createElement('div');
        this.dom.right = document.createElement('div');
        this.dom.top = document.createElement('div');
        this.dom.bottom = document.createElement('div');
        this.dom.shadowTop = document.createElement('div');
        this.dom.shadowBottom = document.createElement('div');
        this.dom.shadowTopLeft = document.createElement('div');
        this.dom.shadowBottomLeft = document.createElement('div');
        this.dom.shadowTopRight = document.createElement('div');
        this.dom.shadowBottomRight = document.createElement('div');
        this.dom.rollingModeBtn = document.createElement('div');

        this.dom.root.className = 'vis-timeline';
        this.dom.background.className = 'vis-panel vis-background';
        this.dom.backgroundVertical.className = 'vis-panel vis-background vis-vertical';
        this.dom.backgroundHorizontal.className = 'vis-panel vis-background vis-horizontal';
        this.dom.centerContainer.className = 'vis-panel vis-center';
        this.dom.leftContainer.className = 'vis-panel vis-left';
        this.dom.rightContainer.className = 'vis-panel vis-right';
        this.dom.top.className = 'vis-panel vis-top';
        this.dom.bottom.className = 'vis-panel vis-bottom';
        this.dom.left.className = 'vis-content';
        this.dom.center.className = 'vis-content';
        this.dom.right.className = 'vis-content';
        this.dom.shadowTop.className = 'vis-shadow vis-top';
        this.dom.shadowBottom.className = 'vis-shadow vis-bottom';
        this.dom.shadowTopLeft.className = 'vis-shadow vis-top';
        this.dom.shadowBottomLeft.className = 'vis-shadow vis-bottom';
        this.dom.shadowTopRight.className = 'vis-shadow vis-top';
        this.dom.shadowBottomRight.className = 'vis-shadow vis-bottom';
        this.dom.rollingModeBtn.className = 'vis-rolling-mode-btn';

        this.dom.root.appendChild(this.dom.background);
        this.dom.root.appendChild(this.dom.backgroundVertical);
        this.dom.root.appendChild(this.dom.backgroundHorizontal);
        this.dom.root.appendChild(this.dom.centerContainer);
        this.dom.root.appendChild(this.dom.leftContainer);
        this.dom.root.appendChild(this.dom.rightContainer);
        this.dom.root.appendChild(this.dom.top);
        this.dom.root.appendChild(this.dom.bottom);
        this.dom.root.appendChild(this.dom.bottom);
        this.dom.root.appendChild(this.dom.rollingModeBtn);

        this.dom.centerContainer.appendChild(this.dom.center);
        this.dom.leftContainer.appendChild(this.dom.left);
        this.dom.rightContainer.appendChild(this.dom.right);
        this.dom.centerContainer.appendChild(this.dom.shadowTop);
        this.dom.centerContainer.appendChild(this.dom.shadowBottom);
        this.dom.leftContainer.appendChild(this.dom.shadowTopLeft);
        this.dom.leftContainer.appendChild(this.dom.shadowBottomLeft);
        this.dom.rightContainer.appendChild(this.dom.shadowTopRight);
        this.dom.rightContainer.appendChild(this.dom.shadowBottomRight);

        // size properties of each of the panels
        this.props = {
          root: {},
          background: {},
          centerContainer: {},
          leftContainer: {},
          rightContainer: {},
          center: {},
          left: {},
          right: {},
          top: {},
          bottom: {},
          border: {},
          scrollTop: 0,
          scrollTopMin: 0
        };

        this.on('rangechange', function () {
          if (this.initialDrawDone === true) {
            this._redraw();
          }
        }.bind(this));
        this.on('rangechanged', function () {
          if (!this.initialRangeChangeDone) {
            this.initialRangeChangeDone = true;
          }
        }.bind(this));
        this.on('touch', this._onTouch.bind(this));
        this.on('panmove', this._onDrag.bind(this));

        var me = this;
        this._origRedraw = this._redraw.bind(this);
        this._redraw = util.throttle(this._origRedraw);

        this.on('_change', function (properties) {
          if (me.itemSet && me.itemSet.initialItemSetDrawn && properties && properties.queue == true) {
            me._redraw();
          } else {
            me._origRedraw();
          }
        });

        // create event listeners for all interesting events, these events will be
        // emitted via emitter
        this.hammer = new Hammer(this.dom.root);
        var pinchRecognizer = this.hammer.get('pinch').set({ enable: true });
        hammerUtil.disablePreventDefaultVertically(pinchRecognizer);
        this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });
        this.listeners = {};

        var events = ['tap', 'doubletap', 'press', 'pinch', 'pan', 'panstart', 'panmove', 'panend'
        // TODO: cleanup
        //'touch', 'pinch',
        //'tap', 'doubletap', 'hold',
        //'dragstart', 'drag', 'dragend',
        //'mousewheel', 'DOMMouseScroll' // DOMMouseScroll is needed for Firefox
        ];
        events.forEach(function (type) {
          var listener = function listener(event) {
            if (me.isActive()) {
              me.emit(type, event);
            }
          };
          me.hammer.on(type, listener);
          me.listeners[type] = listener;
        });

        // emulate a touch event (emitted before the start of a pan, pinch, tap, or press)
        hammerUtil.onTouch(this.hammer, function (event) {
          me.emit('touch', event);
        }.bind(this));

        // emulate a release event (emitted after a pan, pinch, tap, or press)
        hammerUtil.onRelease(this.hammer, function (event) {
          me.emit('release', event);
        }.bind(this));

        /**
         *
         * @param {WheelEvent} event
         */
        function onMouseWheel(event) {
          if (this.isActive()) {
            this.emit('mousewheel', event);
          }

          // deltaX and deltaY normalization from jquery.mousewheel.js
          var deltaX = 0;
          var deltaY = 0;

          // Old school scrollwheel delta
          if ('detail' in event) {
            deltaY = event.detail * -1;
          }
          if ('wheelDelta' in event) {
            deltaY = event.wheelDelta;
          }
          if ('wheelDeltaY' in event) {
            deltaY = event.wheelDeltaY;
          }
          if ('wheelDeltaX' in event) {
            deltaX = event.wheelDeltaX * -1;
          }

          // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
          if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
            deltaX = deltaY * -1;
            deltaY = 0;
          }

          // New school wheel delta (wheel event)
          if ('deltaY' in event) {
            deltaY = event.deltaY * -1;
          }
          if ('deltaX' in event) {
            deltaX = event.deltaX;
          }

          // prevent scrolling when zoomKey defined or activated
          if (!this.options.zoomKey || event[this.options.zoomKey]) return;

          // Prevent default actions caused by mouse wheel
          // (else the page and timeline both scroll)
          event.preventDefault();

          if (this.options.verticalScroll && Math.abs(deltaY) >= Math.abs(deltaX)) {
            var current = this.props.scrollTop;
            var adjusted = current + deltaY;

            if (this.isActive()) {
              this._setScrollTop(adjusted);
              this._redraw();
              this.emit('scroll', event);
            }
          } else if (this.options.horizontalScroll) {
            var delta = Math.abs(deltaX) >= Math.abs(deltaY) ? deltaX : deltaY;

            // calculate a single scroll jump relative to the range scale
            var diff = delta / 120 * (this.range.end - this.range.start) / 20;
            // calculate new start and end
            var newStart = this.range.start + diff;
            var newEnd = this.range.end + diff;

            var options = {
              animation: false,
              byUser: true,
              event: event
            };
            this.range.setRange(newStart, newEnd, options);
          }
        }

        if (this.dom.centerContainer.addEventListener) {
          // IE9, Chrome, Safari, Opera
          this.dom.centerContainer.addEventListener("mousewheel", onMouseWheel.bind(this), false);
          // Firefox
          this.dom.centerContainer.addEventListener("DOMMouseScroll", onMouseWheel.bind(this), false);
        } else {
          // IE 6/7/8
          this.dom.centerContainer.attachEvent("onmousewheel", onMouseWheel.bind(this));
        }

        /**
         *
         * @param {scroll} event
         */
        function onMouseScrollSide(event) {
          if (!me.options.verticalScroll) return;
          event.preventDefault();
          if (me.isActive()) {
            var adjusted = -event.target.scrollTop;
            me._setScrollTop(adjusted);
            me._redraw();
            me.emit('scrollSide', event);
          }
        }

        this.dom.left.parentNode.addEventListener('scroll', onMouseScrollSide.bind(this));
        this.dom.right.parentNode.addEventListener('scroll', onMouseScrollSide.bind(this));

        var itemAddedToTimeline = false;

        /**
         *
         * @param {dragover} event
         * @returns {boolean}
         */
        function handleDragOver(event) {
          if (event.preventDefault) {
            event.preventDefault(); // Necessary. Allows us to drop.
          }

          // make sure your target is a vis element
          if (!event.target.className.indexOf("vis") > -1) return;

          // make sure only one item is added every time you're over the timeline
          if (itemAddedToTimeline) return;

          event.dataTransfer.dropEffect = 'move';
          itemAddedToTimeline = true;
          return false;
        }

        /**
         *
         * @param {drop} event
         * @returns {boolean}
         */
        function handleDrop(event) {
          // prevent redirect to blank page - Firefox
          if (event.preventDefault) {
            event.preventDefault();
          }
          if (event.stopPropagation) {
            event.stopPropagation();
          }
          // return when dropping non-vis items
          try {
            var itemData = JSON.parse(event.dataTransfer.getData("text"));
            if (!itemData || !itemData.content) return;
          } catch (err) {
            return false;
          }

          itemAddedToTimeline = false;
          event.center = {
            x: event.clientX,
            y: event.clientY
          };

          if (itemData.target !== 'item') {
            me.itemSet._onAddItem(event);
          } else {
            me.itemSet._onDropObjectOnItem(event);
          }
          me.emit('drop', me.getEventProperties(event));
          return false;
        }

        this.dom.center.addEventListener('dragover', handleDragOver.bind(this), false);
        this.dom.center.addEventListener('drop', handleDrop.bind(this), false);

        this.customTimes = [];

        // store state information needed for touch events
        this.touch = {};

        this.redrawCount = 0;
        this.initialDrawDone = false;
        this.initialRangeChangeDone = false;

        // attach the root panel to the provided container
        if (!container) throw new Error('No container provided');
        container.appendChild(this.dom.root);
      };

      /**
       * Set options. Options will be passed to all components loaded in the Timeline.
       * @param {Object} [options]
       *                           {String} orientation
       *                              Vertical orientation for the Timeline,
       *                              can be 'bottom' (default) or 'top'.
       *                           {string | number} width
       *                              Width for the timeline, a number in pixels or
       *                              a css string like '1000px' or '75%'. '100%' by default.
       *                           {string | number} height
       *                              Fixed height for the Timeline, a number in pixels or
       *                              a css string like '400px' or '75%'. If undefined,
       *                              The Timeline will automatically size such that
       *                              its contents fit.
       *                           {string | number} minHeight
       *                              Minimum height for the Timeline, a number in pixels or
       *                              a css string like '400px' or '75%'.
       *                           {string | number} maxHeight
       *                              Maximum height for the Timeline, a number in pixels or
       *                              a css string like '400px' or '75%'.
       *                           {number | Date | string} start
       *                              Start date for the visible window
       *                           {number | Date | string} end
       *                              End date for the visible window
       */
      Core.prototype.setOptions = function (options) {
        if (options) {
          // copy the known options
          var fields = ['width', 'height', 'minHeight', 'maxHeight', 'autoResize', 'start', 'end', 'clickToUse', 'dataAttributes', 'hiddenDates', 'locale', 'locales', 'moment', 'rtl', 'zoomKey', 'horizontalScroll', 'verticalScroll'];
          util.selectiveExtend(fields, this.options, options);

          this.dom.rollingModeBtn.style.visibility = 'hidden';

          if (this.options.rtl) {
            this.dom.container.style.direction = "rtl";
            this.dom.backgroundVertical.className = 'vis-panel vis-background vis-vertical-rtl';
          }

          if (this.options.verticalScroll) {
            if (this.options.rtl) {
              this.dom.rightContainer.className = 'vis-panel vis-right vis-vertical-scroll';
            } else {
              this.dom.leftContainer.className = 'vis-panel vis-left vis-vertical-scroll';
            }
          }

          if ((0, _typeof3['default'])(this.options.orientation) !== 'object') {
            this.options.orientation = { item: undefined, axis: undefined };
          }
          if ('orientation' in options) {
            if (typeof options.orientation === 'string') {
              this.options.orientation = {
                item: options.orientation,
                axis: options.orientation
              };
            } else if ((0, _typeof3['default'])(options.orientation) === 'object') {
              if ('item' in options.orientation) {
                this.options.orientation.item = options.orientation.item;
              }
              if ('axis' in options.orientation) {
                this.options.orientation.axis = options.orientation.axis;
              }
            }
          }

          if (this.options.orientation.axis === 'both') {
            if (!this.timeAxis2) {
              var timeAxis2 = this.timeAxis2 = new TimeAxis(this.body);
              timeAxis2.setOptions = function (options) {
                var _options = options ? util.extend({}, options) : {};
                _options.orientation = 'top'; // override the orientation option, always top
                TimeAxis.prototype.setOptions.call(timeAxis2, _options);
              };
              this.components.push(timeAxis2);
            }
          } else {
            if (this.timeAxis2) {
              var index = this.components.indexOf(this.timeAxis2);
              if (index !== -1) {
                this.components.splice(index, 1);
              }
              this.timeAxis2.destroy();
              this.timeAxis2 = null;
            }
          }

          // if the graph2d's drawPoints is a function delegate the callback to the onRender property
          if (typeof options.drawPoints == 'function') {
            options.drawPoints = {
              onRender: options.drawPoints
            };
          }

          if ('hiddenDates' in this.options) {
            DateUtil.convertHiddenOptions(this.options.moment, this.body, this.options.hiddenDates);
          }

          if ('clickToUse' in options) {
            if (options.clickToUse) {
              if (!this.activator) {
                this.activator = new Activator(this.dom.root);
              }
            } else {
              if (this.activator) {
                this.activator.destroy();
                delete this.activator;
              }
            }
          }

          if ('showCustomTime' in options) {
            throw new Error('Option `showCustomTime` is deprecated. Create a custom time bar via timeline.addCustomTime(time [, id])');
          }

          // enable/disable autoResize
          this._initAutoResize();
        }

        // propagate options to all components
        this.components.forEach(function (component) {
          return component.setOptions(options);
        });

        // enable/disable configure
        if ('configure' in options) {
          if (!this.configurator) {
            this.configurator = this._createConfigurator();
          }

          this.configurator.setOptions(options.configure);

          // collect the settings of all components, and pass them to the configuration system
          var appliedOptions = util.deepExtend({}, this.options);
          this.components.forEach(function (component) {
            util.deepExtend(appliedOptions, component.options);
          });
          this.configurator.setModuleOptions({ global: appliedOptions });
        }

        this._redraw();
      };

      /**
       * Returns true when the Timeline is active.
       * @returns {boolean}
       */
      Core.prototype.isActive = function () {
        return !this.activator || this.activator.active;
      };

      /**
       * Destroy the Core, clean up all DOM elements and event listeners.
       */
      Core.prototype.destroy = function () {
        // unbind datasets
        this.setItems(null);
        this.setGroups(null);

        // remove all event listeners
        this.off();

        // stop checking for changed size
        this._stopAutoResize();

        // remove from DOM
        if (this.dom.root.parentNode) {
          this.dom.root.parentNode.removeChild(this.dom.root);
        }
        this.dom = null;

        // remove Activator
        if (this.activator) {
          this.activator.destroy();
          delete this.activator;
        }

        // cleanup hammer touch events
        for (var event in this.listeners) {
          if (this.listeners.hasOwnProperty(event)) {
            delete this.listeners[event];
          }
        }
        this.listeners = null;
        this.hammer = null;

        // give all components the opportunity to cleanup
        this.components.forEach(function (component) {
          return component.destroy();
        });

        this.body = null;
      };

      /**
       * Set a custom time bar
       * @param {Date} time
       * @param {number} [id=undefined] Optional id of the custom time bar to be adjusted.
       */
      Core.prototype.setCustomTime = function (time, id) {
        var customTimes = this.customTimes.filter(function (component) {
          return id === component.options.id;
        });

        if (customTimes.length === 0) {
          throw new Error('No custom time bar found with id ' + (0, _stringify2['default'])(id));
        }

        if (customTimes.length > 0) {
          customTimes[0].setCustomTime(time);
        }
      };

      /**
       * Retrieve the current custom time.
       * @param {number} [id=undefined]    Id of the custom time bar.
       * @return {Date | undefined} customTime
       */
      Core.prototype.getCustomTime = function (id) {
        var customTimes = this.customTimes.filter(function (component) {
          return component.options.id === id;
        });

        if (customTimes.length === 0) {
          throw new Error('No custom time bar found with id ' + (0, _stringify2['default'])(id));
        }
        return customTimes[0].getCustomTime();
      };

      /**
       * Set a custom title for the custom time bar.
       * @param {string} [title] Custom title
       * @param {number} [id=undefined]    Id of the custom time bar.
       * @returns {*}
       */
      Core.prototype.setCustomTimeTitle = function (title, id) {
        var customTimes = this.customTimes.filter(function (component) {
          return component.options.id === id;
        });

        if (customTimes.length === 0) {
          throw new Error('No custom time bar found with id ' + (0, _stringify2['default'])(id));
        }
        if (customTimes.length > 0) {
          return customTimes[0].setCustomTitle(title);
        }
      };

      /**
       * Retrieve meta information from an event.
       * Should be overridden by classes extending Core
       * @param {Event} event
       * @return {Object} An object with related information.
       */
      Core.prototype.getEventProperties = function (event) {
        return { event: event };
      };

      /**
       * Add custom vertical bar
       * @param {Date | string | number} [time]  A Date, unix timestamp, or
       *                                         ISO date string. Time point where
       *                                         the new bar should be placed.
       *                                         If not provided, `new Date()` will
       *                                         be used.
       * @param {number | string} [id=undefined] Id of the new bar. Optional
       * @return {number | string}               Returns the id of the new bar
       */
      Core.prototype.addCustomTime = function (time, id) {
        var timestamp = time !== undefined ? util.convert(time, 'Date').valueOf() : new Date();

        var exists = this.customTimes.some(function (customTime) {
          return customTime.options.id === id;
        });
        if (exists) {
          throw new Error('A custom time with id ' + (0, _stringify2['default'])(id) + ' already exists');
        }

        var customTime = new CustomTime(this.body, util.extend({}, this.options, {
          time: timestamp,
          id: id
        }));

        this.customTimes.push(customTime);
        this.components.push(customTime);
        this._redraw();

        return id;
      };

      /**
       * Remove previously added custom bar
       * @param {int} id ID of the custom bar to be removed
       * [at]returns {boolean} True if the bar exists and is removed, false otherwise
       */
      Core.prototype.removeCustomTime = function (id) {
        var customTimes = this.customTimes.filter(function (bar) {
          return bar.options.id === id;
        });

        if (customTimes.length === 0) {
          throw new Error('No custom time bar found with id ' + (0, _stringify2['default'])(id));
        }

        customTimes.forEach(function (customTime) {
          this.customTimes.splice(this.customTimes.indexOf(customTime), 1);
          this.components.splice(this.components.indexOf(customTime), 1);
          customTime.destroy();
        }.bind(this));
      };

      /**
       * Get the id's of the currently visible items.
       * @returns {Array} The ids of the visible items
       */
      Core.prototype.getVisibleItems = function () {
        return this.itemSet && this.itemSet.getVisibleItems() || [];
      };

      /**
       * Set Core window such that it fits all items
       * @param {Object} [options]  Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       * @param {function} [callback] a callback funtion to be executed at the end of this function
       */
      Core.prototype.fit = function (options, callback) {
        var range = this.getDataRange();

        // skip range set if there is no min and max date
        if (range.min === null && range.max === null) {
          return;
        }

        // apply a margin of 1% left and right of the data
        var interval = range.max - range.min;
        var min = new Date(range.min.valueOf() - interval * 0.01);
        var max = new Date(range.max.valueOf() + interval * 0.01);
        var animation = options && options.animation !== undefined ? options.animation : true;
        this.range.setRange(min, max, { animation: animation }, callback);
      };

      /**
       * Calculate the data range of the items start and end dates
       * [at]returns {{min: [Date], max: [Date]}}
       * @protected
       */
      Core.prototype.getDataRange = function () {
        // must be implemented by Timeline and Graph2d
        throw new Error('Cannot invoke abstract method getDataRange');
      };

      /**
       * Set the visible window. Both parameters are optional, you can change only
       * start or only end. Syntax:
       *
       *     TimeLine.setWindow(start, end)
       *     TimeLine.setWindow(start, end, options)
       *     TimeLine.setWindow(range)
       *
       * Where start and end can be a Date, number, or string, and range is an
       * object with properties start and end.
       *
       * @param {Date | number | string | Object} [start] Start date of visible window
       * @param {Date | number | string} [end]            End date of visible window
       * @param {Object} [options]  Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       * @param {function} [callback] a callback funtion to be executed at the end of this function
       */
      Core.prototype.setWindow = function (start, end, options, callback) {
        if (typeof arguments[2] == "function") {
          callback = arguments[2];
          options = {};
        }
        var animation;
        var range;
        if (arguments.length == 1) {
          range = arguments[0];
          animation = range.animation !== undefined ? range.animation : true;
          this.range.setRange(range.start, range.end, { animation: animation });
        } else if (arguments.length == 2 && typeof arguments[1] == "function") {
          range = arguments[0];
          callback = arguments[1];
          animation = range.animation !== undefined ? range.animation : true;
          this.range.setRange(range.start, range.end, { animation: animation }, callback);
        } else {
          animation = options && options.animation !== undefined ? options.animation : true;
          this.range.setRange(start, end, { animation: animation }, callback);
        }
      };

      /**
       * Move the window such that given time is centered on screen.
       * @param {Date | number | string} time
       * @param {Object} [options]  Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       * @param {function} [callback] a callback funtion to be executed at the end of this function
       */
      Core.prototype.moveTo = function (time, options, callback) {
        if (typeof arguments[1] == "function") {
          callback = arguments[1];
          options = {};
        }
        var interval = this.range.end - this.range.start;
        var t = util.convert(time, 'Date').valueOf();

        var start = t - interval / 2;
        var end = t + interval / 2;
        var animation = options && options.animation !== undefined ? options.animation : true;

        this.range.setRange(start, end, { animation: animation }, callback);
      };

      /**
       * Get the visible window
       * @return {{start: Date, end: Date}}   Visible range
       */
      Core.prototype.getWindow = function () {
        var range = this.range.getRange();
        return {
          start: new Date(range.start),
          end: new Date(range.end)
        };
      };

      /**
       * Zoom in the window such that given time is centered on screen.
       * @param {number} percentage - must be between [0..1]
       * @param {Object} [options]  Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       * @param {function} [callback] a callback funtion to be executed at the end of this function
       */
      Core.prototype.zoomIn = function (percentage, options, callback) {
        if (!percentage || percentage < 0 || percentage > 1) return;
        if (typeof arguments[1] == "function") {
          callback = arguments[1];
          options = {};
        }
        var range = this.getWindow();
        var start = range.start.valueOf();
        var end = range.end.valueOf();
        var interval = end - start;
        var newInterval = interval / (1 + percentage);
        var distance = (interval - newInterval) / 2;
        var newStart = start + distance;
        var newEnd = end - distance;

        this.setWindow(newStart, newEnd, options, callback);
      };

      /**
       * Zoom out the window such that given time is centered on screen.
       * @param {number} percentage - must be between [0..1]
       * @param {Object} [options]  Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       * @param {function} [callback] a callback funtion to be executed at the end of this function
       */
      Core.prototype.zoomOut = function (percentage, options, callback) {
        if (!percentage || percentage < 0 || percentage > 1) return;
        if (typeof arguments[1] == "function") {
          callback = arguments[1];
          options = {};
        }
        var range = this.getWindow();
        var start = range.start.valueOf();
        var end = range.end.valueOf();
        var interval = end - start;
        var newStart = start - interval * percentage / 2;
        var newEnd = end + interval * percentage / 2;

        this.setWindow(newStart, newEnd, options, callback);
      };

      /**
       * Force a redraw. Can be overridden by implementations of Core
       *
       * Note: this function will be overridden on construction with a trottled version
       */
      Core.prototype.redraw = function () {
        this._redraw();
      };

      /**
       * Redraw for internal use. Redraws all components. See also the public
       * method redraw.
       * @protected
       */
      Core.prototype._redraw = function () {
        this.redrawCount++;
        var resized = false;
        var options = this.options;
        var props = this.props;
        var dom = this.dom;

        if (!dom || !dom.container || dom.root.offsetWidth == 0) return; // when destroyed, or invisible

        DateUtil.updateHiddenDates(this.options.moment, this.body, this.options.hiddenDates);

        // update class names
        if (options.orientation == 'top') {
          util.addClassName(dom.root, 'vis-top');
          util.removeClassName(dom.root, 'vis-bottom');
        } else {
          util.removeClassName(dom.root, 'vis-top');
          util.addClassName(dom.root, 'vis-bottom');
        }

        // update root width and height options
        dom.root.style.maxHeight = util.option.asSize(options.maxHeight, '');
        dom.root.style.minHeight = util.option.asSize(options.minHeight, '');
        dom.root.style.width = util.option.asSize(options.width, '');

        // calculate border widths
        props.border.left = (dom.centerContainer.offsetWidth - dom.centerContainer.clientWidth) / 2;
        props.border.right = props.border.left;
        props.border.top = (dom.centerContainer.offsetHeight - dom.centerContainer.clientHeight) / 2;
        props.border.bottom = props.border.top;
        props.borderRootHeight = dom.root.offsetHeight - dom.root.clientHeight;
        props.borderRootWidth = dom.root.offsetWidth - dom.root.clientWidth;

        // workaround for a bug in IE: the clientWidth of an element with
        // a height:0px and overflow:hidden is not calculated and always has value 0
        if (dom.centerContainer.clientHeight === 0) {
          props.border.left = props.border.top;
          props.border.right = props.border.left;
        }
        if (dom.root.clientHeight === 0) {
          props.borderRootWidth = props.borderRootHeight;
        }

        // calculate the heights. If any of the side panels is empty, we set the height to
        // minus the border width, such that the border will be invisible
        props.center.height = dom.center.offsetHeight;
        props.left.height = dom.left.offsetHeight;
        props.right.height = dom.right.offsetHeight;
        props.top.height = dom.top.clientHeight || -props.border.top;
        props.bottom.height = dom.bottom.clientHeight || -props.border.bottom;

        // TODO: compensate borders when any of the panels is empty.

        // apply auto height
        // TODO: only calculate autoHeight when needed (else we cause an extra reflow/repaint of the DOM)
        var contentHeight = Math.max(props.left.height, props.center.height, props.right.height);
        var autoHeight = props.top.height + contentHeight + props.bottom.height + props.borderRootHeight + props.border.top + props.border.bottom;
        dom.root.style.height = util.option.asSize(options.height, autoHeight + 'px');

        // calculate heights of the content panels
        props.root.height = dom.root.offsetHeight;
        props.background.height = props.root.height - props.borderRootHeight;
        var containerHeight = props.root.height - props.top.height - props.bottom.height - props.borderRootHeight;
        props.centerContainer.height = containerHeight;
        props.leftContainer.height = containerHeight;
        props.rightContainer.height = props.leftContainer.height;

        // calculate the widths of the panels
        props.root.width = dom.root.offsetWidth;
        props.background.width = props.root.width - props.borderRootWidth;

        if (!this.initialDrawDone) {
          props.scrollbarWidth = util.getScrollBarWidth();
        }

        if (options.verticalScroll) {
          if (options.rtl) {
            props.left.width = dom.leftContainer.clientWidth || -props.border.left;
            props.right.width = dom.rightContainer.clientWidth + props.scrollbarWidth || -props.border.right;
          } else {
            props.left.width = dom.leftContainer.clientWidth + props.scrollbarWidth || -props.border.left;
            props.right.width = dom.rightContainer.clientWidth || -props.border.right;
          }
        } else {
          props.left.width = dom.leftContainer.clientWidth || -props.border.left;
          props.right.width = dom.rightContainer.clientWidth || -props.border.right;
        }

        this._setDOM();

        // update the scrollTop, feasible range for the offset can be changed
        // when the height of the Core or of the contents of the center changed
        var offset = this._updateScrollTop();

        // reposition the scrollable contents
        if (options.orientation.item != 'top') {
          offset += Math.max(props.centerContainer.height - props.center.height - props.border.top - props.border.bottom, 0);
        }
        dom.center.style.top = offset + 'px';

        // show shadows when vertical scrolling is available
        var visibilityTop = props.scrollTop == 0 ? 'hidden' : '';
        var visibilityBottom = props.scrollTop == props.scrollTopMin ? 'hidden' : '';
        dom.shadowTop.style.visibility = visibilityTop;
        dom.shadowBottom.style.visibility = visibilityBottom;
        dom.shadowTopLeft.style.visibility = visibilityTop;
        dom.shadowBottomLeft.style.visibility = visibilityBottom;
        dom.shadowTopRight.style.visibility = visibilityTop;
        dom.shadowBottomRight.style.visibility = visibilityBottom;

        if (options.verticalScroll) {
          dom.rightContainer.className = 'vis-panel vis-right vis-vertical-scroll';
          dom.leftContainer.className = 'vis-panel vis-left vis-vertical-scroll';

          dom.shadowTopRight.style.visibility = "hidden";
          dom.shadowBottomRight.style.visibility = "hidden";
          dom.shadowTopLeft.style.visibility = "hidden";
          dom.shadowBottomLeft.style.visibility = "hidden";

          dom.left.style.top = '0px';
          dom.right.style.top = '0px';
        }

        if (!options.verticalScroll || props.center.height < props.centerContainer.height) {
          dom.left.style.top = offset + 'px';
          dom.right.style.top = offset + 'px';
          dom.rightContainer.className = dom.rightContainer.className.replace(new RegExp('(?:^|\\s)' + 'vis-vertical-scroll' + '(?:\\s|$)'), ' ');
          dom.leftContainer.className = dom.leftContainer.className.replace(new RegExp('(?:^|\\s)' + 'vis-vertical-scroll' + '(?:\\s|$)'), ' ');
          props.left.width = dom.leftContainer.clientWidth || -props.border.left;
          props.right.width = dom.rightContainer.clientWidth || -props.border.right;
          this._setDOM();
        }

        // enable/disable vertical panning
        var contentsOverflow = props.center.height > props.centerContainer.height;
        this.hammer.get('pan').set({
          direction: contentsOverflow ? Hammer.DIRECTION_ALL : Hammer.DIRECTION_HORIZONTAL
        });

        // redraw all components
        this.components.forEach(function (component) {
          resized = component.redraw() || resized;
        });
        var MAX_REDRAW = 5;
        if (resized) {
          if (this.redrawCount < MAX_REDRAW) {
            this.body.emitter.emit('_change');
            return;
          } else {
            console.log('WARNING: infinite loop in redraw?');
          }
        } else {
          this.redrawCount = 0;
        }

        //Emit public 'changed' event for UI updates, see issue #1592
        this.body.emitter.emit("changed");
      };

      Core.prototype._setDOM = function () {
        var props = this.props;
        var dom = this.dom;

        props.leftContainer.width = props.left.width;
        props.rightContainer.width = props.right.width;
        var centerWidth = props.root.width - props.left.width - props.right.width - props.borderRootWidth;
        props.center.width = centerWidth;
        props.centerContainer.width = centerWidth;
        props.top.width = centerWidth;
        props.bottom.width = centerWidth;

        // resize the panels
        dom.background.style.height = props.background.height + 'px';
        dom.backgroundVertical.style.height = props.background.height + 'px';
        dom.backgroundHorizontal.style.height = props.centerContainer.height + 'px';
        dom.centerContainer.style.height = props.centerContainer.height + 'px';
        dom.leftContainer.style.height = props.leftContainer.height + 'px';
        dom.rightContainer.style.height = props.rightContainer.height + 'px';

        dom.background.style.width = props.background.width + 'px';
        dom.backgroundVertical.style.width = props.centerContainer.width + 'px';
        dom.backgroundHorizontal.style.width = props.background.width + 'px';
        dom.centerContainer.style.width = props.center.width + 'px';
        dom.top.style.width = props.top.width + 'px';
        dom.bottom.style.width = props.bottom.width + 'px';

        // reposition the panels
        dom.background.style.left = '0';
        dom.background.style.top = '0';
        dom.backgroundVertical.style.left = props.left.width + props.border.left + 'px';
        dom.backgroundVertical.style.top = '0';
        dom.backgroundHorizontal.style.left = '0';
        dom.backgroundHorizontal.style.top = props.top.height + 'px';
        dom.centerContainer.style.left = props.left.width + 'px';
        dom.centerContainer.style.top = props.top.height + 'px';
        dom.leftContainer.style.left = '0';
        dom.leftContainer.style.top = props.top.height + 'px';
        dom.rightContainer.style.left = props.left.width + props.center.width + 'px';
        dom.rightContainer.style.top = props.top.height + 'px';
        dom.top.style.left = props.left.width + 'px';
        dom.top.style.top = '0';
        dom.bottom.style.left = props.left.width + 'px';
        dom.bottom.style.top = props.top.height + props.centerContainer.height + 'px';
        dom.center.style.left = '0';
        dom.left.style.left = '0';
        dom.right.style.left = '0';
      };

      // TODO: deprecated since version 1.1.0, remove some day
      Core.prototype.repaint = function () {
        throw new Error('Function repaint is deprecated. Use redraw instead.');
      };

      /**
       * Set a current time. This can be used for example to ensure that a client's
       * time is synchronized with a shared server time.
       * Only applicable when option `showCurrentTime` is true.
       * @param {Date | string | number} time     A Date, unix timestamp, or
       *                                          ISO date string.
       */
      Core.prototype.setCurrentTime = function (time) {
        if (!this.currentTime) {
          throw new Error('Option showCurrentTime must be true');
        }

        this.currentTime.setCurrentTime(time);
      };

      /**
       * Get the current time.
       * Only applicable when option `showCurrentTime` is true.
       * @return {Date} Returns the current time.
       */
      Core.prototype.getCurrentTime = function () {
        if (!this.currentTime) {
          throw new Error('Option showCurrentTime must be true');
        }

        return this.currentTime.getCurrentTime();
      };

      /**
       * Convert a position on screen (pixels) to a datetime
       * @param {int}     x    Position on the screen in pixels
       * @return {Date}   time The datetime the corresponds with given position x
       * @protected
       */
      // TODO: move this function to Range
      Core.prototype._toTime = function (x) {
        return DateUtil.toTime(this, x, this.props.center.width);
      };

      /**
       * Convert a position on the global screen (pixels) to a datetime
       * @param {int}     x    Position on the screen in pixels
       * @return {Date}   time The datetime the corresponds with given position x
       * @protected
       */
      // TODO: move this function to Range
      Core.prototype._toGlobalTime = function (x) {
        return DateUtil.toTime(this, x, this.props.root.width);
        //var conversion = this.range.conversion(this.props.root.width);
        //return new Date(x / conversion.scale + conversion.offset);
      };

      /**
       * Convert a datetime (Date object) into a position on the screen
       * @param {Date}   time A date
       * @return {int}   x    The position on the screen in pixels which corresponds
       *                      with the given date.
       * @protected
       */
      // TODO: move this function to Range
      Core.prototype._toScreen = function (time) {
        return DateUtil.toScreen(this, time, this.props.center.width);
      };

      /**
       * Convert a datetime (Date object) into a position on the root
       * This is used to get the pixel density estimate for the screen, not the center panel
       * @param {Date}   time A date
       * @return {int}   x    The position on root in pixels which corresponds
       *                      with the given date.
       * @protected
       */
      // TODO: move this function to Range
      Core.prototype._toGlobalScreen = function (time) {
        return DateUtil.toScreen(this, time, this.props.root.width);
        //var conversion = this.range.conversion(this.props.root.width);
        //return (time.valueOf() - conversion.offset) * conversion.scale;
      };

      /**
       * Initialize watching when option autoResize is true
       * @private
       */
      Core.prototype._initAutoResize = function () {
        if (this.options.autoResize == true) {
          this._startAutoResize();
        } else {
          this._stopAutoResize();
        }
      };

      /**
       * Watch for changes in the size of the container. On resize, the Panel will
       * automatically redraw itself.
       * @private
       */
      Core.prototype._startAutoResize = function () {
        var me = this;

        this._stopAutoResize();

        this._onResize = function () {
          if (me.options.autoResize != true) {
            // stop watching when the option autoResize is changed to false
            me._stopAutoResize();
            return;
          }

          if (me.dom.root) {
            // check whether the frame is resized
            // Note: we compare offsetWidth here, not clientWidth. For some reason,
            // IE does not restore the clientWidth from 0 to the actual width after
            // changing the timeline's container display style from none to visible
            if (me.dom.root.offsetWidth != me.props.lastWidth || me.dom.root.offsetHeight != me.props.lastHeight) {
              me.props.lastWidth = me.dom.root.offsetWidth;
              me.props.lastHeight = me.dom.root.offsetHeight;
              me.props.scrollbarWidth = util.getScrollBarWidth();

              me.body.emitter.emit('_change');
            }
          }
        };

        // add event listener to window resize
        util.addEventListener(window, 'resize', this._onResize);

        //Prevent initial unnecessary redraw
        if (me.dom.root) {
          me.props.lastWidth = me.dom.root.offsetWidth;
          me.props.lastHeight = me.dom.root.offsetHeight;
        }

        this.watchTimer = setInterval(this._onResize, 1000);
      };

      /**
       * Stop watching for a resize of the frame.
       * @private
       */
      Core.prototype._stopAutoResize = function () {
        if (this.watchTimer) {
          clearInterval(this.watchTimer);
          this.watchTimer = undefined;
        }

        // remove event listener on window.resize
        if (this._onResize) {
          util.removeEventListener(window, 'resize', this._onResize);
          this._onResize = null;
        }
      };

      /**
       * Start moving the timeline vertically
       * @param {Event} event
       * @private
       */
      Core.prototype._onTouch = function (event) {
        // eslint-disable-line no-unused-vars
        this.touch.allowDragging = true;
        this.touch.initialScrollTop = this.props.scrollTop;
      };

      /**
       * Start moving the timeline vertically
       * @param {Event} event
       * @private
       */
      Core.prototype._onPinch = function (event) {
        // eslint-disable-line no-unused-vars
        this.touch.allowDragging = false;
      };

      /**
       * Move the timeline vertically
       * @param {Event} event
       * @private
       */
      Core.prototype._onDrag = function (event) {
        if (!event) return;
        // refuse to drag when we where pinching to prevent the timeline make a jump
        // when releasing the fingers in opposite order from the touch screen
        if (!this.touch.allowDragging) return;

        var delta = event.deltaY;

        var oldScrollTop = this._getScrollTop();
        var newScrollTop = this._setScrollTop(this.touch.initialScrollTop + delta);

        if (this.options.verticalScroll) {
          this.dom.left.parentNode.scrollTop = -this.props.scrollTop;
          this.dom.right.parentNode.scrollTop = -this.props.scrollTop;
        }

        if (newScrollTop != oldScrollTop) {
          this.emit("verticalDrag");
        }
      };

      /**
       * Apply a scrollTop
       * @param {number} scrollTop
       * @returns {number} scrollTop  Returns the applied scrollTop
       * @private
       */
      Core.prototype._setScrollTop = function (scrollTop) {
        this.props.scrollTop = scrollTop;
        this._updateScrollTop();
        return this.props.scrollTop;
      };

      /**
       * Update the current scrollTop when the height of  the containers has been changed
       * @returns {number} scrollTop  Returns the applied scrollTop
       * @private
       */
      Core.prototype._updateScrollTop = function () {
        // recalculate the scrollTopMin
        var scrollTopMin = Math.min(this.props.centerContainer.height - this.props.center.height, 0); // is negative or zero
        if (scrollTopMin != this.props.scrollTopMin) {
          // in case of bottom orientation, change the scrollTop such that the contents
          // do not move relative to the time axis at the bottom
          if (this.options.orientation.item != 'top') {
            this.props.scrollTop += scrollTopMin - this.props.scrollTopMin;
          }
          this.props.scrollTopMin = scrollTopMin;
        }

        // limit the scrollTop to the feasible scroll range
        if (this.props.scrollTop > 0) this.props.scrollTop = 0;
        if (this.props.scrollTop < scrollTopMin) this.props.scrollTop = scrollTopMin;

        if (this.options.verticalScroll) {
          this.dom.left.parentNode.scrollTop = -this.props.scrollTop;
          this.dom.right.parentNode.scrollTop = -this.props.scrollTop;
        }

        return this.props.scrollTop;
      };

      /**
       * Get the current scrollTop
       * @returns {number} scrollTop
       * @private
       */
      Core.prototype._getScrollTop = function () {
        return this.props.scrollTop;
      };

      /**
       * Load a configurator
       * [at]returns {Object}
       * @private
       */
      Core.prototype._createConfigurator = function () {
        throw new Error('Cannot invoke abstract method _createConfigurator');
      };

      module.exports = Core;

      /***/
    },
    /* 66 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var moment = __webpack_require__(9);
      var DateUtil = __webpack_require__(36);
      var util = __webpack_require__(2);

      /**
       * The class TimeStep is an iterator for dates. You provide a start date and an
       * end date. The class itself determines the best scale (step size) based on the
       * provided start Date, end Date, and minimumStep.
       *
       * If minimumStep is provided, the step size is chosen as close as possible
       * to the minimumStep but larger than minimumStep. If minimumStep is not
       * provided, the scale is set to 1 DAY.
       * The minimumStep should correspond with the onscreen size of about 6 characters
       *
       * Alternatively, you can set a scale by hand.
       * After creation, you can initialize the class by executing first(). Then you
       * can iterate from the start date to the end date via next(). You can check if
       * the end date is reached with the function hasNext(). After each step, you can
       * retrieve the current date via getCurrent().
       * The TimeStep has scales ranging from milliseconds, seconds, minutes, hours,
       * days, to years.
       *
       * Version: 1.2
       *
       * @param {Date} [start]         The start date, for example new Date(2010, 9, 21)
       *                               or new Date(2010, 9, 21, 23, 45, 00)
       * @param {Date} [end]           The end date
       * @param {number} [minimumStep] Optional. Minimum step size in milliseconds
       * @param {Date|Array.<Date>} [hiddenDates] Optional.
       * @param {{showMajorLabels: boolean}} [options] Optional.
       * @constructor  TimeStep
       */
      function TimeStep(start, end, minimumStep, hiddenDates, options) {
        this.moment = moment;

        // variables
        this.current = this.moment();
        this._start = this.moment();
        this._end = this.moment();

        this.autoScale = true;
        this.scale = 'day';
        this.step = 1;

        // initialize the range
        this.setRange(start, end, minimumStep);

        // hidden Dates options
        this.switchedDay = false;
        this.switchedMonth = false;
        this.switchedYear = false;
        if (Array.isArray(hiddenDates)) {
          this.hiddenDates = hiddenDates;
        } else if (hiddenDates != undefined) {
          this.hiddenDates = [hiddenDates];
        } else {
          this.hiddenDates = [];
        }

        this.format = TimeStep.FORMAT; // default formatting
        this.options = options ? options : {};
      }

      // Time formatting
      TimeStep.FORMAT = {
        minorLabels: {
          millisecond: 'SSS',
          second: 's',
          minute: 'HH:mm',
          hour: 'HH:mm',
          weekday: 'ddd D',
          day: 'D',
          week: 'w',
          month: 'MMM',
          year: 'YYYY'
        },
        majorLabels: {
          millisecond: 'HH:mm:ss',
          second: 'D MMMM HH:mm',
          minute: 'ddd D MMMM',
          hour: 'ddd D MMMM',
          weekday: 'MMMM YYYY',
          day: 'MMMM YYYY',
          week: 'MMMM YYYY',
          month: 'YYYY',
          year: ''
        }
      };

      /**
       * Set custom constructor function for moment. Can be used to set dates
       * to UTC or to set a utcOffset.
       * @param {function} moment
       */
      TimeStep.prototype.setMoment = function (moment) {
        this.moment = moment;

        // update the date properties, can have a new utcOffset
        this.current = this.moment(this.current.valueOf());
        this._start = this.moment(this._start.valueOf());
        this._end = this.moment(this._end.valueOf());
      };

      /**
       * Set custom formatting for the minor an major labels of the TimeStep.
       * Both `minorLabels` and `majorLabels` are an Object with properties:
       * 'millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'year'.
       * @param {{minorLabels: Object, majorLabels: Object}} format
       */
      TimeStep.prototype.setFormat = function (format) {
        var defaultFormat = util.deepExtend({}, TimeStep.FORMAT);
        this.format = util.deepExtend(defaultFormat, format);
      };

      /**
       * Set a new range
       * If minimumStep is provided, the step size is chosen as close as possible
       * to the minimumStep but larger than minimumStep. If minimumStep is not
       * provided, the scale is set to 1 DAY.
       * The minimumStep should correspond with the onscreen size of about 6 characters
       * @param {Date} [start]      The start date and time.
       * @param {Date} [end]        The end date and time.
       * @param {int} [minimumStep] Optional. Minimum step size in milliseconds
       */
      TimeStep.prototype.setRange = function (start, end, minimumStep) {
        if (!(start instanceof Date) || !(end instanceof Date)) {
          throw "No legal start or end date in method setRange";
        }

        this._start = start != undefined ? this.moment(start.valueOf()) : new Date();
        this._end = end != undefined ? this.moment(end.valueOf()) : new Date();

        if (this.autoScale) {
          this.setMinimumStep(minimumStep);
        }
      };

      /**
       * Set the range iterator to the start date.
       */
      TimeStep.prototype.start = function () {
        this.current = this._start.clone();
        this.roundToMinor();
      };

      /**
       * Round the current date to the first minor date value
       * This must be executed once when the current date is set to start Date
       */
      TimeStep.prototype.roundToMinor = function () {
        // round to floor
        // to prevent year & month scales rounding down to the first day of week we perform this separately
        if (this.scale == 'week') {
          this.current.weekday(0);
        }
        // IMPORTANT: we have no breaks in this switch! (this is no bug)
        // noinspection FallThroughInSwitchStatementJS
        switch (this.scale) {
          case 'year':
            this.current.year(this.step * Math.floor(this.current.year() / this.step));
            this.current.month(0);
          case 'month':
            this.current.date(1); // eslint-disable-line no-fallthrough
          case 'week': // eslint-disable-line no-fallthrough
          case 'day': // eslint-disable-line no-fallthrough
          case 'weekday':
            this.current.hours(0); // eslint-disable-line no-fallthrough
          case 'hour':
            this.current.minutes(0); // eslint-disable-line no-fallthrough
          case 'minute':
            this.current.seconds(0); // eslint-disable-line no-fallthrough
          case 'second':
            this.current.milliseconds(0); // eslint-disable-line no-fallthrough
          //case 'millisecond': // nothing to do for milliseconds
        }

        if (this.step != 1) {
          // round down to the first minor value that is a multiple of the current step size
          switch (this.scale) {
            case 'millisecond':
              this.current.subtract(this.current.milliseconds() % this.step, 'milliseconds');break;
            case 'second':
              this.current.subtract(this.current.seconds() % this.step, 'seconds');break;
            case 'minute':
              this.current.subtract(this.current.minutes() % this.step, 'minutes');break;
            case 'hour':
              this.current.subtract(this.current.hours() % this.step, 'hours');break;
            case 'weekday': // intentional fall through
            case 'day':
              this.current.subtract((this.current.date() - 1) % this.step, 'day');break;
            case 'week':
              this.current.subtract(this.current.week() % this.step, 'week');break;
            case 'month':
              this.current.subtract(this.current.month() % this.step, 'month');break;
            case 'year':
              this.current.subtract(this.current.year() % this.step, 'year');break;
            default:
              break;
          }
        }
      };

      /**
       * Check if the there is a next step
       * @return {boolean}  true if the current date has not passed the end date
       */
      TimeStep.prototype.hasNext = function () {
        return this.current.valueOf() <= this._end.valueOf();
      };

      /**
       * Do the next step
       */
      TimeStep.prototype.next = function () {
        var prev = this.current.valueOf();

        // Two cases, needed to prevent issues with switching daylight savings
        // (end of March and end of October)
        switch (this.scale) {
          case 'millisecond':
            this.current.add(this.step, 'millisecond');break;
          case 'second':
            this.current.add(this.step, 'second');break;
          case 'minute':
            this.current.add(this.step, 'minute');break;
          case 'hour':
            this.current.add(this.step, 'hour');

            if (this.current.month() < 6) {
              this.current.subtract(this.current.hours() % this.step, 'hour');
            } else {
              if (this.current.hours() % this.step !== 0) {
                this.current.add(this.step - this.current.hours() % this.step, 'hour');
              }
            }
            break;
          case 'weekday': // intentional fall through
          case 'day':
            this.current.add(this.step, 'day');break;
          case 'week':
            if (this.current.weekday() !== 0) {
              // we had a month break not correlating with a week's start before
              this.current.weekday(0); // switch back to week cycles
              this.current.add(this.step, 'week');
            } else if (this.options.showMajorLabels === false) {
              this.current.add(this.step, 'week'); // the default case
            } else {
              // first day of the week
              var nextWeek = this.current.clone();
              nextWeek.add(1, 'week');
              if (nextWeek.isSame(this.current, 'month')) {
                // is the first day of the next week in the same month?
                this.current.add(this.step, 'week'); // the default case
              } else {
                // inject a step at each first day of the month
                this.current.add(this.step, 'week');
                this.current.date(1);
              }
            }
            break;
          case 'month':
            this.current.add(this.step, 'month');break;
          case 'year':
            this.current.add(this.step, 'year');break;
          default:
            break;
        }

        if (this.step != 1) {
          // round down to the correct major value
          switch (this.scale) {
            case 'millisecond':
              if (this.current.milliseconds() > 0 && this.current.milliseconds() < this.step) this.current.milliseconds(0);break;
            case 'second':
              if (this.current.seconds() > 0 && this.current.seconds() < this.step) this.current.seconds(0);break;
            case 'minute':
              if (this.current.minutes() > 0 && this.current.minutes() < this.step) this.current.minutes(0);break;
            case 'hour':
              if (this.current.hours() > 0 && this.current.hours() < this.step) this.current.hours(0);break;
            case 'weekday': // intentional fall through
            case 'day':
              if (this.current.date() < this.step + 1) this.current.date(1);break;
            case 'week':
              if (this.current.week() < this.step) this.current.week(1);break; // week numbering starts at 1, not 0
            case 'month':
              if (this.current.month() < this.step) this.current.month(0);break;
            case 'year':
              break; // nothing to do for year
            default:
              break;
          }
        }

        // safety mechanism: if current time is still unchanged, move to the end
        if (this.current.valueOf() == prev) {
          this.current = this._end.clone();
        }

        // Reset switches for year, month and day. Will get set to true where appropriate in DateUtil.stepOverHiddenDates
        this.switchedDay = false;
        this.switchedMonth = false;
        this.switchedYear = false;

        DateUtil.stepOverHiddenDates(this.moment, this, prev);
      };

      /**
       * Get the current datetime
       * @return {Moment}  current The current date
       */
      TimeStep.prototype.getCurrent = function () {
        return this.current;
      };

      /**
       * Set a custom scale. Autoscaling will be disabled.
       * For example setScale('minute', 5) will result
       * in minor steps of 5 minutes, and major steps of an hour.
       *
       * @param {{scale: string, step: number}} params
       *                               An object containing two properties:
       *                               - A string 'scale'. Choose from 'millisecond', 'second',
       *                                 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'year'.
       *                               - A number 'step'. A step size, by default 1.
       *                                 Choose for example 1, 2, 5, or 10.
       */
      TimeStep.prototype.setScale = function (params) {
        if (params && typeof params.scale == 'string') {
          this.scale = params.scale;
          this.step = params.step > 0 ? params.step : 1;
          this.autoScale = false;
        }
      };

      /**
       * Enable or disable autoscaling
       * @param {boolean} enable  If true, autoascaling is set true
       */
      TimeStep.prototype.setAutoScale = function (enable) {
        this.autoScale = enable;
      };

      /**
       * Automatically determine the scale that bests fits the provided minimum step
       * @param {number} [minimumStep]  The minimum step size in milliseconds
       */
      TimeStep.prototype.setMinimumStep = function (minimumStep) {
        if (minimumStep == undefined) {
          return;
        }

        //var b = asc + ds;

        var stepYear = 1000 * 60 * 60 * 24 * 30 * 12;
        var stepMonth = 1000 * 60 * 60 * 24 * 30;
        var stepDay = 1000 * 60 * 60 * 24;
        var stepHour = 1000 * 60 * 60;
        var stepMinute = 1000 * 60;
        var stepSecond = 1000;
        var stepMillisecond = 1;

        // find the smallest step that is larger than the provided minimumStep
        if (stepYear * 1000 > minimumStep) {
          this.scale = 'year';this.step = 1000;
        }
        if (stepYear * 500 > minimumStep) {
          this.scale = 'year';this.step = 500;
        }
        if (stepYear * 100 > minimumStep) {
          this.scale = 'year';this.step = 100;
        }
        if (stepYear * 50 > minimumStep) {
          this.scale = 'year';this.step = 50;
        }
        if (stepYear * 10 > minimumStep) {
          this.scale = 'year';this.step = 10;
        }
        if (stepYear * 5 > minimumStep) {
          this.scale = 'year';this.step = 5;
        }
        if (stepYear > minimumStep) {
          this.scale = 'year';this.step = 1;
        }
        if (stepMonth * 3 > minimumStep) {
          this.scale = 'month';this.step = 3;
        }
        if (stepMonth > minimumStep) {
          this.scale = 'month';this.step = 1;
        }
        if (stepDay * 5 > minimumStep) {
          this.scale = 'day';this.step = 5;
        }
        if (stepDay * 2 > minimumStep) {
          this.scale = 'day';this.step = 2;
        }
        if (stepDay > minimumStep) {
          this.scale = 'day';this.step = 1;
        }
        if (stepDay / 2 > minimumStep) {
          this.scale = 'weekday';this.step = 1;
        }
        if (stepHour * 4 > minimumStep) {
          this.scale = 'hour';this.step = 4;
        }
        if (stepHour > minimumStep) {
          this.scale = 'hour';this.step = 1;
        }
        if (stepMinute * 15 > minimumStep) {
          this.scale = 'minute';this.step = 15;
        }
        if (stepMinute * 10 > minimumStep) {
          this.scale = 'minute';this.step = 10;
        }
        if (stepMinute * 5 > minimumStep) {
          this.scale = 'minute';this.step = 5;
        }
        if (stepMinute > minimumStep) {
          this.scale = 'minute';this.step = 1;
        }
        if (stepSecond * 15 > minimumStep) {
          this.scale = 'second';this.step = 15;
        }
        if (stepSecond * 10 > minimumStep) {
          this.scale = 'second';this.step = 10;
        }
        if (stepSecond * 5 > minimumStep) {
          this.scale = 'second';this.step = 5;
        }
        if (stepSecond > minimumStep) {
          this.scale = 'second';this.step = 1;
        }
        if (stepMillisecond * 200 > minimumStep) {
          this.scale = 'millisecond';this.step = 200;
        }
        if (stepMillisecond * 100 > minimumStep) {
          this.scale = 'millisecond';this.step = 100;
        }
        if (stepMillisecond * 50 > minimumStep) {
          this.scale = 'millisecond';this.step = 50;
        }
        if (stepMillisecond * 10 > minimumStep) {
          this.scale = 'millisecond';this.step = 10;
        }
        if (stepMillisecond * 5 > minimumStep) {
          this.scale = 'millisecond';this.step = 5;
        }
        if (stepMillisecond > minimumStep) {
          this.scale = 'millisecond';this.step = 1;
        }
      };

      /**
       * Snap a date to a rounded value.
       * The snap intervals are dependent on the current scale and step.
       * Static function
       * @param {Date} date    the date to be snapped.
       * @param {string} scale Current scale, can be 'millisecond', 'second',
       *                       'minute', 'hour', 'weekday, 'day', 'week', 'month', 'year'.
       * @param {number} step  Current step (1, 2, 4, 5, ...
       * @return {Date} snappedDate
       */
      TimeStep.snap = function (date, scale, step) {
        var clone = moment(date);

        if (scale == 'year') {
          var year = clone.year() + Math.round(clone.month() / 12);
          clone.year(Math.round(year / step) * step);
          clone.month(0);
          clone.date(0);
          clone.hours(0);
          clone.minutes(0);
          clone.seconds(0);
          clone.milliseconds(0);
        } else if (scale == 'month') {
          if (clone.date() > 15) {
            clone.date(1);
            clone.add(1, 'month');
            // important: first set Date to 1, after that change the month.
          } else {
            clone.date(1);
          }

          clone.hours(0);
          clone.minutes(0);
          clone.seconds(0);
          clone.milliseconds(0);
        } else if (scale == 'week') {
          if (clone.weekday() > 2) {
            // doing it the momentjs locale aware way
            clone.weekday(0);
            clone.add(1, 'week');
          } else {
            clone.weekday(0);
          }

          clone.hours(0);
          clone.minutes(0);
          clone.seconds(0);
          clone.milliseconds(0);
        } else if (scale == 'day') {
          //noinspection FallthroughInSwitchStatementJS
          switch (step) {
            case 5:
            case 2:
              clone.hours(Math.round(clone.hours() / 24) * 24);break;
            default:
              clone.hours(Math.round(clone.hours() / 12) * 12);break;
          }
          clone.minutes(0);
          clone.seconds(0);
          clone.milliseconds(0);
        } else if (scale == 'weekday') {
          //noinspection FallthroughInSwitchStatementJS
          switch (step) {
            case 5:
            case 2:
              clone.hours(Math.round(clone.hours() / 12) * 12);break;
            default:
              clone.hours(Math.round(clone.hours() / 6) * 6);break;
          }
          clone.minutes(0);
          clone.seconds(0);
          clone.milliseconds(0);
        } else if (scale == 'hour') {
          switch (step) {
            case 4:
              clone.minutes(Math.round(clone.minutes() / 60) * 60);break;
            default:
              clone.minutes(Math.round(clone.minutes() / 30) * 30);break;
          }
          clone.seconds(0);
          clone.milliseconds(0);
        } else if (scale == 'minute') {
          //noinspection FallthroughInSwitchStatementJS
          switch (step) {
            case 15:
            case 10:
              clone.minutes(Math.round(clone.minutes() / 5) * 5);
              clone.seconds(0);
              break;
            case 5:
              clone.seconds(Math.round(clone.seconds() / 60) * 60);break;
            default:
              clone.seconds(Math.round(clone.seconds() / 30) * 30);break;
          }
          clone.milliseconds(0);
        } else if (scale == 'second') {
          //noinspection FallthroughInSwitchStatementJS
          switch (step) {
            case 15:
            case 10:
              clone.seconds(Math.round(clone.seconds() / 5) * 5);
              clone.milliseconds(0);
              break;
            case 5:
              clone.milliseconds(Math.round(clone.milliseconds() / 1000) * 1000);break;
            default:
              clone.milliseconds(Math.round(clone.milliseconds() / 500) * 500);break;
          }
        } else if (scale == 'millisecond') {
          var _step = step > 5 ? step / 2 : 1;
          clone.milliseconds(Math.round(clone.milliseconds() / _step) * _step);
        }

        return clone;
      };

      /**
       * Check if the current value is a major value (for example when the step
       * is DAY, a major value is each first day of the MONTH)
       * @return {boolean} true if current date is major, else false.
       */
      TimeStep.prototype.isMajor = function () {
        if (this.switchedYear == true) {
          switch (this.scale) {
            case 'year':
            case 'month':
            case 'week':
            case 'weekday':
            case 'day':
            case 'hour':
            case 'minute':
            case 'second':
            case 'millisecond':
              return true;
            default:
              return false;
          }
        } else if (this.switchedMonth == true) {
          switch (this.scale) {
            case 'week':
            case 'weekday':
            case 'day':
            case 'hour':
            case 'minute':
            case 'second':
            case 'millisecond':
              return true;
            default:
              return false;
          }
        } else if (this.switchedDay == true) {
          switch (this.scale) {
            case 'millisecond':
            case 'second':
            case 'minute':
            case 'hour':
              return true;
            default:
              return false;
          }
        }

        var date = this.moment(this.current);
        switch (this.scale) {
          case 'millisecond':
            return date.milliseconds() == 0;
          case 'second':
            return date.seconds() == 0;
          case 'minute':
            return date.hours() == 0 && date.minutes() == 0;
          case 'hour':
            return date.hours() == 0;
          case 'weekday': // intentional fall through
          case 'day':
            return date.date() == 1;
          case 'week':
            return date.date() == 1;
          case 'month':
            return date.month() == 0;
          case 'year':
            return false;
          default:
            return false;
        }
      };

      /**
       * Returns formatted text for the minor axislabel, depending on the current
       * date and the scale. For example when scale is MINUTE, the current time is
       * formatted as "hh:mm".
       * @param {Date} [date=this.current] custom date. if not provided, current date is taken
       * @returns {String}
       */
      TimeStep.prototype.getLabelMinor = function (date) {
        if (date == undefined) {
          date = this.current;
        }
        if (date instanceof Date) {
          date = this.moment(date);
        }

        if (typeof this.format.minorLabels === "function") {
          return this.format.minorLabels(date, this.scale, this.step);
        }

        var format = this.format.minorLabels[this.scale];
        // noinspection FallThroughInSwitchStatementJS
        switch (this.scale) {
          case 'week':
            if (this.isMajor() && date.weekday() !== 0) {
              return "";
            }
          default:
            // eslint-disable-line no-fallthrough
            return format && format.length > 0 ? this.moment(date).format(format) : '';
        }
      };

      /**
       * Returns formatted text for the major axis label, depending on the current
       * date and the scale. For example when scale is MINUTE, the major scale is
       * hours, and the hour will be formatted as "hh".
       * @param {Date} [date=this.current] custom date. if not provided, current date is taken
       * @returns {String}
       */
      TimeStep.prototype.getLabelMajor = function (date) {
        if (date == undefined) {
          date = this.current;
        }
        if (date instanceof Date) {
          date = this.moment(date);
        }

        if (typeof this.format.majorLabels === "function") {
          return this.format.majorLabels(date, this.scale, this.step);
        }

        var format = this.format.majorLabels[this.scale];
        return format && format.length > 0 ? this.moment(date).format(format) : '';
      };

      TimeStep.prototype.getClassName = function () {
        var _moment = this.moment;
        var m = this.moment(this.current);
        var current = m.locale ? m.locale('en') : m.lang('en'); // old versions of moment have .lang() function
        var step = this.step;
        var classNames = [];

        /**
         *
         * @param {number} value
         * @returns {String}
         */
        function even(value) {
          return value / step % 2 == 0 ? ' vis-even' : ' vis-odd';
        }

        /**
         *
         * @param {Date} date
         * @returns {String}
         */
        function today(date) {
          if (date.isSame(new Date(), 'day')) {
            return ' vis-today';
          }
          if (date.isSame(_moment().add(1, 'day'), 'day')) {
            return ' vis-tomorrow';
          }
          if (date.isSame(_moment().add(-1, 'day'), 'day')) {
            return ' vis-yesterday';
          }
          return '';
        }

        /**
         *
         * @param {Date} date
         * @returns {String}
         */
        function currentWeek(date) {
          return date.isSame(new Date(), 'week') ? ' vis-current-week' : '';
        }

        /**
         *
         * @param {Date} date
         * @returns {String}
         */
        function currentMonth(date) {
          return date.isSame(new Date(), 'month') ? ' vis-current-month' : '';
        }

        /**
         *
         * @param {Date} date
         * @returns {String}
         */
        function currentYear(date) {
          return date.isSame(new Date(), 'year') ? ' vis-current-year' : '';
        }

        switch (this.scale) {
          case 'millisecond':
            classNames.push(today(current));
            classNames.push(even(current.milliseconds()));
            break;
          case 'second':
            classNames.push(today(current));
            classNames.push(even(current.seconds()));
            break;
          case 'minute':
            classNames.push(today(current));
            classNames.push(even(current.minutes()));
            break;
          case 'hour':
            classNames.push('vis-h' + current.hours() + (this.step == 4 ? '-h' + (current.hours() + 4) : ''));
            classNames.push(today(current));
            classNames.push(even(current.hours()));
            break;
          case 'weekday':
            classNames.push('vis-' + current.format('dddd').toLowerCase());
            classNames.push(today(current));
            classNames.push(currentWeek(current));
            classNames.push(even(current.date()));
            break;
          case 'day':
            classNames.push('vis-day' + current.date());
            classNames.push('vis-' + current.format('MMMM').toLowerCase());
            classNames.push(today(current));
            classNames.push(currentMonth(current));
            classNames.push(this.step <= 2 ? today(current) : '');
            classNames.push(this.step <= 2 ? 'vis-' + current.format('dddd').toLowerCase() : '');
            classNames.push(even(current.date() - 1));
            break;
          case 'week':
            classNames.push('vis-week' + current.format('w'));
            classNames.push(currentWeek(current));
            classNames.push(even(current.week()));
            break;
          case 'month':
            classNames.push('vis-' + current.format('MMMM').toLowerCase());
            classNames.push(currentMonth(current));
            classNames.push(even(current.month()));
            break;
          case 'year':
            classNames.push('vis-year' + current.year());
            classNames.push(currentYear(current));
            classNames.push(even(current.year()));
            break;
        }
        return classNames.filter(String).join(" ");
      };

      module.exports = TimeStep;

      /***/
    },
    /* 67 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(2);
      var Component = __webpack_require__(16);
      var moment = __webpack_require__(9);
      var locales = __webpack_require__(98);

      /**
       * A current time bar
       * @param {{range: Range, dom: Object, domProps: Object}} body
       * @param {Object} [options]        Available parameters:
       *                                  {Boolean} [showCurrentTime]
       * @constructor CurrentTime
       * @extends Component
       */
      function CurrentTime(body, options) {
        this.body = body;

        // default options
        this.defaultOptions = {
          rtl: false,
          showCurrentTime: true,

          moment: moment,
          locales: locales,
          locale: 'en'
        };
        this.options = util.extend({}, this.defaultOptions);
        this.offset = 0;

        this._create();

        this.setOptions(options);
      }

      CurrentTime.prototype = new Component();

      /**
       * Create the HTML DOM for the current time bar
       * @private
       */
      CurrentTime.prototype._create = function () {
        var bar = document.createElement('div');
        bar.className = 'vis-current-time';
        bar.style.position = 'absolute';
        bar.style.top = '0px';
        bar.style.height = '100%';

        this.bar = bar;
      };

      /**
       * Destroy the CurrentTime bar
       */
      CurrentTime.prototype.destroy = function () {
        this.options.showCurrentTime = false;
        this.redraw(); // will remove the bar from the DOM and stop refreshing

        this.body = null;
      };

      /**
       * Set options for the component. Options will be merged in current options.
       * @param {Object} options  Available parameters:
       *                          {boolean} [showCurrentTime]
       */
      CurrentTime.prototype.setOptions = function (options) {
        if (options) {
          // copy all options that we know
          util.selectiveExtend(['rtl', 'showCurrentTime', 'moment', 'locale', 'locales'], this.options, options);
        }
      };

      /**
       * Repaint the component
       * @return {boolean} Returns true if the component is resized
       */
      CurrentTime.prototype.redraw = function () {
        if (this.options.showCurrentTime) {
          var parent = this.body.dom.backgroundVertical;
          if (this.bar.parentNode != parent) {
            // attach to the dom
            if (this.bar.parentNode) {
              this.bar.parentNode.removeChild(this.bar);
            }
            parent.appendChild(this.bar);

            this.start();
          }

          var now = this.options.moment(new Date().valueOf() + this.offset);
          var x = this.body.util.toScreen(now);

          var locale = this.options.locales[this.options.locale];
          if (!locale) {
            if (!this.warned) {
              console.log('WARNING: options.locales[\'' + this.options.locale + '\'] not found. See http://visjs.org/docs/timeline/#Localization');
              this.warned = true;
            }
            locale = this.options.locales['en']; // fall back on english when not available
          }
          var title = locale.current + ' ' + locale.time + ': ' + now.format('dddd, MMMM Do YYYY, H:mm:ss');
          title = title.charAt(0).toUpperCase() + title.substring(1);

          if (this.options.rtl) {
            this.bar.style.right = x + 'px';
          } else {
            this.bar.style.left = x + 'px';
          }
          this.bar.title = title;
        } else {
          // remove the line from the DOM
          if (this.bar.parentNode) {
            this.bar.parentNode.removeChild(this.bar);
          }
          this.stop();
        }

        return false;
      };

      /**
       * Start auto refreshing the current time bar
       */
      CurrentTime.prototype.start = function () {
        var me = this;

        /**
         *  Updates the current time.
         */
        function update() {
          me.stop();

          // determine interval to refresh
          var scale = me.body.range.conversion(me.body.domProps.center.width).scale;
          var interval = 1 / scale / 10;
          if (interval < 30) interval = 30;
          if (interval > 1000) interval = 1000;

          me.redraw();
          me.body.emitter.emit('currentTimeTick');

          // start a renderTimer to adjust for the new time
          me.currentTimeTimer = setTimeout(update, interval);
        }

        update();
      };

      /**
       * Stop auto refreshing the current time bar
       */
      CurrentTime.prototype.stop = function () {
        if (this.currentTimeTimer !== undefined) {
          clearTimeout(this.currentTimeTimer);
          delete this.currentTimeTimer;
        }
      };

      /**
       * Set a current time. This can be used for example to ensure that a client's
       * time is synchronized with a shared server time.
       * @param {Date | string | number} time     A Date, unix timestamp, or
       *                                          ISO date string.
       */
      CurrentTime.prototype.setCurrentTime = function (time) {
        var t = util.convert(time, 'Date').valueOf();
        var now = new Date().valueOf();
        this.offset = t - now;
        this.redraw();
      };

      /**
       * Get the current time.
       * @return {Date} Returns the current time.
       */
      CurrentTime.prototype.getCurrentTime = function () {
        return new Date(new Date().valueOf() + this.offset);
      };

      module.exports = CurrentTime;

      /***/
    },
    /* 68 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var stack = __webpack_require__(100);

      /**
       * @param {number | string} groupId
       * @param {Object} data
       * @param {ItemSet} itemSet
       * @constructor Group
       */
      function Group(groupId, data, itemSet) {
        this.groupId = groupId;
        this.subgroups = {};
        this.subgroupStack = {};
        this.subgroupStackAll = false;
        this.doInnerStack = false;
        this.subgroupIndex = 0;
        this.subgroupOrderer = data && data.subgroupOrder;
        this.itemSet = itemSet;
        this.isVisible = null;
        this.stackDirty = true; // if true, items will be restacked on next redraw

        if (data && data.nestedGroups) {
          this.nestedGroups = data.nestedGroups;
          if (data.showNested == false) {
            this.showNested = false;
          } else {
            this.showNested = true;
          }
        }

        if (data && data.subgroupStack) {
          if (typeof data.subgroupStack === "boolean") {
            this.doInnerStack = data.subgroupStack;
            this.subgroupStackAll = data.subgroupStack;
          } else {
            // We might be doing stacking on specific sub groups, but only
            // if at least one is set to do stacking
            for (var key in data.subgroupStack) {
              this.subgroupStack[key] = data.subgroupStack[key];
              this.doInnerStack = this.doInnerStack || data.subgroupStack[key];
            }
          }
        }

        this.nestedInGroup = null;

        this.dom = {};
        this.props = {
          label: {
            width: 0,
            height: 0
          }
        };
        this.className = null;

        this.items = {}; // items filtered by groupId of this group
        this.visibleItems = []; // items currently visible in window
        this.itemsInRange = []; // items currently in range
        this.orderedItems = {
          byStart: [],
          byEnd: []
        };
        this.checkRangedItems = false; // needed to refresh the ranged items if the window is programatically changed with NO overlap.
        var me = this;
        this.itemSet.body.emitter.on("checkRangedItems", function () {
          me.checkRangedItems = true;
        });

        this._create();

        this.setData(data);
      }

      /**
       * Create DOM elements for the group
       * @private
       */
      Group.prototype._create = function () {
        var label = document.createElement('div');
        if (this.itemSet.options.groupEditable.order) {
          label.className = 'vis-label draggable';
        } else {
          label.className = 'vis-label';
        }
        this.dom.label = label;

        var inner = document.createElement('div');
        inner.className = 'vis-inner';
        label.appendChild(inner);
        this.dom.inner = inner;

        var foreground = document.createElement('div');
        foreground.className = 'vis-group';
        foreground['timeline-group'] = this;
        this.dom.foreground = foreground;

        this.dom.background = document.createElement('div');
        this.dom.background.className = 'vis-group';

        this.dom.axis = document.createElement('div');
        this.dom.axis.className = 'vis-group';

        // create a hidden marker to detect when the Timelines container is attached
        // to the DOM, or the style of a parent of the Timeline is changed from
        // display:none is changed to visible.
        this.dom.marker = document.createElement('div');
        this.dom.marker.style.visibility = 'hidden';
        this.dom.marker.style.position = 'absolute';
        this.dom.marker.innerHTML = '';
        this.dom.background.appendChild(this.dom.marker);
      };

      /**
       * Set the group data for this group
       * @param {Object} data   Group data, can contain properties content and className
       */
      Group.prototype.setData = function (data) {
        // update contents
        var content;
        var templateFunction;

        if (this.itemSet.options && this.itemSet.options.groupTemplate) {
          templateFunction = this.itemSet.options.groupTemplate.bind(this);
          content = templateFunction(data, this.dom.inner);
        } else {
          content = data && data.content;
        }

        if (content instanceof Element) {
          this.dom.inner.appendChild(content);
          while (this.dom.inner.firstChild) {
            this.dom.inner.removeChild(this.dom.inner.firstChild);
          }
          this.dom.inner.appendChild(content);
        } else if (content instanceof Object) {
          templateFunction(data, this.dom.inner);
        } else if (content !== undefined && content !== null) {
          this.dom.inner.innerHTML = content;
        } else {
          this.dom.inner.innerHTML = this.groupId || ''; // groupId can be null
        }

        // update title
        this.dom.label.title = data && data.title || '';
        if (!this.dom.inner.firstChild) {
          util.addClassName(this.dom.inner, 'vis-hidden');
        } else {
          util.removeClassName(this.dom.inner, 'vis-hidden');
        }

        if (data && data.nestedGroups) {
          if (!this.nestedGroups || this.nestedGroups != data.nestedGroups) {
            this.nestedGroups = data.nestedGroups;
          }

          if (data.showNested !== undefined || this.showNested === undefined) {
            if (data.showNested == false) {
              this.showNested = false;
            } else {
              this.showNested = true;
            }
          }

          util.addClassName(this.dom.label, 'vis-nesting-group');
          var collapsedDirClassName = this.itemSet.options.rtl ? 'collapsed-rtl' : 'collapsed';
          if (this.showNested) {
            util.removeClassName(this.dom.label, collapsedDirClassName);
            util.addClassName(this.dom.label, 'expanded');
          } else {
            util.removeClassName(this.dom.label, 'expanded');
            util.addClassName(this.dom.label, collapsedDirClassName);
          }
        } else if (this.nestedGroups) {
          this.nestedGroups = null;
          collapsedDirClassName = this.itemSet.options.rtl ? 'collapsed-rtl' : 'collapsed';
          util.removeClassName(this.dom.label, collapsedDirClassName);
          util.removeClassName(this.dom.label, 'expanded');
          util.removeClassName(this.dom.label, 'vis-nesting-group');
        }

        if (data && data.nestedInGroup) {
          util.addClassName(this.dom.label, 'vis-nested-group');
          if (this.itemSet.options && this.itemSet.options.rtl) {
            this.dom.inner.style.paddingRight = '30px';
          } else {
            this.dom.inner.style.paddingLeft = '30px';
          }
        }

        // update className
        var className = data && data.className || null;
        if (className != this.className) {
          if (this.className) {
            util.removeClassName(this.dom.label, this.className);
            util.removeClassName(this.dom.foreground, this.className);
            util.removeClassName(this.dom.background, this.className);
            util.removeClassName(this.dom.axis, this.className);
          }
          util.addClassName(this.dom.label, className);
          util.addClassName(this.dom.foreground, className);
          util.addClassName(this.dom.background, className);
          util.addClassName(this.dom.axis, className);
          this.className = className;
        }

        // update style
        if (this.style) {
          util.removeCssText(this.dom.label, this.style);
          this.style = null;
        }
        if (data && data.style) {
          util.addCssText(this.dom.label, data.style);
          this.style = data.style;
        }
      };

      /**
       * Get the width of the group label
       * @return {number} width
       */
      Group.prototype.getLabelWidth = function () {
        return this.props.label.width;
      };

      Group.prototype._didMarkerHeightChange = function () {
        var markerHeight = this.dom.marker.clientHeight;
        if (markerHeight != this.lastMarkerHeight) {
          this.lastMarkerHeight = markerHeight;
          var redrawQueue = {};
          var redrawQueueLength = 0;

          util.forEach(this.items, function (item, key) {
            item.dirty = true;
            if (item.displayed) {
              var returnQueue = true;
              redrawQueue[key] = item.redraw(returnQueue);
              redrawQueueLength = redrawQueue[key].length;
            }
          });

          var needRedraw = redrawQueueLength > 0;
          if (needRedraw) {
            // redraw all regular items
            for (var i = 0; i < redrawQueueLength; i++) {
              util.forEach(redrawQueue, function (fns) {
                fns[i]();
              });
            }
          }
          return true;
        }
      };

      Group.prototype._calculateGroupSizeAndPosition = function () {
        var offsetTop = this.dom.foreground.offsetTop;
        var offsetLeft = this.dom.foreground.offsetLeft;
        var offsetWidth = this.dom.foreground.offsetWidth;
        this.top = offsetTop;
        this.right = offsetLeft;
        this.width = offsetWidth;
      };

      Group.prototype._redrawItems = function (forceRestack, lastIsVisible, margin, range) {
        var restack = forceRestack || this.stackDirty || this.isVisible && !lastIsVisible;

        // if restacking, reposition visible items vertically
        if (restack) {
          var visibleSubgroups = {};
          var subgroup = null;

          if (typeof this.itemSet.options.order === 'function') {
            // a custom order function
            // brute force restack of all items

            // show all items
            var me = this;
            var limitSize = false;

            var redrawQueue = {};
            var redrawQueueLength = 0;

            util.forEach(this.items, function (item, key) {
              if (!item.displayed) {
                var returnQueue = true;
                redrawQueue[key] = item.redraw(returnQueue);
                redrawQueueLength = redrawQueue[key].length;
                me.visibleItems.push(item);
              }
            });

            var needRedraw = redrawQueueLength > 0;
            if (needRedraw) {
              // redraw all regular items
              for (var i = 0; i < redrawQueueLength; i++) {
                util.forEach(redrawQueue, function (fns) {
                  fns[i]();
                });
              }
            }

            util.forEach(this.items, function (item) {
              item.repositionX(limitSize);
            });

            if (this.doInnerStack && this.itemSet.options.stackSubgroups) {
              // Order the items within each subgroup
              for (subgroup in this.subgroups) {
                visibleSubgroups[subgroup] = this.subgroups[subgroup].items.slice().sort(function (a, b) {
                  return me.itemSet.options.order(a.data, b.data);
                });
              }

              stack.stackSubgroupsWithInnerStack(visibleSubgroups, margin, this.subgroups);
            } else {
              // order all items and force a restacking
              var customOrderedItems = this.orderedItems.byStart.slice().sort(function (a, b) {
                return me.itemSet.options.order(a.data, b.data);
              });
              stack.stack(customOrderedItems, margin, true /* restack=true */);
            }

            this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range);
          } else {
            // no custom order function, lazy stacking
            this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range);

            if (this.itemSet.options.stack) {
              if (this.doInnerStack && this.itemSet.options.stackSubgroups) {
                for (subgroup in this.subgroups) {
                  visibleSubgroups[subgroup] = this.subgroups[subgroup].items;
                }

                stack.stackSubgroupsWithInnerStack(visibleSubgroups, margin, this.subgroups);
              } else {
                // TODO: ugly way to access options...
                stack.stack(this.visibleItems, margin, true /* restack=true */);
              }
            } else {
              // no stacking
              stack.nostack(this.visibleItems, margin, this.subgroups, this.itemSet.options.stackSubgroups);
            }
          }

          this.stackDirty = false;
        }
      };

      Group.prototype._didResize = function (resized, height) {
        resized = util.updateProperty(this, 'height', height) || resized;
        // recalculate size of label
        var labelWidth = this.dom.inner.clientWidth;
        var labelHeight = this.dom.inner.clientHeight;
        resized = util.updateProperty(this.props.label, 'width', labelWidth) || resized;
        resized = util.updateProperty(this.props.label, 'height', labelHeight) || resized;
        return resized;
      };

      Group.prototype._applyGroupHeight = function (height) {
        this.dom.background.style.height = height + 'px';
        this.dom.foreground.style.height = height + 'px';
        this.dom.label.style.height = height + 'px';
      };

      // update vertical position of items after they are re-stacked and the height of the group is calculated
      Group.prototype._updateItemsVerticalPosition = function (margin) {
        for (var i = 0, ii = this.visibleItems.length; i < ii; i++) {
          var item = this.visibleItems[i];
          item.repositionY(margin);
          if (!this.isVisible && this.groupId != "__background__") {
            if (item.displayed) item.hide();
          }
        }
      };

      /**
       * Repaint this group
       * @param {{start: number, end: number}} range
       * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
       * @param {boolean} [forceRestack=false]  Force restacking of all items
       * @param {boolean} [returnQueue=false]  return the queue or if the group resized
       * @return {boolean} Returns true if the group is resized or the redraw queue if returnQueue=true
       */
      Group.prototype.redraw = function (range, margin, forceRestack, returnQueue) {
        var resized = false;
        var lastIsVisible = this.isVisible;
        var height;

        var queue = [
        // force recalculation of the height of the items when the marker height changed
        // (due to the Timeline being attached to the DOM or changed from display:none to visible)
        function () {
          forceRestack = this._didMarkerHeightChange.bind(this);
        }.bind(this),

        // recalculate the height of the subgroups
        this._updateSubGroupHeights.bind(this, margin),

        // calculate actual size and position
        this._calculateGroupSizeAndPosition.bind(this),

        // check if group is visible
        function () {
          this.isVisible = this._isGroupVisible.bind(this)(range, margin);
        }.bind(this),

        // redraw Items if needed
        function () {
          this._redrawItems.bind(this)(forceRestack, lastIsVisible, margin, range);
        }.bind(this),

        // update subgroups
        this._updateSubgroupsSizes.bind(this),

        // recalculate the height of the group
        function () {
          height = this._calculateHeight.bind(this)(margin);
        }.bind(this),

        // calculate actual size and position again
        this._calculateGroupSizeAndPosition.bind(this),

        // check if resized
        function () {
          resized = this._didResize.bind(this)(resized, height);
        }.bind(this),

        // apply group height
        function () {
          this._applyGroupHeight.bind(this)(height);
        }.bind(this),

        // update vertical position of items after they are re-stacked and the height of the group is calculated
        function () {
          this._updateItemsVerticalPosition.bind(this)(margin);
        }.bind(this), function () {
          if (!this.isVisible && this.height) {
            resized = false;
          }
          return resized;
        }];

        if (returnQueue) {
          return queue;
        } else {
          var result;
          queue.forEach(function (fn) {
            result = fn();
          });
          return result;
        }
      };

      /**
       * recalculate the height of the subgroups
       *
       * @param {{item: vis.Item}} margin
       * @private
       */
      Group.prototype._updateSubGroupHeights = function (margin) {
        if ((0, _keys2['default'])(this.subgroups).length > 0) {
          var me = this;

          this.resetSubgroups();

          util.forEach(this.visibleItems, function (item) {
            if (item.data.subgroup !== undefined) {
              me.subgroups[item.data.subgroup].height = Math.max(me.subgroups[item.data.subgroup].height, item.height + margin.item.vertical);
              me.subgroups[item.data.subgroup].visible = true;
            }
          });
        }
      };

      /**
       * check if group is visible
       *
       * @param {vis.Range} range
       * @param {{axis: vis.DataAxis}} margin
       * @returns {boolean} is visible
       * @private
       */
      Group.prototype._isGroupVisible = function (range, margin) {
        return this.top <= range.body.domProps.centerContainer.height - range.body.domProps.scrollTop + margin.axis && this.top + this.height + margin.axis >= -range.body.domProps.scrollTop;
      };

      /**
       * recalculate the height of the group
       * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
       * @returns {number} Returns the height
       * @private
       */
      Group.prototype._calculateHeight = function (margin) {
        // recalculate the height of the group
        var height;
        var itemsInRange = this.visibleItems;
        if (itemsInRange.length > 0) {
          var min = itemsInRange[0].top;
          var max = itemsInRange[0].top + itemsInRange[0].height;
          util.forEach(itemsInRange, function (item) {
            min = Math.min(min, item.top);
            max = Math.max(max, item.top + item.height);
          });
          if (min > margin.axis) {
            // there is an empty gap between the lowest item and the axis
            var offset = min - margin.axis;
            max -= offset;
            util.forEach(itemsInRange, function (item) {
              item.top -= offset;
            });
          }
          height = max + margin.item.vertical / 2;
        } else {
          height = 0;
        }
        height = Math.max(height, this.props.label.height);

        return height;
      };

      /**
       * Show this group: attach to the DOM
       */
      Group.prototype.show = function () {
        if (!this.dom.label.parentNode) {
          this.itemSet.dom.labelSet.appendChild(this.dom.label);
        }

        if (!this.dom.foreground.parentNode) {
          this.itemSet.dom.foreground.appendChild(this.dom.foreground);
        }

        if (!this.dom.background.parentNode) {
          this.itemSet.dom.background.appendChild(this.dom.background);
        }

        if (!this.dom.axis.parentNode) {
          this.itemSet.dom.axis.appendChild(this.dom.axis);
        }
      };

      /**
       * Hide this group: remove from the DOM
       */
      Group.prototype.hide = function () {
        var label = this.dom.label;
        if (label.parentNode) {
          label.parentNode.removeChild(label);
        }

        var foreground = this.dom.foreground;
        if (foreground.parentNode) {
          foreground.parentNode.removeChild(foreground);
        }

        var background = this.dom.background;
        if (background.parentNode) {
          background.parentNode.removeChild(background);
        }

        var axis = this.dom.axis;
        if (axis.parentNode) {
          axis.parentNode.removeChild(axis);
        }
      };

      /**
       * Add an item to the group
       * @param {Item} item
       */
      Group.prototype.add = function (item) {
        this.items[item.id] = item;
        item.setParent(this);
        this.stackDirty = true;
        // add to
        if (item.data.subgroup !== undefined) {
          this._addToSubgroup(item);
          this.orderSubgroups();
        }

        if (this.visibleItems.indexOf(item) == -1) {
          var range = this.itemSet.body.range; // TODO: not nice accessing the range like this
          this._checkIfVisible(item, this.visibleItems, range);
        }
      };

      Group.prototype._addToSubgroup = function (item, subgroupId) {
        subgroupId = subgroupId || item.data.subgroup;
        if (subgroupId != undefined && this.subgroups[subgroupId] === undefined) {
          this.subgroups[subgroupId] = {
            height: 0,
            top: 0,
            start: item.data.start,
            end: item.data.end || item.data.start,
            visible: false,
            index: this.subgroupIndex,
            items: [],
            stack: this.subgroupStackAll || this.subgroupStack[subgroupId] || false
          };
          this.subgroupIndex++;
        }

        if (new Date(item.data.start) < new Date(this.subgroups[subgroupId].start)) {
          this.subgroups[subgroupId].start = item.data.start;
        }

        var itemEnd = item.data.end || item.data.start;
        if (new Date(itemEnd) > new Date(this.subgroups[subgroupId].end)) {
          this.subgroups[subgroupId].end = itemEnd;
        }

        this.subgroups[subgroupId].items.push(item);
      };

      Group.prototype._updateSubgroupsSizes = function () {
        var me = this;
        if (me.subgroups) {
          for (var subgroup in me.subgroups) {
            var initialEnd = me.subgroups[subgroup].items[0].data.end || me.subgroups[subgroup].items[0].data.start;
            var newStart = me.subgroups[subgroup].items[0].data.start;
            var newEnd = initialEnd - 1;

            me.subgroups[subgroup].items.forEach(function (item) {
              if (new Date(item.data.start) < new Date(newStart)) {
                newStart = item.data.start;
              }

              var itemEnd = item.data.end || item.data.start;
              if (new Date(itemEnd) > new Date(newEnd)) {
                newEnd = itemEnd;
              }
            });

            me.subgroups[subgroup].start = newStart;
            me.subgroups[subgroup].end = new Date(newEnd - 1); // -1 to compensate for colliding end to start subgroups;
          }
        }
      };

      Group.prototype.orderSubgroups = function () {
        if (this.subgroupOrderer !== undefined) {
          var sortArray = [];
          var subgroup;
          if (typeof this.subgroupOrderer == 'string') {
            for (subgroup in this.subgroups) {
              sortArray.push({ subgroup: subgroup, sortField: this.subgroups[subgroup].items[0].data[this.subgroupOrderer] });
            }
            sortArray.sort(function (a, b) {
              return a.sortField - b.sortField;
            });
          } else if (typeof this.subgroupOrderer == 'function') {
            for (subgroup in this.subgroups) {
              sortArray.push(this.subgroups[subgroup].items[0].data);
            }
            sortArray.sort(this.subgroupOrderer);
          }

          if (sortArray.length > 0) {
            for (var i = 0; i < sortArray.length; i++) {
              this.subgroups[sortArray[i].subgroup].index = i;
            }
          }
        }
      };

      Group.prototype.resetSubgroups = function () {
        for (var subgroup in this.subgroups) {
          if (this.subgroups.hasOwnProperty(subgroup)) {
            this.subgroups[subgroup].visible = false;
            this.subgroups[subgroup].height = 0;
          }
        }
      };

      /**
       * Remove an item from the group
       * @param {Item} item
       */
      Group.prototype.remove = function (item) {
        delete this.items[item.id];
        item.setParent(null);
        this.stackDirty = true;

        // remove from visible items
        var index = this.visibleItems.indexOf(item);
        if (index != -1) this.visibleItems.splice(index, 1);

        if (item.data.subgroup !== undefined) {
          this._removeFromSubgroup(item);
          this.orderSubgroups();
        }
      };

      Group.prototype._removeFromSubgroup = function (item, subgroupId) {
        subgroupId = subgroupId || item.data.subgroup;
        if (subgroupId != undefined) {
          var subgroup = this.subgroups[subgroupId];
          if (subgroup) {
            var itemIndex = subgroup.items.indexOf(item);
            //  Check the item is actually in this subgroup. How should items not in the group be handled?
            if (itemIndex >= 0) {
              subgroup.items.splice(itemIndex, 1);
              if (!subgroup.items.length) {
                delete this.subgroups[subgroupId];
              } else {
                this._updateSubgroupsSizes();
              }
            }
          }
        }
      };

      /**
       * Remove an item from the corresponding DataSet
       * @param {Item} item
       */
      Group.prototype.removeFromDataSet = function (item) {
        this.itemSet.removeItem(item.id);
      };

      /**
       * Reorder the items
       */
      Group.prototype.order = function () {
        var array = util.toArray(this.items);
        var startArray = [];
        var endArray = [];

        for (var i = 0; i < array.length; i++) {
          if (array[i].data.end !== undefined) {
            endArray.push(array[i]);
          }
          startArray.push(array[i]);
        }
        this.orderedItems = {
          byStart: startArray,
          byEnd: endArray
        };

        stack.orderByStart(this.orderedItems.byStart);
        stack.orderByEnd(this.orderedItems.byEnd);
      };

      /**
       * Update the visible items
       * @param {{byStart: Item[], byEnd: Item[]}} orderedItems   All items ordered by start date and by end date
       * @param {Item[]} oldVisibleItems                          The previously visible items.
       * @param {{start: number, end: number}} range              Visible range
       * @return {Item[]} visibleItems                            The new visible items.
       * @private
       */
      Group.prototype._updateItemsInRange = function (orderedItems, oldVisibleItems, range) {
        var visibleItems = [];
        var visibleItemsLookup = {}; // we keep this to quickly look up if an item already exists in the list without using indexOf on visibleItems

        var interval = (range.end - range.start) / 4;
        var lowerBound = range.start - interval;
        var upperBound = range.end + interval;

        // this function is used to do the binary search.
        var searchFunction = function searchFunction(value) {
          if (value < lowerBound) {
            return -1;
          } else if (value <= upperBound) {
            return 0;
          } else {
            return 1;
          }
        };

        // first check if the items that were in view previously are still in view.
        // IMPORTANT: this handles the case for the items with startdate before the window and enddate after the window!
        // also cleans up invisible items.
        if (oldVisibleItems.length > 0) {
          for (var i = 0; i < oldVisibleItems.length; i++) {
            this._checkIfVisibleWithReference(oldVisibleItems[i], visibleItems, visibleItemsLookup, range);
          }
        }

        // we do a binary search for the items that have only start values.
        var initialPosByStart = util.binarySearchCustom(orderedItems.byStart, searchFunction, 'data', 'start');

        // trace the visible items from the inital start pos both ways until an invisible item is found, we only look at the start values.
        this._traceVisible(initialPosByStart, orderedItems.byStart, visibleItems, visibleItemsLookup, function (item) {
          return item.data.start < lowerBound || item.data.start > upperBound;
        });

        // if the window has changed programmatically without overlapping the old window, the ranged items with start < lowerBound and end > upperbound are not shown.
        // We therefore have to brute force check all items in the byEnd list
        if (this.checkRangedItems == true) {
          this.checkRangedItems = false;
          for (i = 0; i < orderedItems.byEnd.length; i++) {
            this._checkIfVisibleWithReference(orderedItems.byEnd[i], visibleItems, visibleItemsLookup, range);
          }
        } else {
          // we do a binary search for the items that have defined end times.
          var initialPosByEnd = util.binarySearchCustom(orderedItems.byEnd, searchFunction, 'data', 'end');

          // trace the visible items from the inital start pos both ways until an invisible item is found, we only look at the end values.
          this._traceVisible(initialPosByEnd, orderedItems.byEnd, visibleItems, visibleItemsLookup, function (item) {
            return item.data.end < lowerBound || item.data.end > upperBound;
          });
        }

        var redrawQueue = {};
        var redrawQueueLength = 0;

        for (i = 0; i < visibleItems.length; i++) {
          var item = visibleItems[i];
          if (!item.displayed) {
            var returnQueue = true;
            redrawQueue[i] = item.redraw(returnQueue);
            redrawQueueLength = redrawQueue[i].length;
          }
        }

        var needRedraw = redrawQueueLength > 0;
        if (needRedraw) {
          // redraw all regular items
          for (var j = 0; j < redrawQueueLength; j++) {
            util.forEach(redrawQueue, function (fns) {
              fns[j]();
            });
          }
        }

        for (i = 0; i < visibleItems.length; i++) {
          visibleItems[i].repositionX();
        }
        return visibleItems;
      };

      Group.prototype._traceVisible = function (initialPos, items, visibleItems, visibleItemsLookup, breakCondition) {
        if (initialPos != -1) {
          var i, item;
          for (i = initialPos; i >= 0; i--) {
            item = items[i];
            if (breakCondition(item)) {
              break;
            } else {
              if (visibleItemsLookup[item.id] === undefined) {
                visibleItemsLookup[item.id] = true;
                visibleItems.push(item);
              }
            }
          }

          for (i = initialPos + 1; i < items.length; i++) {
            item = items[i];
            if (breakCondition(item)) {
              break;
            } else {
              if (visibleItemsLookup[item.id] === undefined) {
                visibleItemsLookup[item.id] = true;
                visibleItems.push(item);
              }
            }
          }
        }
      };

      /**
       * this function is very similar to the _checkIfInvisible() but it does not
       * return booleans, hides the item if it should not be seen and always adds to
       * the visibleItems.
       * this one is for brute forcing and hiding.
       *
       * @param {Item} item
       * @param {Array} visibleItems
       * @param {{start:number, end:number}} range
       * @private
       */
      Group.prototype._checkIfVisible = function (item, visibleItems, range) {
        if (item.isVisible(range)) {
          if (!item.displayed) item.show();
          // reposition item horizontally
          item.repositionX();
          visibleItems.push(item);
        } else {
          if (item.displayed) item.hide();
        }
      };

      /**
       * this function is very similar to the _checkIfInvisible() but it does not
       * return booleans, hides the item if it should not be seen and always adds to
       * the visibleItems.
       * this one is for brute forcing and hiding.
       *
       * @param {Item} item
       * @param {Array.<vis.Item>} visibleItems
       * @param {Object<number, boolean>} visibleItemsLookup
       * @param {{start:number, end:number}} range
       * @private
       */
      Group.prototype._checkIfVisibleWithReference = function (item, visibleItems, visibleItemsLookup, range) {
        if (item.isVisible(range)) {
          if (visibleItemsLookup[item.id] === undefined) {
            visibleItemsLookup[item.id] = true;
            visibleItems.push(item);
          }
        } else {
          if (item.displayed) item.hide();
        }
      };

      Group.prototype.changeSubgroup = function (item, oldSubgroup, newSubgroup) {
        this._removeFromSubgroup(item, oldSubgroup);
        this._addToSubgroup(item, newSubgroup);
        this.orderSubgroups();
      };

      module.exports = Group;

      /***/
    },
    /* 69 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _create = __webpack_require__(29);

      var _create2 = _interopRequireDefault(_create);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var Group = __webpack_require__(68);

      /**
       * @constructor BackgroundGroup
       * @param {number | string} groupId
       * @param {Object} data
       * @param {ItemSet} itemSet
       * @extends Group
       */
      function BackgroundGroup(groupId, data, itemSet) {
        Group.call(this, groupId, data, itemSet);

        this.width = 0;
        this.height = 0;
        this.top = 0;
        this.left = 0;
      }

      BackgroundGroup.prototype = (0, _create2['default'])(Group.prototype);

      /**
       * Repaint this group
       * @param {{start: number, end: number}} range
       * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
       * @param {boolean} [forceRestack=false]  Force restacking of all items
       * @return {boolean} Returns true if the group is resized
       */
      BackgroundGroup.prototype.redraw = function (range, margin, forceRestack) {
        // eslint-disable-line no-unused-vars
        var resized = false;

        this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range);

        // calculate actual size
        this.width = this.dom.background.offsetWidth;

        // apply new height (just always zero for BackgroundGroup
        this.dom.background.style.height = '0';

        // update vertical position of items after they are re-stacked and the height of the group is calculated
        for (var i = 0, ii = this.visibleItems.length; i < ii; i++) {
          var item = this.visibleItems[i];
          item.repositionY(margin);
        }

        return resized;
      };

      /**
       * Show this group: attach to the DOM
       */
      BackgroundGroup.prototype.show = function () {
        if (!this.dom.background.parentNode) {
          this.itemSet.dom.background.appendChild(this.dom.background);
        }
      };

      module.exports = BackgroundGroup;

      /***/
    },
    /* 70 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var Item = __webpack_require__(38);

      /**
       * @constructor RangeItem
       * @extends Item
       * @param {Object} data             Object containing parameters start, end
       *                                  content, className.
       * @param {{toScreen: function, toTime: function}} conversion
       *                                  Conversion functions from time to screen and vice versa
       * @param {Object} [options]        Configuration options
       *                                  // TODO: describe options
       */
      function RangeItem(data, conversion, options) {
        this.props = {
          content: {
            width: 0
          }
        };
        this.overflow = false; // if contents can overflow (css styling), this flag is set to true
        this.options = options;
        // validate data
        if (data) {
          if (data.start == undefined) {
            throw new Error('Property "start" missing in item ' + data.id);
          }
          if (data.end == undefined) {
            throw new Error('Property "end" missing in item ' + data.id);
          }
        }

        Item.call(this, data, conversion, options);
      }

      RangeItem.prototype = new Item(null, null, null);

      RangeItem.prototype.baseClassName = 'vis-item vis-range';

      /**
       * Check whether this item is visible inside given range
       *
       * @param {vis.Range} range with a timestamp for start and end
       * @returns {boolean} True if visible
       */
      RangeItem.prototype.isVisible = function (range) {
        // determine visibility
        return this.data.start < range.end && this.data.end > range.start;
      };

      RangeItem.prototype._createDomElement = function () {
        if (!this.dom) {
          // create DOM
          this.dom = {};

          // background box
          this.dom.box = document.createElement('div');
          // className is updated in redraw()

          // frame box (to prevent the item contents from overflowing)
          this.dom.frame = document.createElement('div');
          this.dom.frame.className = 'vis-item-overflow';
          this.dom.box.appendChild(this.dom.frame);

          // visible frame box (showing the frame that is always visible)
          this.dom.visibleFrame = document.createElement('div');
          this.dom.visibleFrame.className = 'vis-item-visible-frame';
          this.dom.box.appendChild(this.dom.visibleFrame);

          // contents box
          this.dom.content = document.createElement('div');
          this.dom.content.className = 'vis-item-content';
          this.dom.frame.appendChild(this.dom.content);

          // attach this item as attribute
          this.dom.box['timeline-item'] = this;

          this.dirty = true;
        }
      };

      RangeItem.prototype._appendDomElement = function () {
        if (!this.parent) {
          throw new Error('Cannot redraw item: no parent attached');
        }
        if (!this.dom.box.parentNode) {
          var foreground = this.parent.dom.foreground;
          if (!foreground) {
            throw new Error('Cannot redraw item: parent has no foreground container element');
          }
          foreground.appendChild(this.dom.box);
        }
        this.displayed = true;
      };

      RangeItem.prototype._updateDirtyDomComponents = function () {
        // update dirty DOM. An item is marked dirty when:
        // - the item is not yet rendered
        // - the item's data is changed
        // - the item is selected/deselected
        if (this.dirty) {
          this._updateContents(this.dom.content);
          this._updateDataAttributes(this.dom.box);
          this._updateStyle(this.dom.box);

          var editable = this.editable.updateTime || this.editable.updateGroup;

          // update class
          var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
          this.dom.box.className = this.baseClassName + className;

          // turn off max-width to be able to calculate the real width
          // this causes an extra browser repaint/reflow, but so be it
          this.dom.content.style.maxWidth = 'none';
        }
      };

      RangeItem.prototype._getDomComponentsSizes = function () {
        // determine from css whether this box has overflow
        this.overflow = window.getComputedStyle(this.dom.frame).overflow !== 'hidden';
        return {
          content: {
            width: this.dom.content.offsetWidth
          },
          box: {
            height: this.dom.box.offsetHeight
          }
        };
      };

      RangeItem.prototype._updateDomComponentsSizes = function (sizes) {
        this.props.content.width = sizes.content.width;
        this.height = sizes.box.height;
        this.dom.content.style.maxWidth = '';
        this.dirty = false;
      };

      RangeItem.prototype._repaintDomAdditionals = function () {
        this._repaintOnItemUpdateTimeTooltip(this.dom.box);
        this._repaintDeleteButton(this.dom.box);
        this._repaintDragCenter();
        this._repaintDragLeft();
        this._repaintDragRight();
      };

      /**
       * Repaint the item
       * @param {boolean} [returnQueue=false]  return the queue
       * @return {boolean} the redraw queue if returnQueue=true
       */
      RangeItem.prototype.redraw = function (returnQueue) {
        var sizes;
        var queue = [
        // create item DOM
        this._createDomElement.bind(this),

        // append DOM to parent DOM
        this._appendDomElement.bind(this),

        // update dirty DOM 
        this._updateDirtyDomComponents.bind(this), function () {
          if (this.dirty) {
            sizes = this._getDomComponentsSizes.bind(this)();
          }
        }.bind(this), function () {
          if (this.dirty) {
            this._updateDomComponentsSizes.bind(this)(sizes);
          }
        }.bind(this),

        // repaint DOM additionals
        this._repaintDomAdditionals.bind(this)];

        if (returnQueue) {
          return queue;
        } else {
          var result;
          queue.forEach(function (fn) {
            result = fn();
          });
          return result;
        }
      };

      /**
       * Show the item in the DOM (when not already visible). The items DOM will
       * be created when needed.
       */
      RangeItem.prototype.show = function () {
        if (!this.displayed) {
          this.redraw();
        }
      };

      /**
       * Hide the item from the DOM (when visible)
       */
      RangeItem.prototype.hide = function () {
        if (this.displayed) {
          var box = this.dom.box;

          if (box.parentNode) {
            box.parentNode.removeChild(box);
          }

          this.displayed = false;
        }
      };

      /**
       * Reposition the item horizontally
       * @param {boolean} [limitSize=true] If true (default), the width of the range
       *                                   item will be limited, as the browser cannot
       *                                   display very wide divs. This means though
       *                                   that the applied left and width may
       *                                   not correspond to the ranges start and end
       * @Override
       */
      RangeItem.prototype.repositionX = function (limitSize) {
        var parentWidth = this.parent.width;
        var start = this.conversion.toScreen(this.data.start);
        var end = this.conversion.toScreen(this.data.end);
        var align = this.data.align === undefined ? this.options.align : this.data.align;
        var contentStartPosition;
        var contentWidth;

        // limit the width of the range, as browsers cannot draw very wide divs
        // unless limitSize: false is explicitly set in item data
        if (this.data.limitSize !== false && (limitSize === undefined || limitSize === true)) {
          if (start < -parentWidth) {
            start = -parentWidth;
          }
          if (end > 2 * parentWidth) {
            end = 2 * parentWidth;
          }
        }

        // add 0.5 to compensate floating-point values rounding
        var boxWidth = Math.max(end - start + 0.5, 1);

        if (this.overflow) {
          if (this.options.rtl) {
            this.right = start;
          } else {
            this.left = start;
          }
          this.width = boxWidth + this.props.content.width;
          contentWidth = this.props.content.width;

          // Note: The calculation of width is an optimistic calculation, giving
          //       a width which will not change when moving the Timeline
          //       So no re-stacking needed, which is nicer for the eye;
        } else {
          if (this.options.rtl) {
            this.right = start;
          } else {
            this.left = start;
          }
          this.width = boxWidth;
          contentWidth = Math.min(end - start, this.props.content.width);
        }

        if (this.options.rtl) {
          this.dom.box.style.right = this.right + 'px';
        } else {
          this.dom.box.style.left = this.left + 'px';
        }
        this.dom.box.style.width = boxWidth + 'px';

        switch (align) {
          case 'left':
            if (this.options.rtl) {
              this.dom.content.style.right = '0';
            } else {
              this.dom.content.style.left = '0';
            }
            break;

          case 'right':
            if (this.options.rtl) {
              this.dom.content.style.right = Math.max(boxWidth - contentWidth, 0) + 'px';
            } else {
              this.dom.content.style.left = Math.max(boxWidth - contentWidth, 0) + 'px';
            }
            break;

          case 'center':
            if (this.options.rtl) {
              this.dom.content.style.right = Math.max((boxWidth - contentWidth) / 2, 0) + 'px';
            } else {
              this.dom.content.style.left = Math.max((boxWidth - contentWidth) / 2, 0) + 'px';
            }

            break;

          default:
            // 'auto'
            // when range exceeds left of the window, position the contents at the left of the visible area
            if (this.overflow) {
              if (end > 0) {
                contentStartPosition = Math.max(-start, 0);
              } else {
                contentStartPosition = -contentWidth; // ensure it's not visible anymore
              }
            } else {
              if (start < 0) {
                contentStartPosition = -start;
              } else {
                contentStartPosition = 0;
              }
            }
            if (this.options.rtl) {
              this.dom.content.style.right = contentStartPosition + 'px';
            } else {
              this.dom.content.style.left = contentStartPosition + 'px';
              this.dom.content.style.width = 'calc(100% - ' + contentStartPosition + 'px)';
            }
        }
      };

      /**
       * Reposition the item vertically
       * @Override
       */
      RangeItem.prototype.repositionY = function () {
        var orientation = this.options.orientation.item;
        var box = this.dom.box;

        if (orientation == 'top') {
          box.style.top = this.top + 'px';
        } else {
          box.style.top = this.parent.height - this.top - this.height + 'px';
        }
      };

      /**
       * Repaint a drag area on the left side of the range when the range is selected
       * @protected
       */
      RangeItem.prototype._repaintDragLeft = function () {
        if ((this.selected || this.options.itemsAlwaysDraggable.range) && this.options.editable.updateTime && !this.dom.dragLeft) {
          // create and show drag area
          var dragLeft = document.createElement('div');
          dragLeft.className = 'vis-drag-left';
          dragLeft.dragLeftItem = this;

          this.dom.box.appendChild(dragLeft);
          this.dom.dragLeft = dragLeft;
        } else if (!this.selected && !this.options.itemsAlwaysDraggable.range && this.dom.dragLeft) {
          // delete drag area
          if (this.dom.dragLeft.parentNode) {
            this.dom.dragLeft.parentNode.removeChild(this.dom.dragLeft);
          }
          this.dom.dragLeft = null;
        }
      };

      /**
       * Repaint a drag area on the right side of the range when the range is selected
       * @protected
       */
      RangeItem.prototype._repaintDragRight = function () {
        if ((this.selected || this.options.itemsAlwaysDraggable.range) && this.options.editable.updateTime && !this.dom.dragRight) {
          // create and show drag area
          var dragRight = document.createElement('div');
          dragRight.className = 'vis-drag-right';
          dragRight.dragRightItem = this;

          this.dom.box.appendChild(dragRight);
          this.dom.dragRight = dragRight;
        } else if (!this.selected && !this.options.itemsAlwaysDraggable.range && this.dom.dragRight) {
          // delete drag area
          if (this.dom.dragRight.parentNode) {
            this.dom.dragRight.parentNode.removeChild(this.dom.dragRight);
          }
          this.dom.dragRight = null;
        }
      };

      module.exports = RangeItem;

      /***/
    },
    /* 71 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _stringify = __webpack_require__(19);

      var _stringify2 = _interopRequireDefault(_stringify);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);

      var ColorPicker = __webpack_require__(179)['default'];

      /**
       * The way this works is for all properties of this.possible options, you can supply the property name in any form to list the options.
       * Boolean options are recognised as Boolean
       * Number options should be written as array: [default value, min value, max value, stepsize]
       * Colors should be written as array: ['color', '#ffffff']
       * Strings with should be written as array: [option1, option2, option3, ..]
       *
       * The options are matched with their counterparts in each of the modules and the values used in the configuration are
       */

      var Configurator = function () {
        /**
         * @param {Object} parentModule        | the location where parentModule.setOptions() can be called
         * @param {Object} defaultContainer    | the default container of the module
         * @param {Object} configureOptions    | the fully configured and predefined options set found in allOptions.js
         * @param {number} pixelRatio          | canvas pixel ratio
         */
        function Configurator(parentModule, defaultContainer, configureOptions) {
          var pixelRatio = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
          (0, _classCallCheck3['default'])(this, Configurator);

          this.parent = parentModule;
          this.changedOptions = [];
          this.container = defaultContainer;
          this.allowCreation = false;

          this.options = {};
          this.initialized = false;
          this.popupCounter = 0;
          this.defaultOptions = {
            enabled: false,
            filter: true,
            container: undefined,
            showButton: true
          };
          util.extend(this.options, this.defaultOptions);

          this.configureOptions = configureOptions;
          this.moduleOptions = {};
          this.domElements = [];
          this.popupDiv = {};
          this.popupLimit = 5;
          this.popupHistory = {};
          this.colorPicker = new ColorPicker(pixelRatio);
          this.wrapper = undefined;
        }

        /**
         * refresh all options.
         * Because all modules parse their options by themselves, we just use their options. We copy them here.
         *
         * @param {Object} options
         */

        (0, _createClass3['default'])(Configurator, [{
          key: 'setOptions',
          value: function setOptions(options) {
            if (options !== undefined) {
              // reset the popup history because the indices may have been changed.
              this.popupHistory = {};
              this._removePopup();

              var enabled = true;
              if (typeof options === 'string') {
                this.options.filter = options;
              } else if (options instanceof Array) {
                this.options.filter = options.join();
              } else if ((typeof options === 'undefined' ? 'undefined' : (0, _typeof3['default'])(options)) === 'object') {
                if (options.container !== undefined) {
                  this.options.container = options.container;
                }
                if (options.filter !== undefined) {
                  this.options.filter = options.filter;
                }
                if (options.showButton !== undefined) {
                  this.options.showButton = options.showButton;
                }
                if (options.enabled !== undefined) {
                  enabled = options.enabled;
                }
              } else if (typeof options === 'boolean') {
                this.options.filter = true;
                enabled = options;
              } else if (typeof options === 'function') {
                this.options.filter = options;
                enabled = true;
              }
              if (this.options.filter === false) {
                enabled = false;
              }

              this.options.enabled = enabled;
            }
            this._clean();
          }

          /**
           *
           * @param {Object} moduleOptions
           */

        }, {
          key: 'setModuleOptions',
          value: function setModuleOptions(moduleOptions) {
            this.moduleOptions = moduleOptions;
            if (this.options.enabled === true) {
              this._clean();
              if (this.options.container !== undefined) {
                this.container = this.options.container;
              }
              this._create();
            }
          }

          /**
           * Create all DOM elements
           * @private
           */

        }, {
          key: '_create',
          value: function _create() {
            var _this = this;

            this._clean();
            this.changedOptions = [];

            var filter = this.options.filter;
            var counter = 0;
            var show = false;
            for (var option in this.configureOptions) {
              if (this.configureOptions.hasOwnProperty(option)) {
                this.allowCreation = false;
                show = false;
                if (typeof filter === 'function') {
                  show = filter(option, []);
                  show = show || this._handleObject(this.configureOptions[option], [option], true);
                } else if (filter === true || filter.indexOf(option) !== -1) {
                  show = true;
                }

                if (show !== false) {
                  this.allowCreation = true;

                  // linebreak between categories
                  if (counter > 0) {
                    this._makeItem([]);
                  }
                  // a header for the category
                  this._makeHeader(option);

                  // get the sub options
                  this._handleObject(this.configureOptions[option], [option]);
                }
                counter++;
              }
            }

            if (this.options.showButton === true) {
              var generateButton = document.createElement('div');
              generateButton.className = 'vis-configuration vis-config-button';
              generateButton.innerHTML = 'generate options';
              generateButton.onclick = function () {
                _this._printOptions();
              };
              generateButton.onmouseover = function () {
                generateButton.className = 'vis-configuration vis-config-button hover';
              };
              generateButton.onmouseout = function () {
                generateButton.className = 'vis-configuration vis-config-button';
              };

              this.optionsContainer = document.createElement('div');
              this.optionsContainer.className = 'vis-configuration vis-config-option-container';

              this.domElements.push(this.optionsContainer);
              this.domElements.push(generateButton);
            }

            this._push();
            //~ this.colorPicker.insertTo(this.container);
          }

          /**
           * draw all DOM elements on the screen
           * @private
           */

        }, {
          key: '_push',
          value: function _push() {
            this.wrapper = document.createElement('div');
            this.wrapper.className = 'vis-configuration-wrapper';
            this.container.appendChild(this.wrapper);
            for (var i = 0; i < this.domElements.length; i++) {
              this.wrapper.appendChild(this.domElements[i]);
            }

            this._showPopupIfNeeded();
          }

          /**
           * delete all DOM elements
           * @private
           */

        }, {
          key: '_clean',
          value: function _clean() {
            for (var i = 0; i < this.domElements.length; i++) {
              this.wrapper.removeChild(this.domElements[i]);
            }

            if (this.wrapper !== undefined) {
              this.container.removeChild(this.wrapper);
              this.wrapper = undefined;
            }
            this.domElements = [];

            this._removePopup();
          }

          /**
           * get the value from the actualOptions if it exists
           * @param {array} path    | where to look for the actual option
           * @returns {*}
           * @private
           */

        }, {
          key: '_getValue',
          value: function _getValue(path) {
            var base = this.moduleOptions;
            for (var i = 0; i < path.length; i++) {
              if (base[path[i]] !== undefined) {
                base = base[path[i]];
              } else {
                base = undefined;
                break;
              }
            }
            return base;
          }

          /**
           * all option elements are wrapped in an item
           * @param {Array} path    | where to look for the actual option
           * @param {Array.<Element>} domElements
           * @returns {number}
           * @private
           */

        }, {
          key: '_makeItem',
          value: function _makeItem(path) {
            if (this.allowCreation === true) {
              var item = document.createElement('div');
              item.className = 'vis-configuration vis-config-item vis-config-s' + path.length;

              for (var _len = arguments.length, domElements = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                domElements[_key - 1] = arguments[_key];
              }

              domElements.forEach(function (element) {
                item.appendChild(element);
              });
              this.domElements.push(item);
              return this.domElements.length;
            }
            return 0;
          }

          /**
           * header for major subjects
           * @param {string} name
           * @private
           */

        }, {
          key: '_makeHeader',
          value: function _makeHeader(name) {
            var div = document.createElement('div');
            div.className = 'vis-configuration vis-config-header';
            div.innerHTML = name;
            this._makeItem([], div);
          }

          /**
           * make a label, if it is an object label, it gets different styling.
           * @param {string} name
           * @param {array} path    | where to look for the actual option
           * @param {string} objectLabel
           * @returns {HTMLElement}
           * @private
           */

        }, {
          key: '_makeLabel',
          value: function _makeLabel(name, path) {
            var objectLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var div = document.createElement('div');
            div.className = 'vis-configuration vis-config-label vis-config-s' + path.length;
            if (objectLabel === true) {
              div.innerHTML = '<i><b>' + name + ':</b></i>';
            } else {
              div.innerHTML = name + ':';
            }
            return div;
          }

          /**
           * make a dropdown list for multiple possible string optoins
           * @param {Array.<number>} arr
           * @param {number} value
           * @param {array} path    | where to look for the actual option
           * @private
           */

        }, {
          key: '_makeDropdown',
          value: function _makeDropdown(arr, value, path) {
            var select = document.createElement('select');
            select.className = 'vis-configuration vis-config-select';
            var selectedValue = 0;
            if (value !== undefined) {
              if (arr.indexOf(value) !== -1) {
                selectedValue = arr.indexOf(value);
              }
            }

            for (var i = 0; i < arr.length; i++) {
              var option = document.createElement('option');
              option.value = arr[i];
              if (i === selectedValue) {
                option.selected = 'selected';
              }
              option.innerHTML = arr[i];
              select.appendChild(option);
            }

            var me = this;
            select.onchange = function () {
              me._update(this.value, path);
            };

            var label = this._makeLabel(path[path.length - 1], path);
            this._makeItem(path, label, select);
          }

          /**
           * make a range object for numeric options
           * @param {Array.<number>} arr
           * @param {number} value
           * @param {array} path    | where to look for the actual option
           * @private
           */

        }, {
          key: '_makeRange',
          value: function _makeRange(arr, value, path) {
            var defaultValue = arr[0];
            var min = arr[1];
            var max = arr[2];
            var step = arr[3];
            var range = document.createElement('input');
            range.className = 'vis-configuration vis-config-range';
            try {
              range.type = 'range'; // not supported on IE9
              range.min = min;
              range.max = max;
            }
            // TODO: Add some error handling and remove this lint exception
            catch (err) {} // eslint-disable-line no-empty
            range.step = step;

            // set up the popup settings in case they are needed.
            var popupString = '';
            var popupValue = 0;

            if (value !== undefined) {
              var factor = 1.20;
              if (value < 0 && value * factor < min) {
                range.min = Math.ceil(value * factor);
                popupValue = range.min;
                popupString = 'range increased';
              } else if (value / factor < min) {
                range.min = Math.ceil(value / factor);
                popupValue = range.min;
                popupString = 'range increased';
              }
              if (value * factor > max && max !== 1) {
                range.max = Math.ceil(value * factor);
                popupValue = range.max;
                popupString = 'range increased';
              }
              range.value = value;
            } else {
              range.value = defaultValue;
            }

            var input = document.createElement('input');
            input.className = 'vis-configuration vis-config-rangeinput';
            input.value = range.value;

            var me = this;
            range.onchange = function () {
              input.value = this.value;me._update(Number(this.value), path);
            };
            range.oninput = function () {
              input.value = this.value;
            };

            var label = this._makeLabel(path[path.length - 1], path);
            var itemIndex = this._makeItem(path, label, range, input);

            // if a popup is needed AND it has not been shown for this value, show it.
            if (popupString !== '' && this.popupHistory[itemIndex] !== popupValue) {
              this.popupHistory[itemIndex] = popupValue;
              this._setupPopup(popupString, itemIndex);
            }
          }

          /**
           * prepare the popup
           * @param {string} string
           * @param {number} index
           * @private
           */

        }, {
          key: '_setupPopup',
          value: function _setupPopup(string, index) {
            var _this2 = this;

            if (this.initialized === true && this.allowCreation === true && this.popupCounter < this.popupLimit) {
              var div = document.createElement("div");
              div.id = "vis-configuration-popup";
              div.className = "vis-configuration-popup";
              div.innerHTML = string;
              div.onclick = function () {
                _this2._removePopup();
              };
              this.popupCounter += 1;
              this.popupDiv = { html: div, index: index };
            }
          }

          /**
           * remove the popup from the dom
           * @private
           */

        }, {
          key: '_removePopup',
          value: function _removePopup() {
            if (this.popupDiv.html !== undefined) {
              this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);
              clearTimeout(this.popupDiv.hideTimeout);
              clearTimeout(this.popupDiv.deleteTimeout);
              this.popupDiv = {};
            }
          }

          /**
           * Show the popup if it is needed.
           * @private
           */

        }, {
          key: '_showPopupIfNeeded',
          value: function _showPopupIfNeeded() {
            var _this3 = this;

            if (this.popupDiv.html !== undefined) {
              var correspondingElement = this.domElements[this.popupDiv.index];
              var rect = correspondingElement.getBoundingClientRect();
              this.popupDiv.html.style.left = rect.left + "px";
              this.popupDiv.html.style.top = rect.top - 30 + "px"; // 30 is the height;
              document.body.appendChild(this.popupDiv.html);
              this.popupDiv.hideTimeout = setTimeout(function () {
                _this3.popupDiv.html.style.opacity = 0;
              }, 1500);
              this.popupDiv.deleteTimeout = setTimeout(function () {
                _this3._removePopup();
              }, 1800);
            }
          }

          /**
           * make a checkbox for boolean options.
           * @param {number} defaultValue
           * @param {number} value
           * @param {array} path    | where to look for the actual option
           * @private
           */

        }, {
          key: '_makeCheckbox',
          value: function _makeCheckbox(defaultValue, value, path) {
            var checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'vis-configuration vis-config-checkbox';
            checkbox.checked = defaultValue;
            if (value !== undefined) {
              checkbox.checked = value;
              if (value !== defaultValue) {
                if ((typeof defaultValue === 'undefined' ? 'undefined' : (0, _typeof3['default'])(defaultValue)) === 'object') {
                  if (value !== defaultValue.enabled) {
                    this.changedOptions.push({ path: path, value: value });
                  }
                } else {
                  this.changedOptions.push({ path: path, value: value });
                }
              }
            }

            var me = this;
            checkbox.onchange = function () {
              me._update(this.checked, path);
            };

            var label = this._makeLabel(path[path.length - 1], path);
            this._makeItem(path, label, checkbox);
          }

          /**
           * make a text input field for string options.
           * @param {number} defaultValue
           * @param {number} value
           * @param {array} path    | where to look for the actual option
           * @private
           */

        }, {
          key: '_makeTextInput',
          value: function _makeTextInput(defaultValue, value, path) {
            var checkbox = document.createElement('input');
            checkbox.type = 'text';
            checkbox.className = 'vis-configuration vis-config-text';
            checkbox.value = value;
            if (value !== defaultValue) {
              this.changedOptions.push({ path: path, value: value });
            }

            var me = this;
            checkbox.onchange = function () {
              me._update(this.value, path);
            };

            var label = this._makeLabel(path[path.length - 1], path);
            this._makeItem(path, label, checkbox);
          }

          /**
           * make a color field with a color picker for color fields
           * @param {Array.<number>} arr
           * @param {number} value
           * @param {array} path    | where to look for the actual option
           * @private
           */

        }, {
          key: '_makeColorField',
          value: function _makeColorField(arr, value, path) {
            var _this4 = this;

            var defaultColor = arr[1];
            var div = document.createElement('div');
            value = value === undefined ? defaultColor : value;

            if (value !== 'none') {
              div.className = 'vis-configuration vis-config-colorBlock';
              div.style.backgroundColor = value;
            } else {
              div.className = 'vis-configuration vis-config-colorBlock none';
            }

            value = value === undefined ? defaultColor : value;
            div.onclick = function () {
              _this4._showColorPicker(value, div, path);
            };

            var label = this._makeLabel(path[path.length - 1], path);
            this._makeItem(path, label, div);
          }

          /**
           * used by the color buttons to call the color picker.
           * @param {number} value
           * @param {HTMLElement} div
           * @param {array} path    | where to look for the actual option
           * @private
           */

        }, {
          key: '_showColorPicker',
          value: function _showColorPicker(value, div, path) {
            var _this5 = this;

            // clear the callback from this div
            div.onclick = function () {};

            this.colorPicker.insertTo(div);
            this.colorPicker.show();

            this.colorPicker.setColor(value);
            this.colorPicker.setUpdateCallback(function (color) {
              var colorString = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + color.a + ')';
              div.style.backgroundColor = colorString;
              _this5._update(colorString, path);
            });

            // on close of the colorpicker, restore the callback.
            this.colorPicker.setCloseCallback(function () {
              div.onclick = function () {
                _this5._showColorPicker(value, div, path);
              };
            });
          }

          /**
           * parse an object and draw the correct items
           * @param {Object} obj
           * @param {array} [path=[]]    | where to look for the actual option
           * @param {boolean} [checkOnly=false]
           * @returns {boolean}
           * @private
           */

        }, {
          key: '_handleObject',
          value: function _handleObject(obj) {
            var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var checkOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var show = false;
            var filter = this.options.filter;
            var visibleInSet = false;
            for (var subObj in obj) {
              if (obj.hasOwnProperty(subObj)) {
                show = true;
                var item = obj[subObj];
                var newPath = util.copyAndExtendArray(path, subObj);
                if (typeof filter === 'function') {
                  show = filter(subObj, path);

                  // if needed we must go deeper into the object.
                  if (show === false) {
                    if (!(item instanceof Array) && typeof item !== 'string' && typeof item !== 'boolean' && item instanceof Object) {
                      this.allowCreation = false;
                      show = this._handleObject(item, newPath, true);
                      this.allowCreation = checkOnly === false;
                    }
                  }
                }

                if (show !== false) {
                  visibleInSet = true;
                  var value = this._getValue(newPath);

                  if (item instanceof Array) {
                    this._handleArray(item, value, newPath);
                  } else if (typeof item === 'string') {
                    this._makeTextInput(item, value, newPath);
                  } else if (typeof item === 'boolean') {
                    this._makeCheckbox(item, value, newPath);
                  } else if (item instanceof Object) {
                    // collapse the physics options that are not enabled
                    var draw = true;
                    if (path.indexOf('physics') !== -1) {
                      if (this.moduleOptions.physics.solver !== subObj) {
                        draw = false;
                      }
                    }

                    if (draw === true) {
                      // initially collapse options with an disabled enabled option.
                      if (item.enabled !== undefined) {
                        var enabledPath = util.copyAndExtendArray(newPath, 'enabled');
                        var enabledValue = this._getValue(enabledPath);
                        if (enabledValue === true) {
                          var label = this._makeLabel(subObj, newPath, true);
                          this._makeItem(newPath, label);
                          visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                        } else {
                          this._makeCheckbox(item, enabledValue, newPath);
                        }
                      } else {
                        var _label = this._makeLabel(subObj, newPath, true);
                        this._makeItem(newPath, _label);
                        visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                      }
                    }
                  } else {
                    console.error('dont know how to handle', item, subObj, newPath);
                  }
                }
              }
            }
            return visibleInSet;
          }

          /**
           * handle the array type of option
           * @param {Array.<number>} arr
           * @param {number} value
           * @param {array} path    | where to look for the actual option
           * @private
           */

        }, {
          key: '_handleArray',
          value: function _handleArray(arr, value, path) {
            if (typeof arr[0] === 'string' && arr[0] === 'color') {
              this._makeColorField(arr, value, path);
              if (arr[1] !== value) {
                this.changedOptions.push({ path: path, value: value });
              }
            } else if (typeof arr[0] === 'string') {
              this._makeDropdown(arr, value, path);
              if (arr[0] !== value) {
                this.changedOptions.push({ path: path, value: value });
              }
            } else if (typeof arr[0] === 'number') {
              this._makeRange(arr, value, path);
              if (arr[0] !== value) {
                this.changedOptions.push({ path: path, value: Number(value) });
              }
            }
          }

          /**
           * called to update the network with the new settings.
           * @param {number} value
           * @param {array} path    | where to look for the actual option
           * @private
           */

        }, {
          key: '_update',
          value: function _update(value, path) {
            var options = this._constructOptions(value, path);

            if (this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit) {
              this.parent.body.emitter.emit("configChange", options);
            }
            this.initialized = true;
            this.parent.setOptions(options);
          }

          /**
           *
           * @param {string|Boolean} value
           * @param {Array.<string>} path
           * @param {{}} optionsObj
           * @returns {{}}
           * @private
           */

        }, {
          key: '_constructOptions',
          value: function _constructOptions(value, path) {
            var optionsObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var pointer = optionsObj;

            // when dropdown boxes can be string or boolean, we typecast it into correct types
            value = value === 'true' ? true : value;
            value = value === 'false' ? false : value;

            for (var i = 0; i < path.length; i++) {
              if (path[i] !== 'global') {
                if (pointer[path[i]] === undefined) {
                  pointer[path[i]] = {};
                }
                if (i !== path.length - 1) {
                  pointer = pointer[path[i]];
                } else {
                  pointer[path[i]] = value;
                }
              }
            }
            return optionsObj;
          }

          /**
           * @private
           */

        }, {
          key: '_printOptions',
          value: function _printOptions() {
            var options = this.getOptions();
            this.optionsContainer.innerHTML = '<pre>var options = ' + (0, _stringify2['default'])(options, null, 2) + '</pre>';
          }

          /**
           *
           * @returns {{}} options
           */

        }, {
          key: 'getOptions',
          value: function getOptions() {
            var options = {};
            for (var i = 0; i < this.changedOptions.length; i++) {
              this._constructOptions(this.changedOptions[i].value, this.changedOptions[i].path, options);
            }
            return options;
          }
        }]);
        return Configurator;
      }();

      exports['default'] = Configurator;

      /***/
    },
    /* 72 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var DOMutil = __webpack_require__(14);

      /**
       *
       * @param {number | string} groupId
       * @param {Object} options   // TODO: Describe options
       *
       * @constructor Points
       */
      function Points(groupId, options) {} // eslint-disable-line no-unused-vars


      /**
       * draw the data points
       *
       * @param {Array} dataset
       * @param {GraphGroup} group
       * @param {Object} framework            | SVG DOM element
       * @param {number} [offset]
       */
      Points.draw = function (dataset, group, framework, offset) {
        offset = offset || 0;
        var callback = getCallback(framework, group);

        for (var i = 0; i < dataset.length; i++) {
          if (!callback) {
            // draw the point the simple way.
            DOMutil.drawPoint(dataset[i].screen_x + offset, dataset[i].screen_y, getGroupTemplate(group), framework.svgElements, framework.svg, dataset[i].label);
          } else {
            var callbackResult = callback(dataset[i], group); // result might be true, false or an object
            if (callbackResult === true || (typeof callbackResult === 'undefined' ? 'undefined' : (0, _typeof3['default'])(callbackResult)) === 'object') {
              DOMutil.drawPoint(dataset[i].screen_x + offset, dataset[i].screen_y, getGroupTemplate(group, callbackResult), framework.svgElements, framework.svg, dataset[i].label);
            }
          }
        }
      };

      Points.drawIcon = function (group, x, y, iconWidth, iconHeight, framework) {
        var fillHeight = iconHeight * 0.5;

        var outline = DOMutil.getSVGElement("rect", framework.svgElements, framework.svg);
        outline.setAttributeNS(null, "x", x);
        outline.setAttributeNS(null, "y", y - fillHeight);
        outline.setAttributeNS(null, "width", iconWidth);
        outline.setAttributeNS(null, "height", 2 * fillHeight);
        outline.setAttributeNS(null, "class", "vis-outline");

        //Don't call callback on icon
        DOMutil.drawPoint(x + 0.5 * iconWidth, y, getGroupTemplate(group), framework.svgElements, framework.svg);
      };

      /**
       *
       * @param {vis.Group} group
       * @param {any} callbackResult
       * @returns {{style: *, styles: (*|string), size: *, className: *}}
       */
      function getGroupTemplate(group, callbackResult) {
        callbackResult = typeof callbackResult === 'undefined' ? {} : callbackResult;
        return {
          style: callbackResult.style || group.options.drawPoints.style,
          styles: callbackResult.styles || group.options.drawPoints.styles,
          size: callbackResult.size || group.options.drawPoints.size,
          className: callbackResult.className || group.className
        };
      }

      /**
       *
       * @param {Object} framework            | SVG DOM element
       * @param {vis.Group} group
       * @returns {function}
       */
      function getCallback(framework, group) {
        var callback = undefined;
        // check for the graph2d onRender
        if (framework.options && framework.options.drawPoints && framework.options.drawPoints.onRender && typeof framework.options.drawPoints.onRender == 'function') {
          callback = framework.options.drawPoints.onRender;
        }

        // override it with the group onRender if defined
        if (group.group.options && group.group.options.drawPoints && group.group.options.drawPoints.onRender && typeof group.group.options.drawPoints.onRender == 'function') {
          callback = group.group.options.drawPoints.onRender;
        }
        return callback;
      }

      module.exports = Points;

      /***/
    },
    /* 73 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _NodeBase2 = __webpack_require__(23);

      var _NodeBase3 = _interopRequireDefault(_NodeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * NOTE: This is a bad base class
       *
       * Child classes are:
       *
       *   Image       - uses *only* image methods
       *   Circle      - uses *only* _drawRawCircle
       *   CircleImage - uses all
       *
       * TODO: Refactor, move _drawRawCircle to different module, derive Circle from NodeBase
       *       Rename this to ImageBase
       *       Consolidate common code in Image and CircleImage to base class
       *
       * @extends NodeBase
       */
      var CircleImageBase = function (_NodeBase) {
        (0, _inherits3['default'])(CircleImageBase, _NodeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function CircleImageBase(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, CircleImageBase);

          var _this = (0, _possibleConstructorReturn3['default'])(this, (CircleImageBase.__proto__ || (0, _getPrototypeOf2['default'])(CircleImageBase)).call(this, options, body, labelModule));

          _this.labelOffset = 0;
          _this.selected = false;
          return _this;
        }

        /**
         *
         * @param {Object} options
         * @param {Object} [imageObj]
         * @param {Object} [imageObjAlt]
         */

        (0, _createClass3['default'])(CircleImageBase, [{
          key: 'setOptions',
          value: function setOptions(options, imageObj, imageObjAlt) {
            this.options = options;

            if (!(imageObj === undefined && imageObjAlt === undefined)) {
              this.setImages(imageObj, imageObjAlt);
            }
          }

          /**
           * Set the images for this node.
           *
           * The images can be updated after the initial setting of options;
           * therefore, this method needs to be reentrant. 
           *
           * For correct working in error cases, it is necessary to properly set
           * field 'nodes.brokenImage' in the options.
           *
           * @param {Image} imageObj  required; main image to show for this node
           * @param {Image|undefined} imageObjAlt optional; image to show when node is selected
           */

        }, {
          key: 'setImages',
          value: function setImages(imageObj, imageObjAlt) {
            if (imageObjAlt && this.selected) {
              this.imageObj = imageObjAlt;
              this.imageObjAlt = imageObj;
            } else {
              this.imageObj = imageObj;
              this.imageObjAlt = imageObjAlt;
            }
          }

          /**
           * Set selection and switch between the base and the selected image.
           *
           * Do the switch only if imageObjAlt exists.
           *
           * @param {boolean} selected value of new selected state for current node
           */

        }, {
          key: 'switchImages',
          value: function switchImages(selected) {
            var selection_changed = selected && !this.selected || !selected && this.selected;
            this.selected = selected; // Remember new selection

            if (this.imageObjAlt !== undefined && selection_changed) {
              var imageTmp = this.imageObj;
              this.imageObj = this.imageObjAlt;
              this.imageObjAlt = imageTmp;
            }
          }

          /**
           * Adjust the node dimensions for a loaded image.
           *
           * Pre: this.imageObj is valid
           */

        }, {
          key: '_resizeImage',
          value: function _resizeImage() {
            var width, height;

            if (this.options.shapeProperties.useImageSize === false) {
              // Use the size property
              var ratio_width = 1;
              var ratio_height = 1;

              // Only calculate the proper ratio if both width and height not zero
              if (this.imageObj.width && this.imageObj.height) {
                if (this.imageObj.width > this.imageObj.height) {
                  ratio_width = this.imageObj.width / this.imageObj.height;
                } else {
                  ratio_height = this.imageObj.height / this.imageObj.width;
                }
              }

              width = this.options.size * 2 * ratio_width;
              height = this.options.size * 2 * ratio_height;
            } else {
              // Use the image size
              width = this.imageObj.width;
              height = this.imageObj.height;
            }

            this.width = width;
            this.height = height;
            this.radius = 0.5 * this.width;
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x width
           * @param {number} y height
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           * @private
           */

        }, {
          key: '_drawRawCircle',
          value: function _drawRawCircle(ctx, x, y, values) {
            this.initContextForDraw(ctx, values);
            ctx.circle(x, y, values.size);
            this.performFill(ctx, values);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           * @private
           */

        }, {
          key: '_drawImageAtPosition',
          value: function _drawImageAtPosition(ctx, values) {
            if (this.imageObj.width != 0) {
              // draw the image
              ctx.globalAlpha = 1.0;

              // draw shadow if enabled
              this.enableShadow(ctx, values);

              var factor = 1;
              if (this.options.shapeProperties.interpolation === true) {
                factor = this.imageObj.width / this.width / this.body.view.scale;
              }

              this.imageObj.drawImageAtPosition(ctx, factor, this.left, this.top, this.width, this.height);

              // disable shadows for other elements.
              this.disableShadow(ctx, values);
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x width
           * @param {number} y height
           * @param {boolean} selected
           * @param {boolean} hover
           * @private
           */

        }, {
          key: '_drawImageLabel',
          value: function _drawImageLabel(ctx, x, y, selected, hover) {
            var yLabel;
            var offset = 0;

            if (this.height !== undefined) {
              offset = this.height * 0.5;
              var labelDimensions = this.labelModule.getTextSize(ctx, selected, hover);
              if (labelDimensions.lineCount >= 1) {
                offset += labelDimensions.height / 2;
              }
            }

            yLabel = y + offset;

            if (this.options.label) {
              this.labelOffset = offset;
            }
            this.labelModule.draw(ctx, x, yLabel, selected, hover, 'hanging');
          }
        }]);
        return CircleImageBase;
      }(_NodeBase3['default']);

      exports['default'] = CircleImageBase;

      /***/
    },
    /* 74 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _stringify = __webpack_require__(19);

      var _stringify2 = _interopRequireDefault(_stringify);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      var _create = __webpack_require__(29);

      var _create2 = _interopRequireDefault(_create);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var Label = __webpack_require__(117)['default'];
      var ComponentUtil = __webpack_require__(48)['default'];
      var CubicBezierEdge = __webpack_require__(215)['default'];
      var BezierEdgeDynamic = __webpack_require__(217)['default'];
      var BezierEdgeStatic = __webpack_require__(218)['default'];
      var StraightEdge = __webpack_require__(219)['default'];

      /**
       * An edge connects two nodes and has a specific direction.
       */

      var Edge = function () {
        /**
         * @param {Object} options        values specific to this edge, must contain at least 'from' and 'to'
         * @param {Object} body           shared state from Network instance
         * @param {Object} globalOptions  options from the EdgesHandler instance
         * @param {Object} defaultOptions default options from the EdgeHandler instance. Value and reference are constant
         */
        function Edge(options, body, globalOptions, defaultOptions) {
          (0, _classCallCheck3['default'])(this, Edge);

          if (body === undefined) {
            throw new Error("No body provided");
          }

          // Since globalOptions is constant in values as well as reference,
          // Following needs to be done only once.

          this.options = util.bridgeObject(globalOptions);
          this.globalOptions = globalOptions;
          this.defaultOptions = defaultOptions;
          this.body = body;

          // initialize variables
          this.id = undefined;
          this.fromId = undefined;
          this.toId = undefined;
          this.selected = false;
          this.hover = false;
          this.labelDirty = true;

          this.baseWidth = this.options.width;
          this.baseFontSize = this.options.font.size;

          this.from = undefined; // a node
          this.to = undefined; // a node

          this.edgeType = undefined;

          this.connected = false;

          this.labelModule = new Label(this.body, this.options, true /* It's an edge label */);
          this.setOptions(options);
        }

        /**
         * Set or overwrite options for the edge
         * @param {Object} options  an object with options
         * @returns {null|boolean} null if no options, boolean if date changed
         */

        (0, _createClass3['default'])(Edge, [{
          key: 'setOptions',
          value: function setOptions(options) {
            if (!options) {
              return;
            }

            Edge.parseOptions(this.options, options, true, this.globalOptions);

            if (options.id !== undefined) {
              this.id = options.id;
            }
            if (options.from !== undefined) {
              this.fromId = options.from;
            }
            if (options.to !== undefined) {
              this.toId = options.to;
            }
            if (options.title !== undefined) {
              this.title = options.title;
            }
            if (options.value !== undefined) {
              options.value = parseFloat(options.value);
            }

            var pile = [options, this.options, this.defaultOptions];
            this.chooser = ComponentUtil.choosify('edge', pile);

            // update label Module
            this.updateLabelModule(options);

            var dataChanged = this.updateEdgeType();

            // if anything has been updates, reset the selection width and the hover width
            this._setInteractionWidths();

            // A node is connected when it has a from and to node that both exist in the network.body.nodes.
            this.connect();

            if (options.hidden !== undefined || options.physics !== undefined) {
              dataChanged = true;
            }

            return dataChanged;
          }

          /**
           *
           * @param {Object} parentOptions
           * @param {Object} newOptions
           * @param {boolean} [allowDeletion=false]
           * @param {Object} [globalOptions={}]
           * @param {boolean} [copyFromGlobals=false]
           */

        }, {
          key: 'getFormattingValues',

          /**
           *
           * @returns {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}}
           */
          value: function getFormattingValues() {
            var toArrow = this.options.arrows.to === true || this.options.arrows.to.enabled === true;
            var fromArrow = this.options.arrows.from === true || this.options.arrows.from.enabled === true;
            var middleArrow = this.options.arrows.middle === true || this.options.arrows.middle.enabled === true;
            var inheritsColor = this.options.color.inherit;
            var values = {
              toArrow: toArrow,
              toArrowScale: this.options.arrows.to.scaleFactor,
              toArrowType: this.options.arrows.to.type,
              middleArrow: middleArrow,
              middleArrowScale: this.options.arrows.middle.scaleFactor,
              middleArrowType: this.options.arrows.middle.type,
              fromArrow: fromArrow,
              fromArrowScale: this.options.arrows.from.scaleFactor,
              fromArrowType: this.options.arrows.from.type,
              arrowStrikethrough: this.options.arrowStrikethrough,
              color: inheritsColor ? undefined : this.options.color.color,
              inheritsColor: inheritsColor,
              opacity: this.options.color.opacity,
              hidden: this.options.hidden,
              length: this.options.length,
              shadow: this.options.shadow.enabled,
              shadowColor: this.options.shadow.color,
              shadowSize: this.options.shadow.size,
              shadowX: this.options.shadow.x,
              shadowY: this.options.shadow.y,
              dashes: this.options.dashes,
              width: this.options.width
            };
            if (this.selected || this.hover) {
              if (this.chooser === true) {
                if (this.selected) {
                  var selectedWidth = this.options.selectionWidth;
                  if (typeof selectedWidth === 'function') {
                    values.width = selectedWidth(values.width);
                  } else if (typeof selectedWidth === 'number') {
                    values.width += selectedWidth;
                  }
                  values.width = Math.max(values.width, 0.3 / this.body.view.scale);
                  values.color = this.options.color.highlight;
                  values.shadow = this.options.shadow.enabled;
                } else if (this.hover) {
                  var hoverWidth = this.options.hoverWidth;
                  if (typeof hoverWidth === 'function') {
                    values.width = hoverWidth(values.width);
                  } else if (typeof hoverWidth === 'number') {
                    values.width += hoverWidth;
                  }
                  values.width = Math.max(values.width, 0.3 / this.body.view.scale);
                  values.color = this.options.color.hover;
                  values.shadow = this.options.shadow.enabled;
                }
              } else if (typeof this.chooser === 'function') {
                this.chooser(values, this.options.id, this.selected, this.hover);
                if (values.color !== undefined) {
                  values.inheritsColor = false;
                }
                if (values.shadow === false) {
                  if (values.shadowColor !== this.options.shadow.color || values.shadowSize !== this.options.shadow.size || values.shadowX !== this.options.shadow.x || values.shadowY !== this.options.shadow.y) {
                    values.shadow = true;
                  }
                }
              }
            } else {
              values.shadow = this.options.shadow.enabled;
              values.width = Math.max(values.width, 0.3 / this.body.view.scale);
            }
            return values;
          }

          /**
           * update the options in the label module
           *
           * @param {Object} options
           */

        }, {
          key: 'updateLabelModule',
          value: function updateLabelModule(options) {
            var pile = [options, this.options, this.globalOptions, // Currently set global edge options
            this.defaultOptions];

            this.labelModule.update(this.options, pile);

            if (this.labelModule.baseSize !== undefined) {
              this.baseFontSize = this.labelModule.baseSize;
            }
          }

          /**
           * update the edge type, set the options
           * @returns {boolean}
           */

        }, {
          key: 'updateEdgeType',
          value: function updateEdgeType() {
            var smooth = this.options.smooth;
            var dataChanged = false;
            var changeInType = true;
            if (this.edgeType !== undefined) {
              if (this.edgeType instanceof BezierEdgeDynamic && smooth.enabled === true && smooth.type === 'dynamic' || this.edgeType instanceof CubicBezierEdge && smooth.enabled === true && smooth.type === 'cubicBezier' || this.edgeType instanceof BezierEdgeStatic && smooth.enabled === true && smooth.type !== 'dynamic' && smooth.type !== 'cubicBezier' || this.edgeType instanceof StraightEdge && smooth.type.enabled === false) {
                changeInType = false;
              }
              if (changeInType === true) {
                dataChanged = this.cleanup();
              }
            }
            if (changeInType === true) {
              if (smooth.enabled === true) {
                if (smooth.type === 'dynamic') {
                  dataChanged = true;
                  this.edgeType = new BezierEdgeDynamic(this.options, this.body, this.labelModule);
                } else if (smooth.type === 'cubicBezier') {
                  this.edgeType = new CubicBezierEdge(this.options, this.body, this.labelModule);
                } else {
                  this.edgeType = new BezierEdgeStatic(this.options, this.body, this.labelModule);
                }
              } else {
                this.edgeType = new StraightEdge(this.options, this.body, this.labelModule);
              }
            } else {
              // if nothing changes, we just set the options.
              this.edgeType.setOptions(this.options);
            }
            return dataChanged;
          }

          /**
           * Connect an edge to its nodes
           */

        }, {
          key: 'connect',
          value: function connect() {
            this.disconnect();

            this.from = this.body.nodes[this.fromId] || undefined;
            this.to = this.body.nodes[this.toId] || undefined;
            this.connected = this.from !== undefined && this.to !== undefined;

            if (this.connected === true) {
              this.from.attachEdge(this);
              this.to.attachEdge(this);
            } else {
              if (this.from) {
                this.from.detachEdge(this);
              }
              if (this.to) {
                this.to.detachEdge(this);
              }
            }

            this.edgeType.connect();
          }

          /**
           * Disconnect an edge from its nodes
           */

        }, {
          key: 'disconnect',
          value: function disconnect() {
            if (this.from) {
              this.from.detachEdge(this);
              this.from = undefined;
            }
            if (this.to) {
              this.to.detachEdge(this);
              this.to = undefined;
            }

            this.connected = false;
          }

          /**
           * get the title of this edge.
           * @return {string} title    The title of the edge, or undefined when no title
           *                           has been set.
           */

        }, {
          key: 'getTitle',
          value: function getTitle() {
            return this.title;
          }

          /**
           * check if this node is selecte
           * @return {boolean} selected   True if node is selected, else false
           */

        }, {
          key: 'isSelected',
          value: function isSelected() {
            return this.selected;
          }

          /**
           * Retrieve the value of the edge. Can be undefined
           * @return {number} value
           */

        }, {
          key: 'getValue',
          value: function getValue() {
            return this.options.value;
          }

          /**
           * Adjust the value range of the edge. The edge will adjust it's width
           * based on its value.
           * @param {number} min
           * @param {number} max
           * @param {number} total
           */

        }, {
          key: 'setValueRange',
          value: function setValueRange(min, max, total) {
            if (this.options.value !== undefined) {
              var scale = this.options.scaling.customScalingFunction(min, max, total, this.options.value);
              var widthDiff = this.options.scaling.max - this.options.scaling.min;
              if (this.options.scaling.label.enabled === true) {
                var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
                this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
              }
              this.options.width = this.options.scaling.min + scale * widthDiff;
            } else {
              this.options.width = this.baseWidth;
              this.options.font.size = this.baseFontSize;
            }

            this._setInteractionWidths();
            this.updateLabelModule();
          }

          /**
           *
           * @private
           */

        }, {
          key: '_setInteractionWidths',
          value: function _setInteractionWidths() {
            if (typeof this.options.hoverWidth === 'function') {
              this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width);
            } else {
              this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width;
            }
            if (typeof this.options.selectionWidth === 'function') {
              this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width);
            } else {
              this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;
            }
          }

          /**
           * Redraw a edge
           * Draw this edge in the given canvas
           * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
           * @param {CanvasRenderingContext2D}   ctx
           */

        }, {
          key: 'draw',
          value: function draw(ctx) {
            var values = this.getFormattingValues();
            if (values.hidden) {
              return;
            }

            // get the via node from the edge type
            var viaNode = this.edgeType.getViaNode();
            var arrowData = {};

            // restore edge targets to defaults
            this.edgeType.fromPoint = this.edgeType.from;
            this.edgeType.toPoint = this.edgeType.to;

            // from and to arrows give a different end point for edges. we set them here
            if (values.fromArrow) {
              arrowData.from = this.edgeType.getArrowData(ctx, 'from', viaNode, this.selected, this.hover, values);
              if (values.arrowStrikethrough === false) this.edgeType.fromPoint = arrowData.from.core;
            }
            if (values.toArrow) {
              arrowData.to = this.edgeType.getArrowData(ctx, 'to', viaNode, this.selected, this.hover, values);
              if (values.arrowStrikethrough === false) this.edgeType.toPoint = arrowData.to.core;
            }

            // the middle arrow depends on the line, which can depend on the to and from arrows so we do this one lastly.
            if (values.middleArrow) {
              arrowData.middle = this.edgeType.getArrowData(ctx, 'middle', viaNode, this.selected, this.hover, values);
            }

            // draw everything
            this.edgeType.drawLine(ctx, values, this.selected, this.hover, viaNode);
            this.drawArrows(ctx, arrowData, values);
            this.drawLabel(ctx, viaNode);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {Object} arrowData
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'drawArrows',
          value: function drawArrows(ctx, arrowData, values) {
            if (values.fromArrow) {
              this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.from);
            }
            if (values.middleArrow) {
              this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.middle);
            }
            if (values.toArrow) {
              this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.to);
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {Node} viaNode
           */

        }, {
          key: 'drawLabel',
          value: function drawLabel(ctx, viaNode) {
            if (this.options.label !== undefined) {
              // set style
              var node1 = this.from;
              var node2 = this.to;

              if (this.labelModule.differentState(this.selected, this.hover)) {
                this.labelModule.getTextSize(ctx, this.selected, this.hover);
              }

              if (node1.id != node2.id) {
                this.labelModule.pointToSelf = false;
                var point = this.edgeType.getPoint(0.5, viaNode);
                ctx.save();

                var rotationPoint = this._getRotation(ctx);
                if (rotationPoint.angle != 0) {
                  ctx.translate(rotationPoint.x, rotationPoint.y);
                  ctx.rotate(rotationPoint.angle);
                }

                // draw the label
                this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);

                /*
                        // Useful debug code: draw a border around the label
                        // This should **not** be enabled in production!
                        var size = this.labelModule.getSize();; // ;; intentional so lint catches it
                        ctx.strokeStyle = "#ff0000";
                        ctx.strokeRect(size.left, size.top, size.width, size.height);
                        // End  debug code
                */

                ctx.restore();
              } else {
                // Ignore the orientations.
                this.labelModule.pointToSelf = true;
                var x, y;
                var radius = this.options.selfReferenceSize;
                if (node1.shape.width > node1.shape.height) {
                  x = node1.x + node1.shape.width * 0.5;
                  y = node1.y - radius;
                } else {
                  x = node1.x + radius;
                  y = node1.y - node1.shape.height * 0.5;
                }
                point = this._pointOnCircle(x, y, radius, 0.125);
                this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);
              }
            }
          }

          /**
           * Determine all visual elements of this edge instance, in which the given
           * point falls within the bounding shape.
           *
           * @param {point} point
           * @returns {Array.<edgeClickItem|edgeLabelClickItem>} list with the items which are on the point
           */

        }, {
          key: 'getItemsOnPoint',
          value: function getItemsOnPoint(point) {
            var ret = [];

            if (this.labelModule.visible()) {
              var rotationPoint = this._getRotation();
              if (ComponentUtil.pointInRect(this.labelModule.getSize(), point, rotationPoint)) {
                ret.push({ edgeId: this.id, labelId: 0 });
              }
            }

            var obj = {
              left: point.x,
              top: point.y
            };

            if (this.isOverlappingWith(obj)) {
              ret.push({ edgeId: this.id });
            }

            return ret;
          }

          /**
           * Check if this object is overlapping with the provided object
           * @param {Object} obj   an object with parameters left, top
           * @return {boolean}     True if location is located on the edge
           */

        }, {
          key: 'isOverlappingWith',
          value: function isOverlappingWith(obj) {
            if (this.connected) {
              var distMax = 10;
              var xFrom = this.from.x;
              var yFrom = this.from.y;
              var xTo = this.to.x;
              var yTo = this.to.y;
              var xObj = obj.left;
              var yObj = obj.top;

              var dist = this.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, xObj, yObj);

              return dist < distMax;
            } else {
              return false;
            }
          }

          /** 
           * Determine the rotation point, if any.
           *
           * @param {CanvasRenderingContext2D} [ctx] if passed, do a recalculation of the label size
           * @returns {rotationPoint} the point to rotate around and the angle in radians to rotate
           * @private
           */

        }, {
          key: '_getRotation',
          value: function _getRotation(ctx) {
            var viaNode = this.edgeType.getViaNode();
            var point = this.edgeType.getPoint(0.5, viaNode);

            if (ctx !== undefined) {
              this.labelModule.calculateLabelSize(ctx, this.selected, this.hover, point.x, point.y);
            }

            var ret = {
              x: point.x,
              y: this.labelModule.size.yLine,
              angle: 0
            };

            if (!this.labelModule.visible()) {
              return ret; // Don't even bother doing the atan2, there's nothing to draw
            }

            if (this.options.font.align === "horizontal") {
              return ret; // No need to calculate angle
            }

            var dy = this.from.y - this.to.y;
            var dx = this.from.x - this.to.x;
            var angle = Math.atan2(dy, dx); // radians

            // rotate so that label is readable
            if (angle < -1 && dx < 0 || angle > 0 && dx < 0) {
              angle += Math.PI;
            }
            ret.angle = angle;

            return ret;
          }

          /**
           * Get a point on a circle
           * @param {number} x
           * @param {number} y
           * @param {number} radius
           * @param {number} percentage Value between 0 (line start) and 1 (line end)
           * @return {Object} point
           * @private
           */

        }, {
          key: '_pointOnCircle',
          value: function _pointOnCircle(x, y, radius, percentage) {
            var angle = percentage * 2 * Math.PI;
            return {
              x: x + radius * Math.cos(angle),
              y: y - radius * Math.sin(angle)
            };
          }

          /**
           * Sets selected state to true
           */

        }, {
          key: 'select',
          value: function select() {
            this.selected = true;
          }

          /**
           * Sets selected state to false
           */

        }, {
          key: 'unselect',
          value: function unselect() {
            this.selected = false;
          }

          /**
           * cleans all required things on delete
           * @returns {*}
           */

        }, {
          key: 'cleanup',
          value: function cleanup() {
            return this.edgeType.cleanup();
          }

          /**
           * Remove edge from the list and perform necessary cleanup.
           */

        }, {
          key: 'remove',
          value: function remove() {
            this.cleanup();
            this.disconnect();
            delete this.body.edges[this.id];
          }

          /**
           * Check if both connecting nodes exist
           * @returns {boolean}
           */

        }, {
          key: 'endPointsValid',
          value: function endPointsValid() {
            return this.body.nodes[this.fromId] !== undefined && this.body.nodes[this.toId] !== undefined;
          }
        }], [{
          key: 'parseOptions',
          value: function parseOptions(parentOptions, newOptions) {
            var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var copyFromGlobals = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

            var fields = ['arrowStrikethrough', 'id', 'from', 'hidden', 'hoverWidth', 'labelHighlightBold', 'length', 'line', 'opacity', 'physics', 'scaling', 'selectionWidth', 'selfReferenceSize', 'to', 'title', 'value', 'width', 'font', 'chosen', 'widthConstraint'];

            // only deep extend the items in the field array. These do not have shorthand.
            util.selectiveDeepExtend(fields, parentOptions, newOptions, allowDeletion);

            // Only copy label if it's a legal value.
            if (ComponentUtil.isValidLabel(newOptions.label)) {
              parentOptions.label = newOptions.label;
            } else {
              parentOptions.label = undefined;
            }

            util.mergeOptions(parentOptions, newOptions, 'smooth', globalOptions);
            util.mergeOptions(parentOptions, newOptions, 'shadow', globalOptions);

            if (newOptions.dashes !== undefined && newOptions.dashes !== null) {
              parentOptions.dashes = newOptions.dashes;
            } else if (allowDeletion === true && newOptions.dashes === null) {
              parentOptions.dashes = (0, _create2['default'])(globalOptions.dashes); // this sets the pointer of the option back to the global option.
            }

            // set the scaling newOptions
            if (newOptions.scaling !== undefined && newOptions.scaling !== null) {
              if (newOptions.scaling.min !== undefined) {
                parentOptions.scaling.min = newOptions.scaling.min;
              }
              if (newOptions.scaling.max !== undefined) {
                parentOptions.scaling.max = newOptions.scaling.max;
              }
              util.mergeOptions(parentOptions.scaling, newOptions.scaling, 'label', globalOptions.scaling);
            } else if (allowDeletion === true && newOptions.scaling === null) {
              parentOptions.scaling = (0, _create2['default'])(globalOptions.scaling); // this sets the pointer of the option back to the global option.
            }

            // handle multiple input cases for arrows
            if (newOptions.arrows !== undefined && newOptions.arrows !== null) {
              if (typeof newOptions.arrows === 'string') {
                var arrows = newOptions.arrows.toLowerCase();
                parentOptions.arrows.to.enabled = arrows.indexOf("to") != -1;
                parentOptions.arrows.middle.enabled = arrows.indexOf("middle") != -1;
                parentOptions.arrows.from.enabled = arrows.indexOf("from") != -1;
              } else if ((0, _typeof3['default'])(newOptions.arrows) === 'object') {
                util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'to', globalOptions.arrows);
                util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'middle', globalOptions.arrows);
                util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'from', globalOptions.arrows);
              } else {
                throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:" + (0, _stringify2['default'])(newOptions.arrows));
              }
            } else if (allowDeletion === true && newOptions.arrows === null) {
              parentOptions.arrows = (0, _create2['default'])(globalOptions.arrows); // this sets the pointer of the option back to the global option.
            }

            // handle multiple input cases for color
            if (newOptions.color !== undefined && newOptions.color !== null) {
              var fromColor = newOptions.color;
              var toColor = parentOptions.color;

              // If passed, fill in values from default options - required in the case of no prototype bridging
              if (copyFromGlobals) {
                util.deepExtend(toColor, globalOptions.color, false, allowDeletion);
              } else {
                // Clear local properties - need to do it like this in order to retain prototype bridges
                for (var i in toColor) {
                  if (toColor.hasOwnProperty(i)) {
                    delete toColor[i];
                  }
                }
              }

              if (util.isString(toColor)) {
                toColor.color = toColor;
                toColor.highlight = toColor;
                toColor.hover = toColor;
                toColor.inherit = false;
                if (fromColor.opacity === undefined) {
                  toColor.opacity = 1.0; // set default
                }
              } else {
                var colorsDefined = false;
                if (fromColor.color !== undefined) {
                  toColor.color = fromColor.color;colorsDefined = true;
                }
                if (fromColor.highlight !== undefined) {
                  toColor.highlight = fromColor.highlight;colorsDefined = true;
                }
                if (fromColor.hover !== undefined) {
                  toColor.hover = fromColor.hover;colorsDefined = true;
                }
                if (fromColor.inherit !== undefined) {
                  toColor.inherit = fromColor.inherit;
                }
                if (fromColor.opacity !== undefined) {
                  toColor.opacity = Math.min(1, Math.max(0, fromColor.opacity));
                }

                if (colorsDefined === true) {
                  toColor.inherit = false;
                } else {
                  if (toColor.inherit === undefined) {
                    toColor.inherit = 'from'; // Set default
                  }
                }
              }
            } else if (allowDeletion === true && newOptions.color === null) {
              parentOptions.color = util.bridgeObject(globalOptions.color); // set the object back to the global options
            }

            if (allowDeletion === true && newOptions.font === null) {
              parentOptions.font = util.bridgeObject(globalOptions.font); // set the object back to the global options
            }
          }
        }]);
        return Edge;
      }();

      exports['default'] = Edge;

      /***/
    },
    /* 75 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _EdgeBase2 = __webpack_require__(118);

      var _EdgeBase3 = _interopRequireDefault(_EdgeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * The Base Class for all Bezier edges. Bezier curves are used to model smooth
       * gradual curves in paths between nodes.
       *
       * @extends EdgeBase
       */
      var BezierEdgeBase = function (_EdgeBase) {
        (0, _inherits3['default'])(BezierEdgeBase, _EdgeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function BezierEdgeBase(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, BezierEdgeBase);
          return (0, _possibleConstructorReturn3['default'])(this, (BezierEdgeBase.__proto__ || (0, _getPrototypeOf2['default'])(BezierEdgeBase)).call(this, options, body, labelModule));
        }

        /**
         * This function uses binary search to look for the point where the bezier curve crosses the border of the node.
         *
         * @param {Node} nearNode
         * @param {CanvasRenderingContext2D} ctx
         * @param {Node} viaNode
         * @returns {*}
         * @private
         */

        (0, _createClass3['default'])(BezierEdgeBase, [{
          key: '_findBorderPositionBezier',
          value: function _findBorderPositionBezier(nearNode, ctx) {
            var viaNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._getViaCoordinates();

            var maxIterations = 10;
            var iteration = 0;
            var low = 0;
            var high = 1;
            var pos, angle, distanceToBorder, distanceToPoint, difference;
            var threshold = 0.2;
            var node = this.to;
            var from = false;
            if (nearNode.id === this.from.id) {
              node = this.from;
              from = true;
            }

            while (low <= high && iteration < maxIterations) {
              var middle = (low + high) * 0.5;

              pos = this.getPoint(middle, viaNode);
              angle = Math.atan2(node.y - pos.y, node.x - pos.x);
              distanceToBorder = node.distanceToBorder(ctx, angle);
              distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));
              difference = distanceToBorder - distanceToPoint;
              if (Math.abs(difference) < threshold) {
                break; // found
              } else if (difference < 0) {
                // distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.
                if (from === false) {
                  low = middle;
                } else {
                  high = middle;
                }
              } else {
                if (from === false) {
                  high = middle;
                } else {
                  low = middle;
                }
              }

              iteration++;
            }
            pos.t = middle;

            return pos;
          }

          /**
           * Calculate the distance between a point (x3,y3) and a line segment from
           * (x1,y1) to (x2,y2).
           * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
           * @param {number} x1 from x
           * @param {number} y1 from y
           * @param {number} x2 to x
           * @param {number} y2 to y
           * @param {number} x3 point to check x
           * @param {number} y3 point to check y
           * @param {Node} via
           * @returns {number}
           * @private
           */

        }, {
          key: '_getDistanceToBezierEdge',
          value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via) {
            // x3,y3 is the point
            var minDistance = 1e9;
            var distance = void 0;
            var i = void 0,
                t = void 0,
                x = void 0,
                y = void 0;
            var lastX = x1;
            var lastY = y1;
            for (i = 1; i < 10; i++) {
              t = 0.1 * i;
              x = Math.pow(1 - t, 2) * x1 + 2 * t * (1 - t) * via.x + Math.pow(t, 2) * x2;
              y = Math.pow(1 - t, 2) * y1 + 2 * t * (1 - t) * via.y + Math.pow(t, 2) * y2;
              if (i > 0) {
                distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);
                minDistance = distance < minDistance ? distance : minDistance;
              }
              lastX = x;
              lastY = y;
            }

            return minDistance;
          }

          /**
           * Draw a bezier curve between two nodes
           *
           * The method accepts zero, one or two control points.
           * Passing zero control points just draws a straight line
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {Object}           values   | options for shadow drawing
           * @param {Object|undefined} viaNode1 | first control point for curve drawing
           * @param {Object|undefined} viaNode2 | second control point for curve drawing
           *
           * @protected
           */

        }, {
          key: '_bezierCurve',
          value: function _bezierCurve(ctx, values, viaNode1, viaNode2) {
            var hasNode1 = viaNode1 !== undefined && viaNode1.x !== undefined;
            var hasNode2 = viaNode2 !== undefined && viaNode2.x !== undefined;

            ctx.beginPath();
            ctx.moveTo(this.fromPoint.x, this.fromPoint.y);

            if (hasNode1 && hasNode2) {
              ctx.bezierCurveTo(viaNode1.x, viaNode1.y, viaNode2.x, viaNode2.y, this.toPoint.x, this.toPoint.y);
            } else if (hasNode1) {
              ctx.quadraticCurveTo(viaNode1.x, viaNode1.y, this.toPoint.x, this.toPoint.y);
            } else {
              // fallback to normal straight edge
              ctx.lineTo(this.toPoint.x, this.toPoint.y);
            }

            // draw shadow if enabled
            this.enableShadow(ctx, values);
            ctx.stroke();
            this.disableShadow(ctx, values);
          }

          /**
           *
           * @returns {*|{x, y}|{x: undefined, y: undefined}}
           */

        }, {
          key: 'getViaNode',
          value: function getViaNode() {
            return this._getViaCoordinates();
          }
        }]);
        return BezierEdgeBase;
      }(_EdgeBase3['default']);

      exports['default'] = BezierEdgeBase;

      /***/
    },
    /* 76 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      var util = __webpack_require__(2);

      /**
       * Utility Class
       */

      var NetworkUtil = function () {
        /**
         * @ignore
         */
        function NetworkUtil() {
          (0, _classCallCheck3["default"])(this, NetworkUtil);
        }

        /**
         * Find the center position of the network considering the bounding boxes
         *
         * @param {Array.<Node>} allNodes
         * @param {Array.<Node>} [specificNodes=[]]
         * @returns {{minX: number, maxX: number, minY: number, maxY: number}}
         * @static
         */

        (0, _createClass3["default"])(NetworkUtil, null, [{
          key: "getRange",
          value: function getRange(allNodes) {
            var specificNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            var minY = 1e9,
                maxY = -1e9,
                minX = 1e9,
                maxX = -1e9,
                node;
            if (specificNodes.length > 0) {
              for (var i = 0; i < specificNodes.length; i++) {
                node = allNodes[specificNodes[i]];
                if (minX > node.shape.boundingBox.left) {
                  minX = node.shape.boundingBox.left;
                }
                if (maxX < node.shape.boundingBox.right) {
                  maxX = node.shape.boundingBox.right;
                }
                if (minY > node.shape.boundingBox.top) {
                  minY = node.shape.boundingBox.top;
                } // top is negative, bottom is positive
                if (maxY < node.shape.boundingBox.bottom) {
                  maxY = node.shape.boundingBox.bottom;
                } // top is negative, bottom is positive
              }
            }

            if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
              minY = 0, maxY = 0, minX = 0, maxX = 0;
            }
            return { minX: minX, maxX: maxX, minY: minY, maxY: maxY };
          }

          /**
           * Find the center position of the network
           *
           * @param {Array.<Node>} allNodes
           * @param {Array.<Node>} [specificNodes=[]]
           * @returns {{minX: number, maxX: number, minY: number, maxY: number}}
           * @static
           */

        }, {
          key: "getRangeCore",
          value: function getRangeCore(allNodes) {
            var specificNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            var minY = 1e9,
                maxY = -1e9,
                minX = 1e9,
                maxX = -1e9,
                node;
            if (specificNodes.length > 0) {
              for (var i = 0; i < specificNodes.length; i++) {
                node = allNodes[specificNodes[i]];
                if (minX > node.x) {
                  minX = node.x;
                }
                if (maxX < node.x) {
                  maxX = node.x;
                }
                if (minY > node.y) {
                  minY = node.y;
                } // top is negative, bottom is positive
                if (maxY < node.y) {
                  maxY = node.y;
                } // top is negative, bottom is positive
              }
            }

            if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
              minY = 0, maxY = 0, minX = 0, maxX = 0;
            }
            return { minX: minX, maxX: maxX, minY: minY, maxY: maxY };
          }

          /**
           * @param {object} range = {minX: minX, maxX: maxX, minY: minY, maxY: maxY};
           * @returns {{x: number, y: number}}
           * @static
           */

        }, {
          key: "findCenter",
          value: function findCenter(range) {
            return { x: 0.5 * (range.maxX + range.minX),
              y: 0.5 * (range.maxY + range.minY) };
          }

          /**
           * This returns a clone of the options or options of the edge or node to be used for construction of new edges or check functions for new nodes.
           * @param {vis.Item} item
           * @param {'node'|undefined} type
           * @returns {{}}
           * @static
           */

        }, {
          key: "cloneOptions",
          value: function cloneOptions(item, type) {
            var clonedOptions = {};
            if (type === undefined || type === 'node') {
              util.deepExtend(clonedOptions, item.options, true);
              clonedOptions.x = item.x;
              clonedOptions.y = item.y;
              clonedOptions.amountOfConnections = item.edges.length;
            } else {
              util.deepExtend(clonedOptions, item.options, true);
            }
            return clonedOptions;
          }
        }]);
        return NetworkUtil;
      }();

      exports["default"] = NetworkUtil;

      /***/
    },
    /* 77 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = { "default": __webpack_require__(124), __esModule: true };

      /***/
    },
    /* 78 */
    /***/function (module, exports, __webpack_require__) {

      // fallback for non-array-like ES3 and non-enumerable old V8 strings
      var cof = __webpack_require__(50);
      // eslint-disable-next-line no-prototype-builtins
      module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
        return cof(it) == 'String' ? it.split('') : Object(it);
      };

      /***/
    },
    /* 79 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var LIBRARY = __webpack_require__(52);
      var $export = __webpack_require__(17);
      var redefine = __webpack_require__(83);
      var hide = __webpack_require__(26);
      var has = __webpack_require__(22);
      var Iterators = __webpack_require__(31);
      var $iterCreate = __webpack_require__(129);
      var setToStringTag = __webpack_require__(59);
      var getPrototypeOf = __webpack_require__(85);
      var ITERATOR = __webpack_require__(13)('iterator');
      var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
      var FF_ITERATOR = '@@iterator';
      var KEYS = 'keys';
      var VALUES = 'values';

      var returnThis = function returnThis() {
        return this;
      };

      module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
        $iterCreate(Constructor, NAME, next);
        var getMethod = function getMethod(kind) {
          if (!BUGGY && kind in proto) return proto[kind];
          switch (kind) {
            case KEYS:
              return function keys() {
                return new Constructor(this, kind);
              };
            case VALUES:
              return function values() {
                return new Constructor(this, kind);
              };
          }return function entries() {
            return new Constructor(this, kind);
          };
        };
        var TAG = NAME + ' Iterator';
        var DEF_VALUES = DEFAULT == VALUES;
        var VALUES_BUG = false;
        var proto = Base.prototype;
        var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
        var $default = $native || getMethod(DEFAULT);
        var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
        var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
        var methods, key, IteratorPrototype;
        // Fix native
        if ($anyNative) {
          IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
          if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
            // Set @@toStringTag to native iterators
            setToStringTag(IteratorPrototype, TAG, true);
            // fix for some old engines
            if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
          }
        }
        // fix Array#{values, @@iterator}.name in V8 / FF
        if (DEF_VALUES && $native && $native.name !== VALUES) {
          VALUES_BUG = true;
          $default = function values() {
            return $native.call(this);
          };
        }
        // Define iterator
        if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
          hide(proto, ITERATOR, $default);
        }
        // Plug for library
        Iterators[NAME] = $default;
        Iterators[TAG] = returnThis;
        if (DEFAULT) {
          methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: $entries
          };
          if (FORCED) for (key in methods) {
            if (!(key in proto)) redefine(proto, key, methods[key]);
          } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
        }
        return methods;
      };

      /***/
    },
    /* 80 */
    /***/function (module, exports, __webpack_require__) {

      // optional / simple context binding
      var aFunction = __webpack_require__(128);
      module.exports = function (fn, that, length) {
        aFunction(fn);
        if (that === undefined) return fn;
        switch (length) {
          case 1:
            return function (a) {
              return fn.call(that, a);
            };
          case 2:
            return function (a, b) {
              return fn.call(that, a, b);
            };
          case 3:
            return function (a, b, c) {
              return fn.call(that, a, b, c);
            };
        }
        return function () /* ...args */{
          return fn.apply(that, arguments);
        };
      };

      /***/
    },
    /* 81 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = !__webpack_require__(21) && !__webpack_require__(28)(function () {
        return Object.defineProperty(__webpack_require__(82)('div'), 'a', { get: function get() {
            return 7;
          } }).a != 7;
      });

      /***/
    },
    /* 82 */
    /***/function (module, exports, __webpack_require__) {

      var isObject = __webpack_require__(32);
      var document = __webpack_require__(18).document;
      // typeof document.createElement is 'object' in old IE
      var is = isObject(document) && isObject(document.createElement);
      module.exports = function (it) {
        return is ? document.createElement(it) : {};
      };

      /***/
    },
    /* 83 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = __webpack_require__(26);

      /***/
    },
    /* 84 */
    /***/function (module, exports, __webpack_require__) {

      var has = __webpack_require__(22);
      var toIObject = __webpack_require__(25);
      var arrayIndexOf = __webpack_require__(131)(false);
      var IE_PROTO = __webpack_require__(56)('IE_PROTO');

      module.exports = function (object, names) {
        var O = toIObject(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O) {
          if (key != IE_PROTO) has(O, key) && result.push(key);
        } // Don't enum bug & hidden keys
        while (names.length > i) {
          if (has(O, key = names[i++])) {
            ~arrayIndexOf(result, key) || result.push(key);
          }
        }return result;
      };

      /***/
    },
    /* 85 */
    /***/function (module, exports, __webpack_require__) {

      // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
      var has = __webpack_require__(22);
      var toObject = __webpack_require__(41);
      var IE_PROTO = __webpack_require__(56)('IE_PROTO');
      var ObjectProto = Object.prototype;

      module.exports = _getPrototypeOf4['default'] || function (O) {
        O = toObject(O);
        if (has(O, IE_PROTO)) return O[IE_PROTO];
        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
          return O.constructor.prototype;
        }return O instanceof Object ? ObjectProto : null;
      };

      /***/
    },
    /* 86 */
    /***/function (module, exports, __webpack_require__) {

      // getting tag from 19.1.3.6 Object.prototype.toString()
      var cof = __webpack_require__(50);
      var TAG = __webpack_require__(13)('toStringTag');
      // ES3 wrong here
      var ARG = cof(function () {
        return arguments;
      }()) == 'Arguments';

      // fallback for IE11 Script Access Denied error
      var tryGet = function tryGet(it, key) {
        try {
          return it[key];
        } catch (e) {/* empty */}
      };

      module.exports = function (it) {
        var O, T, B;
        return it === undefined ? 'Undefined' : it === null ? 'Null'
        // @@toStringTag case
        : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
        // builtinTag case
        : ARG ? cof(O)
        // ES3 arguments fallback
        : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
      };

      /***/
    },
    /* 87 */
    /***/function (module, exports, __webpack_require__) {

      // most Object methods by ES6 should accept primitives
      var $export = __webpack_require__(17);
      var core = __webpack_require__(7);
      var fails = __webpack_require__(28);
      module.exports = function (KEY, exec) {
        var fn = (core.Object || {})[KEY] || Object[KEY];
        var exp = {};
        exp[KEY] = exec(fn);
        $export($export.S + $export.F * fails(function () {
          fn(1);
        }), 'Object', exp);
      };

      /***/
    },
    /* 88 */
    /***/function (module, exports, __webpack_require__) {

      // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
      var $keys = __webpack_require__(84);
      var hiddenKeys = __webpack_require__(58).concat('length', 'prototype');

      exports.f = _getOwnPropertyNames2['default'] || function getOwnPropertyNames(O) {
        return $keys(O, hiddenKeys);
      };

      /***/
    },
    /* 89 */
    /***/function (module, exports, __webpack_require__) {

      var pIE = __webpack_require__(42);
      var createDesc = __webpack_require__(39);
      var toIObject = __webpack_require__(25);
      var toPrimitive = __webpack_require__(53);
      var has = __webpack_require__(22);
      var IE8_DOM_DEFINE = __webpack_require__(81);
      var gOPD = _getOwnPropertyDescriptor2['default'];

      exports.f = __webpack_require__(21) ? gOPD : function getOwnPropertyDescriptor(O, P) {
        O = toIObject(O);
        P = toPrimitive(P, true);
        if (IE8_DOM_DEFINE) try {
          return gOPD(O, P);
        } catch (e) {/* empty */}
        if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
      };

      /***/
    },
    /* 90 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = { "default": __webpack_require__(162), __esModule: true };

      /***/
    },
    /* 91 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       * @prototype Point2d
       * @param {number} [x]
       * @param {number} [y]
       */

      function Point2d(x, y) {
        this.x = x !== undefined ? x : 0;
        this.y = y !== undefined ? y : 0;
      }

      module.exports = Point2d;

      /***/
    },
    /* 92 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(2);

      /**
       * An html slider control with start/stop/prev/next buttons
       *
       * @constructor Slider
       * @param {Element} container  The element where the slider will be created
       * @param {Object} options   Available options:
       *                 {boolean} visible   If true (default) the
       *                           slider is visible.
       */
      function Slider(container, options) {
        if (container === undefined) {
          throw new Error('No container element defined');
        }
        this.container = container;
        this.visible = options && options.visible != undefined ? options.visible : true;

        if (this.visible) {
          this.frame = document.createElement('DIV');
          //this.frame.style.backgroundColor = '#E5E5E5';
          this.frame.style.width = '100%';
          this.frame.style.position = 'relative';
          this.container.appendChild(this.frame);

          this.frame.prev = document.createElement('INPUT');
          this.frame.prev.type = 'BUTTON';
          this.frame.prev.value = 'Prev';
          this.frame.appendChild(this.frame.prev);

          this.frame.play = document.createElement('INPUT');
          this.frame.play.type = 'BUTTON';
          this.frame.play.value = 'Play';
          this.frame.appendChild(this.frame.play);

          this.frame.next = document.createElement('INPUT');
          this.frame.next.type = 'BUTTON';
          this.frame.next.value = 'Next';
          this.frame.appendChild(this.frame.next);

          this.frame.bar = document.createElement('INPUT');
          this.frame.bar.type = 'BUTTON';
          this.frame.bar.style.position = 'absolute';
          this.frame.bar.style.border = '1px solid red';
          this.frame.bar.style.width = '100px';
          this.frame.bar.style.height = '6px';
          this.frame.bar.style.borderRadius = '2px';
          this.frame.bar.style.MozBorderRadius = '2px';
          this.frame.bar.style.border = '1px solid #7F7F7F';
          this.frame.bar.style.backgroundColor = '#E5E5E5';
          this.frame.appendChild(this.frame.bar);

          this.frame.slide = document.createElement('INPUT');
          this.frame.slide.type = 'BUTTON';
          this.frame.slide.style.margin = '0px';
          this.frame.slide.value = ' ';
          this.frame.slide.style.position = 'relative';
          this.frame.slide.style.left = '-100px';
          this.frame.appendChild(this.frame.slide);

          // create events
          var me = this;
          this.frame.slide.onmousedown = function (event) {
            me._onMouseDown(event);
          };
          this.frame.prev.onclick = function (event) {
            me.prev(event);
          };
          this.frame.play.onclick = function (event) {
            me.togglePlay(event);
          };
          this.frame.next.onclick = function (event) {
            me.next(event);
          };
        }

        this.onChangeCallback = undefined;

        this.values = [];
        this.index = undefined;

        this.playTimeout = undefined;
        this.playInterval = 1000; // milliseconds
        this.playLoop = true;
      }

      /**
       * Select the previous index
       */
      Slider.prototype.prev = function () {
        var index = this.getIndex();
        if (index > 0) {
          index--;
          this.setIndex(index);
        }
      };

      /**
       * Select the next index
       */
      Slider.prototype.next = function () {
        var index = this.getIndex();
        if (index < this.values.length - 1) {
          index++;
          this.setIndex(index);
        }
      };

      /**
       * Select the next index
       */
      Slider.prototype.playNext = function () {
        var start = new Date();

        var index = this.getIndex();
        if (index < this.values.length - 1) {
          index++;
          this.setIndex(index);
        } else if (this.playLoop) {
          // jump to the start
          index = 0;
          this.setIndex(index);
        }

        var end = new Date();
        var diff = end - start;

        // calculate how much time it to to set the index and to execute the callback
        // function.
        var interval = Math.max(this.playInterval - diff, 0);
        // document.title = diff // TODO: cleanup

        var me = this;
        this.playTimeout = setTimeout(function () {
          me.playNext();
        }, interval);
      };

      /**
       * Toggle start or stop playing
       */
      Slider.prototype.togglePlay = function () {
        if (this.playTimeout === undefined) {
          this.play();
        } else {
          this.stop();
        }
      };

      /**
       * Start playing
       */
      Slider.prototype.play = function () {
        // Test whether already playing
        if (this.playTimeout) return;

        this.playNext();

        if (this.frame) {
          this.frame.play.value = 'Stop';
        }
      };

      /**
       * Stop playing
       */
      Slider.prototype.stop = function () {
        clearInterval(this.playTimeout);
        this.playTimeout = undefined;

        if (this.frame) {
          this.frame.play.value = 'Play';
        }
      };

      /**
       * Set a callback function which will be triggered when the value of the
       * slider bar has changed.
       *
       * @param {function} callback
       */
      Slider.prototype.setOnChangeCallback = function (callback) {
        this.onChangeCallback = callback;
      };

      /**
       * Set the interval for playing the list
       * @param {number} interval   The interval in milliseconds
       */
      Slider.prototype.setPlayInterval = function (interval) {
        this.playInterval = interval;
      };

      /**
       * Retrieve the current play interval
       * @return {number} interval   The interval in milliseconds
       */
      Slider.prototype.getPlayInterval = function () {
        return this.playInterval;
      };

      /**
       * Set looping on or off
       * @param {boolean} doLoop  If true, the slider will jump to the start when
       *               the end is passed, and will jump to the end
       *               when the start is passed.
       *
       */
      Slider.prototype.setPlayLoop = function (doLoop) {
        this.playLoop = doLoop;
      };

      /**
       * Execute the onchange callback function
       */
      Slider.prototype.onChange = function () {
        if (this.onChangeCallback !== undefined) {
          this.onChangeCallback();
        }
      };

      /**
       * redraw the slider on the correct place
       */
      Slider.prototype.redraw = function () {
        if (this.frame) {
          // resize the bar
          this.frame.bar.style.top = this.frame.clientHeight / 2 - this.frame.bar.offsetHeight / 2 + 'px';
          this.frame.bar.style.width = this.frame.clientWidth - this.frame.prev.clientWidth - this.frame.play.clientWidth - this.frame.next.clientWidth - 30 + 'px';

          // position the slider button
          var left = this.indexToLeft(this.index);
          this.frame.slide.style.left = left + 'px';
        }
      };

      /**
       * Set the list with values for the slider
       * @param {Array} values   A javascript array with values (any type)
       */
      Slider.prototype.setValues = function (values) {
        this.values = values;

        if (this.values.length > 0) this.setIndex(0);else this.index = undefined;
      };

      /**
       * Select a value by its index
       * @param {number} index
       */
      Slider.prototype.setIndex = function (index) {
        if (index < this.values.length) {
          this.index = index;

          this.redraw();
          this.onChange();
        } else {
          throw new Error('Index out of range');
        }
      };

      /**
       * retrieve the index of the currently selected vaue
       * @return {number} index
       */
      Slider.prototype.getIndex = function () {
        return this.index;
      };

      /**
       * retrieve the currently selected value
       * @return {*} value
       */
      Slider.prototype.get = function () {
        return this.values[this.index];
      };

      Slider.prototype._onMouseDown = function (event) {
        // only react on left mouse button down
        var leftButtonDown = event.which ? event.which === 1 : event.button === 1;
        if (!leftButtonDown) return;

        this.startClientX = event.clientX;
        this.startSlideX = parseFloat(this.frame.slide.style.left);

        this.frame.style.cursor = 'move';

        // add event listeners to handle moving the contents
        // we store the function onmousemove and onmouseup in the graph, so we can
        // remove the eventlisteners lateron in the function mouseUp()
        var me = this;
        this.onmousemove = function (event) {
          me._onMouseMove(event);
        };
        this.onmouseup = function (event) {
          me._onMouseUp(event);
        };
        util.addEventListener(document, 'mousemove', this.onmousemove);
        util.addEventListener(document, 'mouseup', this.onmouseup);
        util.preventDefault(event);
      };

      Slider.prototype.leftToIndex = function (left) {
        var width = parseFloat(this.frame.bar.style.width) - this.frame.slide.clientWidth - 10;
        var x = left - 3;

        var index = Math.round(x / width * (this.values.length - 1));
        if (index < 0) index = 0;
        if (index > this.values.length - 1) index = this.values.length - 1;

        return index;
      };

      Slider.prototype.indexToLeft = function (index) {
        var width = parseFloat(this.frame.bar.style.width) - this.frame.slide.clientWidth - 10;

        var x = index / (this.values.length - 1) * width;
        var left = x + 3;

        return left;
      };

      Slider.prototype._onMouseMove = function (event) {
        var diff = event.clientX - this.startClientX;
        var x = this.startSlideX + diff;

        var index = this.leftToIndex(x);

        this.setIndex(index);

        util.preventDefault();
      };

      Slider.prototype._onMouseUp = function (event) {
        // eslint-disable-line no-unused-vars
        this.frame.style.cursor = 'auto';

        // remove event listeners
        util.removeEventListener(document, 'mousemove', this.onmousemove);
        util.removeEventListener(document, 'mouseup', this.onmouseup);

        util.preventDefault();
      };

      module.exports = Slider;

      /***/
    },
    /* 93 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       * @prototype StepNumber
       * The class StepNumber is an iterator for Numbers. You provide a start and end
       * value, and a best step size. StepNumber itself rounds to fixed values and
       * a finds the step that best fits the provided step.
       *
       * If prettyStep is true, the step size is chosen as close as possible to the
       * provided step, but being a round value like 1, 2, 5, 10, 20, 50, ....
       *
       * Example usage:
       *   var step = new StepNumber(0, 10, 2.5, true);
       *   step.start();
       *   while (!step.end()) {
       *   alert(step.getCurrent());
       *   step.next();
       *   }
       *
       * Version: 1.0
       *
       * @param {number} start     The start value
       * @param {number} end     The end value
       * @param {number} step    Optional. Step size. Must be a positive value.
       * @param {boolean} prettyStep Optional. If true, the step size is rounded
       *               To a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
       */

      function StepNumber(start, end, step, prettyStep) {
        // set default values
        this._start = 0;
        this._end = 0;
        this._step = 1;
        this.prettyStep = true;
        this.precision = 5;

        this._current = 0;
        this.setRange(start, end, step, prettyStep);
      }

      /**
       * Check for input values, to prevent disasters from happening
       *
       * Source: http://stackoverflow.com/a/1830844
       *
       * @param {string} n
       * @returns {boolean}
       */
      StepNumber.prototype.isNumeric = function (n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      };

      /**
       * Set a new range: start, end and step.
       *
       * @param {number} start     The start value
       * @param {number} end     The end value
       * @param {number} step    Optional. Step size. Must be a positive value.
       * @param {boolean} prettyStep Optional. If true, the step size is rounded
       *               To a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
       */
      StepNumber.prototype.setRange = function (start, end, step, prettyStep) {
        if (!this.isNumeric(start)) {
          throw new Error('Parameter \'start\' is not numeric; value: ' + start);
        }
        if (!this.isNumeric(end)) {
          throw new Error('Parameter \'end\' is not numeric; value: ' + start);
        }
        if (!this.isNumeric(step)) {
          throw new Error('Parameter \'step\' is not numeric; value: ' + start);
        }

        this._start = start ? start : 0;
        this._end = end ? end : 0;

        this.setStep(step, prettyStep);
      };

      /**
       * Set a new step size
       * @param {number} step    New step size. Must be a positive value
       * @param {boolean} prettyStep Optional. If true, the provided step is rounded
       *               to a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
       */
      StepNumber.prototype.setStep = function (step, prettyStep) {
        if (step === undefined || step <= 0) return;

        if (prettyStep !== undefined) this.prettyStep = prettyStep;

        if (this.prettyStep === true) this._step = StepNumber.calculatePrettyStep(step);else this._step = step;
      };

      /**
       * Calculate a nice step size, closest to the desired step size.
       * Returns a value in one of the ranges 1*10^n, 2*10^n, or 5*10^n, where n is an
       * integer Number. For example 1, 2, 5, 10, 20, 50, etc...
       * @param {number}  step  Desired step size
       * @return {number}     Nice step size
       */
      StepNumber.calculatePrettyStep = function (step) {
        var log10 = function log10(x) {
          return Math.log(x) / Math.LN10;
        };

        // try three steps (multiple of 1, 2, or 5
        var step1 = Math.pow(10, Math.round(log10(step))),
            step2 = 2 * Math.pow(10, Math.round(log10(step / 2))),
            step5 = 5 * Math.pow(10, Math.round(log10(step / 5)));

        // choose the best step (closest to minimum step)
        var prettyStep = step1;
        if (Math.abs(step2 - step) <= Math.abs(prettyStep - step)) prettyStep = step2;
        if (Math.abs(step5 - step) <= Math.abs(prettyStep - step)) prettyStep = step5;

        // for safety
        if (prettyStep <= 0) {
          prettyStep = 1;
        }

        return prettyStep;
      };

      /**
       * returns the current value of the step
       * @return {number} current value
       */
      StepNumber.prototype.getCurrent = function () {
        return parseFloat(this._current.toPrecision(this.precision));
      };

      /**
       * returns the current step size
       * @return {number} current step size
       */
      StepNumber.prototype.getStep = function () {
        return this._step;
      };

      /**
       * Set the current to its starting value.
       *
       * By default, this will be the largest value smaller than start, which
       * is a multiple of the step size.
       *
       * Parameters checkFirst is optional, default false.
       * If set to true, move the current value one step if smaller than start.
       *
       * @param {boolean} [checkFirst=false]
       */
      StepNumber.prototype.start = function (checkFirst) {
        if (checkFirst === undefined) {
          checkFirst = false;
        }

        this._current = this._start - this._start % this._step;

        if (checkFirst) {
          if (this.getCurrent() < this._start) {
            this.next();
          }
        }
      };

      /**
       * Do a step, add the step size to the current value
       */
      StepNumber.prototype.next = function () {
        this._current += this._step;
      };

      /**
       * Returns true whether the end is reached
       * @return {boolean}  True if the current value has passed the end value.
       */
      StepNumber.prototype.end = function () {
        return this._current > this._end;
      };

      module.exports = StepNumber;

      /***/
    },
    /* 94 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      ////////////////////////////////////////////////////////////////////////////////
      // This modules handles the options for Graph3d.
      //
      ////////////////////////////////////////////////////////////////////////////////
      var util = __webpack_require__(2);
      var Camera = __webpack_require__(95);
      var Point3d = __webpack_require__(34);

      // enumerate the available styles
      var STYLE = {
        BAR: 0,
        BARCOLOR: 1,
        BARSIZE: 2,
        DOT: 3,
        DOTLINE: 4,
        DOTCOLOR: 5,
        DOTSIZE: 6,
        GRID: 7,
        LINE: 8,
        SURFACE: 9
      };

      // The string representations of the styles
      var STYLENAME = {
        'dot': STYLE.DOT,
        'dot-line': STYLE.DOTLINE,
        'dot-color': STYLE.DOTCOLOR,
        'dot-size': STYLE.DOTSIZE,
        'line': STYLE.LINE,
        'grid': STYLE.GRID,
        'surface': STYLE.SURFACE,
        'bar': STYLE.BAR,
        'bar-color': STYLE.BARCOLOR,
        'bar-size': STYLE.BARSIZE
      };

      /**
       * Field names in the options hash which are of relevance to the user.
       *
       * Specifically, these are the fields which require no special handling,
       * and can be directly copied over.
       */
      var OPTIONKEYS = ['width', 'height', 'filterLabel', 'legendLabel', 'xLabel', 'yLabel', 'zLabel', 'xValueLabel', 'yValueLabel', 'zValueLabel', 'showXAxis', 'showYAxis', 'showZAxis', 'showGrid', 'showPerspective', 'showShadow', 'keepAspectRatio', 'verticalRatio', 'dotSizeRatio', 'dotSizeMinFraction', 'dotSizeMaxFraction', 'showAnimationControls', 'animationInterval', 'animationPreload', 'animationAutoStart', 'axisColor', 'gridColor', 'xCenter', 'yCenter'];

      /**
       * Field names in the options hash which are of relevance to the user.
       *
       * Same as OPTIONKEYS, but internally these fields are stored with 
       * prefix 'default' in the name.
       */
      var PREFIXEDOPTIONKEYS = ['xBarWidth', 'yBarWidth', 'valueMin', 'valueMax', 'xMin', 'xMax', 'xStep', 'yMin', 'yMax', 'yStep', 'zMin', 'zMax', 'zStep'];

      // Placeholder for DEFAULTS reference
      var DEFAULTS = undefined;

      /**
       * Check if given hash is empty.
       *
       * Source: http://stackoverflow.com/a/679937
       *
       * @param {object} obj
       * @returns {boolean}
       */
      function isEmpty(obj) {
        for (var prop in obj) {
          if (obj.hasOwnProperty(prop)) return false;
        }

        return true;
      }

      /**
       * Make first letter of parameter upper case.
       *
       * Source: http://stackoverflow.com/a/1026087
       *
       * @param {string} str
       * @returns {string}
       */
      function capitalize(str) {
        if (str === undefined || str === "" || typeof str != "string") {
          return str;
        }

        return str.charAt(0).toUpperCase() + str.slice(1);
      }

      /**
       * Add a prefix to a field name, taking style guide into account
       *
       * @param {string} prefix
       * @param {string} fieldName
       * @returns {string}
       */
      function prefixFieldName(prefix, fieldName) {
        if (prefix === undefined || prefix === "") {
          return fieldName;
        }

        return prefix + capitalize(fieldName);
      }

      /**
       * Forcibly copy fields from src to dst in a controlled manner.
       *
       * A given field in dst will always be overwitten. If this field
       * is undefined or not present in src, the field in dst will 
       * be explicitly set to undefined.
       * 
       * The intention here is to be able to reset all option fields.
       * 
       * Only the fields mentioned in array 'fields' will be handled.
       *
       * @param {object} src
       * @param {object} dst
       * @param {array<string>} fields array with names of fields to copy
       * @param {string} [prefix] prefix to use for the target fields.
       */
      function forceCopy(src, dst, fields, prefix) {
        var srcKey;
        var dstKey;

        for (var i = 0; i < fields.length; ++i) {
          srcKey = fields[i];
          dstKey = prefixFieldName(prefix, srcKey);

          dst[dstKey] = src[srcKey];
        }
      }

      /**
       * Copy fields from src to dst in a safe and controlled manner.
       *
       * Only the fields mentioned in array 'fields' will be copied over,
       * and only if these are actually defined.
       *
       * @param {object} src
       * @param {object} dst
       * @param {array<string>} fields array with names of fields to copy
       * @param {string} [prefix] prefix to use for the target fields.
       */
      function safeCopy(src, dst, fields, prefix) {
        var srcKey;
        var dstKey;

        for (var i = 0; i < fields.length; ++i) {
          srcKey = fields[i];
          if (src[srcKey] === undefined) continue;

          dstKey = prefixFieldName(prefix, srcKey);

          dst[dstKey] = src[srcKey];
        }
      }

      /**
       * Initialize dst with the values in src.
       *
       * src is the hash with the default values. 
       * A reference DEFAULTS to this hash is stored locally for 
       * further handling.
       *
       * For now, dst is assumed to be a Graph3d instance.
       * @param {object} src
       * @param {object} dst
       */
      function setDefaults(src, dst) {
        if (src === undefined || isEmpty(src)) {
          throw new Error('No DEFAULTS passed');
        }
        if (dst === undefined) {
          throw new Error('No dst passed');
        }

        // Remember defaults for future reference
        DEFAULTS = src;

        // Handle the defaults which can be simply copied over
        forceCopy(src, dst, OPTIONKEYS);
        forceCopy(src, dst, PREFIXEDOPTIONKEYS, 'default');

        // Handle the more complex ('special') fields
        setSpecialSettings(src, dst);

        // Following are internal fields, not part of the user settings
        dst.margin = 10; // px
        dst.showGrayBottom = false; // TODO: this does not work correctly
        dst.showTooltip = false;
        dst.onclick_callback = null;
        dst.eye = new Point3d(0, 0, -1); // TODO: set eye.z about 3/4 of the width of the window?
      }

      /**
       *
       * @param {object} options
       * @param {object} dst
       */
      function setOptions(options, dst) {
        if (options === undefined) {
          return;
        }
        if (dst === undefined) {
          throw new Error('No dst passed');
        }

        if (DEFAULTS === undefined || isEmpty(DEFAULTS)) {
          throw new Error('DEFAULTS not set for module Settings');
        }

        // Handle the parameters which can be simply copied over
        safeCopy(options, dst, OPTIONKEYS);
        safeCopy(options, dst, PREFIXEDOPTIONKEYS, 'default');

        // Handle the more complex ('special') fields
        setSpecialSettings(options, dst);
      }

      /**
       * Special handling for certain parameters
       *
       * 'Special' here means: setting requires more than a simple copy
       *
       * @param {object} src
       * @param {object} dst
       */
      function setSpecialSettings(src, dst) {
        if (src.backgroundColor !== undefined) {
          setBackgroundColor(src.backgroundColor, dst);
        }

        setDataColor(src.dataColor, dst);
        setStyle(src.style, dst);
        setShowLegend(src.showLegend, dst);
        setCameraPosition(src.cameraPosition, dst);

        // As special fields go, this is an easy one; just a translation of the name.
        // Can't use this.tooltip directly, because that field exists internally
        if (src.tooltip !== undefined) {
          dst.showTooltip = src.tooltip;
        }
        if (src.onclick != undefined) {
          dst.onclick_callback = src.onclick;
        }

        if (src.tooltipStyle !== undefined) {
          util.selectiveDeepExtend(['tooltipStyle'], dst, src);
        }
      }

      /**
       * Set the value of setting 'showLegend'
       *
       * This depends on the value of the style fields, so it must be called
       * after the style field has been initialized.
       *
       * @param {boolean} showLegend
       * @param {object} dst
       */
      function setShowLegend(showLegend, dst) {
        if (showLegend === undefined) {
          // If the default was auto, make a choice for this field
          var isAutoByDefault = DEFAULTS.showLegend === undefined;

          if (isAutoByDefault) {
            // these styles default to having legends
            var isLegendGraphStyle = dst.style === STYLE.DOTCOLOR || dst.style === STYLE.DOTSIZE;

            dst.showLegend = isLegendGraphStyle;
          } else {
            // Leave current value as is
          }
        } else {
          dst.showLegend = showLegend;
        }
      }

      /**
       * Retrieve the style index from given styleName
       * @param {string} styleName  Style name such as 'dot', 'grid', 'dot-line'
       * @return {number} styleNumber Enumeration value representing the style, or -1
       *                when not found
       */
      function getStyleNumberByName(styleName) {
        var number = STYLENAME[styleName];

        if (number === undefined) {
          return -1;
        }

        return number;
      }

      /**
       * Check if given number is a valid style number.
       *
       * @param {string | number} style
       * @return {boolean} true if valid, false otherwise
       */
      function checkStyleNumber(style) {
        var valid = false;

        for (var n in STYLE) {
          if (STYLE[n] === style) {
            valid = true;
            break;
          }
        }

        return valid;
      }

      /**
       *
       * @param {string | number} style
       * @param {Object} dst
       */
      function setStyle(style, dst) {
        if (style === undefined) {
          return; // Nothing to do
        }

        var styleNumber;

        if (typeof style === 'string') {
          styleNumber = getStyleNumberByName(style);

          if (styleNumber === -1) {
            throw new Error('Style \'' + style + '\' is invalid');
          }
        } else {
          // Do a pedantic check on style number value
          if (!checkStyleNumber(style)) {
            throw new Error('Style \'' + style + '\' is invalid');
          }

          styleNumber = style;
        }

        dst.style = styleNumber;
      }

      /**
       * Set the background styling for the graph
       * @param {string | {fill: string, stroke: string, strokeWidth: string}} backgroundColor
       * @param {Object} dst
       */
      function setBackgroundColor(backgroundColor, dst) {
        var fill = 'white';
        var stroke = 'gray';
        var strokeWidth = 1;

        if (typeof backgroundColor === 'string') {
          fill = backgroundColor;
          stroke = 'none';
          strokeWidth = 0;
        } else if ((typeof backgroundColor === 'undefined' ? 'undefined' : (0, _typeof3['default'])(backgroundColor)) === 'object') {
          if (backgroundColor.fill !== undefined) fill = backgroundColor.fill;
          if (backgroundColor.stroke !== undefined) stroke = backgroundColor.stroke;
          if (backgroundColor.strokeWidth !== undefined) strokeWidth = backgroundColor.strokeWidth;
        } else {
          throw new Error('Unsupported type of backgroundColor');
        }

        dst.frame.style.backgroundColor = fill;
        dst.frame.style.borderColor = stroke;
        dst.frame.style.borderWidth = strokeWidth + 'px';
        dst.frame.style.borderStyle = 'solid';
      }

      /**
       *
       * @param {string | Object} dataColor
       * @param {Object} dst
       */
      function setDataColor(dataColor, dst) {
        if (dataColor === undefined) {
          return; // Nothing to do
        }

        if (dst.dataColor === undefined) {
          dst.dataColor = {};
        }

        if (typeof dataColor === 'string') {
          dst.dataColor.fill = dataColor;
          dst.dataColor.stroke = dataColor;
        } else {
          if (dataColor.fill) {
            dst.dataColor.fill = dataColor.fill;
          }
          if (dataColor.stroke) {
            dst.dataColor.stroke = dataColor.stroke;
          }
          if (dataColor.strokeWidth !== undefined) {
            dst.dataColor.strokeWidth = dataColor.strokeWidth;
          }
        }
      }

      /**
       *
       * @param {Object} cameraPosition
       * @param {Object} dst
       */
      function setCameraPosition(cameraPosition, dst) {
        var camPos = cameraPosition;
        if (camPos === undefined) {
          return;
        }

        if (dst.camera === undefined) {
          dst.camera = new Camera();
        }

        dst.camera.setArmRotation(camPos.horizontal, camPos.vertical);
        dst.camera.setArmLength(camPos.distance);
      }

      module.exports.STYLE = STYLE;
      module.exports.setDefaults = setDefaults;
      module.exports.setOptions = setOptions;
      module.exports.setCameraPosition = setCameraPosition;

      /***/
    },
    /* 95 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _sign = __webpack_require__(165);

      var _sign2 = _interopRequireDefault(_sign);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var Point3d = __webpack_require__(34);

      /**
       * The camera is mounted on a (virtual) camera arm. The camera arm can rotate
       * The camera is always looking in the direction of the origin of the arm.
       * This way, the camera always rotates around one fixed point, the location
       * of the camera arm.
       *
       * Documentation:
       *   http://en.wikipedia.org/wiki/3D_projection
       * @class Camera
       */
      function Camera() {
        this.armLocation = new Point3d();
        this.armRotation = {};
        this.armRotation.horizontal = 0;
        this.armRotation.vertical = 0;
        this.armLength = 1.7;
        this.cameraOffset = new Point3d();
        this.offsetMultiplier = 0.6;

        this.cameraLocation = new Point3d();
        this.cameraRotation = new Point3d(0.5 * Math.PI, 0, 0);

        this.calculateCameraOrientation();
      }

      /**
       * Set offset camera in camera coordinates
       * @param {number} x offset by camera horisontal
       * @param {number} y offset by camera vertical
       */
      Camera.prototype.setOffset = function (x, y) {
        var abs = Math.abs,
            sign = _sign2['default'],
            mul = this.offsetMultiplier,
            border = this.armLength * mul;

        if (abs(x) > border) {
          x = sign(x) * border;
        }
        if (abs(y) > border) {
          y = sign(y) * border;
        }
        this.cameraOffset.x = x;
        this.cameraOffset.y = y;
        this.calculateCameraOrientation();
      };

      /**
       * Get camera offset by horizontal and vertical
       * @returns {number}
       */
      Camera.prototype.getOffset = function () {
        return this.cameraOffset;
      };

      /**
       * Set the location (origin) of the arm
       * @param {number} x  Normalized value of x
       * @param {number} y  Normalized value of y
       * @param {number} z  Normalized value of z
       */
      Camera.prototype.setArmLocation = function (x, y, z) {
        this.armLocation.x = x;
        this.armLocation.y = y;
        this.armLocation.z = z;

        this.calculateCameraOrientation();
      };

      /**
       * Set the rotation of the camera arm
       * @param {number} horizontal   The horizontal rotation, between 0 and 2*PI.
       *                Optional, can be left undefined.
       * @param {number} vertical   The vertical rotation, between 0 and 0.5*PI
       *                if vertical=0.5*PI, the graph is shown from the
       *                top. Optional, can be left undefined.
       */
      Camera.prototype.setArmRotation = function (horizontal, vertical) {
        if (horizontal !== undefined) {
          this.armRotation.horizontal = horizontal;
        }

        if (vertical !== undefined) {
          this.armRotation.vertical = vertical;
          if (this.armRotation.vertical < 0) this.armRotation.vertical = 0;
          if (this.armRotation.vertical > 0.5 * Math.PI) this.armRotation.vertical = 0.5 * Math.PI;
        }

        if (horizontal !== undefined || vertical !== undefined) {
          this.calculateCameraOrientation();
        }
      };

      /**
       * Retrieve the current arm rotation
       * @return {object}   An object with parameters horizontal and vertical
       */
      Camera.prototype.getArmRotation = function () {
        var rot = {};
        rot.horizontal = this.armRotation.horizontal;
        rot.vertical = this.armRotation.vertical;

        return rot;
      };

      /**
       * Set the (normalized) length of the camera arm.
       * @param {number} length A length between 0.71 and 5.0
       */
      Camera.prototype.setArmLength = function (length) {
        if (length === undefined) return;

        this.armLength = length;

        // Radius must be larger than the corner of the graph,
        // which has a distance of sqrt(0.5^2+0.5^2) = 0.71 from the center of the
        // graph
        if (this.armLength < 0.71) this.armLength = 0.71;
        if (this.armLength > 5.0) this.armLength = 5.0;

        this.setOffset(this.cameraOffset.x, this.cameraOffset.y);
        this.calculateCameraOrientation();
      };

      /**
       * Retrieve the arm length
       * @return {number} length
       */
      Camera.prototype.getArmLength = function () {
        return this.armLength;
      };

      /**
       * Retrieve the camera location
       * @return {Point3d} cameraLocation
       */
      Camera.prototype.getCameraLocation = function () {
        return this.cameraLocation;
      };

      /**
       * Retrieve the camera rotation
       * @return {Point3d} cameraRotation
       */
      Camera.prototype.getCameraRotation = function () {
        return this.cameraRotation;
      };

      /**
       * Calculate the location and rotation of the camera based on the
       * position and orientation of the camera arm
       */
      Camera.prototype.calculateCameraOrientation = function () {
        // calculate location of the camera
        this.cameraLocation.x = this.armLocation.x - this.armLength * Math.sin(this.armRotation.horizontal) * Math.cos(this.armRotation.vertical);
        this.cameraLocation.y = this.armLocation.y - this.armLength * Math.cos(this.armRotation.horizontal) * Math.cos(this.armRotation.vertical);
        this.cameraLocation.z = this.armLocation.z + this.armLength * Math.sin(this.armRotation.vertical);

        // calculate rotation of the camera
        this.cameraRotation.x = Math.PI / 2 - this.armRotation.vertical;
        this.cameraRotation.y = 0;
        this.cameraRotation.z = -this.armRotation.horizontal;

        var xa = this.cameraRotation.x;
        var za = this.cameraRotation.z;
        var dx = this.cameraOffset.x;
        var dy = this.cameraOffset.y;
        var sin = Math.sin,
            cos = Math.cos;

        this.cameraLocation.x = this.cameraLocation.x + dx * cos(za) + dy * -sin(za) * cos(xa);
        this.cameraLocation.y = this.cameraLocation.y + dx * sin(za) + dy * cos(za) * cos(xa);
        this.cameraLocation.z = this.cameraLocation.z + dy * sin(xa);
      };

      module.exports = Camera;

      /***/
    },
    /* 96 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var DataView = __webpack_require__(12);

      /**
       * @class Filter
       *
       * @param {DataGroup} dataGroup the data group 
       * @param {number}  column             The index of the column to be filtered
       * @param {Graph3d} graph              The graph
       */
      function Filter(dataGroup, column, graph) {
        this.dataGroup = dataGroup;
        this.column = column;
        this.graph = graph; // the parent graph

        this.index = undefined;
        this.value = undefined;

        // read all distinct values and select the first one
        this.values = dataGroup.getDistinctValues(this.column);

        if (this.values.length > 0) {
          this.selectValue(0);
        }

        // create an array with the filtered datapoints. this will be loaded afterwards
        this.dataPoints = [];

        this.loaded = false;
        this.onLoadCallback = undefined;

        if (graph.animationPreload) {
          this.loaded = false;
          this.loadInBackground();
        } else {
          this.loaded = true;
        }
      }

      /**
       * Return the label
       * @return {string} label
       */
      Filter.prototype.isLoaded = function () {
        return this.loaded;
      };

      /**
       * Return the loaded progress
       * @return {number} percentage between 0 and 100
       */
      Filter.prototype.getLoadedProgress = function () {
        var len = this.values.length;

        var i = 0;
        while (this.dataPoints[i]) {
          i++;
        }

        return Math.round(i / len * 100);
      };

      /**
       * Return the label
       * @return {string} label
       */
      Filter.prototype.getLabel = function () {
        return this.graph.filterLabel;
      };

      /**
       * Return the columnIndex of the filter
       * @return {number} columnIndex
       */
      Filter.prototype.getColumn = function () {
        return this.column;
      };

      /**
       * Return the currently selected value. Returns undefined if there is no selection
       * @return {*} value
       */
      Filter.prototype.getSelectedValue = function () {
        if (this.index === undefined) return undefined;

        return this.values[this.index];
      };

      /**
       * Retrieve all values of the filter
       * @return {Array} values
       */
      Filter.prototype.getValues = function () {
        return this.values;
      };

      /**
       * Retrieve one value of the filter
       * @param {number}  index
       * @return {*} value
       */
      Filter.prototype.getValue = function (index) {
        if (index >= this.values.length) throw new Error('Index out of range');

        return this.values[index];
      };

      /**
       * Retrieve the (filtered) dataPoints for the currently selected filter index
       * @param {number} [index] (optional)
       * @return {Array} dataPoints
       */
      Filter.prototype._getDataPoints = function (index) {
        if (index === undefined) index = this.index;

        if (index === undefined) return [];

        var dataPoints;
        if (this.dataPoints[index]) {
          dataPoints = this.dataPoints[index];
        } else {
          var f = {};
          f.column = this.column;
          f.value = this.values[index];

          var dataView = new DataView(this.dataGroup.getDataSet(), { filter: function filter(item) {
              return item[f.column] == f.value;
            } }).get();
          dataPoints = this.dataGroup._getDataPoints(dataView);

          this.dataPoints[index] = dataPoints;
        }

        return dataPoints;
      };

      /**
       * Set a callback function when the filter is fully loaded.
       *
       * @param {function} callback
       */
      Filter.prototype.setOnLoadCallback = function (callback) {
        this.onLoadCallback = callback;
      };

      /**
       * Add a value to the list with available values for this filter
       * No double entries will be created.
       * @param {number} index
       */
      Filter.prototype.selectValue = function (index) {
        if (index >= this.values.length) throw new Error('Index out of range');

        this.index = index;
        this.value = this.values[index];
      };

      /**
       * Load all filtered rows in the background one by one
       * Start this method without providing an index!
       *
       * @param {number} [index=0]
       */
      Filter.prototype.loadInBackground = function (index) {
        if (index === undefined) index = 0;

        var frame = this.graph.frame;

        if (index < this.values.length) {
          // create a progress box
          if (frame.progress === undefined) {
            frame.progress = document.createElement('DIV');
            frame.progress.style.position = 'absolute';
            frame.progress.style.color = 'gray';
            frame.appendChild(frame.progress);
          }
          var progress = this.getLoadedProgress();
          frame.progress.innerHTML = 'Loading animation... ' + progress + '%';
          // TODO: this is no nice solution...
          frame.progress.style.bottom = 60 + 'px'; // TODO: use height of slider
          frame.progress.style.left = 10 + 'px';

          var me = this;
          setTimeout(function () {
            me.loadInBackground(index + 1);
          }, 10);
          this.loaded = false;
        } else {
          this.loaded = true;

          // remove the progress box
          if (frame.progress !== undefined) {
            frame.removeChild(frame.progress);
            frame.progress = undefined;
          }

          if (this.onLoadCallback) this.onLoadCallback();
        }
      };

      module.exports = Filter;

      /***/
    },
    /* 97 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var keycharm = __webpack_require__(35);
      var Emitter = __webpack_require__(44);
      var Hammer = __webpack_require__(10);
      var util = __webpack_require__(2);

      /**
       * Turn an element into an clickToUse element.
       * When not active, the element has a transparent overlay. When the overlay is
       * clicked, the mode is changed to active.
       * When active, the element is displayed with a blue border around it, and
       * the interactive contents of the element can be used. When clicked outside
       * the element, the elements mode is changed to inactive.
       * @param {Element} container
       * @constructor Activator
       */
      function Activator(container) {
        this.active = false;

        this.dom = {
          container: container
        };

        this.dom.overlay = document.createElement('div');
        this.dom.overlay.className = 'vis-overlay';

        this.dom.container.appendChild(this.dom.overlay);

        this.hammer = Hammer(this.dom.overlay);
        this.hammer.on('tap', this._onTapOverlay.bind(this));

        // block all touch events (except tap)
        var me = this;
        var events = ['tap', 'doubletap', 'press', 'pinch', 'pan', 'panstart', 'panmove', 'panend'];
        events.forEach(function (event) {
          me.hammer.on(event, function (event) {
            event.stopPropagation();
          });
        });

        // attach a click event to the window, in order to deactivate when clicking outside the timeline
        if (document && document.body) {
          this.onClick = function (event) {
            if (!_hasParent(event.target, container)) {
              me.deactivate();
            }
          };
          document.body.addEventListener('click', this.onClick);
        }

        if (this.keycharm !== undefined) {
          this.keycharm.destroy();
        }
        this.keycharm = keycharm();

        // keycharm listener only bounded when active)
        this.escListener = this.deactivate.bind(this);
      }

      // turn into an event emitter
      Emitter(Activator.prototype);

      // The currently active activator
      Activator.current = null;

      /**
       * Destroy the activator. Cleans up all created DOM and event listeners
       */
      Activator.prototype.destroy = function () {
        this.deactivate();

        // remove dom
        this.dom.overlay.parentNode.removeChild(this.dom.overlay);

        // remove global event listener
        if (this.onClick) {
          document.body.removeEventListener('click', this.onClick);
        }

        // cleanup hammer instances
        this.hammer.destroy();
        this.hammer = null;
        // FIXME: cleaning up hammer instances doesn't work (Timeline not removed from memory)
      };

      /**
       * Activate the element
       * Overlay is hidden, element is decorated with a blue shadow border
       */
      Activator.prototype.activate = function () {
        // we allow only one active activator at a time
        if (Activator.current) {
          Activator.current.deactivate();
        }
        Activator.current = this;

        this.active = true;
        this.dom.overlay.style.display = 'none';
        util.addClassName(this.dom.container, 'vis-active');

        this.emit('change');
        this.emit('activate');

        // ugly hack: bind ESC after emitting the events, as the Network rebinds all
        // keyboard events on a 'change' event
        this.keycharm.bind('esc', this.escListener);
      };

      /**
       * Deactivate the element
       * Overlay is displayed on top of the element
       */
      Activator.prototype.deactivate = function () {
        this.active = false;
        this.dom.overlay.style.display = '';
        util.removeClassName(this.dom.container, 'vis-active');
        this.keycharm.unbind('esc', this.escListener);

        this.emit('change');
        this.emit('deactivate');
      };

      /**
       * Handle a tap event: activate the container
       * @param {Event}  event   The event
       * @private
       */
      Activator.prototype._onTapOverlay = function (event) {
        // activate the container
        this.activate();
        event.stopPropagation();
      };

      /**
       * Test whether the element has the requested parent element somewhere in
       * its chain of parent nodes.
       * @param {HTMLElement} element
       * @param {HTMLElement} parent
       * @returns {boolean} Returns true when the parent is found somewhere in the
       *                    chain of parent nodes.
       * @private
       */
      function _hasParent(element, parent) {
        while (element) {
          if (element === parent) {
            return true;
          }
          element = element.parentNode;
        }
        return false;
      }

      module.exports = Activator;

      /***/
    },
    /* 98 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // English

      exports['en'] = {
        current: 'current',
        time: 'time'
      };
      exports['en_EN'] = exports['en'];
      exports['en_US'] = exports['en'];

      // Italiano
      exports['it'] = {
        current: 'attuale',
        time: 'tempo'
      };
      exports['it_IT'] = exports['it'];
      exports['it_CH'] = exports['it'];

      // Dutch
      exports['nl'] = {
        current: 'huidige',
        time: 'tijd'
      };
      exports['nl_NL'] = exports['nl'];
      exports['nl_BE'] = exports['nl'];

      // German
      exports['de'] = {
        current: 'Aktuelle',
        time: 'Zeit'
      };
      exports['de_DE'] = exports['de'];

      // French
      exports['fr'] = {
        current: 'actuel',
        time: 'heure'
      };
      exports['fr_FR'] = exports['fr'];
      exports['fr_CA'] = exports['fr'];
      exports['fr_BE'] = exports['fr'];

      // Espanol
      exports['es'] = {
        current: 'corriente',
        time: 'hora'
      };
      exports['es_ES'] = exports['es'];

      /***/
    },
    /* 99 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _create = __webpack_require__(29);

      var _create2 = _interopRequireDefault(_create);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var Hammer = __webpack_require__(10);
      var util = __webpack_require__(2);
      var DataSet = __webpack_require__(11);
      var DataView = __webpack_require__(12);
      var TimeStep = __webpack_require__(66);
      var Component = __webpack_require__(16);
      var Group = __webpack_require__(68);
      var BackgroundGroup = __webpack_require__(69);
      var BoxItem = __webpack_require__(101);
      var PointItem = __webpack_require__(102);
      var RangeItem = __webpack_require__(70);
      var BackgroundItem = __webpack_require__(103);
      var Popup = __webpack_require__(104)['default'];

      var UNGROUPED = '__ungrouped__'; // reserved group id for ungrouped items
      var BACKGROUND = '__background__'; // reserved group id for background items without group

      /**
       * An ItemSet holds a set of items and ranges which can be displayed in a
       * range. The width is determined by the parent of the ItemSet, and the height
       * is determined by the size of the items.
       * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} body
       * @param {Object} [options]      See ItemSet.setOptions for the available options.
       * @constructor ItemSet
       * @extends Component
       */
      function ItemSet(body, options) {
        this.body = body;
        this.defaultOptions = {
          type: null, // 'box', 'point', 'range', 'background'
          orientation: {
            item: 'bottom' // item orientation: 'top' or 'bottom'
          },
          align: 'auto', // alignment of box items
          stack: true,
          stackSubgroups: true,
          groupOrderSwap: function groupOrderSwap(fromGroup, toGroup, groups) {
            // eslint-disable-line no-unused-vars
            var targetOrder = toGroup.order;
            toGroup.order = fromGroup.order;
            fromGroup.order = targetOrder;
          },
          groupOrder: 'order',

          selectable: true,
          multiselect: false,
          itemsAlwaysDraggable: {
            item: false,
            range: false
          },

          editable: {
            updateTime: false,
            updateGroup: false,
            add: false,
            remove: false,
            overrideItems: false
          },

          groupEditable: {
            order: false,
            add: false,
            remove: false
          },

          snap: TimeStep.snap,

          // Only called when `objectData.target === 'item'.
          onDropObjectOnItem: function onDropObjectOnItem(objectData, item, callback) {
            callback(item);
          },
          onAdd: function onAdd(item, callback) {
            callback(item);
          },
          onUpdate: function onUpdate(item, callback) {
            callback(item);
          },
          onMove: function onMove(item, callback) {
            callback(item);
          },
          onRemove: function onRemove(item, callback) {
            callback(item);
          },
          onMoving: function onMoving(item, callback) {
            callback(item);
          },
          onAddGroup: function onAddGroup(item, callback) {
            callback(item);
          },
          onMoveGroup: function onMoveGroup(item, callback) {
            callback(item);
          },
          onRemoveGroup: function onRemoveGroup(item, callback) {
            callback(item);
          },

          margin: {
            item: {
              horizontal: 10,
              vertical: 10
            },
            axis: 20
          },

          showTooltips: true,

          tooltip: {
            followMouse: false,
            overflowMethod: 'flip'
          },

          tooltipOnItemUpdateTime: false
        };

        // options is shared by this ItemSet and all its items
        this.options = util.extend({}, this.defaultOptions);
        this.options.rtl = options.rtl;

        // options for getting items from the DataSet with the correct type
        this.itemOptions = {
          type: { start: 'Date', end: 'Date' }
        };

        this.conversion = {
          toScreen: body.util.toScreen,
          toTime: body.util.toTime
        };
        this.dom = {};
        this.props = {};
        this.hammer = null;

        var me = this;
        this.itemsData = null; // DataSet
        this.groupsData = null; // DataSet

        // listeners for the DataSet of the items
        this.itemListeners = {
          'add': function add(event, params, senderId) {
            // eslint-disable-line no-unused-vars
            me._onAdd(params.items);
          },
          'update': function update(event, params, senderId) {
            // eslint-disable-line no-unused-vars
            me._onUpdate(params.items);
          },
          'remove': function remove(event, params, senderId) {
            // eslint-disable-line no-unused-vars
            me._onRemove(params.items);
          }
        };

        // listeners for the DataSet of the groups
        this.groupListeners = {
          'add': function add(event, params, senderId) {
            // eslint-disable-line no-unused-vars
            me._onAddGroups(params.items);

            if (me.groupsData && me.groupsData.length > 0) {
              var groupsData = me.groupsData.getDataSet();
              groupsData.get().forEach(function (groupData) {
                if (groupData.nestedGroups) {
                  if (groupData.showNested != false) {
                    groupData.showNested = true;
                  }
                  var updatedGroups = [];
                  groupData.nestedGroups.forEach(function (nestedGroupId) {
                    var updatedNestedGroup = groupsData.get(nestedGroupId);
                    if (!updatedNestedGroup) {
                      return;
                    }
                    updatedNestedGroup.nestedInGroup = groupData.id;
                    if (groupData.showNested == false) {
                      updatedNestedGroup.visible = false;
                    }
                    updatedGroups = updatedGroups.concat(updatedNestedGroup);
                  });
                  groupsData.update(updatedGroups, senderId);
                }
              });
            }
          },
          'update': function update(event, params, senderId) {
            // eslint-disable-line no-unused-vars
            me._onUpdateGroups(params.items);
          },
          'remove': function remove(event, params, senderId) {
            // eslint-disable-line no-unused-vars
            me._onRemoveGroups(params.items);
          }
        };

        this.items = {}; // object with an Item for every data item
        this.groups = {}; // Group object for every group
        this.groupIds = [];

        this.selection = []; // list with the ids of all selected nodes

        this.popup = null;

        this.touchParams = {}; // stores properties while dragging
        this.groupTouchParams = {};
        // create the HTML DOM

        this._create();

        this.setOptions(options);
      }

      ItemSet.prototype = new Component();

      // available item types will be registered here
      ItemSet.types = {
        background: BackgroundItem,
        box: BoxItem,
        range: RangeItem,
        point: PointItem
      };

      /**
       * Create the HTML DOM for the ItemSet
       */
      ItemSet.prototype._create = function () {
        var frame = document.createElement('div');
        frame.className = 'vis-itemset';
        frame['timeline-itemset'] = this;
        this.dom.frame = frame;

        // create background panel
        var background = document.createElement('div');
        background.className = 'vis-background';
        frame.appendChild(background);
        this.dom.background = background;

        // create foreground panel
        var foreground = document.createElement('div');
        foreground.className = 'vis-foreground';
        frame.appendChild(foreground);
        this.dom.foreground = foreground;

        // create axis panel
        var axis = document.createElement('div');
        axis.className = 'vis-axis';
        this.dom.axis = axis;

        // create labelset
        var labelSet = document.createElement('div');
        labelSet.className = 'vis-labelset';
        this.dom.labelSet = labelSet;

        // create ungrouped Group
        this._updateUngrouped();

        // create background Group
        var backgroundGroup = new BackgroundGroup(BACKGROUND, null, this);
        backgroundGroup.show();
        this.groups[BACKGROUND] = backgroundGroup;

        // attach event listeners
        // Note: we bind to the centerContainer for the case where the height
        //       of the center container is larger than of the ItemSet, so we
        //       can click in the empty area to create a new item or deselect an item.
        this.hammer = new Hammer(this.body.dom.centerContainer);

        // drag items when selected
        this.hammer.on('hammer.input', function (event) {
          if (event.isFirst) {
            this._onTouch(event);
          }
        }.bind(this));
        this.hammer.on('panstart', this._onDragStart.bind(this));
        this.hammer.on('panmove', this._onDrag.bind(this));
        this.hammer.on('panend', this._onDragEnd.bind(this));
        this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });

        // single select (or unselect) when tapping an item
        this.hammer.on('tap', this._onSelectItem.bind(this));

        // multi select when holding mouse/touch, or on ctrl+click
        this.hammer.on('press', this._onMultiSelectItem.bind(this));

        // add item on doubletap
        this.hammer.on('doubletap', this._onAddItem.bind(this));

        if (this.options.rtl) {
          this.groupHammer = new Hammer(this.body.dom.rightContainer);
        } else {
          this.groupHammer = new Hammer(this.body.dom.leftContainer);
        }

        this.groupHammer.on('tap', this._onGroupClick.bind(this));
        this.groupHammer.on('panstart', this._onGroupDragStart.bind(this));
        this.groupHammer.on('panmove', this._onGroupDrag.bind(this));
        this.groupHammer.on('panend', this._onGroupDragEnd.bind(this));
        this.groupHammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_VERTICAL });

        this.body.dom.centerContainer.addEventListener('mouseover', this._onMouseOver.bind(this));
        this.body.dom.centerContainer.addEventListener('mouseout', this._onMouseOut.bind(this));
        this.body.dom.centerContainer.addEventListener('mousemove', this._onMouseMove.bind(this));
        // right-click on timeline 
        this.body.dom.centerContainer.addEventListener('contextmenu', this._onDragEnd.bind(this));

        this.body.dom.centerContainer.addEventListener('mousewheel', this._onMouseWheel.bind(this));

        // attach to the DOM
        this.show();
      };

      /**
       * Set options for the ItemSet. Existing options will be extended/overwritten.
       * @param {Object} [options] The following options are available:
       *                           {string} type
       *                              Default type for the items. Choose from 'box'
       *                              (default), 'point', 'range', or 'background'.
       *                              The default style can be overwritten by
       *                              individual items.
       *                           {string} align
       *                              Alignment for the items, only applicable for
       *                              BoxItem. Choose 'center' (default), 'left', or
       *                              'right'.
       *                           {string} orientation.item
       *                              Orientation of the item set. Choose 'top' or
       *                              'bottom' (default).
       *                           {Function} groupOrder
       *                              A sorting function for ordering groups
       *                           {boolean} stack
       *                              If true (default), items will be stacked on
       *                              top of each other.
       *                           {number} margin.axis
       *                              Margin between the axis and the items in pixels.
       *                              Default is 20.
       *                           {number} margin.item.horizontal
       *                              Horizontal margin between items in pixels.
       *                              Default is 10.
       *                           {number} margin.item.vertical
       *                              Vertical Margin between items in pixels.
       *                              Default is 10.
       *                           {number} margin.item
       *                              Margin between items in pixels in both horizontal
       *                              and vertical direction. Default is 10.
       *                           {number} margin
       *                              Set margin for both axis and items in pixels.
       *                           {boolean} selectable
       *                              If true (default), items can be selected.
       *                           {boolean} multiselect
       *                              If true, multiple items can be selected.
       *                              False by default.
       *                           {boolean} editable
       *                              Set all editable options to true or false
       *                           {boolean} editable.updateTime
       *                              Allow dragging an item to an other moment in time
       *                           {boolean} editable.updateGroup
       *                              Allow dragging an item to an other group
       *                           {boolean} editable.add
       *                              Allow creating new items on double tap
       *                           {boolean} editable.remove
       *                              Allow removing items by clicking the delete button
       *                              top right of a selected item.
       *                           {Function(item: Item, callback: Function)} onAdd
       *                              Callback function triggered when an item is about to be added:
       *                              when the user double taps an empty space in the Timeline.
       *                           {Function(item: Item, callback: Function)} onUpdate
       *                              Callback function fired when an item is about to be updated.
       *                              This function typically has to show a dialog where the user
       *                              change the item. If not implemented, nothing happens.
       *                           {Function(item: Item, callback: Function)} onMove
       *                              Fired when an item has been moved. If not implemented,
       *                              the move action will be accepted.
       *                           {Function(item: Item, callback: Function)} onRemove
       *                              Fired when an item is about to be deleted.
       *                              If not implemented, the item will be always removed.
       */
      ItemSet.prototype.setOptions = function (options) {
        if (options) {
          // copy all options that we know
          var fields = ['type', 'rtl', 'align', 'order', 'stack', 'stackSubgroups', 'selectable', 'multiselect', 'multiselectPerGroup', 'groupOrder', 'dataAttributes', 'template', 'groupTemplate', 'visibleFrameTemplate', 'hide', 'snap', 'groupOrderSwap', 'showTooltips', 'tooltip', 'tooltipOnItemUpdateTime'];
          util.selectiveExtend(fields, this.options, options);

          if ('itemsAlwaysDraggable' in options) {
            if (typeof options.itemsAlwaysDraggable === 'boolean') {
              this.options.itemsAlwaysDraggable.item = options.itemsAlwaysDraggable;
              this.options.itemsAlwaysDraggable.range = false;
            } else if ((0, _typeof3['default'])(options.itemsAlwaysDraggable) === 'object') {
              util.selectiveExtend(['item', 'range'], this.options.itemsAlwaysDraggable, options.itemsAlwaysDraggable);
              // only allow range always draggable when item is always draggable as well
              if (!this.options.itemsAlwaysDraggable.item) {
                this.options.itemsAlwaysDraggable.range = false;
              }
            }
          }

          if ('orientation' in options) {
            if (typeof options.orientation === 'string') {
              this.options.orientation.item = options.orientation === 'top' ? 'top' : 'bottom';
            } else if ((0, _typeof3['default'])(options.orientation) === 'object' && 'item' in options.orientation) {
              this.options.orientation.item = options.orientation.item;
            }
          }

          if ('margin' in options) {
            if (typeof options.margin === 'number') {
              this.options.margin.axis = options.margin;
              this.options.margin.item.horizontal = options.margin;
              this.options.margin.item.vertical = options.margin;
            } else if ((0, _typeof3['default'])(options.margin) === 'object') {
              util.selectiveExtend(['axis'], this.options.margin, options.margin);
              if ('item' in options.margin) {
                if (typeof options.margin.item === 'number') {
                  this.options.margin.item.horizontal = options.margin.item;
                  this.options.margin.item.vertical = options.margin.item;
                } else if ((0, _typeof3['default'])(options.margin.item) === 'object') {
                  util.selectiveExtend(['horizontal', 'vertical'], this.options.margin.item, options.margin.item);
                }
              }
            }
          }

          if ('editable' in options) {
            if (typeof options.editable === 'boolean') {
              this.options.editable.updateTime = options.editable;
              this.options.editable.updateGroup = options.editable;
              this.options.editable.add = options.editable;
              this.options.editable.remove = options.editable;
              this.options.editable.overrideItems = false;
            } else if ((0, _typeof3['default'])(options.editable) === 'object') {
              util.selectiveExtend(['updateTime', 'updateGroup', 'add', 'remove', 'overrideItems'], this.options.editable, options.editable);
            }
          }

          if ('groupEditable' in options) {
            if (typeof options.groupEditable === 'boolean') {
              this.options.groupEditable.order = options.groupEditable;
              this.options.groupEditable.add = options.groupEditable;
              this.options.groupEditable.remove = options.groupEditable;
            } else if ((0, _typeof3['default'])(options.groupEditable) === 'object') {
              util.selectiveExtend(['order', 'add', 'remove'], this.options.groupEditable, options.groupEditable);
            }
          }

          // callback functions
          var addCallback = function (name) {
            var fn = options[name];
            if (fn) {
              if (!(fn instanceof Function)) {
                throw new Error('option ' + name + ' must be a function ' + name + '(item, callback)');
              }
              this.options[name] = fn;
            }
          }.bind(this);
          ['onDropObjectOnItem', 'onAdd', 'onUpdate', 'onRemove', 'onMove', 'onMoving', 'onAddGroup', 'onMoveGroup', 'onRemoveGroup'].forEach(addCallback);

          // force the itemSet to refresh: options like orientation and margins may be changed
          this.markDirty();
        }
      };

      /**
       * Mark the ItemSet dirty so it will refresh everything with next redraw.
       * Optionally, all items can be marked as dirty and be refreshed.
       * @param {{refreshItems: boolean}} [options]
       */
      ItemSet.prototype.markDirty = function (options) {
        this.groupIds = [];

        if (options && options.refreshItems) {
          util.forEach(this.items, function (item) {
            item.dirty = true;
            if (item.displayed) item.redraw();
          });
        }
      };

      /**
       * Destroy the ItemSet
       */
      ItemSet.prototype.destroy = function () {
        this.hide();
        this.setItems(null);
        this.setGroups(null);

        this.hammer = null;

        this.body = null;
        this.conversion = null;
      };

      /**
       * Hide the component from the DOM
       */
      ItemSet.prototype.hide = function () {
        // remove the frame containing the items
        if (this.dom.frame.parentNode) {
          this.dom.frame.parentNode.removeChild(this.dom.frame);
        }

        // remove the axis with dots
        if (this.dom.axis.parentNode) {
          this.dom.axis.parentNode.removeChild(this.dom.axis);
        }

        // remove the labelset containing all group labels
        if (this.dom.labelSet.parentNode) {
          this.dom.labelSet.parentNode.removeChild(this.dom.labelSet);
        }
      };

      /**
       * Show the component in the DOM (when not already visible).
       */
      ItemSet.prototype.show = function () {
        // show frame containing the items
        if (!this.dom.frame.parentNode) {
          this.body.dom.center.appendChild(this.dom.frame);
        }

        // show axis with dots
        if (!this.dom.axis.parentNode) {
          this.body.dom.backgroundVertical.appendChild(this.dom.axis);
        }

        // show labelset containing labels
        if (!this.dom.labelSet.parentNode) {
          if (this.options.rtl) {
            this.body.dom.right.appendChild(this.dom.labelSet);
          } else {
            this.body.dom.left.appendChild(this.dom.labelSet);
          }
        }
      };

      /**
       * Set selected items by their id. Replaces the current selection
       * Unknown id's are silently ignored.
       * @param {string[] | string} [ids] An array with zero or more id's of the items to be
       *                                  selected, or a single item id. If ids is undefined
       *                                  or an empty array, all items will be unselected.
       */
      ItemSet.prototype.setSelection = function (ids) {
        var i, ii, id, item;

        if (ids == undefined) ids = [];
        if (!Array.isArray(ids)) ids = [ids];

        // unselect currently selected items
        for (i = 0, ii = this.selection.length; i < ii; i++) {
          id = this.selection[i];
          item = this.items[id];
          if (item) item.unselect();
        }

        // select items
        this.selection = [];
        for (i = 0, ii = ids.length; i < ii; i++) {
          id = ids[i];
          item = this.items[id];
          if (item) {
            this.selection.push(id);
            item.select();
          }
        }
      };

      /**
       * Get the selected items by their id
       * @return {Array} ids  The ids of the selected items
       */
      ItemSet.prototype.getSelection = function () {
        return this.selection.concat([]);
      };

      /**
       * Get the id's of the currently visible items.
       * @returns {Array} The ids of the visible items
       */
      ItemSet.prototype.getVisibleItems = function () {
        var range = this.body.range.getRange();
        var right, left;

        if (this.options.rtl) {
          right = this.body.util.toScreen(range.start);
          left = this.body.util.toScreen(range.end);
        } else {
          left = this.body.util.toScreen(range.start);
          right = this.body.util.toScreen(range.end);
        }

        var ids = [];
        for (var groupId in this.groups) {
          if (this.groups.hasOwnProperty(groupId)) {
            var group = this.groups[groupId];
            var rawVisibleItems = group.isVisible ? group.visibleItems : [];

            // filter the "raw" set with visibleItems into a set which is really
            // visible by pixels
            for (var i = 0; i < rawVisibleItems.length; i++) {
              var item = rawVisibleItems[i];
              // TODO: also check whether visible vertically
              if (this.options.rtl) {
                if (item.right < left && item.right + item.width > right) {
                  ids.push(item.id);
                }
              } else {
                if (item.left < right && item.left + item.width > left) {
                  ids.push(item.id);
                }
              }
            }
          }
        }

        return ids;
      };

      /**
       * Deselect a selected item
       * @param {string | number} id
       * @private
       */
      ItemSet.prototype._deselect = function (id) {
        var selection = this.selection;
        for (var i = 0, ii = selection.length; i < ii; i++) {
          if (selection[i] == id) {
            // non-strict comparison!
            selection.splice(i, 1);
            break;
          }
        }
      };

      /**
       * Repaint the component
       * @return {boolean} Returns true if the component is resized
       */
      ItemSet.prototype.redraw = function () {
        var margin = this.options.margin,
            range = this.body.range,
            asSize = util.option.asSize,
            options = this.options,
            orientation = options.orientation.item,
            resized = false,
            frame = this.dom.frame;

        // recalculate absolute position (before redrawing groups)
        this.props.top = this.body.domProps.top.height + this.body.domProps.border.top;

        if (this.options.rtl) {
          this.props.right = this.body.domProps.right.width + this.body.domProps.border.right;
        } else {
          this.props.left = this.body.domProps.left.width + this.body.domProps.border.left;
        }

        // update class name
        frame.className = 'vis-itemset';

        // reorder the groups (if needed)
        resized = this._orderGroups() || resized;

        // check whether zoomed (in that case we need to re-stack everything)
        // TODO: would be nicer to get this as a trigger from Range
        var visibleInterval = range.end - range.start;
        var zoomed = visibleInterval != this.lastVisibleInterval || this.props.width != this.props.lastWidth;
        var scrolled = range.start != this.lastRangeStart;
        var changedStackOption = options.stack != this.lastStack;
        var changedStackSubgroupsOption = options.stackSubgroups != this.lastStackSubgroups;
        var forceRestack = zoomed || scrolled || changedStackOption || changedStackSubgroupsOption;
        this.lastVisibleInterval = visibleInterval;
        this.lastRangeStart = range.start;
        this.lastStack = options.stack;
        this.lastStackSubgroups = options.stackSubgroups;

        this.props.lastWidth = this.props.width;

        var firstGroup = this._firstGroup();
        var firstMargin = {
          item: margin.item,
          axis: margin.axis
        };
        var nonFirstMargin = {
          item: margin.item,
          axis: margin.item.vertical / 2
        };
        var height = 0;
        var minHeight = margin.axis + margin.item.vertical;

        // redraw the background group
        this.groups[BACKGROUND].redraw(range, nonFirstMargin, forceRestack);

        var redrawQueue = {};
        var redrawQueueLength = 0;

        // collect redraw functions
        util.forEach(this.groups, function (group, key) {
          if (key === BACKGROUND) return;
          var groupMargin = group == firstGroup ? firstMargin : nonFirstMargin;
          var returnQueue = true;
          redrawQueue[key] = group.redraw(range, groupMargin, forceRestack, returnQueue);
          redrawQueueLength = redrawQueue[key].length;
        });

        var needRedraw = redrawQueueLength > 0;
        if (needRedraw) {
          var redrawResults = {};

          for (var i = 0; i < redrawQueueLength; i++) {
            util.forEach(redrawQueue, function (fns, key) {
              redrawResults[key] = fns[i]();
            });
          }

          // redraw all regular groups
          util.forEach(this.groups, function (group, key) {
            if (key === BACKGROUND) return;
            var groupResized = redrawResults[key];
            resized = groupResized || resized;
            height += group.height;
          });
          height = Math.max(height, minHeight);
        }

        height = Math.max(height, minHeight);

        // update frame height
        frame.style.height = asSize(height);

        // calculate actual size
        this.props.width = frame.offsetWidth;
        this.props.height = height;

        // reposition axis
        this.dom.axis.style.top = asSize(orientation == 'top' ? this.body.domProps.top.height + this.body.domProps.border.top : this.body.domProps.top.height + this.body.domProps.centerContainer.height);
        if (this.options.rtl) {
          this.dom.axis.style.right = '0';
        } else {
          this.dom.axis.style.left = '0';
        }

        this.initialItemSetDrawn = true;
        // check if this component is resized
        resized = this._isResized() || resized;

        return resized;
      };

      /**
       * Get the first group, aligned with the axis
       * @return {Group | null} firstGroup
       * @private
       */
      ItemSet.prototype._firstGroup = function () {
        var firstGroupIndex = this.options.orientation.item == 'top' ? 0 : this.groupIds.length - 1;
        var firstGroupId = this.groupIds[firstGroupIndex];
        var firstGroup = this.groups[firstGroupId] || this.groups[UNGROUPED];

        return firstGroup || null;
      };

      /**
       * Create or delete the group holding all ungrouped items. This group is used when
       * there are no groups specified.
       * @protected
       */
      ItemSet.prototype._updateUngrouped = function () {
        var ungrouped = this.groups[UNGROUPED];
        var item, itemId;

        if (this.groupsData) {
          // remove the group holding all ungrouped items
          if (ungrouped) {
            ungrouped.hide();
            delete this.groups[UNGROUPED];

            for (itemId in this.items) {
              if (this.items.hasOwnProperty(itemId)) {
                item = this.items[itemId];
                item.parent && item.parent.remove(item);
                var groupId = this._getGroupId(item.data);
                var group = this.groups[groupId];
                group && group.add(item) || item.hide();
              }
            }
          }
        } else {
          // create a group holding all (unfiltered) items
          if (!ungrouped) {
            var id = null;
            var data = null;
            ungrouped = new Group(id, data, this);
            this.groups[UNGROUPED] = ungrouped;

            for (itemId in this.items) {
              if (this.items.hasOwnProperty(itemId)) {
                item = this.items[itemId];
                ungrouped.add(item);
              }
            }

            ungrouped.show();
          }
        }
      };

      /**
       * Get the element for the labelset
       * @return {HTMLElement} labelSet
       */
      ItemSet.prototype.getLabelSet = function () {
        return this.dom.labelSet;
      };

      /**
       * Set items
       * @param {vis.DataSet | null} items
       */
      ItemSet.prototype.setItems = function (items) {
        var me = this,
            ids,
            oldItemsData = this.itemsData;

        // replace the dataset
        if (!items) {
          this.itemsData = null;
        } else if (items instanceof DataSet || items instanceof DataView) {
          this.itemsData = items;
        } else {
          throw new TypeError('Data must be an instance of DataSet or DataView');
        }

        if (oldItemsData) {
          // unsubscribe from old dataset
          util.forEach(this.itemListeners, function (callback, event) {
            oldItemsData.off(event, callback);
          });

          // remove all drawn items
          ids = oldItemsData.getIds();
          this._onRemove(ids);
        }

        if (this.itemsData) {
          // subscribe to new dataset
          var id = this.id;
          util.forEach(this.itemListeners, function (callback, event) {
            me.itemsData.on(event, callback, id);
          });

          // add all new items
          ids = this.itemsData.getIds();
          this._onAdd(ids);

          // update the group holding all ungrouped items
          this._updateUngrouped();
        }

        this.body.emitter.emit('_change', { queue: true });
      };

      /**
       * Get the current items
       * @returns {vis.DataSet | null}
       */
      ItemSet.prototype.getItems = function () {
        return this.itemsData;
      };

      /**
       * Set groups
       * @param {vis.DataSet} groups
       */
      ItemSet.prototype.setGroups = function (groups) {
        var me = this,
            ids;

        // unsubscribe from current dataset
        if (this.groupsData) {
          util.forEach(this.groupListeners, function (callback, event) {
            me.groupsData.off(event, callback);
          });

          // remove all drawn groups
          ids = this.groupsData.getIds();
          this.groupsData = null;
          this._onRemoveGroups(ids); // note: this will cause a redraw
        }

        // replace the dataset
        if (!groups) {
          this.groupsData = null;
        } else if (groups instanceof DataSet || groups instanceof DataView) {
          this.groupsData = groups;
        } else {
          throw new TypeError('Data must be an instance of DataSet or DataView');
        }

        if (this.groupsData) {
          // go over all groups nesting
          var groupsData = this.groupsData;
          if (this.groupsData instanceof DataView) {
            groupsData = this.groupsData.getDataSet();
          }

          groupsData.get().forEach(function (group) {
            if (group.nestedGroups) {
              group.nestedGroups.forEach(function (nestedGroupId) {
                var updatedNestedGroup = groupsData.get(nestedGroupId);
                updatedNestedGroup.nestedInGroup = group.id;
                if (group.showNested == false) {
                  updatedNestedGroup.visible = false;
                }
                groupsData.update(updatedNestedGroup);
              });
            }
          });

          // subscribe to new dataset
          var id = this.id;
          util.forEach(this.groupListeners, function (callback, event) {
            me.groupsData.on(event, callback, id);
          });

          // draw all ms
          ids = this.groupsData.getIds();
          this._onAddGroups(ids);
        }

        // update the group holding all ungrouped items
        this._updateUngrouped();

        // update the order of all items in each group
        this._order();

        this.body.emitter.emit('_change', { queue: true });
      };

      /**
       * Get the current groups
       * @returns {vis.DataSet | null} groups
       */
      ItemSet.prototype.getGroups = function () {
        return this.groupsData;
      };

      /**
       * Remove an item by its id
       * @param {string | number} id
       */
      ItemSet.prototype.removeItem = function (id) {
        var item = this.itemsData.get(id),
            dataset = this.itemsData.getDataSet();

        if (item) {
          // confirm deletion
          this.options.onRemove(item, function (item) {
            if (item) {
              // remove by id here, it is possible that an item has no id defined
              // itself, so better not delete by the item itself
              dataset.remove(id);
            }
          });
        }
      };

      /**
       * Get the time of an item based on it's data and options.type
       * @param {Object} itemData
       * @returns {string} Returns the type
       * @private
       */
      ItemSet.prototype._getType = function (itemData) {
        return itemData.type || this.options.type || (itemData.end ? 'range' : 'box');
      };

      /**
       * Get the group id for an item
       * @param {Object} itemData
       * @returns {string} Returns the groupId
       * @private
       */
      ItemSet.prototype._getGroupId = function (itemData) {
        var type = this._getType(itemData);
        if (type == 'background' && itemData.group == undefined) {
          return BACKGROUND;
        } else {
          return this.groupsData ? itemData.group : UNGROUPED;
        }
      };

      /**
       * Handle updated items
       * @param {number[]} ids
       * @protected
       */
      ItemSet.prototype._onUpdate = function (ids) {
        var me = this;

        ids.forEach(function (id) {
          var itemData = me.itemsData.get(id, me.itemOptions);
          var item = me.items[id];
          var type = itemData ? me._getType(itemData) : null;

          var constructor = ItemSet.types[type];
          var selected;

          if (item) {
            // update item   	
            if (!constructor || !(item instanceof constructor)) {
              // item type has changed, delete the item and recreate it
              selected = item.selected; // preserve selection of this item
              me._removeItem(item);
              item = null;
            } else {
              me._updateItem(item, itemData);
            }
          }

          if (!item && itemData) {
            // create item
            if (constructor) {
              item = new constructor(itemData, me.conversion, me.options);
              item.id = id; // TODO: not so nice setting id afterwards

              me._addItem(item);
              if (selected) {
                this.selection.push(id);
                item.select();
              }
            } else if (type == 'rangeoverflow') {
              // TODO: deprecated since version 2.1.0 (or 3.0.0?). cleanup some day
              throw new TypeError('Item type "rangeoverflow" is deprecated. Use css styling instead: ' + '.vis-item.vis-range .vis-item-content {overflow: visible;}');
            } else {
              throw new TypeError('Unknown item type "' + type + '"');
            }
          }
        }.bind(this));

        this._order();
        this.body.emitter.emit('_change', { queue: true });
      };

      /**
       * Handle added items
       * @param {number[]} ids
       * @protected
       */
      ItemSet.prototype._onAdd = ItemSet.prototype._onUpdate;

      /**
       * Handle removed items
       * @param {number[]} ids
       * @protected
       */
      ItemSet.prototype._onRemove = function (ids) {
        var count = 0;
        var me = this;
        ids.forEach(function (id) {
          var item = me.items[id];
          if (item) {
            count++;
            me._removeItem(item);
          }
        });

        if (count) {
          // update order
          this._order();
          this.body.emitter.emit('_change', { queue: true });
        }
      };

      /**
       * Update the order of item in all groups
       * @private
       */
      ItemSet.prototype._order = function () {
        // reorder the items in all groups
        // TODO: optimization: only reorder groups affected by the changed items
        util.forEach(this.groups, function (group) {
          group.order();
        });
      };

      /**
       * Handle updated groups
       * @param {number[]} ids
       * @private
       */
      ItemSet.prototype._onUpdateGroups = function (ids) {
        this._onAddGroups(ids);
      };

      /**
       * Handle changed groups (added or updated)
       * @param {number[]} ids
       * @private
       */
      ItemSet.prototype._onAddGroups = function (ids) {
        var me = this;

        ids.forEach(function (id) {
          var groupData = me.groupsData.get(id);
          var group = me.groups[id];

          if (!group) {
            // check for reserved ids
            if (id == UNGROUPED || id == BACKGROUND) {
              throw new Error('Illegal group id. ' + id + ' is a reserved id.');
            }

            var groupOptions = (0, _create2['default'])(me.options);
            util.extend(groupOptions, {
              height: null
            });

            group = new Group(id, groupData, me);
            me.groups[id] = group;

            // add items with this groupId to the new group
            for (var itemId in me.items) {
              if (me.items.hasOwnProperty(itemId)) {
                var item = me.items[itemId];
                if (item.data.group == id) {
                  group.add(item);
                }
              }
            }

            group.order();
            group.show();
          } else {
            // update group
            group.setData(groupData);
          }
        });

        this.body.emitter.emit('_change', { queue: true });
      };

      /**
       * Handle removed groups
       * @param {number[]} ids
       * @private
       */
      ItemSet.prototype._onRemoveGroups = function (ids) {
        var groups = this.groups;
        ids.forEach(function (id) {
          var group = groups[id];

          if (group) {
            group.hide();
            delete groups[id];
          }
        });

        this.markDirty();

        this.body.emitter.emit('_change', { queue: true });
      };

      /**
       * Reorder the groups if needed
       * @return {boolean} changed
       * @private
       */
      ItemSet.prototype._orderGroups = function () {
        if (this.groupsData) {
          // reorder the groups
          var groupIds = this.groupsData.getIds({
            order: this.options.groupOrder
          });

          groupIds = this._orderNestedGroups(groupIds);

          var changed = !util.equalArray(groupIds, this.groupIds);
          if (changed) {
            // hide all groups, removes them from the DOM
            var groups = this.groups;
            groupIds.forEach(function (groupId) {
              groups[groupId].hide();
            });

            // show the groups again, attach them to the DOM in correct order
            groupIds.forEach(function (groupId) {
              groups[groupId].show();
            });

            this.groupIds = groupIds;
          }

          return changed;
        } else {
          return false;
        }
      };

      /**
       * Reorder the nested groups
       *
       * @param {Array.<number>} groupIds
       * @returns {Array.<number>}
       * @private
       */
      ItemSet.prototype._orderNestedGroups = function (groupIds) {
        var newGroupIdsOrder = [];

        groupIds.forEach(function (groupId) {
          var groupData = this.groupsData.get(groupId);
          if (!groupData.nestedInGroup) {
            newGroupIdsOrder.push(groupId);
          }
          if (groupData.nestedGroups) {
            var nestedGroups = this.groupsData.get({
              filter: function filter(nestedGroup) {
                return nestedGroup.nestedInGroup == groupId;
              },
              order: this.options.groupOrder
            });
            var nestedGroupIds = nestedGroups.map(function (nestedGroup) {
              return nestedGroup.id;
            });
            newGroupIdsOrder = newGroupIdsOrder.concat(nestedGroupIds);
          }
        }, this);
        return newGroupIdsOrder;
      };

      /**
       * Add a new item
       * @param {Item} item
       * @private
       */
      ItemSet.prototype._addItem = function (item) {
        this.items[item.id] = item;

        // add to group
        var groupId = this._getGroupId(item.data);
        var group = this.groups[groupId];

        if (!group) {
          item.groupShowing = false;
        } else if (group && group.data && group.data.showNested) {
          item.groupShowing = true;
        }

        if (group) group.add(item);
      };

      /**
       * Update an existing item
       * @param {Item} item
       * @param {Object} itemData
       * @private
       */
      ItemSet.prototype._updateItem = function (item, itemData) {
        // update the items data (will redraw the item when displayed)
        item.setData(itemData);

        var groupId = this._getGroupId(item.data);
        var group = this.groups[groupId];
        if (!group) {
          item.groupShowing = false;
        } else if (group && group.data && group.data.showNested) {
          item.groupShowing = true;
        }
      };

      /**
       * Delete an item from the ItemSet: remove it from the DOM, from the map
       * with items, and from the map with visible items, and from the selection
       * @param {Item} item
       * @private
       */
      ItemSet.prototype._removeItem = function (item) {
        // remove from DOM
        item.hide();

        // remove from items
        delete this.items[item.id];

        // remove from selection
        var index = this.selection.indexOf(item.id);
        if (index != -1) this.selection.splice(index, 1);

        // remove from group
        item.parent && item.parent.remove(item);
      };

      /**
       * Create an array containing all items being a range (having an end date)
       * @param {Array.<Object>} array
       * @returns {Array}
       * @private
       */
      ItemSet.prototype._constructByEndArray = function (array) {
        var endArray = [];

        for (var i = 0; i < array.length; i++) {
          if (array[i] instanceof RangeItem) {
            endArray.push(array[i]);
          }
        }
        return endArray;
      };

      /**
       * Register the clicked item on touch, before dragStart is initiated.
       *
       * dragStart is initiated from a mousemove event, AFTER the mouse/touch is
       * already moving. Therefore, the mouse/touch can sometimes be above an other
       * DOM element than the item itself.
       *
       * @param {Event} event
       * @private
       */
      ItemSet.prototype._onTouch = function (event) {
        // store the touched item, used in _onDragStart
        this.touchParams.item = this.itemFromTarget(event);
        this.touchParams.dragLeftItem = event.target.dragLeftItem || false;
        this.touchParams.dragRightItem = event.target.dragRightItem || false;
        this.touchParams.itemProps = null;
      };

      /**
       * Given an group id, returns the index it has.
       *
       * @param {number} groupId
       * @returns {number} index / groupId
       * @private
       */
      ItemSet.prototype._getGroupIndex = function (groupId) {
        for (var i = 0; i < this.groupIds.length; i++) {
          if (groupId == this.groupIds[i]) return i;
        }
      };

      /**
       * Start dragging the selected events
       * @param {Event} event
       * @private
       */
      ItemSet.prototype._onDragStart = function (event) {
        if (this.touchParams.itemIsDragging) {
          return;
        }
        var item = this.touchParams.item || null;
        var me = this;
        var props;

        if (item && (item.selected || this.options.itemsAlwaysDraggable.item)) {

          if (this.options.editable.overrideItems && !this.options.editable.updateTime && !this.options.editable.updateGroup) {
            return;
          }

          // override options.editable
          if (item.editable != null && !item.editable.updateTime && !item.editable.updateGroup && !this.options.editable.overrideItems) {
            return;
          }

          var dragLeftItem = this.touchParams.dragLeftItem;
          var dragRightItem = this.touchParams.dragRightItem;
          this.touchParams.itemIsDragging = true;
          this.touchParams.selectedItem = item;

          if (dragLeftItem) {
            props = {
              item: dragLeftItem,
              initialX: event.center.x,
              dragLeft: true,
              data: this._cloneItemData(item.data)
            };

            this.touchParams.itemProps = [props];
          } else if (dragRightItem) {
            props = {
              item: dragRightItem,
              initialX: event.center.x,
              dragRight: true,
              data: this._cloneItemData(item.data)
            };

            this.touchParams.itemProps = [props];
          } else if (this.options.editable.add && (event.srcEvent.ctrlKey || event.srcEvent.metaKey)) {
            // create a new range item when dragging with ctrl key down
            this._onDragStartAddItem(event);
          } else {
            if (this.groupIds.length < 1) {
              // Mitigates a race condition if _onDragStart() is
              // called after markDirty() without redraw() being called between.
              this.redraw();
            }

            var baseGroupIndex = this._getGroupIndex(item.data.group);

            var itemsToDrag = this.options.itemsAlwaysDraggable.item && !item.selected ? [item.id] : this.getSelection();

            this.touchParams.itemProps = itemsToDrag.map(function (id) {
              var item = me.items[id];
              var groupIndex = me._getGroupIndex(item.data.group);
              return {
                item: item,
                initialX: event.center.x,
                groupOffset: baseGroupIndex - groupIndex,
                data: this._cloneItemData(item.data)
              };
            }.bind(this));
          }

          event.stopPropagation();
        } else if (this.options.editable.add && (event.srcEvent.ctrlKey || event.srcEvent.metaKey)) {
          // create a new range item when dragging with ctrl key down
          this._onDragStartAddItem(event);
        }
      };

      /**
       * Start creating a new range item by dragging.
       * @param {Event} event
       * @private
       */
      ItemSet.prototype._onDragStartAddItem = function (event) {
        var xAbs;
        var x;
        var snap = this.options.snap || null;

        if (this.options.rtl) {
          xAbs = util.getAbsoluteRight(this.dom.frame);
          x = xAbs - event.center.x + 10; // plus 10 to compensate for the drag starting as soon as you've moved 10px
        } else {
          xAbs = util.getAbsoluteLeft(this.dom.frame);
          x = event.center.x - xAbs - 10; // minus 10 to compensate for the drag starting as soon as you've moved 10px
        }

        var time = this.body.util.toTime(x);
        var scale = this.body.util.getScale();
        var step = this.body.util.getStep();
        var start = snap ? snap(time, scale, step) : time;
        var end = start;

        var itemData = {
          type: 'range',
          start: start,
          end: end,
          content: 'new item'
        };

        var id = util.randomUUID();
        itemData[this.itemsData._fieldId] = id;

        var group = this.groupFromTarget(event);
        if (group) {
          itemData.group = group.groupId;
        }
        var newItem = new RangeItem(itemData, this.conversion, this.options);
        newItem.id = id; // TODO: not so nice setting id afterwards
        newItem.data = this._cloneItemData(itemData);
        this._addItem(newItem);
        this.touchParams.selectedItem = newItem;

        var props = {
          item: newItem,
          initialX: event.center.x,
          data: newItem.data
        };

        if (this.options.rtl) {
          props.dragLeft = true;
        } else {
          props.dragRight = true;
        }
        this.touchParams.itemProps = [props];

        event.stopPropagation();
      };

      /**
       * Drag selected items
       * @param {Event} event
       * @private
       */
      ItemSet.prototype._onDrag = function (event) {
        if (this.touchParams.itemProps) {
          event.stopPropagation();

          var me = this;
          var snap = this.options.snap || null;
          var xOffset;

          if (this.options.rtl) {
            xOffset = this.body.dom.root.offsetLeft + this.body.domProps.right.width;
          } else {
            xOffset = this.body.dom.root.offsetLeft + this.body.domProps.left.width;
          }

          var scale = this.body.util.getScale();
          var step = this.body.util.getStep();

          //only calculate the new group for the item that's actually dragged
          var selectedItem = this.touchParams.selectedItem;
          var updateGroupAllowed = (this.options.editable.overrideItems || selectedItem.editable == null) && this.options.editable.updateGroup || !this.options.editable.overrideItems && selectedItem.editable != null && selectedItem.editable.updateGroup;
          var newGroupBase = null;
          if (updateGroupAllowed && selectedItem) {
            if (selectedItem.data.group != undefined) {
              // drag from one group to another
              var group = me.groupFromTarget(event);
              if (group) {
                //we know the offset for all items, so the new group for all items
                //will be relative to this one.
                newGroupBase = this._getGroupIndex(group.groupId);
              }
            }
          }

          // move
          this.touchParams.itemProps.forEach(function (props) {
            var current = me.body.util.toTime(event.center.x - xOffset);
            var initial = me.body.util.toTime(props.initialX - xOffset);
            var offset;
            var initialStart;
            var initialEnd;
            var start;
            var end;

            if (this.options.rtl) {
              offset = -(current - initial); // ms
            } else {
              offset = current - initial; // ms
            }

            var itemData = this._cloneItemData(props.item.data); // clone the data
            if (props.item.editable != null && !props.item.editable.updateTime && !props.item.editable.updateGroup && !me.options.editable.overrideItems) {
              return;
            }

            var updateTimeAllowed = (this.options.editable.overrideItems || selectedItem.editable == null) && this.options.editable.updateTime || !this.options.editable.overrideItems && selectedItem.editable != null && selectedItem.editable.updateTime;
            if (updateTimeAllowed) {
              if (props.dragLeft) {
                // drag left side of a range item
                if (this.options.rtl) {
                  if (itemData.end != undefined) {
                    initialEnd = util.convert(props.data.end, 'Date');
                    end = new Date(initialEnd.valueOf() + offset);
                    // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                    itemData.end = snap ? snap(end, scale, step) : end;
                  }
                } else {
                  if (itemData.start != undefined) {
                    initialStart = util.convert(props.data.start, 'Date');
                    start = new Date(initialStart.valueOf() + offset);
                    // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                    itemData.start = snap ? snap(start, scale, step) : start;
                  }
                }
              } else if (props.dragRight) {
                // drag right side of a range item
                if (this.options.rtl) {
                  if (itemData.start != undefined) {
                    initialStart = util.convert(props.data.start, 'Date');
                    start = new Date(initialStart.valueOf() + offset);
                    // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                    itemData.start = snap ? snap(start, scale, step) : start;
                  }
                } else {
                  if (itemData.end != undefined) {
                    initialEnd = util.convert(props.data.end, 'Date');
                    end = new Date(initialEnd.valueOf() + offset);
                    // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                    itemData.end = snap ? snap(end, scale, step) : end;
                  }
                }
              } else {
                // drag both start and end
                if (itemData.start != undefined) {

                  initialStart = util.convert(props.data.start, 'Date').valueOf();
                  start = new Date(initialStart + offset);

                  if (itemData.end != undefined) {
                    initialEnd = util.convert(props.data.end, 'Date');
                    var duration = initialEnd.valueOf() - initialStart.valueOf();

                    // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                    itemData.start = snap ? snap(start, scale, step) : start;
                    itemData.end = new Date(itemData.start.valueOf() + duration);
                  } else {
                    // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
                    itemData.start = snap ? snap(start, scale, step) : start;
                  }
                }
              }
            }

            if (updateGroupAllowed && !props.dragLeft && !props.dragRight && newGroupBase != null) {
              if (itemData.group != undefined) {
                var newOffset = newGroupBase - props.groupOffset;

                //make sure we stay in bounds
                newOffset = Math.max(0, newOffset);
                newOffset = Math.min(me.groupIds.length - 1, newOffset);
                itemData.group = me.groupIds[newOffset];
              }
            }

            // confirm moving the item
            itemData = this._cloneItemData(itemData); // convert start and end to the correct type
            me.options.onMoving(itemData, function (itemData) {
              if (itemData) {
                props.item.setData(this._cloneItemData(itemData, 'Date'));
              }
            }.bind(this));
          }.bind(this));

          this.body.emitter.emit('_change');
        }
      };

      /**
       * Move an item to another group
       * @param {Item} item
       * @param {string | number} groupId
       * @private
       */
      ItemSet.prototype._moveToGroup = function (item, groupId) {
        var group = this.groups[groupId];
        if (group && group.groupId != item.data.group) {
          var oldGroup = item.parent;
          oldGroup.remove(item);
          oldGroup.order();

          item.data.group = group.groupId;

          group.add(item);
          group.order();
        }
      };

      /**
       * End of dragging selected items
       * @param {Event} event
       * @private
       */
      ItemSet.prototype._onDragEnd = function (event) {
        this.touchParams.itemIsDragging = false;
        if (this.touchParams.itemProps) {
          event.stopPropagation();

          var me = this;
          var dataset = this.itemsData.getDataSet();
          var itemProps = this.touchParams.itemProps;
          this.touchParams.itemProps = null;

          itemProps.forEach(function (props) {
            var id = props.item.id;
            var exists = me.itemsData.get(id, me.itemOptions) != null;

            if (!exists) {
              // add a new item
              me.options.onAdd(props.item.data, function (itemData) {
                me._removeItem(props.item); // remove temporary item
                if (itemData) {
                  me.itemsData.getDataSet().add(itemData);
                }

                // force re-stacking of all items next redraw
                me.body.emitter.emit('_change');
              });
            } else {
              // update existing item
              var itemData = this._cloneItemData(props.item.data); // convert start and end to the correct type
              me.options.onMove(itemData, function (itemData) {
                if (itemData) {
                  // apply changes
                  itemData[dataset._fieldId] = id; // ensure the item contains its id (can be undefined)
                  dataset.update(itemData);
                } else {
                  // restore original values
                  props.item.setData(props.data);

                  me.body.emitter.emit('_change');
                }
              });
            }
          }.bind(this));
        }
      };

      ItemSet.prototype._onGroupClick = function (event) {
        var group = this.groupFromTarget(event);

        if (!group || !group.nestedGroups) return;

        var groupsData = this.groupsData.getDataSet();

        var nestingGroup = groupsData.get(group.groupId);
        if (nestingGroup.showNested == undefined) {
          nestingGroup.showNested = true;
        }
        nestingGroup.showNested = !nestingGroup.showNested;

        var nestedGroups = groupsData.get(group.nestedGroups).map(function (nestedGroup) {
          nestedGroup.visible = nestingGroup.showNested;
          return nestedGroup;
        });

        groupsData.update(nestedGroups.concat(nestingGroup));

        if (nestingGroup.showNested) {
          util.removeClassName(group.dom.label, 'collapsed');
          util.addClassName(group.dom.label, 'expanded');
        } else {
          util.removeClassName(group.dom.label, 'expanded');
          var collapsedDirClassName = this.options.rtl ? 'collapsed-rtl' : 'collapsed';
          util.addClassName(group.dom.label, collapsedDirClassName);
        }
      };

      ItemSet.prototype._onGroupDragStart = function (event) {
        if (this.options.groupEditable.order) {
          this.groupTouchParams.group = this.groupFromTarget(event);

          if (this.groupTouchParams.group) {
            event.stopPropagation();

            this.groupTouchParams.originalOrder = this.groupsData.getIds({
              order: this.options.groupOrder
            });
          }
        }
      };

      ItemSet.prototype._onGroupDrag = function (event) {
        if (this.options.groupEditable.order && this.groupTouchParams.group) {
          event.stopPropagation();

          var groupsData = this.groupsData;
          if (this.groupsData instanceof DataView) {
            groupsData = this.groupsData.getDataSet();
          }
          // drag from one group to another
          var group = this.groupFromTarget(event);

          // try to avoid toggling when groups differ in height
          if (group && group.height != this.groupTouchParams.group.height) {
            var movingUp = group.top < this.groupTouchParams.group.top;
            var clientY = event.center ? event.center.y : event.clientY;
            var targetGroupTop = util.getAbsoluteTop(group.dom.foreground);
            var draggedGroupHeight = this.groupTouchParams.group.height;
            if (movingUp) {
              // skip swapping the groups when the dragged group is not below clientY afterwards
              if (targetGroupTop + draggedGroupHeight < clientY) {
                return;
              }
            } else {
              var targetGroupHeight = group.height;
              // skip swapping the groups when the dragged group is not below clientY afterwards
              if (targetGroupTop + targetGroupHeight - draggedGroupHeight > clientY) {
                return;
              }
            }
          }

          if (group && group != this.groupTouchParams.group) {
            var targetGroup = groupsData.get(group.groupId);
            var draggedGroup = groupsData.get(this.groupTouchParams.group.groupId);

            // switch groups
            if (draggedGroup && targetGroup) {
              this.options.groupOrderSwap(draggedGroup, targetGroup, groupsData);
              groupsData.update(draggedGroup);
              groupsData.update(targetGroup);
            }

            // fetch current order of groups
            var newOrder = groupsData.getIds({
              order: this.options.groupOrder
            });

            // in case of changes since _onGroupDragStart
            if (!util.equalArray(newOrder, this.groupTouchParams.originalOrder)) {
              var origOrder = this.groupTouchParams.originalOrder;
              var draggedId = this.groupTouchParams.group.groupId;
              var numGroups = Math.min(origOrder.length, newOrder.length);
              var curPos = 0;
              var newOffset = 0;
              var orgOffset = 0;
              while (curPos < numGroups) {
                // as long as the groups are where they should be step down along the groups order
                while (curPos + newOffset < numGroups && curPos + orgOffset < numGroups && newOrder[curPos + newOffset] == origOrder[curPos + orgOffset]) {
                  curPos++;
                }

                // all ok
                if (curPos + newOffset >= numGroups) {
                  break;
                }

                // not all ok
                // if dragged group was move upwards everything below should have an offset
                if (newOrder[curPos + newOffset] == draggedId) {
                  newOffset = 1;
                }
                // if dragged group was move downwards everything above should have an offset
                else if (origOrder[curPos + orgOffset] == draggedId) {
                    orgOffset = 1;
                  }
                  // found a group (apart from dragged group) that has the wrong position -> switch with the 
                  // group at the position where other one should be, fix index arrays and continue
                  else {
                      var slippedPosition = newOrder.indexOf(origOrder[curPos + orgOffset]);
                      var switchGroup = groupsData.get(newOrder[curPos + newOffset]);
                      var shouldBeGroup = groupsData.get(origOrder[curPos + orgOffset]);
                      this.options.groupOrderSwap(switchGroup, shouldBeGroup, groupsData);
                      groupsData.update(switchGroup);
                      groupsData.update(shouldBeGroup);

                      var switchGroupId = newOrder[curPos + newOffset];
                      newOrder[curPos + newOffset] = origOrder[curPos + orgOffset];
                      newOrder[slippedPosition] = switchGroupId;

                      curPos++;
                    }
              }
            }
          }
        }
      };

      ItemSet.prototype._onGroupDragEnd = function (event) {
        if (this.options.groupEditable.order && this.groupTouchParams.group) {
          event.stopPropagation();

          // update existing group
          var me = this;
          var id = me.groupTouchParams.group.groupId;
          var dataset = me.groupsData.getDataSet();
          var groupData = util.extend({}, dataset.get(id)); // clone the data
          me.options.onMoveGroup(groupData, function (groupData) {
            if (groupData) {
              // apply changes
              groupData[dataset._fieldId] = id; // ensure the group contains its id (can be undefined)
              dataset.update(groupData);
            } else {

              // fetch current order of groups
              var newOrder = dataset.getIds({
                order: me.options.groupOrder
              });

              // restore original order
              if (!util.equalArray(newOrder, me.groupTouchParams.originalOrder)) {
                var origOrder = me.groupTouchParams.originalOrder;
                var numGroups = Math.min(origOrder.length, newOrder.length);
                var curPos = 0;
                while (curPos < numGroups) {
                  // as long as the groups are where they should be step down along the groups order
                  while (curPos < numGroups && newOrder[curPos] == origOrder[curPos]) {
                    curPos++;
                  }

                  // all ok
                  if (curPos >= numGroups) {
                    break;
                  }

                  // found a group that has the wrong position -> switch with the
                  // group at the position where other one should be, fix index arrays and continue
                  var slippedPosition = newOrder.indexOf(origOrder[curPos]);
                  var switchGroup = dataset.get(newOrder[curPos]);
                  var shouldBeGroup = dataset.get(origOrder[curPos]);
                  me.options.groupOrderSwap(switchGroup, shouldBeGroup, dataset);
                  dataset.update(switchGroup);
                  dataset.update(shouldBeGroup);

                  var switchGroupId = newOrder[curPos];
                  newOrder[curPos] = origOrder[curPos];
                  newOrder[slippedPosition] = switchGroupId;

                  curPos++;
                }
              }
            }
          });

          me.body.emitter.emit('groupDragged', { groupId: id });
        }
      };

      /**
       * Handle selecting/deselecting an item when tapping it
       * @param {Event} event
       * @private
       */
      ItemSet.prototype._onSelectItem = function (event) {
        if (!this.options.selectable) return;

        var ctrlKey = event.srcEvent && (event.srcEvent.ctrlKey || event.srcEvent.metaKey);
        var shiftKey = event.srcEvent && event.srcEvent.shiftKey;
        if (ctrlKey || shiftKey) {
          this._onMultiSelectItem(event);
          return;
        }

        var oldSelection = this.getSelection();

        var item = this.itemFromTarget(event);
        var selection = item ? [item.id] : [];
        this.setSelection(selection);

        var newSelection = this.getSelection();

        // emit a select event,
        // except when old selection is empty and new selection is still empty
        if (newSelection.length > 0 || oldSelection.length > 0) {
          this.body.emitter.emit('select', {
            items: newSelection,
            event: event
          });
        }
      };

      /**
       * Handle hovering an item
       * @param {Event} event
       * @private
       */
      ItemSet.prototype._onMouseOver = function (event) {
        var item = this.itemFromTarget(event);
        if (!item) return;

        // Item we just left
        var related = this.itemFromRelatedTarget(event);
        if (item === related) {
          // We haven't changed item, just element in the item
          return;
        }

        var title = item.getTitle();
        if (this.options.showTooltips && title) {
          if (this.popup == null) {
            this.popup = new Popup(this.body.dom.root, this.options.tooltip.overflowMethod || 'flip');
          }

          this.popup.setText(title);
          var container = this.body.dom.centerContainer;
          this.popup.setPosition(event.clientX - util.getAbsoluteLeft(container) + container.offsetLeft, event.clientY - util.getAbsoluteTop(container) + container.offsetTop);
          this.popup.show();
        } else {
          // Hovering over item without a title, hide popup
          // Needed instead of _just_ in _onMouseOut due to #2572
          if (this.popup != null) {
            this.popup.hide();
          }
        }

        this.body.emitter.emit('itemover', {
          item: item.id,
          event: event
        });
      };
      ItemSet.prototype._onMouseOut = function (event) {
        var item = this.itemFromTarget(event);
        if (!item) return;

        // Item we are going to
        var related = this.itemFromRelatedTarget(event);
        if (item === related) {
          // We aren't changing item, just element in the item
          return;
        }

        if (this.popup != null) {
          this.popup.hide();
        }

        this.body.emitter.emit('itemout', {
          item: item.id,
          event: event
        });
      };
      ItemSet.prototype._onMouseMove = function (event) {
        var item = this.itemFromTarget(event);
        if (!item) return;

        if (this.options.showTooltips && this.options.tooltip.followMouse) {
          if (this.popup) {
            if (!this.popup.hidden) {
              var container = this.body.dom.centerContainer;
              this.popup.setPosition(event.clientX - util.getAbsoluteLeft(container) + container.offsetLeft, event.clientY - util.getAbsoluteTop(container) + container.offsetTop);
              this.popup.show(); // Redraw
            }
          }
        }
      };

      /**
       * Handle mousewheel
       * @param {Event}  event   The event
       * @private
       */
      ItemSet.prototype._onMouseWheel = function (event) {
        if (this.touchParams.itemIsDragging) {
          this._onDragEnd(event);
        }
      };

      /**
       * Handle updates of an item on double tap
       * @param {vis.Item}  item   The item
       * @private
       */
      ItemSet.prototype._onUpdateItem = function (item) {
        if (!this.options.selectable) return;
        if (!this.options.editable.add) return;

        var me = this;

        if (item) {
          // execute async handler to update the item (or cancel it)
          var itemData = me.itemsData.get(item.id); // get a clone of the data from the dataset
          this.options.onUpdate(itemData, function (itemData) {
            if (itemData) {
              me.itemsData.getDataSet().update(itemData);
            }
          });
        }
      };

      /**
       * Handle drop event of data on item
       * Only called when `objectData.target === 'item'.
       * @param {Event} event The event 
       * @private
       */
      ItemSet.prototype._onDropObjectOnItem = function (event) {
        var item = this.itemFromTarget(event);
        var objectData = JSON.parse(event.dataTransfer.getData("text"));
        this.options.onDropObjectOnItem(objectData, item);
      };

      /**
       * Handle creation of an item on double tap or drop of a drag event
       * @param {Event} event   The event
       * @private
       */
      ItemSet.prototype._onAddItem = function (event) {
        if (!this.options.selectable) return;
        if (!this.options.editable.add) return;

        var me = this;
        var snap = this.options.snap || null;
        var xAbs;
        var x;
        // add item
        if (this.options.rtl) {
          xAbs = util.getAbsoluteRight(this.dom.frame);
          x = xAbs - event.center.x;
        } else {
          xAbs = util.getAbsoluteLeft(this.dom.frame);
          x = event.center.x - xAbs;
        }
        // var xAbs = util.getAbsoluteLeft(this.dom.frame);
        // var x = event.center.x - xAbs;
        var start = this.body.util.toTime(x);
        var scale = this.body.util.getScale();
        var step = this.body.util.getStep();
        var end;

        var newItemData;
        if (event.type == 'drop') {
          newItemData = JSON.parse(event.dataTransfer.getData("text"));
          newItemData.content = newItemData.content ? newItemData.content : 'new item';
          newItemData.start = newItemData.start ? newItemData.start : snap ? snap(start, scale, step) : start;
          newItemData.type = newItemData.type || 'box';
          newItemData[this.itemsData._fieldId] = newItemData.id || util.randomUUID();

          if (newItemData.type == 'range' && !newItemData.end) {
            end = this.body.util.toTime(x + this.props.width / 5);
            newItemData.end = snap ? snap(end, scale, step) : end;
          }
        } else {
          newItemData = {
            start: snap ? snap(start, scale, step) : start,
            content: 'new item'
          };
          newItemData[this.itemsData._fieldId] = util.randomUUID();

          // when default type is a range, add a default end date to the new item
          if (this.options.type === 'range') {
            end = this.body.util.toTime(x + this.props.width / 5);
            newItemData.end = snap ? snap(end, scale, step) : end;
          }
        }

        var group = this.groupFromTarget(event);
        if (group) {
          newItemData.group = group.groupId;
        }

        // execute async handler to customize (or cancel) adding an item
        newItemData = this._cloneItemData(newItemData); // convert start and end to the correct type
        this.options.onAdd(newItemData, function (item) {
          if (item) {
            me.itemsData.getDataSet().add(item);
            if (event.type == 'drop') {
              me.setSelection([item.id]);
            }
            // TODO: need to trigger a redraw?
          }
        });
      };

      /**
       * Handle selecting/deselecting multiple items when holding an item
       * @param {Event} event
       * @private
       */
      ItemSet.prototype._onMultiSelectItem = function (event) {
        if (!this.options.selectable) return;

        var item = this.itemFromTarget(event);

        if (item) {
          // multi select items (if allowed)

          var selection = this.options.multiselect ? this.getSelection() // take current selection
          : []; // deselect current selection

          var shiftKey = event.srcEvent && event.srcEvent.shiftKey || false;

          if (shiftKey && this.options.multiselect) {
            // select all items between the old selection and the tapped item
            var itemGroup = this.itemsData.get(item.id).group;

            // when filtering get the group of the last selected item
            var lastSelectedGroup = undefined;
            if (this.options.multiselectPerGroup) {
              if (selection.length > 0) {
                lastSelectedGroup = this.itemsData.get(selection[0]).group;
              }
            }

            // determine the selection range
            if (!this.options.multiselectPerGroup || lastSelectedGroup == undefined || lastSelectedGroup == itemGroup) {
              selection.push(item.id);
            }
            var range = ItemSet._getItemRange(this.itemsData.get(selection, this.itemOptions));

            if (!this.options.multiselectPerGroup || lastSelectedGroup == itemGroup) {
              // select all items within the selection range
              selection = [];
              for (var id in this.items) {
                if (this.items.hasOwnProperty(id)) {
                  var _item = this.items[id];
                  var start = _item.data.start;
                  var end = _item.data.end !== undefined ? _item.data.end : start;

                  if (start >= range.min && end <= range.max && (!this.options.multiselectPerGroup || lastSelectedGroup == this.itemsData.get(_item.id).group) && !(_item instanceof BackgroundItem)) {
                    selection.push(_item.id); // do not use id but item.id, id itself is stringified
                  }
                }
              }
            }
          } else {
            // add/remove this item from the current selection
            var index = selection.indexOf(item.id);
            if (index == -1) {
              // item is not yet selected -> select it
              selection.push(item.id);
            } else {
              // item is already selected -> deselect it
              selection.splice(index, 1);
            }
          }

          this.setSelection(selection);

          this.body.emitter.emit('select', {
            items: this.getSelection(),
            event: event
          });
        }
      };

      /**
       * Calculate the time range of a list of items
       * @param {Array.<Object>} itemsData
       * @return {{min: Date, max: Date}} Returns the range of the provided items
       * @private
       */
      ItemSet._getItemRange = function (itemsData) {
        var max = null;
        var min = null;

        itemsData.forEach(function (data) {
          if (min == null || data.start < min) {
            min = data.start;
          }

          if (data.end != undefined) {
            if (max == null || data.end > max) {
              max = data.end;
            }
          } else {
            if (max == null || data.start > max) {
              max = data.start;
            }
          }
        });

        return {
          min: min,
          max: max
        };
      };

      /**
       * Find an item from an element:
       * searches for the attribute 'timeline-item' in the element's tree
       * @param {HTMLElement} element
       * @return {Item | null} item
       */
      ItemSet.prototype.itemFromElement = function (element) {
        var cur = element;
        while (cur) {
          if (cur.hasOwnProperty('timeline-item')) {
            return cur['timeline-item'];
          }
          cur = cur.parentNode;
        }

        return null;
      };

      /**
       * Find an item from an event target:
       * searches for the attribute 'timeline-item' in the event target's element tree
       * @param {Event} event
       * @return {Item | null} item
       */
      ItemSet.prototype.itemFromTarget = function (event) {
        return this.itemFromElement(event.target);
      };

      /**
       * Find an item from an event's related target:
       * searches for the attribute 'timeline-item' in the related target's element tree
       * @param {Event} event
       * @return {Item | null} item
       */
      ItemSet.prototype.itemFromRelatedTarget = function (event) {
        return this.itemFromElement(event.relatedTarget);
      };

      /**
       * Find the Group from an event target:
       * searches for the attribute 'timeline-group' in the event target's element tree
       * @param {Event} event
       * @return {Group | null} group
       */
      ItemSet.prototype.groupFromTarget = function (event) {
        var clientY = event.center ? event.center.y : event.clientY;
        var groupIds = this.groupIds;

        if (groupIds.length <= 0 && this.groupsData) {
          groupIds = this.groupsData.getIds({
            order: this.options.groupOrder
          });
        }

        for (var i = 0; i < groupIds.length; i++) {
          var groupId = groupIds[i];
          var group = this.groups[groupId];
          var foreground = group.dom.foreground;
          var top = util.getAbsoluteTop(foreground);
          if (clientY > top && clientY < top + foreground.offsetHeight) {
            return group;
          }

          if (this.options.orientation.item === 'top') {
            if (i === this.groupIds.length - 1 && clientY > top) {
              return group;
            }
          } else {
            if (i === 0 && clientY < top + foreground.offset) {
              return group;
            }
          }
        }

        return null;
      };

      /**
       * Find the ItemSet from an event target:
       * searches for the attribute 'timeline-itemset' in the event target's element tree
       * @param {Event} event
       * @return {ItemSet | null} item
       */
      ItemSet.itemSetFromTarget = function (event) {
        var target = event.target;
        while (target) {
          if (target.hasOwnProperty('timeline-itemset')) {
            return target['timeline-itemset'];
          }
          target = target.parentNode;
        }

        return null;
      };

      /**
       * Clone the data of an item, and "normalize" it: convert the start and end date
       * to the type (Date, Moment, ...) configured in the DataSet. If not configured,
       * start and end are converted to Date.
       * @param {Object} itemData, typically `item.data`
       * @param {string} [type]  Optional Date type. If not provided, the type from the DataSet is taken
       * @return {Object} The cloned object
       * @private
       */
      ItemSet.prototype._cloneItemData = function (itemData, type) {
        var clone = util.extend({}, itemData);

        if (!type) {
          // convert start and end date to the type (Date, Moment, ...) configured in the DataSet
          type = this.itemsData.getDataSet()._options.type;
        }

        if (clone.start != undefined) {
          clone.start = util.convert(clone.start, type && type.start || 'Date');
        }
        if (clone.end != undefined) {
          clone.end = util.convert(clone.end, type && type.end || 'Date');
        }

        return clone;
      };

      module.exports = ItemSet;

      /***/
    },
    /* 100 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // Utility functions for ordering and stacking of items

      var EPSILON = 0.001; // used when checking collisions, to prevent round-off errors

      /**
       * Order items by their start data
       * @param {Item[]} items
       */
      exports.orderByStart = function (items) {
        items.sort(function (a, b) {
          return a.data.start - b.data.start;
        });
      };

      /**
       * Order items by their end date. If they have no end date, their start date
       * is used.
       * @param {Item[]} items
       */
      exports.orderByEnd = function (items) {
        items.sort(function (a, b) {
          var aTime = 'end' in a.data ? a.data.end : a.data.start,
              bTime = 'end' in b.data ? b.data.end : b.data.start;

          return aTime - bTime;
        });
      };

      /**
       * Adjust vertical positions of the items such that they don't overlap each
       * other.
       * @param {Item[]} items
       *            All visible items
       * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
       *            Margins between items and between items and the axis.
       * @param {boolean} [force=false]
       *            If true, all items will be repositioned. If false (default), only
       *            items having a top===null will be re-stacked
       */
      exports.stack = function (items, margin, force) {
        if (force) {
          // reset top position of all items
          for (var i = 0; i < items.length; i++) {
            items[i].top = null;
          }
        }

        // calculate new, non-overlapping positions
        for (var i = 0; i < items.length; i++) {
          // eslint-disable-line no-redeclare
          var item = items[i];
          if (item.stack && item.top === null) {
            // initialize top position
            item.top = margin.axis;

            do {
              // TODO: optimize checking for overlap. when there is a gap without items,
              //       you only need to check for items from the next item on, not from zero
              var collidingItem = null;
              for (var j = 0, jj = items.length; j < jj; j++) {
                var other = items[j];
                if (other.top !== null && other !== item && other.stack && exports.collision(item, other, margin.item, other.options.rtl)) {
                  collidingItem = other;
                  break;
                }
              }

              if (collidingItem != null) {
                // There is a collision. Reposition the items above the colliding element
                item.top = collidingItem.top + collidingItem.height + margin.item.vertical;
              }
            } while (collidingItem);
          }
        }
      };

      /**
       * Adjust vertical positions of the items within a single subgroup such that they 
       * don't overlap each other.
       * @param {Item[]} items
       *            All items withina subgroup
       * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
       *            Margins between items and between items and the axis.
       * @param {subgroup} subgroup
       *            The subgroup that is being stacked 
       */
      exports.substack = function (items, margin, subgroup) {
        for (var i = 0; i < items.length; i++) {
          items[i].top = null;
        }

        // Set the initial height
        var subgroupHeight = subgroup.height;

        // calculate new, non-overlapping positions
        for (i = 0; i < items.length; i++) {
          var item = items[i];

          if (item.stack && item.top === null) {
            // initialize top position
            item.top = item.baseTop; //margin.axis + item.baseTop;

            do {
              // TODO: optimize checking for overlap. when there is a gap without items,
              //       you only need to check for items from the next item on, not from zero
              var collidingItem = null;
              for (var j = 0, jj = items.length; j < jj; j++) {
                var other = items[j];
                if (other.top !== null && other !== item /*&& other.stack*/ && exports.collision(item, other, margin.item, other.options.rtl)) {
                  collidingItem = other;
                  break;
                }
              }

              if (collidingItem != null) {
                // There is a collision. Reposition the items above the colliding element
                item.top = collidingItem.top + collidingItem.height + margin.item.vertical; // + item.baseTop;
              }

              if (item.top + item.height > subgroupHeight) {
                subgroupHeight = item.top + item.height;
              }
            } while (collidingItem);
          }
        }

        // Set the new height
        subgroup.height = subgroupHeight - subgroup.top + 0.5 * margin.item.vertical;
      };

      /**
       * Adjust vertical positions of the items without stacking them
       * @param {Item[]} items
       *            All visible items
       * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
       *            Margins between items and between items and the axis.
       * @param {subgroups[]} subgroups
       *            All subgroups
       * @param {boolean} stackSubgroups
       */
      exports.nostack = function (items, margin, subgroups, stackSubgroups) {
        for (var i = 0; i < items.length; i++) {
          if (items[i].data.subgroup == undefined) {
            items[i].top = margin.item.vertical;
          } else if (items[i].data.subgroup !== undefined && stackSubgroups) {
            var newTop = 0;
            for (var subgroup in subgroups) {
              if (subgroups.hasOwnProperty(subgroup)) {
                if (subgroups[subgroup].visible == true && subgroups[subgroup].index < subgroups[items[i].data.subgroup].index) {
                  newTop += subgroups[subgroup].height;
                  subgroups[items[i].data.subgroup].top = newTop;
                }
              }
            }
            items[i].top = newTop + 0.5 * margin.item.vertical;
          }
        }
        if (!stackSubgroups) {
          exports.stackSubgroups(items, margin, subgroups);
        }
      };

      /**
       * Adjust vertical positions of the subgroups such that they don't overlap each
       * other.
       * @param {Array.<vis.Item>} items
       * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin Margins between items and between items and the axis.
       * @param {subgroups[]} subgroups
       *            All subgroups
       */
      exports.stackSubgroups = function (items, margin, subgroups) {
        for (var subgroup in subgroups) {
          if (subgroups.hasOwnProperty(subgroup)) {

            subgroups[subgroup].top = 0;
            do {
              // TODO: optimize checking for overlap. when there is a gap without items,
              //       you only need to check for items from the next item on, not from zero
              var collidingItem = null;
              for (var otherSubgroup in subgroups) {
                if (subgroups[otherSubgroup].top !== null && otherSubgroup !== subgroup && subgroups[subgroup].index > subgroups[otherSubgroup].index && exports.collisionByTimes(subgroups[subgroup], subgroups[otherSubgroup])) {
                  collidingItem = subgroups[otherSubgroup];
                  break;
                }
              }

              if (collidingItem != null) {
                // There is a collision. Reposition the subgroups above the colliding element
                subgroups[subgroup].top = collidingItem.top + collidingItem.height;
              }
            } while (collidingItem);
          }
        }
        for (var i = 0; i < items.length; i++) {
          if (items[i].data.subgroup !== undefined) {
            items[i].top = subgroups[items[i].data.subgroup].top + 0.5 * margin.item.vertical;
          }
        }
      };

      /**
       * Adjust vertical positions of the subgroups such that they don't overlap each
       * other, then stacks the contents of each subgroup individually.
       * @param {Item[]} subgroupItems
       *            All the items in a subgroup
       * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
       *            Margins between items and between items and the axis.
       * @param {subgroups[]} subgroups
       *            All subgroups 
       */
      exports.stackSubgroupsWithInnerStack = function (subgroupItems, margin, subgroups) {
        var doSubStack = false;

        // Run subgroups in their order (if any)
        var subgroupOrder = [];

        for (var subgroup in subgroups) {
          if (subgroups[subgroup].hasOwnProperty("index")) {
            subgroupOrder[subgroups[subgroup].index] = subgroup;
          } else {
            subgroupOrder.push(subgroup);
          }
        }

        for (var j = 0; j < subgroupOrder.length; j++) {
          subgroup = subgroupOrder[j];
          if (subgroups.hasOwnProperty(subgroup)) {

            doSubStack = doSubStack || subgroups[subgroup].stack;
            subgroups[subgroup].top = 0;

            for (var otherSubgroup in subgroups) {
              if (subgroups[otherSubgroup].visible && subgroups[subgroup].index > subgroups[otherSubgroup].index) {
                subgroups[subgroup].top += subgroups[otherSubgroup].height;
              }
            }

            var items = subgroupItems[subgroup];
            for (var i = 0; i < items.length; i++) {
              if (items[i].data.subgroup !== undefined) {
                items[i].top = subgroups[items[i].data.subgroup].top + 0.5 * margin.item.vertical;

                if (subgroups[subgroup].stack) {
                  items[i].baseTop = items[i].top;
                }
              }
            }

            if (doSubStack && subgroups[subgroup].stack) {
              exports.substack(subgroupItems[subgroup], margin, subgroups[subgroup]);
            }
          }
        }
      };

      /**
       * Test if the two provided items collide
       * The items must have parameters left, width, top, and height.
       * @param {Item} a          The first item
       * @param {Item} b          The second item
       * @param {{horizontal: number, vertical: number}} margin
       *                          An object containing a horizontal and vertical
       *                          minimum required margin.
       * @param {boolean} rtl
       * @return {boolean}        true if a and b collide, else false
       */
      exports.collision = function (a, b, margin, rtl) {
        if (rtl) {
          return a.right - margin.horizontal + EPSILON < b.right + b.width && a.right + a.width + margin.horizontal - EPSILON > b.right && a.top - margin.vertical + EPSILON < b.top + b.height && a.top + a.height + margin.vertical - EPSILON > b.top;
        } else {
          return a.left - margin.horizontal + EPSILON < b.left + b.width && a.left + a.width + margin.horizontal - EPSILON > b.left && a.top - margin.vertical + EPSILON < b.top + b.height && a.top + a.height + margin.vertical - EPSILON > b.top;
        }
      };

      /**
       * Test if the two provided objects collide
       * The objects must have parameters start, end, top, and height.
       * @param {Object} a          The first Object
       * @param {Object} b          The second Object
       * @return {boolean}        true if a and b collide, else false
       */
      exports.collisionByTimes = function (a, b) {
        return a.start <= b.start && a.end >= b.start && a.top < b.top + b.height && a.top + a.height > b.top || b.start <= a.start && b.end >= a.start && b.top < a.top + a.height && b.top + b.height > a.top;
      };

      /***/
    },
    /* 101 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var Item = __webpack_require__(38);

      /**
       * @constructor BoxItem
       * @extends Item
       * @param {Object} data             Object containing parameters start
       *                                  content, className.
       * @param {{toScreen: function, toTime: function}} conversion
       *                                  Conversion functions from time to screen and vice versa
       * @param {Object} [options]        Configuration options
       *                                  // TODO: describe available options
       */
      function BoxItem(data, conversion, options) {
        this.props = {
          dot: {
            width: 0,
            height: 0
          },
          line: {
            width: 0,
            height: 0
          }
        };
        this.options = options;
        // validate data
        if (data) {
          if (data.start == undefined) {
            throw new Error('Property "start" missing in item ' + data);
          }
        }

        Item.call(this, data, conversion, options);
      }

      BoxItem.prototype = new Item(null, null, null);

      /**
       * Check whether this item is visible inside given range
       * @param {{start: number, end: number}} range with a timestamp for start and end
       * @returns {boolean} True if visible
       */
      BoxItem.prototype.isVisible = function (range) {
        // determine visibility
        var isVisible;
        var align = this.options.align;
        var widthInMs = this.width * range.getMillisecondsPerPixel();

        if (align == 'right') {
          isVisible = this.data.start.getTime() > range.start && this.data.start.getTime() - widthInMs < range.end;
        } else if (align == 'left') {
          isVisible = this.data.start.getTime() + widthInMs > range.start && this.data.start.getTime() < range.end;
        } else {
          // default or 'center'
          isVisible = this.data.start.getTime() + widthInMs / 2 > range.start && this.data.start.getTime() - widthInMs / 2 < range.end;
        }
        return isVisible;
      };

      BoxItem.prototype._createDomElement = function () {
        if (!this.dom) {
          // create DOM
          this.dom = {};

          // create main box
          this.dom.box = document.createElement('DIV');

          // contents box (inside the background box). used for making margins
          this.dom.content = document.createElement('DIV');
          this.dom.content.className = 'vis-item-content';
          this.dom.box.appendChild(this.dom.content);

          // line to axis
          this.dom.line = document.createElement('DIV');
          this.dom.line.className = 'vis-line';

          // dot on axis
          this.dom.dot = document.createElement('DIV');
          this.dom.dot.className = 'vis-dot';

          // attach this item as attribute
          this.dom.box['timeline-item'] = this;

          this.dirty = true;
        }
      };

      BoxItem.prototype._appendDomElement = function () {
        if (!this.parent) {
          throw new Error('Cannot redraw item: no parent attached');
        }
        if (!this.dom.box.parentNode) {
          var foreground = this.parent.dom.foreground;
          if (!foreground) throw new Error('Cannot redraw item: parent has no foreground container element');
          foreground.appendChild(this.dom.box);
        }
        if (!this.dom.line.parentNode) {
          var background = this.parent.dom.background;
          if (!background) throw new Error('Cannot redraw item: parent has no background container element');
          background.appendChild(this.dom.line);
        }
        if (!this.dom.dot.parentNode) {
          var axis = this.parent.dom.axis;
          if (!background) throw new Error('Cannot redraw item: parent has no axis container element');
          axis.appendChild(this.dom.dot);
        }
        this.displayed = true;
      };

      BoxItem.prototype._updateDirtyDomComponents = function () {
        // An item is marked dirty when:
        // - the item is not yet rendered
        // - the item's data is changed
        // - the item is selected/deselected
        if (this.dirty) {
          this._updateContents(this.dom.content);
          this._updateDataAttributes(this.dom.box);
          this._updateStyle(this.dom.box);

          var editable = this.editable.updateTime || this.editable.updateGroup;

          // update class
          var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
          this.dom.box.className = 'vis-item vis-box' + className;
          this.dom.line.className = 'vis-item vis-line' + className;
          this.dom.dot.className = 'vis-item vis-dot' + className;
        }
      };

      BoxItem.prototype._getDomComponentsSizes = function () {
        return {
          previous: {
            right: this.dom.box.style.right,
            left: this.dom.box.style.left
          },
          dot: {
            height: this.dom.dot.offsetHeight,
            width: this.dom.dot.offsetWidth
          },
          line: {
            width: this.dom.line.offsetWidth
          },
          box: {
            width: this.dom.box.offsetWidth,
            height: this.dom.box.offsetHeight
          }
        };
      };

      BoxItem.prototype._updateDomComponentsSizes = function (sizes) {
        if (this.options.rtl) {
          this.dom.box.style.right = "0px";
        } else {
          this.dom.box.style.left = "0px";
        }

        // recalculate size
        this.props.dot.height = sizes.dot.height;
        this.props.dot.width = sizes.dot.width;
        this.props.line.width = sizes.line.width;
        this.width = sizes.box.width;
        this.height = sizes.box.height;

        // restore previous position
        if (this.options.rtl) {
          this.dom.box.style.right = sizes.previous.right;
        } else {
          this.dom.box.style.left = sizes.previous.left;
        }

        this.dirty = false;
      };

      BoxItem.prototype._repaintDomAdditionals = function () {
        this._repaintOnItemUpdateTimeTooltip(this.dom.box);
        this._repaintDragCenter();
        this._repaintDeleteButton(this.dom.box);
      };

      /**
       * Repaint the item
       * @param {boolean} [returnQueue=false]  return the queue
       * @return {boolean} the redraw queue if returnQueue=true
       */
      BoxItem.prototype.redraw = function (returnQueue) {
        var sizes;
        var queue = [
        // create item DOM
        this._createDomElement.bind(this),

        // append DOM to parent DOM
        this._appendDomElement.bind(this),

        // update dirty DOM
        this._updateDirtyDomComponents.bind(this), function () {
          if (this.dirty) {
            sizes = this._getDomComponentsSizes();
          }
        }.bind(this), function () {
          if (this.dirty) {
            this._updateDomComponentsSizes.bind(this)(sizes);
          }
        }.bind(this),

        // repaint DOM additionals
        this._repaintDomAdditionals.bind(this)];

        if (returnQueue) {
          return queue;
        } else {
          var result;
          queue.forEach(function (fn) {
            result = fn();
          });
          return result;
        }
      };

      /**
       * Show the item in the DOM (when not already displayed). The items DOM will
       * be created when needed.
       */
      BoxItem.prototype.show = function () {
        if (!this.displayed) {
          this.redraw();
        }
      };

      /**
       * Hide the item from the DOM (when visible)
       */
      BoxItem.prototype.hide = function () {
        if (this.displayed) {
          var dom = this.dom;

          if (dom.box.parentNode) dom.box.parentNode.removeChild(dom.box);
          if (dom.line.parentNode) dom.line.parentNode.removeChild(dom.line);
          if (dom.dot.parentNode) dom.dot.parentNode.removeChild(dom.dot);

          this.displayed = false;
        }
      };

      /**
       * Reposition the item horizontally
       * @Override
       */
      BoxItem.prototype.repositionX = function () {
        var start = this.conversion.toScreen(this.data.start);
        var align = this.options.align;

        // calculate left position of the box
        if (align == 'right') {
          if (this.options.rtl) {
            this.right = start - this.width;

            // reposition box, line, and dot
            this.dom.box.style.right = this.right + 'px';
            this.dom.line.style.right = start - this.props.line.width + 'px';
            this.dom.dot.style.right = start - this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
          } else {
            this.left = start - this.width;

            // reposition box, line, and dot
            this.dom.box.style.left = this.left + 'px';
            this.dom.line.style.left = start - this.props.line.width + 'px';
            this.dom.dot.style.left = start - this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
          }
        } else if (align == 'left') {
          if (this.options.rtl) {
            this.right = start;

            // reposition box, line, and dot
            this.dom.box.style.right = this.right + 'px';
            this.dom.line.style.right = start + 'px';
            this.dom.dot.style.right = start + this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
          } else {
            this.left = start;

            // reposition box, line, and dot
            this.dom.box.style.left = this.left + 'px';
            this.dom.line.style.left = start + 'px';
            this.dom.dot.style.left = start + this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
          }
        } else {
          // default or 'center'
          if (this.options.rtl) {
            this.right = start - this.width / 2;

            // reposition box, line, and dot
            this.dom.box.style.right = this.right + 'px';
            this.dom.line.style.right = start - this.props.line.width + 'px';
            this.dom.dot.style.right = start - this.props.dot.width / 2 + 'px';
          } else {
            this.left = start - this.width / 2;

            // reposition box, line, and dot
            this.dom.box.style.left = this.left + 'px';
            this.dom.line.style.left = start - this.props.line.width / 2 + 'px';
            this.dom.dot.style.left = start - this.props.dot.width / 2 + 'px';
          }
        }
      };

      /**
       * Reposition the item vertically
       * @Override
       */
      BoxItem.prototype.repositionY = function () {
        var orientation = this.options.orientation.item;
        var box = this.dom.box;
        var line = this.dom.line;
        var dot = this.dom.dot;

        if (orientation == 'top') {
          box.style.top = (this.top || 0) + 'px';

          line.style.top = '0';
          line.style.height = this.parent.top + this.top + 1 + 'px';
          line.style.bottom = '';
        } else {
          // orientation 'bottom'
          var itemSetHeight = this.parent.itemSet.props.height; // TODO: this is nasty
          var lineHeight = itemSetHeight - this.parent.top - this.parent.height + this.top;

          box.style.top = (this.parent.height - this.top - this.height || 0) + 'px';
          line.style.top = itemSetHeight - lineHeight + 'px';
          line.style.bottom = '0';
        }

        dot.style.top = -this.props.dot.height / 2 + 'px';
      };

      /**
       * Return the width of the item left from its start date
       * @return {number}
       */
      BoxItem.prototype.getWidthLeft = function () {
        return this.width / 2;
      };

      /**
       * Return the width of the item right from its start date
       * @return {number}
       */
      BoxItem.prototype.getWidthRight = function () {
        return this.width / 2;
      };

      module.exports = BoxItem;

      /***/
    },
    /* 102 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var Item = __webpack_require__(38);

      /**
       * @constructor PointItem
       * @extends Item
       * @param {Object} data             Object containing parameters start
       *                                  content, className.
       * @param {{toScreen: function, toTime: function}} conversion
       *                                  Conversion functions from time to screen and vice versa
       * @param {Object} [options]        Configuration options
       *                                  // TODO: describe available options
       */
      function PointItem(data, conversion, options) {
        this.props = {
          dot: {
            top: 0,
            width: 0,
            height: 0
          },
          content: {
            height: 0,
            marginLeft: 0,
            marginRight: 0
          }
        };
        this.options = options;
        // validate data
        if (data) {
          if (data.start == undefined) {
            throw new Error('Property "start" missing in item ' + data);
          }
        }

        Item.call(this, data, conversion, options);
      }

      PointItem.prototype = new Item(null, null, null);

      /**
       * Check whether this item is visible inside given range
       * @param {{start: number, end: number}} range with a timestamp for start and end
       * @returns {boolean} True if visible
       */
      PointItem.prototype.isVisible = function (range) {
        // determine visibility
        var widthInMs = this.width * range.getMillisecondsPerPixel();

        return this.data.start.getTime() + widthInMs > range.start && this.data.start < range.end;
      };

      PointItem.prototype._createDomElement = function () {
        if (!this.dom) {
          // create DOM
          this.dom = {};

          // background box
          this.dom.point = document.createElement('div');
          // className is updated in redraw()

          // contents box, right from the dot
          this.dom.content = document.createElement('div');
          this.dom.content.className = 'vis-item-content';
          this.dom.point.appendChild(this.dom.content);

          // dot at start
          this.dom.dot = document.createElement('div');
          this.dom.point.appendChild(this.dom.dot);

          // attach this item as attribute
          this.dom.point['timeline-item'] = this;

          this.dirty = true;
        }
      };

      PointItem.prototype._appendDomElement = function () {
        if (!this.parent) {
          throw new Error('Cannot redraw item: no parent attached');
        }
        if (!this.dom.point.parentNode) {
          var foreground = this.parent.dom.foreground;
          if (!foreground) {
            throw new Error('Cannot redraw item: parent has no foreground container element');
          }
          foreground.appendChild(this.dom.point);
        }
        this.displayed = true;
      };

      PointItem.prototype._updateDirtyDomComponents = function () {
        // An item is marked dirty when:
        // - the item is not yet rendered
        // - the item's data is changed
        // - the item is selected/deselected
        if (this.dirty) {
          this._updateContents(this.dom.content);
          this._updateDataAttributes(this.dom.point);
          this._updateStyle(this.dom.point);

          var editable = this.editable.updateTime || this.editable.updateGroup;
          // update class
          var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
          this.dom.point.className = 'vis-item vis-point' + className;
          this.dom.dot.className = 'vis-item vis-dot' + className;
        }
      };

      PointItem.prototype._getDomComponentsSizes = function () {
        return {
          dot: {
            width: this.dom.dot.offsetWidth,
            height: this.dom.dot.offsetHeight
          },
          content: {
            width: this.dom.content.offsetWidth,
            height: this.dom.content.offsetHeight
          },
          point: {
            width: this.dom.point.offsetWidth,
            height: this.dom.point.offsetHeight
          }
        };
      };

      PointItem.prototype._updateDomComponentsSizes = function (sizes) {
        // recalculate size of dot and contents
        this.props.dot.width = sizes.dot.width;
        this.props.dot.height = sizes.dot.height;
        this.props.content.height = sizes.content.height;

        // resize contents
        if (this.options.rtl) {
          this.dom.content.style.marginRight = 2 * this.props.dot.width + 'px';
        } else {
          this.dom.content.style.marginLeft = 2 * this.props.dot.width + 'px';
        }
        //this.dom.content.style.marginRight = ... + 'px'; // TODO: margin right

        // recalculate size
        this.width = sizes.point.width;
        this.height = sizes.point.height;

        // reposition the dot
        this.dom.dot.style.top = (this.height - this.props.dot.height) / 2 + 'px';
        if (this.options.rtl) {
          this.dom.dot.style.right = this.props.dot.width / 2 + 'px';
        } else {
          this.dom.dot.style.left = this.props.dot.width / 2 + 'px';
        }

        this.dirty = false;
      };

      PointItem.prototype._repaintDomAdditionals = function () {
        this._repaintOnItemUpdateTimeTooltip(this.dom.point);
        this._repaintDragCenter();
        this._repaintDeleteButton(this.dom.point);
      };

      /**
       * Repaint the item
       * @param {boolean} [returnQueue=false]  return the queue
       * @return {boolean} the redraw queue if returnQueue=true
       */
      PointItem.prototype.redraw = function (returnQueue) {
        var sizes;
        var queue = [
        // create item DOM
        this._createDomElement.bind(this),

        // append DOM to parent DOM
        this._appendDomElement.bind(this),

        // update dirty DOM
        this._updateDirtyDomComponents.bind(this), function () {
          if (this.dirty) {
            sizes = this._getDomComponentsSizes();
          }
        }.bind(this), function () {
          if (this.dirty) {
            this._updateDomComponentsSizes.bind(this)(sizes);
          }
        }.bind(this),

        // repaint DOM additionals
        this._repaintDomAdditionals.bind(this)];

        if (returnQueue) {
          return queue;
        } else {
          var result;
          queue.forEach(function (fn) {
            result = fn();
          });
          return result;
        }
      };

      /**
       * Show the item in the DOM (when not already visible). The items DOM will
       * be created when needed.
       */
      PointItem.prototype.show = function () {
        if (!this.displayed) {
          this.redraw();
        }
      };

      /**
       * Hide the item from the DOM (when visible)
       */
      PointItem.prototype.hide = function () {
        if (this.displayed) {
          if (this.dom.point.parentNode) {
            this.dom.point.parentNode.removeChild(this.dom.point);
          }

          this.displayed = false;
        }
      };

      /**
       * Reposition the item horizontally
       * @Override
       */
      PointItem.prototype.repositionX = function () {
        var start = this.conversion.toScreen(this.data.start);

        if (this.options.rtl) {
          this.right = start - this.props.dot.width;

          // reposition point
          this.dom.point.style.right = this.right + 'px';
        } else {
          this.left = start - this.props.dot.width;

          // reposition point
          this.dom.point.style.left = this.left + 'px';
        }
      };

      /**
       * Reposition the item vertically
       * @Override
       */
      PointItem.prototype.repositionY = function () {
        var orientation = this.options.orientation.item;
        var point = this.dom.point;
        if (orientation == 'top') {
          point.style.top = this.top + 'px';
        } else {
          point.style.top = this.parent.height - this.top - this.height + 'px';
        }
      };

      /**
       * Return the width of the item left from its start date
       * @return {number}
       */
      PointItem.prototype.getWidthLeft = function () {
        return this.props.dot.width;
      };

      /**
       * Return the width of the item right from  its start date
       * @return {number}
       */
      PointItem.prototype.getWidthRight = function () {
        return this.props.dot.width;
      };

      module.exports = PointItem;

      /***/
    },
    /* 103 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var Item = __webpack_require__(38);
      var BackgroundGroup = __webpack_require__(69);
      var RangeItem = __webpack_require__(70);

      /**
       * @constructor BackgroundItem
       * @extends Item
       * @param {Object} data             Object containing parameters start, end
       *                                  content, className.
       * @param {{toScreen: function, toTime: function}} conversion
       *                                  Conversion functions from time to screen and vice versa
       * @param {Object} [options]        Configuration options
       *                                  // TODO: describe options
       * // TODO: implement support for the BackgroundItem just having a start, then being displayed as a sort of an annotation
       */
      function BackgroundItem(data, conversion, options) {
        this.props = {
          content: {
            width: 0
          }
        };
        this.overflow = false; // if contents can overflow (css styling), this flag is set to true

        // validate data
        if (data) {
          if (data.start == undefined) {
            throw new Error('Property "start" missing in item ' + data.id);
          }
          if (data.end == undefined) {
            throw new Error('Property "end" missing in item ' + data.id);
          }
        }

        Item.call(this, data, conversion, options);
      }

      BackgroundItem.prototype = new Item(null, null, null);

      BackgroundItem.prototype.baseClassName = 'vis-item vis-background';

      BackgroundItem.prototype.stack = false;

      /**
       * Check whether this item is visible inside given range
       * @param {vis.Range} range with a timestamp for start and end
       * @returns {boolean} True if visible
       */
      BackgroundItem.prototype.isVisible = function (range) {
        // determine visibility
        return this.data.start < range.end && this.data.end > range.start;
      };

      BackgroundItem.prototype._createDomElement = function () {
        if (!this.dom) {
          // create DOM
          this.dom = {};

          // background box
          this.dom.box = document.createElement('div');
          // className is updated in redraw()

          // frame box (to prevent the item contents from overflowing
          this.dom.frame = document.createElement('div');
          this.dom.frame.className = 'vis-item-overflow';
          this.dom.box.appendChild(this.dom.frame);

          // contents box
          this.dom.content = document.createElement('div');
          this.dom.content.className = 'vis-item-content';
          this.dom.frame.appendChild(this.dom.content);

          // Note: we do NOT attach this item as attribute to the DOM,
          //       such that background items cannot be selected
          //this.dom.box['timeline-item'] = this;

          this.dirty = true;
        }
      };

      BackgroundItem.prototype._appendDomElement = function () {
        if (!this.parent) {
          throw new Error('Cannot redraw item: no parent attached');
        }
        if (!this.dom.box.parentNode) {
          var background = this.parent.dom.background;
          if (!background) {
            throw new Error('Cannot redraw item: parent has no background container element');
          }
          background.appendChild(this.dom.box);
        }
        this.displayed = true;
      };

      BackgroundItem.prototype._updateDirtyDomComponents = function () {
        // update dirty DOM. An item is marked dirty when:
        // - the item is not yet rendered
        // - the item's data is changed
        // - the item is selected/deselected
        if (this.dirty) {
          this._updateContents(this.dom.content);
          this._updateDataAttributes(this.dom.content);
          this._updateStyle(this.dom.box);

          // update class
          var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '');
          this.dom.box.className = this.baseClassName + className;
        }
      };

      BackgroundItem.prototype._getDomComponentsSizes = function () {
        // determine from css whether this box has overflow
        this.overflow = window.getComputedStyle(this.dom.content).overflow !== 'hidden';
        return {
          content: {
            width: this.dom.content.offsetWidth
          }
        };
      };

      BackgroundItem.prototype._updateDomComponentsSizes = function (sizes) {
        // recalculate size
        this.props.content.width = sizes.content.width;
        this.height = 0; // set height zero, so this item will be ignored when stacking items

        this.dirty = false;
      };

      BackgroundItem.prototype._repaintDomAdditionals = function () {};

      /**
       * Repaint the item
       * @param {boolean} [returnQueue=false]  return the queue
       * @return {boolean} the redraw result or the redraw queue if returnQueue=true
       */
      BackgroundItem.prototype.redraw = function (returnQueue) {
        var sizes;
        var queue = [
        // create item DOM
        this._createDomElement.bind(this),

        // append DOM to parent DOM
        this._appendDomElement.bind(this), this._updateDirtyDomComponents.bind(this), function () {
          if (this.dirty) {
            sizes = this._getDomComponentsSizes.bind(this)();
          }
        }.bind(this), function () {
          if (this.dirty) {
            this._updateDomComponentsSizes.bind(this)(sizes);
          }
        }.bind(this),

        // repaint DOM additionals
        this._repaintDomAdditionals.bind(this)];

        if (returnQueue) {
          return queue;
        } else {
          var result;
          queue.forEach(function (fn) {
            result = fn();
          });
          return result;
        }
      };

      /**
       * Show the item in the DOM (when not already visible). The items DOM will
       * be created when needed.
       */
      BackgroundItem.prototype.show = RangeItem.prototype.show;

      /**
       * Hide the item from the DOM (when visible)
       * @return {Boolean} changed
       */
      BackgroundItem.prototype.hide = RangeItem.prototype.hide;

      /**
       * Reposition the item horizontally
       * @Override
       */
      BackgroundItem.prototype.repositionX = RangeItem.prototype.repositionX;

      /**
       * Reposition the item vertically
       * @Override
       */
      BackgroundItem.prototype.repositionY = function (margin) {
        // eslint-disable-line no-unused-vars
        var height;
        var orientation = this.options.orientation.item;

        // special positioning for subgroups
        if (this.data.subgroup !== undefined) {
          // TODO: instead of calculating the top position of the subgroups here for every BackgroundItem, calculate the top of the subgroup once in Itemset
          var itemSubgroup = this.data.subgroup;

          this.dom.box.style.height = this.parent.subgroups[itemSubgroup].height + 'px';

          if (orientation == 'top') {
            this.dom.box.style.top = this.parent.top + this.parent.subgroups[itemSubgroup].top + 'px';
          } else {
            this.dom.box.style.top = this.parent.top + this.parent.height - this.parent.subgroups[itemSubgroup].top - this.parent.subgroups[itemSubgroup].height + 'px';
          }
          this.dom.box.style.bottom = '';
        }
        // and in the case of no subgroups:
        else {
            // we want backgrounds with groups to only show in groups.
            if (this.parent instanceof BackgroundGroup) {
              // if the item is not in a group:
              height = Math.max(this.parent.height, this.parent.itemSet.body.domProps.center.height, this.parent.itemSet.body.domProps.centerContainer.height);
              this.dom.box.style.bottom = orientation == 'bottom' ? '0' : '';
              this.dom.box.style.top = orientation == 'top' ? '0' : '';
            } else {
              height = this.parent.height;
              // same alignment for items when orientation is top or bottom
              this.dom.box.style.top = this.parent.top + 'px';
              this.dom.box.style.bottom = '';
            }
          }
        this.dom.box.style.height = height + 'px';
      };

      module.exports = BackgroundItem;

      /***/
    },
    /* 104 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * Popup is a class to create a popup window with some text
       */
      var Popup = function () {
        /**
         * @param {Element} container       The container object.
         * @param {string}  overflowMethod  How the popup should act to overflowing ('flip' or 'cap')
         */
        function Popup(container, overflowMethod) {
          (0, _classCallCheck3['default'])(this, Popup);

          this.container = container;
          this.overflowMethod = overflowMethod || 'cap';

          this.x = 0;
          this.y = 0;
          this.padding = 5;
          this.hidden = false;

          // create the frame
          this.frame = document.createElement('div');
          this.frame.className = 'vis-tooltip';
          this.container.appendChild(this.frame);
        }

        /**
         * @param {number} x   Horizontal position of the popup window
         * @param {number} y   Vertical position of the popup window
         */

        (0, _createClass3['default'])(Popup, [{
          key: 'setPosition',
          value: function setPosition(x, y) {
            this.x = parseInt(x);
            this.y = parseInt(y);
          }

          /**
           * Set the content for the popup window. This can be HTML code or text.
           * @param {string | Element} content
           */

        }, {
          key: 'setText',
          value: function setText(content) {
            if (content instanceof Element) {
              this.frame.innerHTML = '';
              this.frame.appendChild(content);
            } else {
              this.frame.innerHTML = content; // string containing text or HTML
            }
          }

          /**
           * Show the popup window
           * @param {boolean} [doShow]    Show or hide the window
           */

        }, {
          key: 'show',
          value: function show(doShow) {
            if (doShow === undefined) {
              doShow = true;
            }

            if (doShow === true) {
              var height = this.frame.clientHeight;
              var width = this.frame.clientWidth;
              var maxHeight = this.frame.parentNode.clientHeight;
              var maxWidth = this.frame.parentNode.clientWidth;

              var left = 0,
                  top = 0;

              if (this.overflowMethod == 'flip') {
                var isLeft = false,
                    isTop = true; // Where around the position it's located

                if (this.y - height < this.padding) {
                  isTop = false;
                }

                if (this.x + width > maxWidth - this.padding) {
                  isLeft = true;
                }

                if (isLeft) {
                  left = this.x - width;
                } else {
                  left = this.x;
                }

                if (isTop) {
                  top = this.y - height;
                } else {
                  top = this.y;
                }
              } else {
                top = this.y - height;
                if (top + height + this.padding > maxHeight) {
                  top = maxHeight - height - this.padding;
                }
                if (top < this.padding) {
                  top = this.padding;
                }

                left = this.x;
                if (left + width + this.padding > maxWidth) {
                  left = maxWidth - width - this.padding;
                }
                if (left < this.padding) {
                  left = this.padding;
                }
              }

              this.frame.style.left = left + "px";
              this.frame.style.top = top + "px";
              this.frame.style.visibility = "visible";
              this.hidden = false;
            } else {
              this.hide();
            }
          }

          /**
           * Hide the popup window
           */

        }, {
          key: 'hide',
          value: function hide() {
            this.hidden = true;
            this.frame.style.left = "0";
            this.frame.style.top = "0";
            this.frame.style.visibility = "hidden";
          }

          /**
           * Remove the popup window
           */

        }, {
          key: 'destroy',
          value: function destroy() {
            this.frame.parentNode.removeChild(this.frame); // Remove element from DOM
          }
        }]);
        return Popup;
      }();

      exports['default'] = Popup;

      /***/
    },
    /* 105 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /**
       * This object contains all possible options. It will check if the types are correct, if required if the option is one
       * of the allowed values.
       *
       * __any__ means that the name of the property does not matter.
       * __type__ is a required field for all objects and contains the allowed types of all objects
       */
      var string = 'string';
      var bool = 'boolean';
      var number = 'number';
      var array = 'array';
      var date = 'date';
      var object = 'object'; // should only be in a __type__ property
      var dom = 'dom';
      var moment = 'moment';
      var any = 'any';

      var allOptions = {
        configure: {
          enabled: { 'boolean': bool },
          filter: { 'boolean': bool, 'function': 'function' },
          container: { dom: dom },
          __type__: { object: object, 'boolean': bool, 'function': 'function' }
        },

        //globals :
        align: { string: string },
        rtl: { 'boolean': bool, 'undefined': 'undefined' },
        rollingMode: {
          follow: { 'boolean': bool },
          offset: { number: number, 'undefined': 'undefined' },
          __type__: { object: object }
        },
        verticalScroll: { 'boolean': bool, 'undefined': 'undefined' },
        horizontalScroll: { 'boolean': bool, 'undefined': 'undefined' },
        autoResize: { 'boolean': bool },
        throttleRedraw: { number: number }, // TODO: DEPRICATED see https://github.com/almende/vis/issues/2511
        clickToUse: { 'boolean': bool },
        dataAttributes: { string: string, array: array },
        editable: {
          add: { 'boolean': bool, 'undefined': 'undefined' },
          remove: { 'boolean': bool, 'undefined': 'undefined' },
          updateGroup: { 'boolean': bool, 'undefined': 'undefined' },
          updateTime: { 'boolean': bool, 'undefined': 'undefined' },
          overrideItems: { 'boolean': bool, 'undefined': 'undefined' },
          __type__: { 'boolean': bool, object: object }
        },
        end: { number: number, date: date, string: string, moment: moment },
        format: {
          minorLabels: {
            millisecond: { string: string, 'undefined': 'undefined' },
            second: { string: string, 'undefined': 'undefined' },
            minute: { string: string, 'undefined': 'undefined' },
            hour: { string: string, 'undefined': 'undefined' },
            weekday: { string: string, 'undefined': 'undefined' },
            day: { string: string, 'undefined': 'undefined' },
            week: { string: string, 'undefined': 'undefined' },
            month: { string: string, 'undefined': 'undefined' },
            year: { string: string, 'undefined': 'undefined' },
            __type__: { object: object, 'function': 'function' }
          },
          majorLabels: {
            millisecond: { string: string, 'undefined': 'undefined' },
            second: { string: string, 'undefined': 'undefined' },
            minute: { string: string, 'undefined': 'undefined' },
            hour: { string: string, 'undefined': 'undefined' },
            weekday: { string: string, 'undefined': 'undefined' },
            day: { string: string, 'undefined': 'undefined' },
            week: { string: string, 'undefined': 'undefined' },
            month: { string: string, 'undefined': 'undefined' },
            year: { string: string, 'undefined': 'undefined' },
            __type__: { object: object, 'function': 'function' }
          },
          __type__: { object: object }
        },
        moment: { 'function': 'function' },
        groupOrder: { string: string, 'function': 'function' },
        groupEditable: {
          add: { 'boolean': bool, 'undefined': 'undefined' },
          remove: { 'boolean': bool, 'undefined': 'undefined' },
          order: { 'boolean': bool, 'undefined': 'undefined' },
          __type__: { 'boolean': bool, object: object }
        },
        groupOrderSwap: { 'function': 'function' },
        height: { string: string, number: number },
        hiddenDates: {
          start: { date: date, number: number, string: string, moment: moment },
          end: { date: date, number: number, string: string, moment: moment },
          repeat: { string: string },
          __type__: { object: object, array: array }
        },
        itemsAlwaysDraggable: {
          item: { 'boolean': bool, 'undefined': 'undefined' },
          range: { 'boolean': bool, 'undefined': 'undefined' },
          __type__: { 'boolean': bool, object: object }
        },
        limitSize: { 'boolean': bool },
        locale: { string: string },
        locales: {
          __any__: { any: any },
          __type__: { object: object }
        },
        margin: {
          axis: { number: number },
          item: {
            horizontal: { number: number, 'undefined': 'undefined' },
            vertical: { number: number, 'undefined': 'undefined' },
            __type__: { object: object, number: number }
          },
          __type__: { object: object, number: number }
        },
        max: { date: date, number: number, string: string, moment: moment },
        maxHeight: { number: number, string: string },
        maxMinorChars: { number: number },
        min: { date: date, number: number, string: string, moment: moment },
        minHeight: { number: number, string: string },
        moveable: { 'boolean': bool },
        multiselect: { 'boolean': bool },
        multiselectPerGroup: { 'boolean': bool },
        onAdd: { 'function': 'function' },
        onDropObjectOnItem: { 'function': 'function' },
        onUpdate: { 'function': 'function' },
        onMove: { 'function': 'function' },
        onMoving: { 'function': 'function' },
        onRemove: { 'function': 'function' },
        onAddGroup: { 'function': 'function' },
        onMoveGroup: { 'function': 'function' },
        onRemoveGroup: { 'function': 'function' },
        onInitialDrawComplete: { 'function': 'function' },
        order: { 'function': 'function' },
        orientation: {
          axis: { string: string, 'undefined': 'undefined' },
          item: { string: string, 'undefined': 'undefined' },
          __type__: { string: string, object: object }
        },
        selectable: { 'boolean': bool },
        showCurrentTime: { 'boolean': bool },
        showMajorLabels: { 'boolean': bool },
        showMinorLabels: { 'boolean': bool },
        stack: { 'boolean': bool },
        stackSubgroups: { 'boolean': bool },
        snap: { 'function': 'function', 'null': 'null' },
        start: { date: date, number: number, string: string, moment: moment },
        template: { 'function': 'function' },
        groupTemplate: { 'function': 'function' },
        visibleFrameTemplate: { string: string, 'function': 'function' },
        showTooltips: { 'boolean': bool },
        tooltip: {
          followMouse: { 'boolean': bool },
          overflowMethod: { 'string': ['cap', 'flip'] },
          __type__: { object: object }
        },
        tooltipOnItemUpdateTime: {
          template: { 'function': 'function' },
          __type__: { 'boolean': bool, object: object }
        },
        timeAxis: {
          scale: { string: string, 'undefined': 'undefined' },
          step: { number: number, 'undefined': 'undefined' },
          __type__: { object: object }
        },
        type: { string: string },
        width: { string: string, number: number },
        zoomable: { 'boolean': bool },
        zoomKey: { string: ['ctrlKey', 'altKey', 'metaKey', ''] },
        zoomMax: { number: number },
        zoomMin: { number: number },

        __type__: { object: object }
      };

      var configureOptions = {
        global: {
          align: ['center', 'left', 'right'],
          direction: false,
          autoResize: true,
          clickToUse: false,
          // dataAttributes: ['all'], // FIXME: can be 'all' or string[]
          editable: {
            add: false,
            remove: false,
            updateGroup: false,
            updateTime: false
          },
          end: '',
          format: {
            minorLabels: {
              millisecond: 'SSS',
              second: 's',
              minute: 'HH:mm',
              hour: 'HH:mm',
              weekday: 'ddd D',
              day: 'D',
              week: 'w',
              month: 'MMM',
              year: 'YYYY'
            },
            majorLabels: {
              millisecond: 'HH:mm:ss',
              second: 'D MMMM HH:mm',
              minute: 'ddd D MMMM',
              hour: 'ddd D MMMM',
              weekday: 'MMMM YYYY',
              day: 'MMMM YYYY',
              week: 'MMMM YYYY',
              month: 'YYYY',
              year: ''
            }
          },

          //groupOrder: {string, 'function': 'function'},
          groupsDraggable: false,
          height: '',
          //hiddenDates: {object, array},
          locale: '',
          margin: {
            axis: [20, 0, 100, 1],
            item: {
              horizontal: [10, 0, 100, 1],
              vertical: [10, 0, 100, 1]
            }
          },
          max: '',
          maxHeight: '',
          maxMinorChars: [7, 0, 20, 1],
          min: '',
          minHeight: '',
          moveable: false,
          multiselect: false,
          multiselectPerGroup: false,
          //onAdd: {'function': 'function'},
          //onUpdate: {'function': 'function'},
          //onMove: {'function': 'function'},
          //onMoving: {'function': 'function'},
          //onRename: {'function': 'function'},
          //order: {'function': 'function'},
          orientation: {
            axis: ['both', 'bottom', 'top'],
            item: ['bottom', 'top']
          },
          selectable: true,
          showCurrentTime: false,
          showMajorLabels: true,
          showMinorLabels: true,
          stack: true,
          stackSubgroups: true,
          //snap: {'function': 'function', nada},
          start: '',
          //template: {'function': 'function'},
          //timeAxis: {
          //  scale: ['millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'year'],
          //  step: [1, 1, 10, 1]
          //},
          showTooltips: true,
          tooltip: {
            followMouse: false,
            overflowMethod: 'flip'
          },
          tooltipOnItemUpdateTime: false,
          type: ['box', 'point', 'range', 'background'],
          width: '100%',
          zoomable: true,
          zoomKey: ['ctrlKey', 'altKey', 'metaKey', ''],
          zoomMax: [315360000000000, 10, 315360000000000, 1],
          zoomMin: [10, 10, 315360000000000, 1]
        }
      };

      exports.allOptions = allOptions;
      exports.configureOptions = configureOptions;

      /***/
    },
    /* 106 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var DOMutil = __webpack_require__(14);
      var DataSet = __webpack_require__(11);
      var DataView = __webpack_require__(12);
      var Component = __webpack_require__(16);
      var DataAxis = __webpack_require__(107);
      var GraphGroup = __webpack_require__(109);
      var Legend = __webpack_require__(112);
      var Bars = __webpack_require__(110);
      var Lines = __webpack_require__(111);
      var Points = __webpack_require__(72);

      var UNGROUPED = '__ungrouped__'; // reserved group id for ungrouped items

      /**
       * This is the constructor of the LineGraph. It requires a Timeline body and options.
       *
       * @param {vis.Timeline.body} body
       * @param {Object} options
       * @constructor LineGraph
       * @extends Component
       */
      function LineGraph(body, options) {
        this.id = util.randomUUID();
        this.body = body;

        this.defaultOptions = {
          yAxisOrientation: 'left',
          defaultGroup: 'default',
          sort: true,
          sampling: true,
          stack: false,
          graphHeight: '400px',
          shaded: {
            enabled: false,
            orientation: 'bottom' // top, bottom, zero
          },
          style: 'line', // line, bar
          barChart: {
            width: 50,
            sideBySide: false,
            align: 'center' // left, center, right
          },
          interpolation: {
            enabled: true,
            parametrization: 'centripetal', // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
            alpha: 0.5
          },
          drawPoints: {
            enabled: true,
            size: 6,
            style: 'square' // square, circle
          },
          dataAxis: {}, //Defaults are done on DataAxis level
          legend: {}, //Defaults are done on Legend level
          groups: {
            visibility: {}
          }
        };

        // options is shared by this lineGraph and all its items
        this.options = util.extend({}, this.defaultOptions);
        this.dom = {};
        this.props = {};
        this.hammer = null;
        this.groups = {};
        this.abortedGraphUpdate = false;
        this.updateSVGheight = false;
        this.updateSVGheightOnResize = false;
        this.forceGraphUpdate = true;

        var me = this;
        this.itemsData = null; // DataSet
        this.groupsData = null; // DataSet

        // listeners for the DataSet of the items
        this.itemListeners = {
          'add': function add(event, params, senderId) {
            // eslint-disable-line no-unused-vars
            me._onAdd(params.items);
          },
          'update': function update(event, params, senderId) {
            // eslint-disable-line no-unused-vars
            me._onUpdate(params.items);
          },
          'remove': function remove(event, params, senderId) {
            // eslint-disable-line no-unused-vars
            me._onRemove(params.items);
          }
        };

        // listeners for the DataSet of the groups
        this.groupListeners = {
          'add': function add(event, params, senderId) {
            // eslint-disable-line no-unused-vars
            me._onAddGroups(params.items);
          },
          'update': function update(event, params, senderId) {
            // eslint-disable-line no-unused-vars
            me._onUpdateGroups(params.items);
          },
          'remove': function remove(event, params, senderId) {
            // eslint-disable-line no-unused-vars
            me._onRemoveGroups(params.items);
          }
        };

        this.items = {}; // object with an Item for every data item
        this.selection = []; // list with the ids of all selected nodes
        this.lastStart = this.body.range.start;
        this.touchParams = {}; // stores properties while dragging

        this.svgElements = {};
        this.setOptions(options);
        this.groupsUsingDefaultStyles = [0];
        this.body.emitter.on('rangechanged', function () {
          me.lastStart = me.body.range.start;
          me.svg.style.left = util.option.asSize(-me.props.width);

          me.forceGraphUpdate = true;
          //Is this local redraw necessary? (Core also does a change event!)
          me.redraw.call(me);
        });

        // create the HTML DOM
        this._create();
        this.framework = { svg: this.svg, svgElements: this.svgElements, options: this.options, groups: this.groups };
      }

      LineGraph.prototype = new Component();

      /**
       * Create the HTML DOM for the ItemSet
       */
      LineGraph.prototype._create = function () {
        var frame = document.createElement('div');
        frame.className = 'vis-line-graph';
        this.dom.frame = frame;

        // create svg element for graph drawing.
        this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        this.svg.style.position = 'relative';
        this.svg.style.height = ('' + this.options.graphHeight).replace('px', '') + 'px';
        this.svg.style.display = 'block';
        frame.appendChild(this.svg);

        // data axis
        this.options.dataAxis.orientation = 'left';
        this.yAxisLeft = new DataAxis(this.body, this.options.dataAxis, this.svg, this.options.groups);

        this.options.dataAxis.orientation = 'right';
        this.yAxisRight = new DataAxis(this.body, this.options.dataAxis, this.svg, this.options.groups);
        delete this.options.dataAxis.orientation;

        // legends
        this.legendLeft = new Legend(this.body, this.options.legend, 'left', this.options.groups);
        this.legendRight = new Legend(this.body, this.options.legend, 'right', this.options.groups);

        this.show();
      };

      /**
       * set the options of the LineGraph. the mergeOptions is used for subObjects that have an enabled element.
       * @param {object} options
       */
      LineGraph.prototype.setOptions = function (options) {
        if (options) {
          var fields = ['sampling', 'defaultGroup', 'stack', 'height', 'graphHeight', 'yAxisOrientation', 'style', 'barChart', 'dataAxis', 'sort', 'groups'];
          if (options.graphHeight === undefined && options.height !== undefined) {
            this.updateSVGheight = true;
            this.updateSVGheightOnResize = true;
          } else if (this.body.domProps.centerContainer.height !== undefined && options.graphHeight !== undefined) {
            if (parseInt((options.graphHeight + '').replace("px", '')) < this.body.domProps.centerContainer.height) {
              this.updateSVGheight = true;
            }
          }
          util.selectiveDeepExtend(fields, this.options, options);
          util.mergeOptions(this.options, options, 'interpolation');
          util.mergeOptions(this.options, options, 'drawPoints');
          util.mergeOptions(this.options, options, 'shaded');
          util.mergeOptions(this.options, options, 'legend');

          if (options.interpolation) {
            if ((0, _typeof3['default'])(options.interpolation) == 'object') {
              if (options.interpolation.parametrization) {
                if (options.interpolation.parametrization == 'uniform') {
                  this.options.interpolation.alpha = 0;
                } else if (options.interpolation.parametrization == 'chordal') {
                  this.options.interpolation.alpha = 1.0;
                } else {
                  this.options.interpolation.parametrization = 'centripetal';
                  this.options.interpolation.alpha = 0.5;
                }
              }
            }
          }

          if (this.yAxisLeft) {
            if (options.dataAxis !== undefined) {
              this.yAxisLeft.setOptions(this.options.dataAxis);
              this.yAxisRight.setOptions(this.options.dataAxis);
            }
          }

          if (this.legendLeft) {
            if (options.legend !== undefined) {
              this.legendLeft.setOptions(this.options.legend);
              this.legendRight.setOptions(this.options.legend);
            }
          }

          if (this.groups.hasOwnProperty(UNGROUPED)) {
            this.groups[UNGROUPED].setOptions(options);
          }
        }

        // this is used to redraw the graph if the visibility of the groups is changed.
        if (this.dom.frame) {
          //not on initial run?
          this.forceGraphUpdate = true;
          this.body.emitter.emit("_change", { queue: true });
        }
      };

      /**
       * Hide the component from the DOM
       */
      LineGraph.prototype.hide = function () {
        // remove the frame containing the items
        if (this.dom.frame.parentNode) {
          this.dom.frame.parentNode.removeChild(this.dom.frame);
        }
      };

      /**
       * Show the component in the DOM (when not already visible).
       */
      LineGraph.prototype.show = function () {
        // show frame containing the items
        if (!this.dom.frame.parentNode) {
          this.body.dom.center.appendChild(this.dom.frame);
        }
      };

      /**
       * Set items
       * @param {vis.DataSet | null} items
       */
      LineGraph.prototype.setItems = function (items) {
        var me = this,
            ids,
            oldItemsData = this.itemsData;

        // replace the dataset
        if (!items) {
          this.itemsData = null;
        } else if (items instanceof DataSet || items instanceof DataView) {
          this.itemsData = items;
        } else {
          throw new TypeError('Data must be an instance of DataSet or DataView');
        }

        if (oldItemsData) {
          // unsubscribe from old dataset
          util.forEach(this.itemListeners, function (callback, event) {
            oldItemsData.off(event, callback);
          });

          // remove all drawn items
          ids = oldItemsData.getIds();
          this._onRemove(ids);
        }

        if (this.itemsData) {
          // subscribe to new dataset
          var id = this.id;
          util.forEach(this.itemListeners, function (callback, event) {
            me.itemsData.on(event, callback, id);
          });

          // add all new items
          ids = this.itemsData.getIds();
          this._onAdd(ids);
        }
      };

      /**
       * Set groups
       * @param {vis.DataSet} groups
       */
      LineGraph.prototype.setGroups = function (groups) {
        var me = this;
        var ids;

        // unsubscribe from current dataset
        if (this.groupsData) {
          util.forEach(this.groupListeners, function (callback, event) {
            me.groupsData.off(event, callback);
          });

          // remove all drawn groups
          ids = this.groupsData.getIds();
          this.groupsData = null;
          for (var i = 0; i < ids.length; i++) {
            this._removeGroup(ids[i]);
          }
        }

        // replace the dataset
        if (!groups) {
          this.groupsData = null;
        } else if (groups instanceof DataSet || groups instanceof DataView) {
          this.groupsData = groups;
        } else {
          throw new TypeError('Data must be an instance of DataSet or DataView');
        }

        if (this.groupsData) {
          // subscribe to new dataset
          var id = this.id;
          util.forEach(this.groupListeners, function (callback, event) {
            me.groupsData.on(event, callback, id);
          });

          // draw all ms
          ids = this.groupsData.getIds();
          this._onAddGroups(ids);
        }
      };

      LineGraph.prototype._onUpdate = function (ids) {
        this._updateAllGroupData(ids);
      };
      LineGraph.prototype._onAdd = function (ids) {
        this._onUpdate(ids);
      };
      LineGraph.prototype._onRemove = function (ids) {
        this._onUpdate(ids);
      };
      LineGraph.prototype._onUpdateGroups = function (groupIds) {
        this._updateAllGroupData(null, groupIds);
      };
      LineGraph.prototype._onAddGroups = function (groupIds) {
        this._onUpdateGroups(groupIds);
      };

      /**
       * this cleans the group out off the legends and the dataaxis, updates the ungrouped and updates the graph
       * @param {Array} groupIds
       * @private
       */
      LineGraph.prototype._onRemoveGroups = function (groupIds) {
        for (var i = 0; i < groupIds.length; i++) {
          this._removeGroup(groupIds[i]);
        }
        this.forceGraphUpdate = true;
        this.body.emitter.emit("_change", { queue: true });
      };

      /**
       * this cleans the group out off the legends and the dataaxis
       * @param {vis.GraphGroup.id} groupId
       * @private
       */
      LineGraph.prototype._removeGroup = function (groupId) {
        if (this.groups.hasOwnProperty(groupId)) {
          if (this.groups[groupId].options.yAxisOrientation == 'right') {
            this.yAxisRight.removeGroup(groupId);
            this.legendRight.removeGroup(groupId);
            this.legendRight.redraw();
          } else {
            this.yAxisLeft.removeGroup(groupId);
            this.legendLeft.removeGroup(groupId);
            this.legendLeft.redraw();
          }
          delete this.groups[groupId];
        }
      };

      /**
       * update a group object with the group dataset entree
       *
       * @param {vis.GraphGroup} group
       * @param {vis.GraphGroup.id} groupId
       * @private
       */
      LineGraph.prototype._updateGroup = function (group, groupId) {
        if (!this.groups.hasOwnProperty(groupId)) {
          this.groups[groupId] = new GraphGroup(group, groupId, this.options, this.groupsUsingDefaultStyles);
          if (this.groups[groupId].options.yAxisOrientation == 'right') {
            this.yAxisRight.addGroup(groupId, this.groups[groupId]);
            this.legendRight.addGroup(groupId, this.groups[groupId]);
          } else {
            this.yAxisLeft.addGroup(groupId, this.groups[groupId]);
            this.legendLeft.addGroup(groupId, this.groups[groupId]);
          }
        } else {
          this.groups[groupId].update(group);
          if (this.groups[groupId].options.yAxisOrientation == 'right') {
            this.yAxisRight.updateGroup(groupId, this.groups[groupId]);
            this.legendRight.updateGroup(groupId, this.groups[groupId]);
            //If yAxisOrientation changed, clean out the group from the other axis.
            this.yAxisLeft.removeGroup(groupId);
            this.legendLeft.removeGroup(groupId);
          } else {
            this.yAxisLeft.updateGroup(groupId, this.groups[groupId]);
            this.legendLeft.updateGroup(groupId, this.groups[groupId]);
            //If yAxisOrientation changed, clean out the group from the other axis.
            this.yAxisRight.removeGroup(groupId);
            this.legendRight.removeGroup(groupId);
          }
        }
        this.legendLeft.redraw();
        this.legendRight.redraw();
      };

      /**
       * this updates all groups, it is used when there is an update the the itemset.
       *
       * @param  {Array} ids
       * @param  {Array} groupIds
       * @private
       */
      LineGraph.prototype._updateAllGroupData = function (ids, groupIds) {
        if (this.itemsData != null) {
          var groupsContent = {};
          var items = this.itemsData.get();
          var fieldId = this.itemsData._fieldId;
          var idMap = {};
          if (ids) {
            ids.map(function (id) {
              idMap[id] = id;
            });
          }

          //pre-Determine array sizes, for more efficient memory claim
          var groupCounts = {};
          for (var i = 0; i < items.length; i++) {
            var item = items[i];
            var groupId = item.group;
            if (groupId === null || groupId === undefined) {
              groupId = UNGROUPED;
            }
            groupCounts.hasOwnProperty(groupId) ? groupCounts[groupId]++ : groupCounts[groupId] = 1;
          }

          //Pre-load arrays from existing groups if items are not changed (not in ids)
          var existingItemsMap = {};
          if (!groupIds && ids) {
            for (groupId in this.groups) {
              if (this.groups.hasOwnProperty(groupId)) {
                group = this.groups[groupId];
                var existing_items = group.getItems();

                groupsContent[groupId] = existing_items.filter(function (item) {
                  existingItemsMap[item[fieldId]] = item[fieldId];
                  return item[fieldId] !== idMap[item[fieldId]];
                });
                var newLength = groupCounts[groupId];
                groupCounts[groupId] -= groupsContent[groupId].length;
                if (groupsContent[groupId].length < newLength) {
                  groupsContent[groupId][newLength - 1] = {};
                }
              }
            }
          }

          //Now insert data into the arrays.
          for (i = 0; i < items.length; i++) {
            item = items[i];
            groupId = item.group;
            if (groupId === null || groupId === undefined) {
              groupId = UNGROUPED;
            }
            if (!groupIds && ids && item[fieldId] !== idMap[item[fieldId]] && existingItemsMap.hasOwnProperty(item[fieldId])) {
              continue;
            }
            if (!groupsContent.hasOwnProperty(groupId)) {
              groupsContent[groupId] = new Array(groupCounts[groupId]);
            }
            //Copy data (because of unmodifiable DataView input.
            var extended = util.bridgeObject(item);
            extended.x = util.convert(item.x, 'Date');
            extended.end = util.convert(item.end, 'Date');
            extended.orginalY = item.y; //real Y
            extended.y = Number(item.y);
            extended[fieldId] = item[fieldId];

            var index = groupsContent[groupId].length - groupCounts[groupId]--;
            groupsContent[groupId][index] = extended;
          }

          //Make sure all groups are present, to allow removal of old groups
          for (groupId in this.groups) {
            if (this.groups.hasOwnProperty(groupId)) {
              if (!groupsContent.hasOwnProperty(groupId)) {
                groupsContent[groupId] = new Array(0);
              }
            }
          }

          //Update legendas, style and axis
          for (groupId in groupsContent) {
            if (groupsContent.hasOwnProperty(groupId)) {
              if (groupsContent[groupId].length == 0) {
                if (this.groups.hasOwnProperty(groupId)) {
                  this._removeGroup(groupId);
                }
              } else {
                var group = undefined;
                if (this.groupsData != undefined) {
                  group = this.groupsData.get(groupId);
                }
                if (group == undefined) {
                  group = { id: groupId, content: this.options.defaultGroup + groupId };
                }
                this._updateGroup(group, groupId);
                this.groups[groupId].setItems(groupsContent[groupId]);
              }
            }
          }
          this.forceGraphUpdate = true;
          this.body.emitter.emit("_change", { queue: true });
        }
      };

      /**
       * Redraw the component, mandatory function
       * @return {boolean} Returns true if the component is resized
       */
      LineGraph.prototype.redraw = function () {
        var resized = false;

        // calculate actual size and position
        this.props.width = this.dom.frame.offsetWidth;
        this.props.height = this.body.domProps.centerContainer.height - this.body.domProps.border.top - this.body.domProps.border.bottom;

        // check if this component is resized
        resized = this._isResized() || resized;

        // check whether zoomed (in that case we need to re-stack everything)
        var visibleInterval = this.body.range.end - this.body.range.start;
        var zoomed = visibleInterval != this.lastVisibleInterval;
        this.lastVisibleInterval = visibleInterval;

        // the svg element is three times as big as the width, this allows for fully dragging left and right
        // without reloading the graph. the controls for this are bound to events in the constructor
        if (resized == true) {
          this.svg.style.width = util.option.asSize(3 * this.props.width);
          this.svg.style.left = util.option.asSize(-this.props.width);

          // if the height of the graph is set as proportional, change the height of the svg
          if ((this.options.height + '').indexOf("%") != -1 || this.updateSVGheightOnResize == true) {
            this.updateSVGheight = true;
          }
        }

        // update the height of the graph on each redraw of the graph.
        if (this.updateSVGheight == true) {
          if (this.options.graphHeight != this.props.height + 'px') {
            this.options.graphHeight = this.props.height + 'px';
            this.svg.style.height = this.props.height + 'px';
          }
          this.updateSVGheight = false;
        } else {
          this.svg.style.height = ('' + this.options.graphHeight).replace('px', '') + 'px';
        }

        // zoomed is here to ensure that animations are shown correctly.
        if (resized == true || zoomed == true || this.abortedGraphUpdate == true || this.forceGraphUpdate == true) {
          resized = this._updateGraph() || resized;
          this.forceGraphUpdate = false;
        } else {
          // move the whole svg while dragging
          if (this.lastStart != 0) {
            var offset = this.body.range.start - this.lastStart;
            var range = this.body.range.end - this.body.range.start;
            if (this.props.width != 0) {
              var rangePerPixelInv = this.props.width / range;
              var xOffset = offset * rangePerPixelInv;
              this.svg.style.left = -this.props.width - xOffset + 'px';
            }
          }
        }
        this.legendLeft.redraw();
        this.legendRight.redraw();
        return resized;
      };

      LineGraph.prototype._getSortedGroupIds = function () {
        // getting group Ids
        var grouplist = [];
        for (var groupId in this.groups) {
          if (this.groups.hasOwnProperty(groupId)) {
            var group = this.groups[groupId];
            if (group.visible == true && (this.options.groups.visibility[groupId] === undefined || this.options.groups.visibility[groupId] == true)) {
              grouplist.push({ id: groupId, zIndex: group.options.zIndex });
            }
          }
        }
        util.insertSort(grouplist, function (a, b) {
          var az = a.zIndex;
          var bz = b.zIndex;
          if (az === undefined) az = 0;
          if (bz === undefined) bz = 0;
          return az == bz ? 0 : az < bz ? -1 : 1;
        });
        var groupIds = new Array(grouplist.length);
        for (var i = 0; i < grouplist.length; i++) {
          groupIds[i] = grouplist[i].id;
        }
        return groupIds;
      };

      /**
       * Update and redraw the graph.
       *
       * @returns {boolean}
       * @private
       */
      LineGraph.prototype._updateGraph = function () {
        // reset the svg elements
        DOMutil.prepareElements(this.svgElements);
        if (this.props.width != 0 && this.itemsData != null) {
          var group, i;
          var groupRanges = {};
          var changeCalled = false;
          // this is the range of the SVG canvas
          var minDate = this.body.util.toGlobalTime(-this.body.domProps.root.width);
          var maxDate = this.body.util.toGlobalTime(2 * this.body.domProps.root.width);

          // getting group Ids
          var groupIds = this._getSortedGroupIds();
          if (groupIds.length > 0) {
            var groupsData = {};

            // fill groups data, this only loads the data we require based on the timewindow
            this._getRelevantData(groupIds, groupsData, minDate, maxDate);

            // apply sampling, if disabled, it will pass through this function.
            this._applySampling(groupIds, groupsData);

            // we transform the X coordinates to detect collisions
            for (i = 0; i < groupIds.length; i++) {
              this._convertXcoordinates(groupsData[groupIds[i]]);
            }

            // now all needed data has been collected we start the processing.
            this._getYRanges(groupIds, groupsData, groupRanges);

            // update the Y axis first, we use this data to draw at the correct Y points
            changeCalled = this._updateYAxis(groupIds, groupRanges);

            //  at changeCalled, abort this update cycle as the graph needs another update with new Width input from the Redraw container.
            //  Cleanup SVG elements on abort.
            if (changeCalled == true) {
              DOMutil.cleanupElements(this.svgElements);
              this.abortedGraphUpdate = true;
              return true;
            }
            this.abortedGraphUpdate = false;

            // With the yAxis scaled correctly, use this to get the Y values of the points.
            var below = undefined;
            for (i = 0; i < groupIds.length; i++) {
              group = this.groups[groupIds[i]];
              if (this.options.stack === true && this.options.style === 'line') {
                if (group.options.excludeFromStacking == undefined || !group.options.excludeFromStacking) {
                  if (below != undefined) {
                    this._stack(groupsData[group.id], groupsData[below.id]);
                    if (group.options.shaded.enabled == true && group.options.shaded.orientation !== "group") {
                      if (group.options.shaded.orientation == "top" && below.options.shaded.orientation !== "group") {
                        below.options.shaded.orientation = "group";
                        below.options.shaded.groupId = group.id;
                      } else {
                        group.options.shaded.orientation = "group";
                        group.options.shaded.groupId = below.id;
                      }
                    }
                  }
                  below = group;
                }
              }
              this._convertYcoordinates(groupsData[groupIds[i]], group);
            }

            //Precalculate paths and draw shading if appropriate. This will make sure the shading is always behind any lines.
            var paths = {};
            for (i = 0; i < groupIds.length; i++) {
              group = this.groups[groupIds[i]];
              if (group.options.style === 'line' && group.options.shaded.enabled == true) {
                var dataset = groupsData[groupIds[i]];
                if (dataset == null || dataset.length == 0) {
                  continue;
                }
                if (!paths.hasOwnProperty(groupIds[i])) {
                  paths[groupIds[i]] = Lines.calcPath(dataset, group);
                }
                if (group.options.shaded.orientation === "group") {
                  var subGroupId = group.options.shaded.groupId;
                  if (groupIds.indexOf(subGroupId) === -1) {
                    console.log(group.id + ": Unknown shading group target given:" + subGroupId);
                    continue;
                  }
                  if (!paths.hasOwnProperty(subGroupId)) {
                    paths[subGroupId] = Lines.calcPath(groupsData[subGroupId], this.groups[subGroupId]);
                  }
                  Lines.drawShading(paths[groupIds[i]], group, paths[subGroupId], this.framework);
                } else {
                  Lines.drawShading(paths[groupIds[i]], group, undefined, this.framework);
                }
              }
            }

            // draw the groups, calculating paths if still necessary.
            Bars.draw(groupIds, groupsData, this.framework);
            for (i = 0; i < groupIds.length; i++) {
              group = this.groups[groupIds[i]];
              if (groupsData[groupIds[i]].length > 0) {
                switch (group.options.style) {
                  case "line":
                    if (!paths.hasOwnProperty(groupIds[i])) {
                      paths[groupIds[i]] = Lines.calcPath(groupsData[groupIds[i]], group);
                    }
                    Lines.draw(paths[groupIds[i]], group, this.framework);
                  // eslint-disable-line no-fallthrough
                  case "point":
                  // eslint-disable-line no-fallthrough
                  case "points":
                    if (group.options.style == "point" || group.options.style == "points" || group.options.drawPoints.enabled == true) {
                      Points.draw(groupsData[groupIds[i]], group, this.framework);
                    }
                    break;
                  case "bar":
                  // bar needs to be drawn enmasse
                  // eslint-disable-line no-fallthrough
                  default:
                  //do nothing...
                }
              }
            }
          }
        }

        // cleanup unused svg elements
        DOMutil.cleanupElements(this.svgElements);
        return false;
      };

      LineGraph.prototype._stack = function (data, subData) {
        var index, dx, dy, subPrevPoint, subNextPoint;
        index = 0;
        // for each data point we look for a matching on in the set below
        for (var j = 0; j < data.length; j++) {
          subPrevPoint = undefined;
          subNextPoint = undefined;
          // we look for time matches or a before-after point
          for (var k = index; k < subData.length; k++) {
            // if times match exactly
            if (subData[k].x === data[j].x) {
              subPrevPoint = subData[k];
              subNextPoint = subData[k];
              index = k;
              break;
            } else if (subData[k].x > data[j].x) {
              // overshoot
              subNextPoint = subData[k];
              if (k == 0) {
                subPrevPoint = subNextPoint;
              } else {
                subPrevPoint = subData[k - 1];
              }
              index = k;
              break;
            }
          }
          // in case the last data point has been used, we assume it stays like this.
          if (subNextPoint === undefined) {
            subPrevPoint = subData[subData.length - 1];
            subNextPoint = subData[subData.length - 1];
          }
          // linear interpolation
          dx = subNextPoint.x - subPrevPoint.x;
          dy = subNextPoint.y - subPrevPoint.y;
          if (dx == 0) {
            data[j].y = data[j].orginalY + subNextPoint.y;
          } else {
            data[j].y = data[j].orginalY + dy / dx * (data[j].x - subPrevPoint.x) + subPrevPoint.y; // ax + b where b is data[j].y
          }
        }
      };

      /**
       * first select and preprocess the data from the datasets.
       * the groups have their preselection of data, we now loop over this data to see
       * what data we need to draw. Sorted data is much faster.
       * more optimization is possible by doing the sampling before and using the binary search
       * to find the end date to determine the increment.
       *
       * @param {array}  groupIds
       * @param {object} groupsData
       * @param {date}   minDate
       * @param {date}   maxDate
       * @private
       */
      LineGraph.prototype._getRelevantData = function (groupIds, groupsData, minDate, maxDate) {
        var group, i, j, item;
        if (groupIds.length > 0) {
          for (i = 0; i < groupIds.length; i++) {
            group = this.groups[groupIds[i]];
            var itemsData = group.getItems();
            // optimization for sorted data
            if (group.options.sort == true) {
              var dateComparator = function dateComparator(a, b) {
                return a.getTime() == b.getTime() ? 0 : a < b ? -1 : 1;
              };
              var first = Math.max(0, util.binarySearchValue(itemsData, minDate, 'x', 'before', dateComparator));
              var last = Math.min(itemsData.length, util.binarySearchValue(itemsData, maxDate, 'x', 'after', dateComparator) + 1);
              if (last <= 0) {
                last = itemsData.length;
              }
              var dataContainer = new Array(last - first);
              for (j = first; j < last; j++) {
                item = group.itemsData[j];
                dataContainer[j - first] = item;
              }
              groupsData[groupIds[i]] = dataContainer;
            } else {
              // If unsorted data, all data is relevant, just returning entire structure
              groupsData[groupIds[i]] = group.itemsData;
            }
          }
        }
      };

      /**
       *
       * @param {Array.<vis.GraphGroup.id>} groupIds
       * @param {vis.DataSet} groupsData
       * @private
       */
      LineGraph.prototype._applySampling = function (groupIds, groupsData) {
        var group;
        if (groupIds.length > 0) {
          for (var i = 0; i < groupIds.length; i++) {
            group = this.groups[groupIds[i]];
            if (group.options.sampling == true) {
              var dataContainer = groupsData[groupIds[i]];
              if (dataContainer.length > 0) {
                var increment = 1;
                var amountOfPoints = dataContainer.length;

                // the global screen is used because changing the width of the yAxis may affect the increment, resulting in an endless loop
                // of width changing of the yAxis.
                //TODO: This assumes sorted data, but that's not guaranteed!
                var xDistance = this.body.util.toGlobalScreen(dataContainer[dataContainer.length - 1].x) - this.body.util.toGlobalScreen(dataContainer[0].x);
                var pointsPerPixel = amountOfPoints / xDistance;
                increment = Math.min(Math.ceil(0.2 * amountOfPoints), Math.max(1, Math.round(pointsPerPixel)));

                var sampledData = new Array(amountOfPoints);
                for (var j = 0; j < amountOfPoints; j += increment) {
                  var idx = Math.round(j / increment);
                  sampledData[idx] = dataContainer[j];
                }
                groupsData[groupIds[i]] = sampledData.splice(0, Math.round(amountOfPoints / increment));
              }
            }
          }
        }
      };

      /**
       *
       * @param {Array.<vis.GraphGroup.id>} groupIds
       * @param {vis.DataSet} groupsData
       * @param {object} groupRanges  | this is being filled here
       * @private
       */
      LineGraph.prototype._getYRanges = function (groupIds, groupsData, groupRanges) {
        var groupData, group, i;
        var combinedDataLeft = [];
        var combinedDataRight = [];
        var options;
        if (groupIds.length > 0) {
          for (i = 0; i < groupIds.length; i++) {
            groupData = groupsData[groupIds[i]];
            options = this.groups[groupIds[i]].options;
            if (groupData.length > 0) {
              group = this.groups[groupIds[i]];
              // if bar graphs are stacked, their range need to be handled differently and accumulated over all groups.
              if (options.stack === true && options.style === 'bar') {
                if (options.yAxisOrientation === 'left') {
                  combinedDataLeft = combinedDataLeft.concat(groupData);
                } else {
                  combinedDataRight = combinedDataRight.concat(groupData);
                }
              } else {
                groupRanges[groupIds[i]] = group.getYRange(groupData, groupIds[i]);
              }
            }
          }

          // if bar graphs are stacked, their range need to be handled differently and accumulated over all groups.
          Bars.getStackedYRange(combinedDataLeft, groupRanges, groupIds, '__barStackLeft', 'left');
          Bars.getStackedYRange(combinedDataRight, groupRanges, groupIds, '__barStackRight', 'right');
        }
      };

      /**
       * this sets the Y ranges for the Y axis. It also determines which of the axis should be shown or hidden.
       * @param {Array.<vis.GraphGroup.id>} groupIds
       * @param {Object} groupRanges
       * @returns {boolean} resized
       * @private
       */
      LineGraph.prototype._updateYAxis = function (groupIds, groupRanges) {
        var resized = false;
        var yAxisLeftUsed = false;
        var yAxisRightUsed = false;
        var minLeft = 1e9,
            minRight = 1e9,
            maxLeft = -1e9,
            maxRight = -1e9,
            minVal,
            maxVal;
        // if groups are present
        if (groupIds.length > 0) {
          // this is here to make sure that if there are no items in the axis but there are groups, that there is no infinite draw/redraw loop.
          for (var i = 0; i < groupIds.length; i++) {
            var group = this.groups[groupIds[i]];
            if (group && group.options.yAxisOrientation != 'right') {
              yAxisLeftUsed = true;
              minLeft = 1e9;
              maxLeft = -1e9;
            } else if (group && group.options.yAxisOrientation) {
              yAxisRightUsed = true;
              minRight = 1e9;
              maxRight = -1e9;
            }
          }

          // if there are items:
          for (i = 0; i < groupIds.length; i++) {
            if (groupRanges.hasOwnProperty(groupIds[i])) {
              if (groupRanges[groupIds[i]].ignore !== true) {
                minVal = groupRanges[groupIds[i]].min;
                maxVal = groupRanges[groupIds[i]].max;

                if (groupRanges[groupIds[i]].yAxisOrientation != 'right') {
                  yAxisLeftUsed = true;
                  minLeft = minLeft > minVal ? minVal : minLeft;
                  maxLeft = maxLeft < maxVal ? maxVal : maxLeft;
                } else {
                  yAxisRightUsed = true;
                  minRight = minRight > minVal ? minVal : minRight;
                  maxRight = maxRight < maxVal ? maxVal : maxRight;
                }
              }
            }
          }

          if (yAxisLeftUsed == true) {
            this.yAxisLeft.setRange(minLeft, maxLeft);
          }
          if (yAxisRightUsed == true) {
            this.yAxisRight.setRange(minRight, maxRight);
          }
        }
        resized = this._toggleAxisVisiblity(yAxisLeftUsed, this.yAxisLeft) || resized;
        resized = this._toggleAxisVisiblity(yAxisRightUsed, this.yAxisRight) || resized;

        if (yAxisRightUsed == true && yAxisLeftUsed == true) {
          this.yAxisLeft.drawIcons = true;
          this.yAxisRight.drawIcons = true;
        } else {
          this.yAxisLeft.drawIcons = false;
          this.yAxisRight.drawIcons = false;
        }
        this.yAxisRight.master = !yAxisLeftUsed;
        this.yAxisRight.masterAxis = this.yAxisLeft;

        if (this.yAxisRight.master == false) {
          if (yAxisRightUsed == true) {
            this.yAxisLeft.lineOffset = this.yAxisRight.width;
          } else {
            this.yAxisLeft.lineOffset = 0;
          }

          resized = this.yAxisLeft.redraw() || resized;
          resized = this.yAxisRight.redraw() || resized;
        } else {
          resized = this.yAxisRight.redraw() || resized;
        }

        // clean the accumulated lists
        var tempGroups = ['__barStackLeft', '__barStackRight', '__lineStackLeft', '__lineStackRight'];
        for (i = 0; i < tempGroups.length; i++) {
          if (groupIds.indexOf(tempGroups[i]) != -1) {
            groupIds.splice(groupIds.indexOf(tempGroups[i]), 1);
          }
        }

        return resized;
      };

      /**
       * This shows or hides the Y axis if needed. If there is a change, the changed event is emitted by the updateYAxis function
       *
       * @param {boolean} axisUsed
       * @param {vis.DataAxis}  axis
       * @returns {boolean}
       * @private
       */
      LineGraph.prototype._toggleAxisVisiblity = function (axisUsed, axis) {
        var changed = false;
        if (axisUsed == false) {
          if (axis.dom.frame.parentNode && axis.hidden == false) {
            axis.hide();
            changed = true;
          }
        } else {
          if (!axis.dom.frame.parentNode && axis.hidden == true) {
            axis.show();
            changed = true;
          }
        }
        return changed;
      };

      /**
       * This uses the DataAxis object to generate the correct X coordinate on the SVG window. It uses the
       * util function toScreen to get the x coordinate from the timestamp. It also pre-filters the data and get the minMax ranges for
       * the yAxis.
       *
       * @param {Array.<Object>} datapoints
       * @private
       */
      LineGraph.prototype._convertXcoordinates = function (datapoints) {
        var toScreen = this.body.util.toScreen;
        for (var i = 0; i < datapoints.length; i++) {
          datapoints[i].screen_x = toScreen(datapoints[i].x) + this.props.width;
          datapoints[i].screen_y = datapoints[i].y; //starting point for range calculations
          if (datapoints[i].end != undefined) {
            datapoints[i].screen_end = toScreen(datapoints[i].end) + this.props.width;
          } else {
            datapoints[i].screen_end = undefined;
          }
        }
      };

      /**
       * This uses the DataAxis object to generate the correct X coordinate on the SVG window. It uses the
       * util function toScreen to get the x coordinate from the timestamp. It also pre-filters the data and get the minMax ranges for
       * the yAxis.
       *
       * @param {Array.<Object>} datapoints
       * @param {vis.GraphGroup} group
       * @private
       */
      LineGraph.prototype._convertYcoordinates = function (datapoints, group) {
        var axis = this.yAxisLeft;
        var svgHeight = Number(this.svg.style.height.replace('px', ''));
        if (group.options.yAxisOrientation == 'right') {
          axis = this.yAxisRight;
        }
        for (var i = 0; i < datapoints.length; i++) {
          datapoints[i].screen_y = Math.round(axis.convertValue(datapoints[i].y));
        }
        group.setZeroPosition(Math.min(svgHeight, axis.convertValue(0)));
      };

      module.exports = LineGraph;

      /***/
    },
    /* 107 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var DOMutil = __webpack_require__(14);
      var Component = __webpack_require__(16);
      var DataScale = __webpack_require__(108);
      /**
       * A horizontal time axis
       * @param {Object} body
       * @param {Object} [options]        See DataAxis.setOptions for the available
       *                                  options.
       * @param {SVGElement} svg
       * @param {vis.LineGraph.options} linegraphOptions
       * @constructor DataAxis
       * @extends Component
       */
      function DataAxis(body, options, svg, linegraphOptions) {
        this.id = util.randomUUID();
        this.body = body;

        this.defaultOptions = {
          orientation: 'left', // supported: 'left', 'right'
          showMinorLabels: true,
          showMajorLabels: true,
          icons: false,
          majorLinesOffset: 7,
          minorLinesOffset: 4,
          labelOffsetX: 10,
          labelOffsetY: 2,
          iconWidth: 20,
          width: '40px',
          visible: true,
          alignZeros: true,
          left: {
            range: { min: undefined, max: undefined },
            format: function format(value) {
              return '' + parseFloat(value.toPrecision(3));
            },
            title: { text: undefined, style: undefined }
          },
          right: {
            range: { min: undefined, max: undefined },
            format: function format(value) {
              return '' + parseFloat(value.toPrecision(3));
            },
            title: { text: undefined, style: undefined }
          }
        };

        this.linegraphOptions = linegraphOptions;
        this.linegraphSVG = svg;
        this.props = {};
        this.DOMelements = { // dynamic elements
          lines: {},
          labels: {},
          title: {}
        };

        this.dom = {};
        this.scale = undefined;
        this.range = { start: 0, end: 0 };

        this.options = util.extend({}, this.defaultOptions);
        this.conversionFactor = 1;

        this.setOptions(options);
        this.width = Number(('' + this.options.width).replace("px", ""));
        this.minWidth = this.width;
        this.height = this.linegraphSVG.getBoundingClientRect().height;
        this.hidden = false;

        this.stepPixels = 25;
        this.zeroCrossing = -1;
        this.amountOfSteps = -1;

        this.lineOffset = 0;
        this.master = true;
        this.masterAxis = null;
        this.svgElements = {};
        this.iconsRemoved = false;

        this.groups = {};
        this.amountOfGroups = 0;

        // create the HTML DOM
        this._create();
        this.framework = { svg: this.svg, svgElements: this.svgElements, options: this.options, groups: this.groups };

        var me = this;
        this.body.emitter.on("verticalDrag", function () {
          me.dom.lineContainer.style.top = me.body.domProps.scrollTop + 'px';
        });
      }

      DataAxis.prototype = new Component();

      DataAxis.prototype.addGroup = function (label, graphOptions) {
        if (!this.groups.hasOwnProperty(label)) {
          this.groups[label] = graphOptions;
        }
        this.amountOfGroups += 1;
      };

      DataAxis.prototype.updateGroup = function (label, graphOptions) {
        if (!this.groups.hasOwnProperty(label)) {
          this.amountOfGroups += 1;
        }
        this.groups[label] = graphOptions;
      };

      DataAxis.prototype.removeGroup = function (label) {
        if (this.groups.hasOwnProperty(label)) {
          delete this.groups[label];
          this.amountOfGroups -= 1;
        }
      };

      DataAxis.prototype.setOptions = function (options) {
        if (options) {
          var redraw = false;
          if (this.options.orientation != options.orientation && options.orientation !== undefined) {
            redraw = true;
          }
          var fields = ['orientation', 'showMinorLabels', 'showMajorLabels', 'icons', 'majorLinesOffset', 'minorLinesOffset', 'labelOffsetX', 'labelOffsetY', 'iconWidth', 'width', 'visible', 'left', 'right', 'alignZeros'];
          util.selectiveDeepExtend(fields, this.options, options);

          this.minWidth = Number(('' + this.options.width).replace("px", ""));
          if (redraw === true && this.dom.frame) {
            this.hide();
            this.show();
          }
        }
      };

      /**
       * Create the HTML DOM for the DataAxis
       */
      DataAxis.prototype._create = function () {
        this.dom.frame = document.createElement('div');
        this.dom.frame.style.width = this.options.width;
        this.dom.frame.style.height = this.height;

        this.dom.lineContainer = document.createElement('div');
        this.dom.lineContainer.style.width = '100%';
        this.dom.lineContainer.style.height = this.height;
        this.dom.lineContainer.style.position = 'relative';

        // create svg element for graph drawing.
        this.svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
        this.svg.style.position = "absolute";
        this.svg.style.top = '0px';
        this.svg.style.height = '100%';
        this.svg.style.width = '100%';
        this.svg.style.display = "block";
        this.dom.frame.appendChild(this.svg);
      };

      DataAxis.prototype._redrawGroupIcons = function () {
        DOMutil.prepareElements(this.svgElements);

        var x;
        var iconWidth = this.options.iconWidth;
        var iconHeight = 15;
        var iconOffset = 4;
        var y = iconOffset + 0.5 * iconHeight;

        if (this.options.orientation === 'left') {
          x = iconOffset;
        } else {
          x = this.width - iconWidth - iconOffset;
        }

        var groupArray = (0, _keys2['default'])(this.groups);
        groupArray.sort(function (a, b) {
          return a < b ? -1 : 1;
        });

        for (var i = 0; i < groupArray.length; i++) {
          var groupId = groupArray[i];
          if (this.groups[groupId].visible === true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] === true)) {
            this.groups[groupId].getLegend(iconWidth, iconHeight, this.framework, x, y);
            y += iconHeight + iconOffset;
          }
        }

        DOMutil.cleanupElements(this.svgElements);
        this.iconsRemoved = false;
      };

      DataAxis.prototype._cleanupIcons = function () {
        if (this.iconsRemoved === false) {
          DOMutil.prepareElements(this.svgElements);
          DOMutil.cleanupElements(this.svgElements);
          this.iconsRemoved = true;
        }
      };

      /**
       * Create the HTML DOM for the DataAxis
       */
      DataAxis.prototype.show = function () {
        this.hidden = false;
        if (!this.dom.frame.parentNode) {
          if (this.options.orientation === 'left') {
            this.body.dom.left.appendChild(this.dom.frame);
          } else {
            this.body.dom.right.appendChild(this.dom.frame);
          }
        }

        if (!this.dom.lineContainer.parentNode) {
          this.body.dom.backgroundHorizontal.appendChild(this.dom.lineContainer);
        }
      };

      /**
       * Create the HTML DOM for the DataAxis
       */
      DataAxis.prototype.hide = function () {
        this.hidden = true;
        if (this.dom.frame.parentNode) {
          this.dom.frame.parentNode.removeChild(this.dom.frame);
        }

        if (this.dom.lineContainer.parentNode) {
          this.dom.lineContainer.parentNode.removeChild(this.dom.lineContainer);
        }
      };

      /**
       * Set a range (start and end)
       * @param {number} start
       * @param {number} end
       */
      DataAxis.prototype.setRange = function (start, end) {
        this.range.start = start;
        this.range.end = end;
      };

      /**
       * Repaint the component
       * @return {boolean} Returns true if the component is resized
       */
      DataAxis.prototype.redraw = function () {
        var resized = false;
        var activeGroups = 0;

        // Make sure the line container adheres to the vertical scrolling.
        this.dom.lineContainer.style.top = this.body.domProps.scrollTop + 'px';

        for (var groupId in this.groups) {
          if (this.groups.hasOwnProperty(groupId)) {
            if (this.groups[groupId].visible === true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] === true)) {
              activeGroups++;
            }
          }
        }
        if (this.amountOfGroups === 0 || activeGroups === 0) {
          this.hide();
        } else {
          this.show();
          this.height = Number(this.linegraphSVG.style.height.replace("px", ""));

          // svg offsetheight did not work in firefox and explorer...
          this.dom.lineContainer.style.height = this.height + 'px';
          this.width = this.options.visible === true ? Number(('' + this.options.width).replace("px", "")) : 0;

          var props = this.props;
          var frame = this.dom.frame;

          // update classname
          frame.className = 'vis-data-axis';

          // calculate character width and height
          this._calculateCharSize();

          var orientation = this.options.orientation;
          var showMinorLabels = this.options.showMinorLabels;
          var showMajorLabels = this.options.showMajorLabels;

          // determine the width and height of the elements for the axis
          props.minorLabelHeight = showMinorLabels ? props.minorCharHeight : 0;
          props.majorLabelHeight = showMajorLabels ? props.majorCharHeight : 0;

          props.minorLineWidth = this.body.dom.backgroundHorizontal.offsetWidth - this.lineOffset - this.width + 2 * this.options.minorLinesOffset;
          props.minorLineHeight = 1;
          props.majorLineWidth = this.body.dom.backgroundHorizontal.offsetWidth - this.lineOffset - this.width + 2 * this.options.majorLinesOffset;
          props.majorLineHeight = 1;

          //  take frame offline while updating (is almost twice as fast)
          if (orientation === 'left') {
            frame.style.top = '0';
            frame.style.left = '0';
            frame.style.bottom = '';
            frame.style.width = this.width + 'px';
            frame.style.height = this.height + "px";
            this.props.width = this.body.domProps.left.width;
            this.props.height = this.body.domProps.left.height;
          } else {
            // right
            frame.style.top = '';
            frame.style.bottom = '0';
            frame.style.left = '0';
            frame.style.width = this.width + 'px';
            frame.style.height = this.height + "px";
            this.props.width = this.body.domProps.right.width;
            this.props.height = this.body.domProps.right.height;
          }

          resized = this._redrawLabels();
          resized = this._isResized() || resized;

          if (this.options.icons === true) {
            this._redrawGroupIcons();
          } else {
            this._cleanupIcons();
          }

          this._redrawTitle(orientation);
        }
        return resized;
      };

      /**
       * Repaint major and minor text labels and vertical grid lines
       *
       * @returns {boolean}
       * @private
       */
      DataAxis.prototype._redrawLabels = function () {
        var _this = this;

        var resized = false;
        DOMutil.prepareElements(this.DOMelements.lines);
        DOMutil.prepareElements(this.DOMelements.labels);
        var orientation = this.options['orientation'];
        var customRange = this.options[orientation].range != undefined ? this.options[orientation].range : {};

        //Override range with manual options:
        var autoScaleEnd = true;
        if (customRange.max != undefined) {
          this.range.end = customRange.max;
          autoScaleEnd = false;
        }
        var autoScaleStart = true;
        if (customRange.min != undefined) {
          this.range.start = customRange.min;
          autoScaleStart = false;
        }

        this.scale = new DataScale(this.range.start, this.range.end, autoScaleStart, autoScaleEnd, this.dom.frame.offsetHeight, this.props.majorCharHeight, this.options.alignZeros, this.options[orientation].format);

        if (this.master === false && this.masterAxis != undefined) {
          this.scale.followScale(this.masterAxis.scale);
        }

        //Is updated in side-effect of _redrawLabel():
        this.maxLabelSize = 0;

        var lines = this.scale.getLines();
        lines.forEach(function (line) {
          var y = line.y;
          var isMajor = line.major;
          if (_this.options['showMinorLabels'] && isMajor === false) {
            _this._redrawLabel(y - 2, line.val, orientation, 'vis-y-axis vis-minor', _this.props.minorCharHeight);
          }
          if (isMajor) {
            if (y >= 0) {
              _this._redrawLabel(y - 2, line.val, orientation, 'vis-y-axis vis-major', _this.props.majorCharHeight);
            }
          }
          if (_this.master === true) {
            if (isMajor) {
              _this._redrawLine(y, orientation, 'vis-grid vis-horizontal vis-major', _this.options.majorLinesOffset, _this.props.majorLineWidth);
            } else {
              _this._redrawLine(y, orientation, 'vis-grid vis-horizontal vis-minor', _this.options.minorLinesOffset, _this.props.minorLineWidth);
            }
          }
        });

        // Note that title is rotated, so we're using the height, not width!
        var titleWidth = 0;
        if (this.options[orientation].title !== undefined && this.options[orientation].title.text !== undefined) {
          titleWidth = this.props.titleCharHeight;
        }
        var offset = this.options.icons === true ? Math.max(this.options.iconWidth, titleWidth) + this.options.labelOffsetX + 15 : titleWidth + this.options.labelOffsetX + 15;

        // this will resize the yAxis to accommodate the labels.
        if (this.maxLabelSize > this.width - offset && this.options.visible === true) {
          this.width = this.maxLabelSize + offset;
          this.options.width = this.width + "px";
          DOMutil.cleanupElements(this.DOMelements.lines);
          DOMutil.cleanupElements(this.DOMelements.labels);
          this.redraw();
          resized = true;
        }
        // this will resize the yAxis if it is too big for the labels.
        else if (this.maxLabelSize < this.width - offset && this.options.visible === true && this.width > this.minWidth) {
            this.width = Math.max(this.minWidth, this.maxLabelSize + offset);
            this.options.width = this.width + "px";
            DOMutil.cleanupElements(this.DOMelements.lines);
            DOMutil.cleanupElements(this.DOMelements.labels);
            this.redraw();
            resized = true;
          } else {
            DOMutil.cleanupElements(this.DOMelements.lines);
            DOMutil.cleanupElements(this.DOMelements.labels);
            resized = false;
          }

        return resized;
      };

      DataAxis.prototype.convertValue = function (value) {
        return this.scale.convertValue(value);
      };

      DataAxis.prototype.screenToValue = function (x) {
        return this.scale.screenToValue(x);
      };

      /**
       * Create a label for the axis at position x
       *
       * @param {number} y
       * @param {string} text
       * @param {'top'|'right'|'bottom'|'left'} orientation
       * @param {string} className
       * @param {number} characterHeight
       * @private
       */
      DataAxis.prototype._redrawLabel = function (y, text, orientation, className, characterHeight) {
        // reuse redundant label
        var label = DOMutil.getDOMElement('div', this.DOMelements.labels, this.dom.frame); //this.dom.redundant.labels.shift();
        label.className = className;
        label.innerHTML = text;
        if (orientation === 'left') {
          label.style.left = '-' + this.options.labelOffsetX + 'px';
          label.style.textAlign = "right";
        } else {
          label.style.right = '-' + this.options.labelOffsetX + 'px';
          label.style.textAlign = "left";
        }

        label.style.top = y - 0.5 * characterHeight + this.options.labelOffsetY + 'px';

        text += '';

        var largestWidth = Math.max(this.props.majorCharWidth, this.props.minorCharWidth);
        if (this.maxLabelSize < text.length * largestWidth) {
          this.maxLabelSize = text.length * largestWidth;
        }
      };

      /**
       * Create a minor line for the axis at position y
       * @param {number} y
       * @param {'top'|'right'|'bottom'|'left'} orientation
       * @param {string} className
       * @param {number} offset
       * @param {number} width
       */
      DataAxis.prototype._redrawLine = function (y, orientation, className, offset, width) {
        if (this.master === true) {
          var line = DOMutil.getDOMElement('div', this.DOMelements.lines, this.dom.lineContainer); //this.dom.redundant.lines.shift();
          line.className = className;
          line.innerHTML = '';

          if (orientation === 'left') {
            line.style.left = this.width - offset + 'px';
          } else {
            line.style.right = this.width - offset + 'px';
          }

          line.style.width = width + 'px';
          line.style.top = y + 'px';
        }
      };

      /**
       * Create a title for the axis
       * @private
       * @param {'top'|'right'|'bottom'|'left'} orientation
       */
      DataAxis.prototype._redrawTitle = function (orientation) {
        DOMutil.prepareElements(this.DOMelements.title);

        // Check if the title is defined for this axes
        if (this.options[orientation].title !== undefined && this.options[orientation].title.text !== undefined) {
          var title = DOMutil.getDOMElement('div', this.DOMelements.title, this.dom.frame);
          title.className = 'vis-y-axis vis-title vis-' + orientation;
          title.innerHTML = this.options[orientation].title.text;

          // Add style - if provided
          if (this.options[orientation].title.style !== undefined) {
            util.addCssText(title, this.options[orientation].title.style);
          }

          if (orientation === 'left') {
            title.style.left = this.props.titleCharHeight + 'px';
          } else {
            title.style.right = this.props.titleCharHeight + 'px';
          }

          title.style.width = this.height + 'px';
        }

        // we need to clean up in case we did not use all elements.
        DOMutil.cleanupElements(this.DOMelements.title);
      };

      /**
       * Determine the size of text on the axis (both major and minor axis).
       * The size is calculated only once and then cached in this.props.
       * @private
       */
      DataAxis.prototype._calculateCharSize = function () {
        // determine the char width and height on the minor axis
        if (!('minorCharHeight' in this.props)) {
          var textMinor = document.createTextNode('0');
          var measureCharMinor = document.createElement('div');
          measureCharMinor.className = 'vis-y-axis vis-minor vis-measure';
          measureCharMinor.appendChild(textMinor);
          this.dom.frame.appendChild(measureCharMinor);

          this.props.minorCharHeight = measureCharMinor.clientHeight;
          this.props.minorCharWidth = measureCharMinor.clientWidth;

          this.dom.frame.removeChild(measureCharMinor);
        }

        if (!('majorCharHeight' in this.props)) {
          var textMajor = document.createTextNode('0');
          var measureCharMajor = document.createElement('div');
          measureCharMajor.className = 'vis-y-axis vis-major vis-measure';
          measureCharMajor.appendChild(textMajor);
          this.dom.frame.appendChild(measureCharMajor);

          this.props.majorCharHeight = measureCharMajor.clientHeight;
          this.props.majorCharWidth = measureCharMajor.clientWidth;

          this.dom.frame.removeChild(measureCharMajor);
        }

        if (!('titleCharHeight' in this.props)) {
          var textTitle = document.createTextNode('0');
          var measureCharTitle = document.createElement('div');
          measureCharTitle.className = 'vis-y-axis vis-title vis-measure';
          measureCharTitle.appendChild(textTitle);
          this.dom.frame.appendChild(measureCharTitle);

          this.props.titleCharHeight = measureCharTitle.clientHeight;
          this.props.titleCharWidth = measureCharTitle.clientWidth;

          this.dom.frame.removeChild(measureCharTitle);
        }
      };

      module.exports = DataAxis;

      /***/
    },
    /* 108 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       *
       * @param {number} start
       * @param {number} end
       * @param {boolean} autoScaleStart
       * @param {boolean} autoScaleEnd
       * @param {number} containerHeight
       * @param {number} majorCharHeight
       * @param {boolean} zeroAlign
       * @param {function} formattingFunction
       * @constructor DataScale
       */

      function DataScale(start, end, autoScaleStart, autoScaleEnd, containerHeight, majorCharHeight) {
        var zeroAlign = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
        var formattingFunction = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;

        this.majorSteps = [1, 2, 5, 10];
        this.minorSteps = [0.25, 0.5, 1, 2];
        this.customLines = null;

        this.containerHeight = containerHeight;
        this.majorCharHeight = majorCharHeight;
        this._start = start;
        this._end = end;

        this.scale = 1;
        this.minorStepIdx = -1;
        this.magnitudefactor = 1;
        this.determineScale();

        this.zeroAlign = zeroAlign;
        this.autoScaleStart = autoScaleStart;
        this.autoScaleEnd = autoScaleEnd;

        this.formattingFunction = formattingFunction;

        if (autoScaleStart || autoScaleEnd) {
          var me = this;
          var roundToMinor = function roundToMinor(value) {
            var rounded = value - value % (me.magnitudefactor * me.minorSteps[me.minorStepIdx]);
            if (value % (me.magnitudefactor * me.minorSteps[me.minorStepIdx]) > 0.5 * (me.magnitudefactor * me.minorSteps[me.minorStepIdx])) {
              return rounded + me.magnitudefactor * me.minorSteps[me.minorStepIdx];
            } else {
              return rounded;
            }
          };
          if (autoScaleStart) {
            this._start -= this.magnitudefactor * 2 * this.minorSteps[this.minorStepIdx];
            this._start = roundToMinor(this._start);
          }

          if (autoScaleEnd) {
            this._end += this.magnitudefactor * this.minorSteps[this.minorStepIdx];
            this._end = roundToMinor(this._end);
          }
          this.determineScale();
        }
      }

      DataScale.prototype.setCharHeight = function (majorCharHeight) {
        this.majorCharHeight = majorCharHeight;
      };

      DataScale.prototype.setHeight = function (containerHeight) {
        this.containerHeight = containerHeight;
      };

      DataScale.prototype.determineScale = function () {
        var range = this._end - this._start;
        this.scale = this.containerHeight / range;
        var minimumStepValue = this.majorCharHeight / this.scale;
        var orderOfMagnitude = range > 0 ? Math.round(Math.log(range) / Math.LN10) : 0;

        this.minorStepIdx = -1;
        this.magnitudefactor = Math.pow(10, orderOfMagnitude);

        var start = 0;
        if (orderOfMagnitude < 0) {
          start = orderOfMagnitude;
        }

        var solutionFound = false;
        for (var l = start; Math.abs(l) <= Math.abs(orderOfMagnitude); l++) {
          this.magnitudefactor = Math.pow(10, l);
          for (var j = 0; j < this.minorSteps.length; j++) {
            var stepSize = this.magnitudefactor * this.minorSteps[j];
            if (stepSize >= minimumStepValue) {
              solutionFound = true;
              this.minorStepIdx = j;
              break;
            }
          }
          if (solutionFound === true) {
            break;
          }
        }
      };

      DataScale.prototype.is_major = function (value) {
        return value % (this.magnitudefactor * this.majorSteps[this.minorStepIdx]) === 0;
      };

      DataScale.prototype.getStep = function () {
        return this.magnitudefactor * this.minorSteps[this.minorStepIdx];
      };

      DataScale.prototype.getFirstMajor = function () {
        var majorStep = this.magnitudefactor * this.majorSteps[this.minorStepIdx];
        return this.convertValue(this._start + (majorStep - this._start % majorStep) % majorStep);
      };

      DataScale.prototype.formatValue = function (current) {
        var returnValue = current.toPrecision(5);
        if (typeof this.formattingFunction === 'function') {
          returnValue = this.formattingFunction(current);
        }

        if (typeof returnValue === 'number') {
          return '' + returnValue;
        } else if (typeof returnValue === 'string') {
          return returnValue;
        } else {
          return current.toPrecision(5);
        }
      };

      DataScale.prototype.getLines = function () {
        var lines = [];
        var step = this.getStep();
        var bottomOffset = (step - this._start % step) % step;
        for (var i = this._start + bottomOffset; this._end - i > 0.00001; i += step) {
          if (i != this._start) {
            //Skip the bottom line
            lines.push({ major: this.is_major(i), y: this.convertValue(i), val: this.formatValue(i) });
          }
        }
        return lines;
      };

      DataScale.prototype.followScale = function (other) {
        var oldStepIdx = this.minorStepIdx;
        var oldStart = this._start;
        var oldEnd = this._end;

        var me = this;
        var increaseMagnitude = function increaseMagnitude() {
          me.magnitudefactor *= 2;
        };
        var decreaseMagnitude = function decreaseMagnitude() {
          me.magnitudefactor /= 2;
        };

        if (other.minorStepIdx <= 1 && this.minorStepIdx <= 1 || other.minorStepIdx > 1 && this.minorStepIdx > 1) {
          //easy, no need to change stepIdx nor multiplication factor
        } else if (other.minorStepIdx < this.minorStepIdx) {
          //I'm 5, they are 4 per major.
          this.minorStepIdx = 1;
          if (oldStepIdx == 2) {
            increaseMagnitude();
          } else {
            increaseMagnitude();
            increaseMagnitude();
          }
        } else {
          //I'm 4, they are 5 per major
          this.minorStepIdx = 2;
          if (oldStepIdx == 1) {
            decreaseMagnitude();
          } else {
            decreaseMagnitude();
            decreaseMagnitude();
          }
        }

        //Get masters stats:
        var otherZero = other.convertValue(0);
        var otherStep = other.getStep() * other.scale;

        var done = false;
        var count = 0;
        //Loop until magnitude is correct for given constrains.
        while (!done && count++ < 5) {

          //Get my stats:
          this.scale = otherStep / (this.minorSteps[this.minorStepIdx] * this.magnitudefactor);
          var newRange = this.containerHeight / this.scale;

          //For the case the magnitudefactor has changed:
          this._start = oldStart;
          this._end = this._start + newRange;

          var myOriginalZero = this._end * this.scale;
          var majorStep = this.magnitudefactor * this.majorSteps[this.minorStepIdx];
          var majorOffset = this.getFirstMajor() - other.getFirstMajor();

          if (this.zeroAlign) {
            var zeroOffset = otherZero - myOriginalZero;
            this._end += zeroOffset / this.scale;
            this._start = this._end - newRange;
          } else {
            if (!this.autoScaleStart) {
              this._start += majorStep - majorOffset / this.scale;
              this._end = this._start + newRange;
            } else {
              this._start -= majorOffset / this.scale;
              this._end = this._start + newRange;
            }
          }
          if (!this.autoScaleEnd && this._end > oldEnd + 0.00001) {
            //Need to decrease magnitude to prevent scale overshoot! (end)
            decreaseMagnitude();
            done = false;
            continue;
          }
          if (!this.autoScaleStart && this._start < oldStart - 0.00001) {
            if (this.zeroAlign && oldStart >= 0) {
              console.warn("Can't adhere to given 'min' range, due to zeroalign");
            } else {
              //Need to decrease magnitude to prevent scale overshoot! (start)
              decreaseMagnitude();
              done = false;
              continue;
            }
          }
          if (this.autoScaleStart && this.autoScaleEnd && newRange < oldEnd - oldStart) {
            increaseMagnitude();
            done = false;
            continue;
          }
          done = true;
        }
      };

      DataScale.prototype.convertValue = function (value) {
        return this.containerHeight - (value - this._start) * this.scale;
      };

      DataScale.prototype.screenToValue = function (pixels) {
        return (this.containerHeight - pixels) / this.scale + this._start;
      };

      module.exports = DataScale;

      /***/
    },
    /* 109 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var Bars = __webpack_require__(110);
      var Lines = __webpack_require__(111);
      var Points = __webpack_require__(72);

      /**
       * /**
       * @param {object} group            | the object of the group from the dataset
       * @param {string} groupId          | ID of the group
       * @param {object} options          | the default options
       * @param {array} groupsUsingDefaultStyles  | this array has one entree.
       *                                            It is passed as an array so it is passed by reference.
       *                                            It enumerates through the default styles
       * @constructor GraphGroup
       */
      function GraphGroup(group, groupId, options, groupsUsingDefaultStyles) {
        this.id = groupId;
        var fields = ['sampling', 'style', 'sort', 'yAxisOrientation', 'barChart', 'drawPoints', 'shaded', 'interpolation', 'zIndex', 'excludeFromStacking', 'excludeFromLegend'];
        this.options = util.selectiveBridgeObject(fields, options);
        this.usingDefaultStyle = group.className === undefined;
        this.groupsUsingDefaultStyles = groupsUsingDefaultStyles;
        this.zeroPosition = 0;
        this.update(group);
        if (this.usingDefaultStyle == true) {
          this.groupsUsingDefaultStyles[0] += 1;
        }
        this.itemsData = [];
        this.visible = group.visible === undefined ? true : group.visible;
      }

      /**
       * this loads a reference to all items in this group into this group.
       * @param {array} items
       */
      GraphGroup.prototype.setItems = function (items) {
        if (items != null) {
          this.itemsData = items;
          if (this.options.sort == true) {
            util.insertSort(this.itemsData, function (a, b) {
              return a.x > b.x ? 1 : -1;
            });
          }
        } else {
          this.itemsData = [];
        }
      };

      GraphGroup.prototype.getItems = function () {
        return this.itemsData;
      };

      /**
       * this is used for barcharts and shading, this way, we only have to calculate it once.
       * @param {number} pos
       */
      GraphGroup.prototype.setZeroPosition = function (pos) {
        this.zeroPosition = pos;
      };

      /**
       * set the options of the graph group over the default options.
       * @param {Object} options
       */
      GraphGroup.prototype.setOptions = function (options) {
        if (options !== undefined) {
          var fields = ['sampling', 'style', 'sort', 'yAxisOrientation', 'barChart', 'zIndex', 'excludeFromStacking', 'excludeFromLegend'];
          util.selectiveDeepExtend(fields, this.options, options);

          // if the group's drawPoints is a function delegate the callback to the onRender property
          if (typeof options.drawPoints == 'function') {
            options.drawPoints = {
              onRender: options.drawPoints
            };
          }

          util.mergeOptions(this.options, options, 'interpolation');
          util.mergeOptions(this.options, options, 'drawPoints');
          util.mergeOptions(this.options, options, 'shaded');

          if (options.interpolation) {
            if ((0, _typeof3['default'])(options.interpolation) == 'object') {
              if (options.interpolation.parametrization) {
                if (options.interpolation.parametrization == 'uniform') {
                  this.options.interpolation.alpha = 0;
                } else if (options.interpolation.parametrization == 'chordal') {
                  this.options.interpolation.alpha = 1.0;
                } else {
                  this.options.interpolation.parametrization = 'centripetal';
                  this.options.interpolation.alpha = 0.5;
                }
              }
            }
          }
        }
      };

      /**
       * this updates the current group class with the latest group dataset entree, used in _updateGroup in linegraph
       * @param {vis.Group} group
       */
      GraphGroup.prototype.update = function (group) {
        this.group = group;
        this.content = group.content || 'graph';
        this.className = group.className || this.className || 'vis-graph-group' + this.groupsUsingDefaultStyles[0] % 10;
        this.visible = group.visible === undefined ? true : group.visible;
        this.style = group.style;
        this.setOptions(group.options);
      };

      /**
       * return the legend entree for this group.
       *
       * @param {number} iconWidth
       * @param {number} iconHeight
       * @param {{svg: (*|Element), svgElements: Object, options: Object, groups: Array.<Object>}} framework
       * @param {number} x
       * @param {number} y
       * @returns {{icon: (*|Element), label: (*|string), orientation: *}}
       */
      GraphGroup.prototype.getLegend = function (iconWidth, iconHeight, framework, x, y) {
        if (framework == undefined || framework == null) {
          var svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
          framework = { svg: svg, svgElements: {}, options: this.options, groups: [this] };
        }
        if (x == undefined || x == null) {
          x = 0;
        }
        if (y == undefined || y == null) {
          y = 0.5 * iconHeight;
        }
        switch (this.options.style) {
          case "line":
            Lines.drawIcon(this, x, y, iconWidth, iconHeight, framework);
            break;
          case "points": //explicit no break
          case "point":
            Points.drawIcon(this, x, y, iconWidth, iconHeight, framework);
            break;
          case "bar":
            Bars.drawIcon(this, x, y, iconWidth, iconHeight, framework);
            break;
        }
        return { icon: framework.svg, label: this.content, orientation: this.options.yAxisOrientation };
      };

      GraphGroup.prototype.getYRange = function (groupData) {
        var yMin = groupData[0].y;
        var yMax = groupData[0].y;
        for (var j = 0; j < groupData.length; j++) {
          yMin = yMin > groupData[j].y ? groupData[j].y : yMin;
          yMax = yMax < groupData[j].y ? groupData[j].y : yMax;
        }
        return { min: yMin, max: yMax, yAxisOrientation: this.options.yAxisOrientation };
      };

      module.exports = GraphGroup;

      /***/
    },
    /* 110 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var DOMutil = __webpack_require__(14);
      var Points = __webpack_require__(72);

      /**
       *
       * @param {vis.GraphGroup.id} groupId
       * @param {Object} options   // TODO: Describe options
       * @constructor Bargraph
       */
      function Bargraph(groupId, options) {// eslint-disable-line no-unused-vars
      }

      Bargraph.drawIcon = function (group, x, y, iconWidth, iconHeight, framework) {
        var fillHeight = iconHeight * 0.5;
        var outline = DOMutil.getSVGElement("rect", framework.svgElements, framework.svg);
        outline.setAttributeNS(null, "x", x);
        outline.setAttributeNS(null, "y", y - fillHeight);
        outline.setAttributeNS(null, "width", iconWidth);
        outline.setAttributeNS(null, "height", 2 * fillHeight);
        outline.setAttributeNS(null, "class", "vis-outline");

        var barWidth = Math.round(0.3 * iconWidth);
        var originalWidth = group.options.barChart.width;
        var scale = originalWidth / barWidth;
        var bar1Height = Math.round(0.4 * iconHeight);
        var bar2Height = Math.round(0.75 * iconHeight);

        var offset = Math.round((iconWidth - 2 * barWidth) / 3);

        DOMutil.drawBar(x + 0.5 * barWidth + offset, y + fillHeight - bar1Height - 1, barWidth, bar1Height, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);
        DOMutil.drawBar(x + 1.5 * barWidth + offset + 2, y + fillHeight - bar2Height - 1, barWidth, bar2Height, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);

        if (group.options.drawPoints.enabled == true) {
          var groupTemplate = {
            style: group.options.drawPoints.style,
            styles: group.options.drawPoints.styles,
            size: group.options.drawPoints.size / scale,
            className: group.className
          };
          DOMutil.drawPoint(x + 0.5 * barWidth + offset, y + fillHeight - bar1Height - 1, groupTemplate, framework.svgElements, framework.svg);
          DOMutil.drawPoint(x + 1.5 * barWidth + offset + 2, y + fillHeight - bar2Height - 1, groupTemplate, framework.svgElements, framework.svg);
        }
      };

      /**
       * draw a bar graph
       *
       * @param {Array.<vis.GraphGroup.id>} groupIds
       * @param {Object} processedGroupData
       * @param {{svg: Object, svgElements: Array.<Object>, options: Object, groups: Array.<vis.Group>}} framework
       */
      Bargraph.draw = function (groupIds, processedGroupData, framework) {
        var combinedData = [];
        var intersections = {};
        var coreDistance;
        var key, drawData;
        var group;
        var i, j;
        var barPoints = 0;

        // combine all barchart data
        for (i = 0; i < groupIds.length; i++) {
          group = framework.groups[groupIds[i]];
          if (group.options.style === 'bar') {
            if (group.visible === true && (framework.options.groups.visibility[groupIds[i]] === undefined || framework.options.groups.visibility[groupIds[i]] === true)) {
              for (j = 0; j < processedGroupData[groupIds[i]].length; j++) {
                combinedData.push({
                  screen_x: processedGroupData[groupIds[i]][j].screen_x,
                  screen_end: processedGroupData[groupIds[i]][j].screen_end,
                  screen_y: processedGroupData[groupIds[i]][j].screen_y,
                  x: processedGroupData[groupIds[i]][j].x,
                  end: processedGroupData[groupIds[i]][j].end,
                  y: processedGroupData[groupIds[i]][j].y,
                  groupId: groupIds[i],
                  label: processedGroupData[groupIds[i]][j].label
                });
                barPoints += 1;
              }
            }
          }
        }

        if (barPoints === 0) {
          return;
        }

        // sort by time and by group
        combinedData.sort(function (a, b) {
          if (a.screen_x === b.screen_x) {
            return a.groupId < b.groupId ? -1 : 1;
          } else {
            return a.screen_x - b.screen_x;
          }
        });

        // get intersections
        Bargraph._getDataIntersections(intersections, combinedData);

        // plot barchart
        for (i = 0; i < combinedData.length; i++) {
          group = framework.groups[combinedData[i].groupId];
          var minWidth = group.options.barChart.minWidth != undefined ? group.options.barChart.minWidth : 0.1 * group.options.barChart.width;

          key = combinedData[i].screen_x;
          var heightOffset = 0;
          if (intersections[key] === undefined) {
            if (i + 1 < combinedData.length) {
              coreDistance = Math.abs(combinedData[i + 1].screen_x - key);
            }
            drawData = Bargraph._getSafeDrawData(coreDistance, group, minWidth);
          } else {
            var nextKey = i + (intersections[key].amount - intersections[key].resolved);
            if (nextKey < combinedData.length) {
              coreDistance = Math.abs(combinedData[nextKey].screen_x - key);
            }
            drawData = Bargraph._getSafeDrawData(coreDistance, group, minWidth);
            intersections[key].resolved += 1;

            if (group.options.stack === true && group.options.excludeFromStacking !== true) {
              if (combinedData[i].screen_y < group.zeroPosition) {
                heightOffset = intersections[key].accumulatedNegative;
                intersections[key].accumulatedNegative += group.zeroPosition - combinedData[i].screen_y;
              } else {
                heightOffset = intersections[key].accumulatedPositive;
                intersections[key].accumulatedPositive += group.zeroPosition - combinedData[i].screen_y;
              }
            } else if (group.options.barChart.sideBySide === true) {
              drawData.width = drawData.width / intersections[key].amount;
              drawData.offset += intersections[key].resolved * drawData.width - 0.5 * drawData.width * (intersections[key].amount + 1);
            }
          }

          var dataWidth = drawData.width;
          var start = combinedData[i].screen_x;

          // are we drawing explicit boxes? (we supplied an end value)
          if (combinedData[i].screen_end != undefined) {
            dataWidth = combinedData[i].screen_end - combinedData[i].screen_x;
            start += dataWidth * 0.5;
          } else {
            start += drawData.offset;
          }

          DOMutil.drawBar(start, combinedData[i].screen_y - heightOffset, dataWidth, group.zeroPosition - combinedData[i].screen_y, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);

          // draw points
          if (group.options.drawPoints.enabled === true) {
            var pointData = {
              screen_x: combinedData[i].screen_x,
              screen_y: combinedData[i].screen_y - heightOffset,
              x: combinedData[i].x,
              y: combinedData[i].y,
              groupId: combinedData[i].groupId,
              label: combinedData[i].label
            };
            Points.draw([pointData], group, framework, drawData.offset);
            //DOMutil.drawPoint(combinedData[i].x + drawData.offset, combinedData[i].y, group, framework.svgElements, framework.svg);
          }
        }
      };

      /**
       * Fill the intersections object with counters of how many datapoints share the same x coordinates
       * @param {Object} intersections
       * @param {Array.<Object>} combinedData
       * @private
       */
      Bargraph._getDataIntersections = function (intersections, combinedData) {
        // get intersections
        var coreDistance;
        for (var i = 0; i < combinedData.length; i++) {
          if (i + 1 < combinedData.length) {
            coreDistance = Math.abs(combinedData[i + 1].screen_x - combinedData[i].screen_x);
          }
          if (i > 0) {
            coreDistance = Math.min(coreDistance, Math.abs(combinedData[i - 1].screen_x - combinedData[i].screen_x));
          }
          if (coreDistance === 0) {
            if (intersections[combinedData[i].screen_x] === undefined) {
              intersections[combinedData[i].screen_x] = {
                amount: 0,
                resolved: 0,
                accumulatedPositive: 0,
                accumulatedNegative: 0
              };
            }
            intersections[combinedData[i].screen_x].amount += 1;
          }
        }
      };

      /**
       * Get the width and offset for bargraphs based on the coredistance between datapoints
       *
       * @param {number} coreDistance
       * @param {vis.Group} group
       * @param {number} minWidth
       * @returns {{width: number, offset: number}}
       * @private
       */
      Bargraph._getSafeDrawData = function (coreDistance, group, minWidth) {
        var width, offset;
        if (coreDistance < group.options.barChart.width && coreDistance > 0) {
          width = coreDistance < minWidth ? minWidth : coreDistance;

          offset = 0; // recalculate offset with the new width;
          if (group.options.barChart.align === 'left') {
            offset -= 0.5 * coreDistance;
          } else if (group.options.barChart.align === 'right') {
            offset += 0.5 * coreDistance;
          }
        } else {
          // default settings
          width = group.options.barChart.width;
          offset = 0;
          if (group.options.barChart.align === 'left') {
            offset -= 0.5 * group.options.barChart.width;
          } else if (group.options.barChart.align === 'right') {
            offset += 0.5 * group.options.barChart.width;
          }
        }

        return { width: width, offset: offset };
      };

      Bargraph.getStackedYRange = function (combinedData, groupRanges, groupIds, groupLabel, orientation) {
        if (combinedData.length > 0) {
          // sort by time and by group
          combinedData.sort(function (a, b) {
            if (a.screen_x === b.screen_x) {
              return a.groupId < b.groupId ? -1 : 1;
            } else {
              return a.screen_x - b.screen_x;
            }
          });
          var intersections = {};

          Bargraph._getDataIntersections(intersections, combinedData);
          groupRanges[groupLabel] = Bargraph._getStackedYRange(intersections, combinedData);
          groupRanges[groupLabel].yAxisOrientation = orientation;
          groupIds.push(groupLabel);
        }
      };

      Bargraph._getStackedYRange = function (intersections, combinedData) {
        var key;
        var yMin = combinedData[0].screen_y;
        var yMax = combinedData[0].screen_y;
        for (var i = 0; i < combinedData.length; i++) {
          key = combinedData[i].screen_x;
          if (intersections[key] === undefined) {
            yMin = yMin > combinedData[i].screen_y ? combinedData[i].screen_y : yMin;
            yMax = yMax < combinedData[i].screen_y ? combinedData[i].screen_y : yMax;
          } else {
            if (combinedData[i].screen_y < 0) {
              intersections[key].accumulatedNegative += combinedData[i].screen_y;
            } else {
              intersections[key].accumulatedPositive += combinedData[i].screen_y;
            }
          }
        }
        for (var xpos in intersections) {
          if (intersections.hasOwnProperty(xpos)) {
            yMin = yMin > intersections[xpos].accumulatedNegative ? intersections[xpos].accumulatedNegative : yMin;
            yMin = yMin > intersections[xpos].accumulatedPositive ? intersections[xpos].accumulatedPositive : yMin;
            yMax = yMax < intersections[xpos].accumulatedNegative ? intersections[xpos].accumulatedNegative : yMax;
            yMax = yMax < intersections[xpos].accumulatedPositive ? intersections[xpos].accumulatedPositive : yMax;
          }
        }

        return { min: yMin, max: yMax };
      };

      module.exports = Bargraph;

      /***/
    },
    /* 111 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var DOMutil = __webpack_require__(14);

      /**
       *
       * @param {vis.GraphGroup.id} groupId
       * @param {Object} options   // TODO: Describe options
       * @constructor Line
       */
      function Line(groupId, options) {// eslint-disable-line no-unused-vars
      }

      Line.calcPath = function (dataset, group) {
        if (dataset != null) {
          if (dataset.length > 0) {
            var d = [];

            // construct path from dataset
            if (group.options.interpolation.enabled == true) {
              d = Line._catmullRom(dataset, group);
            } else {
              d = Line._linear(dataset);
            }
            return d;
          }
        }
      };

      Line.drawIcon = function (group, x, y, iconWidth, iconHeight, framework) {
        var fillHeight = iconHeight * 0.5;
        var path, fillPath;

        var outline = DOMutil.getSVGElement("rect", framework.svgElements, framework.svg);
        outline.setAttributeNS(null, "x", x);
        outline.setAttributeNS(null, "y", y - fillHeight);
        outline.setAttributeNS(null, "width", iconWidth);
        outline.setAttributeNS(null, "height", 2 * fillHeight);
        outline.setAttributeNS(null, "class", "vis-outline");

        path = DOMutil.getSVGElement("path", framework.svgElements, framework.svg);
        path.setAttributeNS(null, "class", group.className);
        if (group.style !== undefined) {
          path.setAttributeNS(null, "style", group.style);
        }

        path.setAttributeNS(null, "d", "M" + x + "," + y + " L" + (x + iconWidth) + "," + y + "");
        if (group.options.shaded.enabled == true) {
          fillPath = DOMutil.getSVGElement("path", framework.svgElements, framework.svg);
          if (group.options.shaded.orientation == 'top') {
            fillPath.setAttributeNS(null, "d", "M" + x + ", " + (y - fillHeight) + "L" + x + "," + y + " L" + (x + iconWidth) + "," + y + " L" + (x + iconWidth) + "," + (y - fillHeight));
          } else {
            fillPath.setAttributeNS(null, "d", "M" + x + "," + y + " " + "L" + x + "," + (y + fillHeight) + " " + "L" + (x + iconWidth) + "," + (y + fillHeight) + "L" + (x + iconWidth) + "," + y);
          }
          fillPath.setAttributeNS(null, "class", group.className + " vis-icon-fill");
          if (group.options.shaded.style !== undefined && group.options.shaded.style !== "") {
            fillPath.setAttributeNS(null, "style", group.options.shaded.style);
          }
        }

        if (group.options.drawPoints.enabled == true) {
          var groupTemplate = {
            style: group.options.drawPoints.style,
            styles: group.options.drawPoints.styles,
            size: group.options.drawPoints.size,
            className: group.className
          };
          DOMutil.drawPoint(x + 0.5 * iconWidth, y, groupTemplate, framework.svgElements, framework.svg);
        }
      };

      Line.drawShading = function (pathArray, group, subPathArray, framework) {
        // append shading to the path
        if (group.options.shaded.enabled == true) {
          var svgHeight = Number(framework.svg.style.height.replace('px', ''));
          var fillPath = DOMutil.getSVGElement('path', framework.svgElements, framework.svg);
          var type = "L";
          if (group.options.interpolation.enabled == true) {
            type = "C";
          }
          var dFill;
          var zero = 0;
          if (group.options.shaded.orientation == 'top') {
            zero = 0;
          } else if (group.options.shaded.orientation == 'bottom') {
            zero = svgHeight;
          } else {
            zero = Math.min(Math.max(0, group.zeroPosition), svgHeight);
          }
          if (group.options.shaded.orientation == 'group' && subPathArray != null && subPathArray != undefined) {
            dFill = 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false) + ' L' + subPathArray[subPathArray.length - 1][0] + "," + subPathArray[subPathArray.length - 1][1] + " " + this.serializePath(subPathArray, type, true) + subPathArray[0][0] + "," + subPathArray[0][1] + " Z";
          } else {
            dFill = 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false) + ' V' + zero + ' H' + pathArray[0][0] + " Z";
          }

          fillPath.setAttributeNS(null, 'class', group.className + ' vis-fill');
          if (group.options.shaded.style !== undefined) {
            fillPath.setAttributeNS(null, 'style', group.options.shaded.style);
          }
          fillPath.setAttributeNS(null, 'd', dFill);
        }
      };

      /**
       * draw a line graph
       *
       * @param {Array.<Object>} pathArray
       * @param {vis.Group} group
       * @param {{svg: Object, svgElements: Array.<Object>, options: Object, groups: Array.<vis.Group>}} framework
       */
      Line.draw = function (pathArray, group, framework) {
        if (pathArray != null && pathArray != undefined) {
          var path = DOMutil.getSVGElement('path', framework.svgElements, framework.svg);
          path.setAttributeNS(null, "class", group.className);
          if (group.style !== undefined) {
            path.setAttributeNS(null, "style", group.style);
          }

          var type = "L";
          if (group.options.interpolation.enabled == true) {
            type = "C";
          }
          // copy properties to path for drawing.
          path.setAttributeNS(null, 'd', 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false));
        }
      };

      Line.serializePath = function (pathArray, type, inverse) {
        if (pathArray.length < 2) {
          //Too little data to create a path.
          return "";
        }
        var d = type;
        var i;
        if (inverse) {
          for (i = pathArray.length - 2; i > 0; i--) {
            d += pathArray[i][0] + "," + pathArray[i][1] + " ";
          }
        } else {
          for (i = 1; i < pathArray.length; i++) {
            d += pathArray[i][0] + "," + pathArray[i][1] + " ";
          }
        }
        return d;
      };

      /**
       * This uses an uniform parametrization of the interpolation algorithm:
       * 'On the Parameterization of Catmull-Rom Curves' by Cem Yuksel et al.
       * @param {Array.<Object>} data
       * @returns {string}
       * @private
       */
      Line._catmullRomUniform = function (data) {
        // catmull rom
        var p0, p1, p2, p3, bp1, bp2;
        var d = [];
        d.push([Math.round(data[0].screen_x), Math.round(data[0].screen_y)]);
        var normalization = 1 / 6;
        var length = data.length;
        for (var i = 0; i < length - 1; i++) {

          p0 = i == 0 ? data[0] : data[i - 1];
          p1 = data[i];
          p2 = data[i + 1];
          p3 = i + 2 < length ? data[i + 2] : p2;

          // Catmull-Rom to Cubic Bezier conversion matrix
          //    0       1       0       0
          //  -1/6      1      1/6      0
          //    0      1/6      1     -1/6
          //    0       0       1       0

          //    bp0 = { x: p1.x,                               y: p1.y };
          bp1 = {
            screen_x: (-p0.screen_x + 6 * p1.screen_x + p2.screen_x) * normalization,
            screen_y: (-p0.screen_y + 6 * p1.screen_y + p2.screen_y) * normalization
          };
          bp2 = {
            screen_x: (p1.screen_x + 6 * p2.screen_x - p3.screen_x) * normalization,
            screen_y: (p1.screen_y + 6 * p2.screen_y - p3.screen_y) * normalization
          };
          //    bp0 = { x: p2.x,                               y: p2.y };

          d.push([bp1.screen_x, bp1.screen_y]);
          d.push([bp2.screen_x, bp2.screen_y]);
          d.push([p2.screen_x, p2.screen_y]);
        }

        return d;
      };

      /**
       * This uses either the chordal or centripetal parameterization of the catmull-rom algorithm.
       * By default, the centripetal parameterization is used because this gives the nicest results.
       * These parameterizations are relatively heavy because the distance between 4 points have to be calculated.
       *
       * One optimization can be used to reuse distances since this is a sliding window approach.
       * @param {Array.<Object>} data
       * @param {vis.GraphGroup} group
       * @returns {string}
       * @private
       */
      Line._catmullRom = function (data, group) {
        var alpha = group.options.interpolation.alpha;
        if (alpha == 0 || alpha === undefined) {
          return this._catmullRomUniform(data);
        } else {
          var p0, p1, p2, p3, bp1, bp2, d1, d2, d3, A, B, N, M;
          var d3powA, d2powA, d3pow2A, d2pow2A, d1pow2A, d1powA;
          var d = [];
          d.push([Math.round(data[0].screen_x), Math.round(data[0].screen_y)]);
          var length = data.length;
          for (var i = 0; i < length - 1; i++) {

            p0 = i == 0 ? data[0] : data[i - 1];
            p1 = data[i];
            p2 = data[i + 1];
            p3 = i + 2 < length ? data[i + 2] : p2;

            d1 = Math.sqrt(Math.pow(p0.screen_x - p1.screen_x, 2) + Math.pow(p0.screen_y - p1.screen_y, 2));
            d2 = Math.sqrt(Math.pow(p1.screen_x - p2.screen_x, 2) + Math.pow(p1.screen_y - p2.screen_y, 2));
            d3 = Math.sqrt(Math.pow(p2.screen_x - p3.screen_x, 2) + Math.pow(p2.screen_y - p3.screen_y, 2));

            // Catmull-Rom to Cubic Bezier conversion matrix

            // A = 2d1^2a + 3d1^a * d2^a + d3^2a
            // B = 2d3^2a + 3d3^a * d2^a + d2^2a

            // [   0             1            0          0          ]
            // [   -d2^2a /N     A/N          d1^2a /N   0          ]
            // [   0             d3^2a /M     B/M        -d2^2a /M  ]
            // [   0             0            1          0          ]

            d3powA = Math.pow(d3, alpha);
            d3pow2A = Math.pow(d3, 2 * alpha);
            d2powA = Math.pow(d2, alpha);
            d2pow2A = Math.pow(d2, 2 * alpha);
            d1powA = Math.pow(d1, alpha);
            d1pow2A = Math.pow(d1, 2 * alpha);

            A = 2 * d1pow2A + 3 * d1powA * d2powA + d2pow2A;
            B = 2 * d3pow2A + 3 * d3powA * d2powA + d2pow2A;
            N = 3 * d1powA * (d1powA + d2powA);
            if (N > 0) {
              N = 1 / N;
            }
            M = 3 * d3powA * (d3powA + d2powA);
            if (M > 0) {
              M = 1 / M;
            }

            bp1 = {
              screen_x: (-d2pow2A * p0.screen_x + A * p1.screen_x + d1pow2A * p2.screen_x) * N,
              screen_y: (-d2pow2A * p0.screen_y + A * p1.screen_y + d1pow2A * p2.screen_y) * N
            };

            bp2 = {
              screen_x: (d3pow2A * p1.screen_x + B * p2.screen_x - d2pow2A * p3.screen_x) * M,
              screen_y: (d3pow2A * p1.screen_y + B * p2.screen_y - d2pow2A * p3.screen_y) * M
            };

            if (bp1.screen_x == 0 && bp1.screen_y == 0) {
              bp1 = p1;
            }
            if (bp2.screen_x == 0 && bp2.screen_y == 0) {
              bp2 = p2;
            }
            d.push([bp1.screen_x, bp1.screen_y]);
            d.push([bp2.screen_x, bp2.screen_y]);
            d.push([p2.screen_x, p2.screen_y]);
          }

          return d;
        }
      };

      /**
       * this generates the SVG path for a linear drawing between datapoints.
       * @param {Array.<Object>} data
       * @returns {string}
       * @private
       */
      Line._linear = function (data) {
        // linear
        var d = [];
        for (var i = 0; i < data.length; i++) {
          d.push([data[i].screen_x, data[i].screen_y]);
        }
        return d;
      };

      module.exports = Line;

      /***/
    },
    /* 112 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var DOMutil = __webpack_require__(14);
      var Component = __webpack_require__(16);

      /**
       * Legend for Graph2d
       *
       * @param {vis.Graph2d.body} body
       * @param {vis.Graph2d.options} options
       * @param {number} side
       * @param {vis.LineGraph.options} linegraphOptions
       * @constructor Legend
       * @extends Component
       */
      function Legend(body, options, side, linegraphOptions) {
        this.body = body;
        this.defaultOptions = {
          enabled: false,
          icons: true,
          iconSize: 20,
          iconSpacing: 6,
          left: {
            visible: true,
            position: 'top-left' // top/bottom - left,center,right
          },
          right: {
            visible: true,
            position: 'top-right' // top/bottom - left,center,right
          }
        };

        this.side = side;
        this.options = util.extend({}, this.defaultOptions);
        this.linegraphOptions = linegraphOptions;

        this.svgElements = {};
        this.dom = {};
        this.groups = {};
        this.amountOfGroups = 0;
        this._create();
        this.framework = { svg: this.svg, svgElements: this.svgElements, options: this.options, groups: this.groups };

        this.setOptions(options);
      }

      Legend.prototype = new Component();

      Legend.prototype.clear = function () {
        this.groups = {};
        this.amountOfGroups = 0;
      };

      Legend.prototype.addGroup = function (label, graphOptions) {

        // Include a group only if the group option 'excludeFromLegend: false' is not set.
        if (graphOptions.options.excludeFromLegend != true) {
          if (!this.groups.hasOwnProperty(label)) {
            this.groups[label] = graphOptions;
          }
          this.amountOfGroups += 1;
        }
      };

      Legend.prototype.updateGroup = function (label, graphOptions) {
        this.groups[label] = graphOptions;
      };

      Legend.prototype.removeGroup = function (label) {
        if (this.groups.hasOwnProperty(label)) {
          delete this.groups[label];
          this.amountOfGroups -= 1;
        }
      };

      Legend.prototype._create = function () {
        this.dom.frame = document.createElement('div');
        this.dom.frame.className = 'vis-legend';
        this.dom.frame.style.position = "absolute";
        this.dom.frame.style.top = "10px";
        this.dom.frame.style.display = "block";

        this.dom.textArea = document.createElement('div');
        this.dom.textArea.className = 'vis-legend-text';
        this.dom.textArea.style.position = "relative";
        this.dom.textArea.style.top = "0px";

        this.svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
        this.svg.style.position = 'absolute';
        this.svg.style.top = 0 + 'px';
        this.svg.style.width = this.options.iconSize + 5 + 'px';
        this.svg.style.height = '100%';

        this.dom.frame.appendChild(this.svg);
        this.dom.frame.appendChild(this.dom.textArea);
      };

      /**
       * Hide the component from the DOM
       */
      Legend.prototype.hide = function () {
        // remove the frame containing the items
        if (this.dom.frame.parentNode) {
          this.dom.frame.parentNode.removeChild(this.dom.frame);
        }
      };

      /**
       * Show the component in the DOM (when not already visible).
       */
      Legend.prototype.show = function () {
        // show frame containing the items
        if (!this.dom.frame.parentNode) {
          this.body.dom.center.appendChild(this.dom.frame);
        }
      };

      Legend.prototype.setOptions = function (options) {
        var fields = ['enabled', 'orientation', 'icons', 'left', 'right'];
        util.selectiveDeepExtend(fields, this.options, options);
      };

      Legend.prototype.redraw = function () {
        var activeGroups = 0;
        var groupArray = (0, _keys2['default'])(this.groups);
        groupArray.sort(function (a, b) {
          return a < b ? -1 : 1;
        });

        for (var i = 0; i < groupArray.length; i++) {
          var groupId = groupArray[i];
          if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
            activeGroups++;
          }
        }

        if (this.options[this.side].visible == false || this.amountOfGroups == 0 || this.options.enabled == false || activeGroups == 0) {
          this.hide();
        } else {
          this.show();
          if (this.options[this.side].position == 'top-left' || this.options[this.side].position == 'bottom-left') {
            this.dom.frame.style.left = '4px';
            this.dom.frame.style.textAlign = "left";
            this.dom.textArea.style.textAlign = "left";
            this.dom.textArea.style.left = this.options.iconSize + 15 + 'px';
            this.dom.textArea.style.right = '';
            this.svg.style.left = 0 + 'px';
            this.svg.style.right = '';
          } else {
            this.dom.frame.style.right = '4px';
            this.dom.frame.style.textAlign = "right";
            this.dom.textArea.style.textAlign = "right";
            this.dom.textArea.style.right = this.options.iconSize + 15 + 'px';
            this.dom.textArea.style.left = '';
            this.svg.style.right = 0 + 'px';
            this.svg.style.left = '';
          }

          if (this.options[this.side].position == 'top-left' || this.options[this.side].position == 'top-right') {
            this.dom.frame.style.top = 4 - Number(this.body.dom.center.style.top.replace("px", "")) + 'px';
            this.dom.frame.style.bottom = '';
          } else {
            var scrollableHeight = this.body.domProps.center.height - this.body.domProps.centerContainer.height;
            this.dom.frame.style.bottom = 4 + scrollableHeight + Number(this.body.dom.center.style.top.replace("px", "")) + 'px';
            this.dom.frame.style.top = '';
          }

          if (this.options.icons == false) {
            this.dom.frame.style.width = this.dom.textArea.offsetWidth + 10 + 'px';
            this.dom.textArea.style.right = '';
            this.dom.textArea.style.left = '';
            this.svg.style.width = '0px';
          } else {
            this.dom.frame.style.width = this.options.iconSize + 15 + this.dom.textArea.offsetWidth + 10 + 'px';
            this.drawLegendIcons();
          }

          var content = '';
          for (i = 0; i < groupArray.length; i++) {
            groupId = groupArray[i];
            if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
              content += this.groups[groupId].content + '<br />';
            }
          }
          this.dom.textArea.innerHTML = content;
          this.dom.textArea.style.lineHeight = 0.75 * this.options.iconSize + this.options.iconSpacing + 'px';
        }
      };

      Legend.prototype.drawLegendIcons = function () {
        if (this.dom.frame.parentNode) {
          var groupArray = (0, _keys2['default'])(this.groups);
          groupArray.sort(function (a, b) {
            return a < b ? -1 : 1;
          });

          // this resets the elements so the order is maintained
          DOMutil.resetElements(this.svgElements);

          var padding = window.getComputedStyle(this.dom.frame).paddingTop;
          var iconOffset = Number(padding.replace('px', ''));
          var x = iconOffset;
          var iconWidth = this.options.iconSize;
          var iconHeight = 0.75 * this.options.iconSize;
          var y = iconOffset + 0.5 * iconHeight + 3;

          this.svg.style.width = iconWidth + 5 + iconOffset + 'px';

          for (var i = 0; i < groupArray.length; i++) {
            var groupId = groupArray[i];
            if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
              this.groups[groupId].getLegend(iconWidth, iconHeight, this.framework, x, y);
              y += iconHeight + this.options.iconSpacing;
            }
          }
        }
      };

      module.exports = Legend;

      /***/
    },
    /* 113 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /**
       * This object contains all possible options. It will check if the types are correct, if required if the option is one
       * of the allowed values.
       *
       * __any__ means that the name of the property does not matter.
       * __type__ is a required field for all objects and contains the allowed types of all objects
       */
      var string = 'string';
      var bool = 'boolean';
      var number = 'number';
      var array = 'array';
      var date = 'date';
      var object = 'object'; // should only be in a __type__ property
      var dom = 'dom';
      var moment = 'moment';
      var any = 'any';

      var allOptions = {
        configure: {
          enabled: { 'boolean': bool },
          filter: { 'boolean': bool, 'function': 'function' },
          container: { dom: dom },
          __type__: { object: object, 'boolean': bool, 'function': 'function' }
        },

        //globals :
        yAxisOrientation: { string: ['left', 'right'] },
        defaultGroup: { string: string },
        sort: { 'boolean': bool },
        sampling: { 'boolean': bool },
        stack: { 'boolean': bool },
        graphHeight: { string: string, number: number },
        shaded: {
          enabled: { 'boolean': bool },
          orientation: { string: ['bottom', 'top', 'zero', 'group'] }, // top, bottom, zero, group
          groupId: { object: object },
          __type__: { 'boolean': bool, object: object }
        },
        style: { string: ['line', 'bar', 'points'] }, // line, bar
        barChart: {
          width: { number: number },
          minWidth: { number: number },
          sideBySide: { 'boolean': bool },
          align: { string: ['left', 'center', 'right'] },
          __type__: { object: object }
        },
        interpolation: {
          enabled: { 'boolean': bool },
          parametrization: { string: ['centripetal', 'chordal', 'uniform'] }, // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
          alpha: { number: number },
          __type__: { object: object, 'boolean': bool }
        },
        drawPoints: {
          enabled: { 'boolean': bool },
          onRender: { 'function': 'function' },
          size: { number: number },
          style: { string: ['square', 'circle'] }, // square, circle
          __type__: { object: object, 'boolean': bool, 'function': 'function' }
        },
        dataAxis: {
          showMinorLabels: { 'boolean': bool },
          showMajorLabels: { 'boolean': bool },
          icons: { 'boolean': bool },
          width: { string: string, number: number },
          visible: { 'boolean': bool },
          alignZeros: { 'boolean': bool },
          left: {
            range: { min: { number: number, 'undefined': 'undefined' }, max: { number: number, 'undefined': 'undefined' }, __type__: { object: object } },
            format: { 'function': 'function' },
            title: { text: { string: string, number: number, 'undefined': 'undefined' }, style: { string: string, 'undefined': 'undefined' }, __type__: { object: object } },
            __type__: { object: object }
          },
          right: {
            range: { min: { number: number, 'undefined': 'undefined' }, max: { number: number, 'undefined': 'undefined' }, __type__: { object: object } },
            format: { 'function': 'function' },
            title: { text: { string: string, number: number, 'undefined': 'undefined' }, style: { string: string, 'undefined': 'undefined' }, __type__: { object: object } },
            __type__: { object: object }
          },
          __type__: { object: object }
        },
        legend: {
          enabled: { 'boolean': bool },
          icons: { 'boolean': bool },
          left: {
            visible: { 'boolean': bool },
            position: { string: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] },
            __type__: { object: object }
          },
          right: {
            visible: { 'boolean': bool },
            position: { string: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] },
            __type__: { object: object }
          },
          __type__: { object: object, 'boolean': bool }
        },
        groups: {
          visibility: { any: any },
          __type__: { object: object }
        },

        autoResize: { 'boolean': bool },
        throttleRedraw: { number: number }, // TODO: DEPRICATED see https://github.com/almende/vis/issues/2511
        clickToUse: { 'boolean': bool },
        end: { number: number, date: date, string: string, moment: moment },
        format: {
          minorLabels: {
            millisecond: { string: string, 'undefined': 'undefined' },
            second: { string: string, 'undefined': 'undefined' },
            minute: { string: string, 'undefined': 'undefined' },
            hour: { string: string, 'undefined': 'undefined' },
            weekday: { string: string, 'undefined': 'undefined' },
            day: { string: string, 'undefined': 'undefined' },
            month: { string: string, 'undefined': 'undefined' },
            year: { string: string, 'undefined': 'undefined' },
            __type__: { object: object }
          },
          majorLabels: {
            millisecond: { string: string, 'undefined': 'undefined' },
            second: { string: string, 'undefined': 'undefined' },
            minute: { string: string, 'undefined': 'undefined' },
            hour: { string: string, 'undefined': 'undefined' },
            weekday: { string: string, 'undefined': 'undefined' },
            day: { string: string, 'undefined': 'undefined' },
            month: { string: string, 'undefined': 'undefined' },
            year: { string: string, 'undefined': 'undefined' },
            __type__: { object: object }
          },
          __type__: { object: object }
        },
        moment: { 'function': 'function' },
        height: { string: string, number: number },
        hiddenDates: {
          start: { date: date, number: number, string: string, moment: moment },
          end: { date: date, number: number, string: string, moment: moment },
          repeat: { string: string },
          __type__: { object: object, array: array }
        },
        locale: { string: string },
        locales: {
          __any__: { any: any },
          __type__: { object: object }
        },
        max: { date: date, number: number, string: string, moment: moment },
        maxHeight: { number: number, string: string },
        maxMinorChars: { number: number },
        min: { date: date, number: number, string: string, moment: moment },
        minHeight: { number: number, string: string },
        moveable: { 'boolean': bool },
        multiselect: { 'boolean': bool },
        orientation: { string: string },
        showCurrentTime: { 'boolean': bool },
        showMajorLabels: { 'boolean': bool },
        showMinorLabels: { 'boolean': bool },
        start: { date: date, number: number, string: string, moment: moment },
        timeAxis: {
          scale: { string: string, 'undefined': 'undefined' },
          step: { number: number, 'undefined': 'undefined' },
          __type__: { object: object }
        },
        width: { string: string, number: number },
        zoomable: { 'boolean': bool },
        zoomKey: { string: ['ctrlKey', 'altKey', 'metaKey', ''] },
        zoomMax: { number: number },
        zoomMin: { number: number },
        zIndex: { number: number },
        __type__: { object: object }
      };

      var configureOptions = {
        global: {
          //yAxisOrientation: ['left','right'], // TDOO: enable as soon as Grahp2d doesn't crash when changing this on the fly
          sort: true,
          sampling: true,
          stack: false,
          shaded: {
            enabled: false,
            orientation: ['zero', 'top', 'bottom', 'group'] // zero, top, bottom
          },
          style: ['line', 'bar', 'points'], // line, bar
          barChart: {
            width: [50, 5, 100, 5],
            minWidth: [50, 5, 100, 5],
            sideBySide: false,
            align: ['left', 'center', 'right'] // left, center, right
          },
          interpolation: {
            enabled: true,
            parametrization: ['centripetal', 'chordal', 'uniform'] // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
          },
          drawPoints: {
            enabled: true,
            size: [6, 2, 30, 1],
            style: ['square', 'circle'] // square, circle
          },
          dataAxis: {
            showMinorLabels: true,
            showMajorLabels: true,
            icons: false,
            width: [40, 0, 200, 1],
            visible: true,
            alignZeros: true,
            left: {
              //range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
              //format: function (value) {return value;},
              title: { text: '', style: '' }
            },
            right: {
              //range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
              //format: function (value) {return value;},
              title: { text: '', style: '' }
            }
          },
          legend: {
            enabled: false,
            icons: true,
            left: {
              visible: true,
              position: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] // top/bottom - left,right
            },
            right: {
              visible: true,
              position: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] // top/bottom - left,right
            }
          },

          autoResize: true,
          clickToUse: false,
          end: '',
          format: {
            minorLabels: {
              millisecond: 'SSS',
              second: 's',
              minute: 'HH:mm',
              hour: 'HH:mm',
              weekday: 'ddd D',
              day: 'D',
              month: 'MMM',
              year: 'YYYY'
            },
            majorLabels: {
              millisecond: 'HH:mm:ss',
              second: 'D MMMM HH:mm',
              minute: 'ddd D MMMM',
              hour: 'ddd D MMMM',
              weekday: 'MMMM YYYY',
              day: 'MMMM YYYY',
              month: 'YYYY',
              year: ''
            }
          },

          height: '',
          locale: '',
          max: '',
          maxHeight: '',
          maxMinorChars: [7, 0, 20, 1],
          min: '',
          minHeight: '',
          moveable: true,
          orientation: ['both', 'bottom', 'top'],
          showCurrentTime: false,
          showMajorLabels: true,
          showMinorLabels: true,
          start: '',
          width: '100%',
          zoomable: true,
          zoomKey: ['ctrlKey', 'altKey', 'metaKey', ''],
          zoomMax: [315360000000000, 10, 315360000000000, 1],
          zoomMin: [10, 10, 315360000000000, 1],
          zIndex: 0
        }
      };

      exports.allOptions = allOptions;
      exports.configureOptions = configureOptions;

      /***/
    },
    /* 114 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _create = __webpack_require__(29);

      var _create2 = _interopRequireDefault(_create);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * Parse a text source containing data in DOT language into a JSON object.
       * The object contains two lists: one with nodes and one with edges.
       *
       * DOT language reference: http://www.graphviz.org/doc/info/lang.html
       *
       * DOT language attributes: http://graphviz.org/content/attrs
       *
       * @param {string} data     Text containing a graph in DOT-notation
       * @return {Object} graph   An object containing two parameters:
       *                          {Object[]} nodes
       *                          {Object[]} edges
       *
       * -------------------------------------------
       * TODO
       * ====
       *
       * For label handling, this is an incomplete implementation. From docs (quote #3015):
       * 
       * > the escape sequences "\n", "\l" and "\r" divide the label into lines, centered, 
       * > left-justified, and right-justified, respectively.
       *
       * Source: http://www.graphviz.org/content/attrs#kescString
       *
       * > As another aid for readability, dot allows double-quoted strings to span multiple physical
       * > lines using the standard C convention of a backslash immediately preceding a newline
       * > character
       * > In addition, double-quoted strings can be concatenated using a '+' operator.
       * > As HTML strings can contain newline characters, which are used solely for formatting,
       * > the language does not allow escaped newlines or concatenation operators to be used
       * > within them.
       *
       * - Currently, only '\\n' is handled
       * - Note that text explicitly says 'labels'; the dot parser currently handles escape
       *   sequences in **all** strings.
       */
      function parseDOT(data) {
        dot = data;
        return parseGraph();
      }

      // mapping of attributes from DOT (the keys) to vis.js (the values)
      var NODE_ATTR_MAPPING = {
        'fontsize': 'font.size',
        'fontcolor': 'font.color',
        'labelfontcolor': 'font.color',
        'fontname': 'font.face',
        'color': ['color.border', 'color.background'],
        'fillcolor': 'color.background',
        'tooltip': 'title',
        'labeltooltip': 'title'
      };
      var EDGE_ATTR_MAPPING = (0, _create2['default'])(NODE_ATTR_MAPPING);
      EDGE_ATTR_MAPPING.color = 'color.color';
      EDGE_ATTR_MAPPING.style = 'dashes';

      // token types enumeration
      var TOKENTYPE = {
        NULL: 0,
        DELIMITER: 1,
        IDENTIFIER: 2,
        UNKNOWN: 3
      };

      // map with all delimiters
      var DELIMITERS = {
        '{': true,
        '}': true,
        '[': true,
        ']': true,
        ';': true,
        '=': true,
        ',': true,

        '->': true,
        '--': true
      };

      var dot = ''; // current dot file
      var index = 0; // current index in dot file
      var c = ''; // current token character in expr
      var token = ''; // current token
      var tokenType = TOKENTYPE.NULL; // type of the token

      /**
       * Get the first character from the dot file.
       * The character is stored into the char c. If the end of the dot file is
       * reached, the function puts an empty string in c.
       */
      function first() {
        index = 0;
        c = dot.charAt(0);
      }

      /**
       * Get the next character from the dot file.
       * The character is stored into the char c. If the end of the dot file is
       * reached, the function puts an empty string in c.
       */
      function next() {
        index++;
        c = dot.charAt(index);
      }

      /**
       * Preview the next character from the dot file.
       * @return {string} cNext
       */
      function nextPreview() {
        return dot.charAt(index + 1);
      }

      var regexAlphaNumeric = /[a-zA-Z_0-9.:#]/;
      /**
       * Test whether given character is alphabetic or numeric
       * @param {string} c
       * @return {Boolean} isAlphaNumeric
       */
      function isAlphaNumeric(c) {
        return regexAlphaNumeric.test(c);
      }

      /**
       * Merge all options of object b into object b
       * @param {Object} a
       * @param {Object} b
       * @return {Object} a
       */
      function merge(a, b) {
        if (!a) {
          a = {};
        }

        if (b) {
          for (var name in b) {
            if (b.hasOwnProperty(name)) {
              a[name] = b[name];
            }
          }
        }
        return a;
      }

      /**
       * Set a value in an object, where the provided parameter name can be a
       * path with nested parameters. For example:
       *
       *     var obj = {a: 2};
       *     setValue(obj, 'b.c', 3);     // obj = {a: 2, b: {c: 3}}
       *
       * @param {Object} obj
       * @param {string} path  A parameter name or dot-separated parameter path,
       *                      like "color.highlight.border".
       * @param {*} value
       */
      function setValue(obj, path, value) {
        var keys = path.split('.');
        var o = obj;
        while (keys.length) {
          var key = keys.shift();
          if (keys.length) {
            // this isn't the end point
            if (!o[key]) {
              o[key] = {};
            }
            o = o[key];
          } else {
            // this is the end point
            o[key] = value;
          }
        }
      }

      /**
       * Add a node to a graph object. If there is already a node with
       * the same id, their attributes will be merged.
       * @param {Object} graph
       * @param {Object} node
       */
      function addNode(graph, node) {
        var i, len;
        var current = null;

        // find root graph (in case of subgraph)
        var graphs = [graph]; // list with all graphs from current graph to root graph
        var root = graph;
        while (root.parent) {
          graphs.push(root.parent);
          root = root.parent;
        }

        // find existing node (at root level) by its id
        if (root.nodes) {
          for (i = 0, len = root.nodes.length; i < len; i++) {
            if (node.id === root.nodes[i].id) {
              current = root.nodes[i];
              break;
            }
          }
        }

        if (!current) {
          // this is a new node
          current = {
            id: node.id
          };
          if (graph.node) {
            // clone default attributes
            current.attr = merge(current.attr, graph.node);
          }
        }

        // add node to this (sub)graph and all its parent graphs
        for (i = graphs.length - 1; i >= 0; i--) {
          var g = graphs[i];

          if (!g.nodes) {
            g.nodes = [];
          }
          if (g.nodes.indexOf(current) === -1) {
            g.nodes.push(current);
          }
        }

        // merge attributes
        if (node.attr) {
          current.attr = merge(current.attr, node.attr);
        }
      }

      /**
       * Add an edge to a graph object
       * @param {Object} graph
       * @param {Object} edge
       */
      function addEdge(graph, edge) {
        if (!graph.edges) {
          graph.edges = [];
        }
        graph.edges.push(edge);
        if (graph.edge) {
          var attr = merge({}, graph.edge); // clone default attributes
          edge.attr = merge(attr, edge.attr); // merge attributes
        }
      }

      /**
       * Create an edge to a graph object
       * @param {Object} graph
       * @param {string | number | Object} from
       * @param {string | number | Object} to
       * @param {string} type
       * @param {Object | null} attr
       * @return {Object} edge
       */
      function createEdge(graph, from, to, type, attr) {
        var edge = {
          from: from,
          to: to,
          type: type
        };

        if (graph.edge) {
          edge.attr = merge({}, graph.edge); // clone default attributes
        }
        edge.attr = merge(edge.attr || {}, attr); // merge attributes

        return edge;
      }

      /**
       * Get next token in the current dot file.
       * The token and token type are available as token and tokenType
       */
      function getToken() {
        tokenType = TOKENTYPE.NULL;
        token = '';

        // skip over whitespaces
        while (c === ' ' || c === '\t' || c === '\n' || c === '\r') {
          // space, tab, enter
          next();
        }

        do {
          var isComment = false;

          // skip comment
          if (c === '#') {
            // find the previous non-space character
            var i = index - 1;
            while (dot.charAt(i) === ' ' || dot.charAt(i) === '\t') {
              i--;
            }
            if (dot.charAt(i) === '\n' || dot.charAt(i) === '') {
              // the # is at the start of a line, this is indeed a line comment
              while (c != '' && c != '\n') {
                next();
              }
              isComment = true;
            }
          }
          if (c === '/' && nextPreview() === '/') {
            // skip line comment
            while (c != '' && c != '\n') {
              next();
            }
            isComment = true;
          }
          if (c === '/' && nextPreview() === '*') {
            // skip block comment
            while (c != '') {
              if (c === '*' && nextPreview() === '/') {
                // end of block comment found. skip these last two characters
                next();
                next();
                break;
              } else {
                next();
              }
            }
            isComment = true;
          }

          // skip over whitespaces
          while (c === ' ' || c === '\t' || c === '\n' || c === '\r') {
            // space, tab, enter
            next();
          }
        } while (isComment);

        // check for end of dot file
        if (c === '') {
          // token is still empty
          tokenType = TOKENTYPE.DELIMITER;
          return;
        }

        // check for delimiters consisting of 2 characters
        var c2 = c + nextPreview();
        if (DELIMITERS[c2]) {
          tokenType = TOKENTYPE.DELIMITER;
          token = c2;
          next();
          next();
          return;
        }

        // check for delimiters consisting of 1 character
        if (DELIMITERS[c]) {
          tokenType = TOKENTYPE.DELIMITER;
          token = c;
          next();
          return;
        }

        // check for an identifier (number or string)
        // TODO: more precise parsing of numbers/strings (and the port separator ':')
        if (isAlphaNumeric(c) || c === '-') {
          token += c;
          next();

          while (isAlphaNumeric(c)) {
            token += c;
            next();
          }
          if (token === 'false') {
            token = false; // convert to boolean
          } else if (token === 'true') {
            token = true; // convert to boolean
          } else if (!isNaN(Number(token))) {
            token = Number(token); // convert to number
          }
          tokenType = TOKENTYPE.IDENTIFIER;
          return;
        }

        // check for a string enclosed by double quotes
        if (c === '"') {
          next();
          while (c != '' && (c != '"' || c === '"' && nextPreview() === '"')) {
            if (c === '"') {
              // skip the escape character
              token += c;
              next();
            } else if (c === '\\' && nextPreview() === 'n') {
              // Honor a newline escape sequence
              token += '\n';
              next();
            } else {
              token += c;
            }
            next();
          }
          if (c != '"') {
            throw newSyntaxError('End of string " expected');
          }
          next();
          tokenType = TOKENTYPE.IDENTIFIER;
          return;
        }

        // something unknown is found, wrong characters, a syntax error
        tokenType = TOKENTYPE.UNKNOWN;
        while (c != '') {
          token += c;
          next();
        }
        throw new SyntaxError('Syntax error in part "' + chop(token, 30) + '"');
      }

      /**
       * Parse a graph.
       * @returns {Object} graph
       */
      function parseGraph() {
        var graph = {};

        first();
        getToken();

        // optional strict keyword
        if (token === 'strict') {
          graph.strict = true;
          getToken();
        }

        // graph or digraph keyword
        if (token === 'graph' || token === 'digraph') {
          graph.type = token;
          getToken();
        }

        // optional graph id
        if (tokenType === TOKENTYPE.IDENTIFIER) {
          graph.id = token;
          getToken();
        }

        // open angle bracket
        if (token != '{') {
          throw newSyntaxError('Angle bracket { expected');
        }
        getToken();

        // statements
        parseStatements(graph);

        // close angle bracket
        if (token != '}') {
          throw newSyntaxError('Angle bracket } expected');
        }
        getToken();

        // end of file
        if (token !== '') {
          throw newSyntaxError('End of file expected');
        }
        getToken();

        // remove temporary default options
        delete graph.node;
        delete graph.edge;
        delete graph.graph;

        return graph;
      }

      /**
       * Parse a list with statements.
       * @param {Object} graph
       */
      function parseStatements(graph) {
        while (token !== '' && token != '}') {
          parseStatement(graph);
          if (token === ';') {
            getToken();
          }
        }
      }

      /**
       * Parse a single statement. Can be a an attribute statement, node
       * statement, a series of node statements and edge statements, or a
       * parameter.
       * @param {Object} graph
       */
      function parseStatement(graph) {
        // parse subgraph
        var subgraph = parseSubgraph(graph);
        if (subgraph) {
          // edge statements
          parseEdge(graph, subgraph);

          return;
        }

        // parse an attribute statement
        var attr = parseAttributeStatement(graph);
        if (attr) {
          return;
        }

        // parse node
        if (tokenType != TOKENTYPE.IDENTIFIER) {
          throw newSyntaxError('Identifier expected');
        }
        var id = token; // id can be a string or a number
        getToken();

        if (token === '=') {
          // id statement
          getToken();
          if (tokenType != TOKENTYPE.IDENTIFIER) {
            throw newSyntaxError('Identifier expected');
          }
          graph[id] = token;
          getToken();
          // TODO: implement comma separated list with "a_list: ID=ID [','] [a_list] "
        } else {
          parseNodeStatement(graph, id);
        }
      }

      /**
       * Parse a subgraph
       * @param {Object} graph    parent graph object
       * @return {Object | null} subgraph
       */
      function parseSubgraph(graph) {
        var subgraph = null;

        // optional subgraph keyword
        if (token === 'subgraph') {
          subgraph = {};
          subgraph.type = 'subgraph';
          getToken();

          // optional graph id
          if (tokenType === TOKENTYPE.IDENTIFIER) {
            subgraph.id = token;
            getToken();
          }
        }

        // open angle bracket
        if (token === '{') {
          getToken();

          if (!subgraph) {
            subgraph = {};
          }
          subgraph.parent = graph;
          subgraph.node = graph.node;
          subgraph.edge = graph.edge;
          subgraph.graph = graph.graph;

          // statements
          parseStatements(subgraph);

          // close angle bracket
          if (token != '}') {
            throw newSyntaxError('Angle bracket } expected');
          }
          getToken();

          // remove temporary default options
          delete subgraph.node;
          delete subgraph.edge;
          delete subgraph.graph;
          delete subgraph.parent;

          // register at the parent graph
          if (!graph.subgraphs) {
            graph.subgraphs = [];
          }
          graph.subgraphs.push(subgraph);
        }

        return subgraph;
      }

      /**
       * parse an attribute statement like "node [shape=circle fontSize=16]".
       * Available keywords are 'node', 'edge', 'graph'.
       * The previous list with default attributes will be replaced
       * @param {Object} graph
       * @returns {String | null} keyword Returns the name of the parsed attribute
       *                                  (node, edge, graph), or null if nothing
       *                                  is parsed.
       */
      function parseAttributeStatement(graph) {
        // attribute statements
        if (token === 'node') {
          getToken();

          // node attributes
          graph.node = parseAttributeList();
          return 'node';
        } else if (token === 'edge') {
          getToken();

          // edge attributes
          graph.edge = parseAttributeList();
          return 'edge';
        } else if (token === 'graph') {
          getToken();

          // graph attributes
          graph.graph = parseAttributeList();
          return 'graph';
        }

        return null;
      }

      /**
       * parse a node statement
       * @param {Object} graph
       * @param {string | number} id
       */
      function parseNodeStatement(graph, id) {
        // node statement
        var node = {
          id: id
        };
        var attr = parseAttributeList();
        if (attr) {
          node.attr = attr;
        }
        addNode(graph, node);

        // edge statements
        parseEdge(graph, id);
      }

      /**
       * Parse an edge or a series of edges
       * @param {Object} graph
       * @param {string | number} from        Id of the from node
       */
      function parseEdge(graph, from) {
        while (token === '->' || token === '--') {
          var to;
          var type = token;
          getToken();

          var subgraph = parseSubgraph(graph);
          if (subgraph) {
            to = subgraph;
          } else {
            if (tokenType != TOKENTYPE.IDENTIFIER) {
              throw newSyntaxError('Identifier or subgraph expected');
            }
            to = token;
            addNode(graph, {
              id: to
            });
            getToken();
          }

          // parse edge attributes
          var attr = parseAttributeList();

          // create edge
          var edge = createEdge(graph, from, to, type, attr);
          addEdge(graph, edge);

          from = to;
        }
      }

      /**
       * Parse a set with attributes,
       * for example [label="1.000", shape=solid]
       * @return {Object | null} attr
       */
      function parseAttributeList() {
        var attr = null;

        // edge styles of dot and vis
        var edgeStyles = {
          'dashed': true,
          'solid': false,
          'dotted': [1, 5]
        };

        while (token === '[') {
          getToken();
          attr = {};
          while (token !== '' && token != ']') {
            if (tokenType != TOKENTYPE.IDENTIFIER) {
              throw newSyntaxError('Attribute name expected');
            }
            var name = token;

            getToken();
            if (token != '=') {
              throw newSyntaxError('Equal sign = expected');
            }
            getToken();

            if (tokenType != TOKENTYPE.IDENTIFIER) {
              throw newSyntaxError('Attribute value expected');
            }
            var value = token;

            // convert from dot style to vis
            if (name === 'style') {
              value = edgeStyles[value];
            }

            setValue(attr, name, value); // name can be a path

            getToken();
            if (token == ',') {
              getToken();
            }
          }

          if (token != ']') {
            throw newSyntaxError('Bracket ] expected');
          }
          getToken();
        }

        return attr;
      }

      /**
       * Create a syntax error with extra information on current token and index.
       * @param {string} message
       * @returns {SyntaxError} err
       */
      function newSyntaxError(message) {
        return new SyntaxError(message + ', got "' + chop(token, 30) + '" (char ' + index + ')');
      }

      /**
       * Chop off text after a maximum length
       * @param {string} text
       * @param {number} maxLength
       * @returns {String}
       */
      function chop(text, maxLength) {
        return text.length <= maxLength ? text : text.substr(0, 27) + '...';
      }

      /**
       * Execute a function fn for each pair of elements in two arrays
       * @param {Array | *} array1
       * @param {Array | *} array2
       * @param {function} fn
       */
      function forEach2(array1, array2, fn) {
        if (Array.isArray(array1)) {
          array1.forEach(function (elem1) {
            if (Array.isArray(array2)) {
              array2.forEach(function (elem2) {
                fn(elem1, elem2);
              });
            } else {
              fn(elem1, array2);
            }
          });
        } else {
          if (Array.isArray(array2)) {
            array2.forEach(function (elem2) {
              fn(array1, elem2);
            });
          } else {
            fn(array1, array2);
          }
        }
      }

      /**
       * Set a nested property on an object
       * When nested objects are missing, they will be created.
       * For example setProp({}, 'font.color', 'red') will return {font: {color: 'red'}}
       * @param {Object} object
       * @param {string} path   A dot separated string like 'font.color'
       * @param {*} value       Value for the property
       * @return {Object} Returns the original object, allows for chaining.
       */
      function setProp(object, path, value) {
        var names = path.split('.');
        var prop = names.pop();

        // traverse over the nested objects
        var obj = object;
        for (var i = 0; i < names.length; i++) {
          var name = names[i];
          if (!(name in obj)) {
            obj[name] = {};
          }
          obj = obj[name];
        }

        // set the property value
        obj[prop] = value;

        return object;
      }

      /**
       * Convert an object with DOT attributes to their vis.js equivalents.
       * @param {Object} attr     Object with DOT attributes
       * @param {Object} mapping
       * @return {Object}         Returns an object with vis.js attributes
       */
      function convertAttr(attr, mapping) {
        var converted = {};

        for (var prop in attr) {
          if (attr.hasOwnProperty(prop)) {
            var visProp = mapping[prop];
            if (Array.isArray(visProp)) {
              visProp.forEach(function (visPropI) {
                setProp(converted, visPropI, attr[prop]);
              });
            } else if (typeof visProp === 'string') {
              setProp(converted, visProp, attr[prop]);
            } else {
              setProp(converted, prop, attr[prop]);
            }
          }
        }

        return converted;
      }

      /**
       * Convert a string containing a graph in DOT language into a map containing
       * with nodes and edges in the format of graph.
       * @param {string} data         Text containing a graph in DOT-notation
       * @return {Object} graphData
       */
      function DOTToGraph(data) {
        // parse the DOT file
        var dotData = parseDOT(data);
        var graphData = {
          nodes: [],
          edges: [],
          options: {}
        };

        // copy the nodes
        if (dotData.nodes) {
          dotData.nodes.forEach(function (dotNode) {
            var graphNode = {
              id: dotNode.id,
              label: String(dotNode.label || dotNode.id)
            };
            merge(graphNode, convertAttr(dotNode.attr, NODE_ATTR_MAPPING));
            if (graphNode.image) {
              graphNode.shape = 'image';
            }
            graphData.nodes.push(graphNode);
          });
        }

        // copy the edges
        if (dotData.edges) {
          /**
           * Convert an edge in DOT format to an edge with VisGraph format
           * @param {Object} dotEdge
           * @returns {Object} graphEdge
           */
          var convertEdge = function convertEdge(dotEdge) {
            var graphEdge = {
              from: dotEdge.from,
              to: dotEdge.to
            };
            merge(graphEdge, convertAttr(dotEdge.attr, EDGE_ATTR_MAPPING));
            graphEdge.arrows = dotEdge.type === '->' ? 'to' : undefined;

            return graphEdge;
          };

          dotData.edges.forEach(function (dotEdge) {
            var from, to;
            if (dotEdge.from instanceof Object) {
              from = dotEdge.from.nodes;
            } else {
              from = {
                id: dotEdge.from
              };
            }

            // TODO: support for attributes 'dir' and 'arrowhead' (edge arrows)

            if (dotEdge.to instanceof Object) {
              to = dotEdge.to.nodes;
            } else {
              to = {
                id: dotEdge.to
              };
            }

            if (dotEdge.from instanceof Object && dotEdge.from.edges) {
              dotEdge.from.edges.forEach(function (subEdge) {
                var graphEdge = convertEdge(subEdge);
                graphData.edges.push(graphEdge);
              });
            }

            forEach2(from, to, function (from, to) {
              var subEdge = createEdge(graphData, from.id, to.id, dotEdge.type, dotEdge.attr);
              var graphEdge = convertEdge(subEdge);
              graphData.edges.push(graphEdge);
            });

            if (dotEdge.to instanceof Object && dotEdge.to.edges) {
              dotEdge.to.edges.forEach(function (subEdge) {
                var graphEdge = convertEdge(subEdge);
                graphData.edges.push(graphEdge);
              });
            }
          });
        }

        // copy the options
        if (dotData.attr) {
          graphData.options = dotData.attr;
        }

        return graphData;
      }

      // exports
      exports.parseDOT = parseDOT;
      exports.DOTToGraph = DOTToGraph;

      /***/
    },
    /* 115 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       *
       * @param {json} gephiJSON
       * @param {obj} optionsObj
       * @returns {{nodes: Array, edges: Array}}
       */

      function parseGephi(gephiJSON, optionsObj) {
        var edges = [];
        var nodes = [];
        var options = {
          edges: {
            inheritColor: false
          },
          nodes: {
            fixed: false,
            parseColor: false
          }
        };

        if (optionsObj !== undefined) {
          if (optionsObj.fixed !== undefined) {
            options.nodes.fixed = optionsObj.fixed;
          }
          if (optionsObj.parseColor !== undefined) {
            options.nodes.parseColor = optionsObj.parseColor;
          }
          if (optionsObj.inheritColor !== undefined) {
            options.edges.inheritColor = optionsObj.inheritColor;
          }
        }

        var gEdges = gephiJSON.edges;
        var gNodes = gephiJSON.nodes;
        for (var i = 0; i < gEdges.length; i++) {
          var edge = {};
          var gEdge = gEdges[i];
          edge['id'] = gEdge.id;
          edge['from'] = gEdge.source;
          edge['to'] = gEdge.target;
          edge['attributes'] = gEdge.attributes;
          edge['label'] = gEdge.label;
          edge['title'] = gEdge.attributes !== undefined ? gEdge.attributes.title : undefined;
          if (gEdge['type'] === 'Directed') {
            edge['arrows'] = 'to';
          }
          //    edge['value'] = gEdge.attributes !== undefined ? gEdge.attributes.Weight : undefined;
          //    edge['width'] = edge['value'] !== undefined ? undefined : edgegEdge.size;
          if (gEdge.color && options.inheritColor === false) {
            edge['color'] = gEdge.color;
          }
          edges.push(edge);
        }

        for (var j = 0; j < gNodes.length; j++) {
          var node = {};
          var gNode = gNodes[j];
          node['id'] = gNode.id;
          node['attributes'] = gNode.attributes;
          node['x'] = gNode.x;
          node['y'] = gNode.y;
          node['label'] = gNode.label;
          node['title'] = gNode.attributes !== undefined ? gNode.attributes.title : gNode.title;
          if (options.nodes.parseColor === true) {
            node['color'] = gNode.color;
          } else {
            node['color'] = gNode.color !== undefined ? { background: gNode.color, border: gNode.color, highlight: { background: gNode.color, border: gNode.color }, hover: { background: gNode.color, border: gNode.color } } : undefined;
          }
          node['size'] = gNode.size;
          node['fixed'] = options.nodes.fixed && gNode.x !== undefined && gNode.y !== undefined;
          nodes.push(node);
        }

        return { nodes: nodes, edges: edges };
      }

      exports.parseGephi = parseGephi;

      /***/
    },
    /* 116 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _CachedImage = __webpack_require__(185);

      var _CachedImage2 = _interopRequireDefault(_CachedImage);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * This callback is a callback that accepts an Image.
       * @callback ImageCallback
       * @param {Image} image
       */

      /**
       * This class loads images and keeps them stored.
       *
       * @param {ImageCallback} callback
       */
      var Images = function () {
        /**
         * @param {ImageCallback} callback
         */
        function Images(callback) {
          (0, _classCallCheck3["default"])(this, Images);

          this.images = {};
          this.imageBroken = {};
          this.callback = callback;
        }

        /**
         * @param {string} url                      The original Url that failed to load, if the broken image is successfully loaded it will be added to the cache using this Url as the key so that subsequent requests for this Url will return the broken image
         * @param {string} brokenUrl                Url the broken image to try and load
         * @param {Image} imageToLoadBrokenUrlOn   The image object
         */

        (0, _createClass3["default"])(Images, [{
          key: "_tryloadBrokenUrl",
          value: function _tryloadBrokenUrl(url, brokenUrl, imageToLoadBrokenUrlOn) {
            //If these parameters aren't specified then exit the function because nothing constructive can be done
            if (url === undefined || imageToLoadBrokenUrlOn === undefined) return;
            if (brokenUrl === undefined) {
              console.warn("No broken url image defined");
              return;
            }

            //Clear the old subscription to the error event and put a new in place that only handle errors in loading the brokenImageUrl
            imageToLoadBrokenUrlOn.onerror = function () {
              console.error("Could not load brokenImage:", brokenUrl);
              // cache item will contain empty image, this should be OK for default
            };

            //Set the source of the image to the brokenUrl, this is actually what kicks off the loading of the broken image
            imageToLoadBrokenUrlOn.image.src = brokenUrl;
          }

          /**
           *
           * @param {vis.Image} imageToRedrawWith
           * @private
           */

        }, {
          key: "_redrawWithImage",
          value: function _redrawWithImage(imageToRedrawWith) {
            if (this.callback) {
              this.callback(imageToRedrawWith);
            }
          }

          /**
           * @param {string} url          Url of the image
           * @param {string} brokenUrl    Url of an image to use if the url image is not found
           * @return {Image} img          The image object
           */

        }, {
          key: "load",
          value: function load(url, brokenUrl) {
            var _this = this;

            //Try and get the image from the cache, if successful then return the cached image   
            var cachedImage = this.images[url];
            if (cachedImage) return cachedImage;

            //Create a new image
            var img = new _CachedImage2["default"]();

            // Need to add to cache here, otherwise final return will spawn different copies of the same image,
            // Also, there will be multiple loads of the same image.
            this.images[url] = img;

            //Subscribe to the event that is raised if the image loads successfully 
            img.image.onload = function () {
              // Properly init the cached item and then request a redraw
              _this._fixImageCoordinates(img.image);
              img.init();
              _this._redrawWithImage(img);
            };

            //Subscribe to the event that is raised if the image fails to load
            img.image.onerror = function () {
              console.error("Could not load image:", url);
              //Try and load the image specified by the brokenUrl using
              _this._tryloadBrokenUrl(url, brokenUrl, img);
            };

            //Set the source of the image to the url, this is what actually kicks off the loading of the image
            img.image.src = url;

            //Return the new image
            return img;
          }

          /**
           * IE11 fix -- thanks dponch!
           *
           * Local helper function
           * @param {vis.Image} imageToCache
           * @private
           */

        }, {
          key: "_fixImageCoordinates",
          value: function _fixImageCoordinates(imageToCache) {
            if (imageToCache.width === 0) {
              document.body.appendChild(imageToCache);
              imageToCache.width = imageToCache.offsetWidth;
              imageToCache.height = imageToCache.offsetHeight;
              document.body.removeChild(imageToCache);
            }
          }
        }]);
        return Images;
      }();

      exports["default"] = Images;

      /***/
    },
    /* 117 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _slicedToArray2 = __webpack_require__(30);

      var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var ComponentUtil = __webpack_require__(48)['default'];
      var LabelSplitter = __webpack_require__(191)['default'];

      /**
       * @typedef {'bold'|'ital'|'boldital'|'mono'|'normal'} MultiFontStyle
       *
       * The allowed specifiers of multi-fonts.
       */

      /**
       * @typedef {{color:string, size:number, face:string, mod:string, vadjust:number}} MultiFontOptions
       *
       * The full set of options of a given multi-font.
       */

      /**
       * @typedef {Array.<object>} Pile
       *
       * Sequence of option objects, the order is significant.
       * The sequence is used to determine the value of a given option.
       *
       * Usage principles:
       *
       *  - All search is done in the sequence of the pile.
       *  - As soon as a value is found, the searching stops.
       *  - prototypes are totally ignored. The idea is to add option objects used as prototypes
       *    to the pile, in the correct order.
       */

      /**
       * List of special styles for multi-fonts
       * @private
       */
      var multiFontStyle = ['bold', 'ital', 'boldital', 'mono'];

      /**
       * A Label to be used for Nodes or Edges.
       */

      var Label = function () {

        /**
         * @param {Object} body
         * @param {Object} options
         * @param {boolean} [edgelabel=false]
         */
        function Label(body, options) {
          var edgelabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
          (0, _classCallCheck3['default'])(this, Label);

          this.body = body;
          this.pointToSelf = false;
          this.baseSize = undefined;
          this.fontOptions = {}; // instance variable containing the *instance-local* font options
          this.setOptions(options);
          this.size = { top: 0, left: 0, width: 0, height: 0, yLine: 0 };
          this.isEdgeLabel = edgelabel;
        }

        /**
         * @param {Object} options the options of the parent Node-instance
         */

        (0, _createClass3['default'])(Label, [{
          key: 'setOptions',
          value: function setOptions(options) {
            this.elementOptions = options; // Reference to the options of the parent Node-instance 

            this.initFontOptions(options.font);

            if (ComponentUtil.isValidLabel(options.label)) {
              this.labelDirty = true;
            } else {
              // Bad label! Change the option value to prevent bad stuff happening
              options.label = '';
            }

            if (options.font !== undefined && options.font !== null) {
              // font options can be deleted at various levels
              if (typeof options.font === 'string') {
                this.baseSize = this.fontOptions.size;
              } else if ((0, _typeof3['default'])(options.font) === 'object') {
                var size = options.font.size;

                if (size !== undefined) {
                  this.baseSize = size;
                }
              }
            }
          }

          /**
           * Init the font Options structure.
           *
           * Member fontOptions serves as an accumulator for the current font options.
           * As such, it needs to be completely separated from the node options.
           *
           * @param {Object} newFontOptions the new font options to process
           * @private
           */

        }, {
          key: 'initFontOptions',
          value: function initFontOptions(newFontOptions) {
            var _this = this;

            // Prepare the multi-font option objects.
            // These will be filled in propagateFonts(), if required
            util.forEach(multiFontStyle, function (style) {
              _this.fontOptions[style] = {};
            });

            // Handle shorthand option, if present
            if (Label.parseFontString(this.fontOptions, newFontOptions)) {
              this.fontOptions.vadjust = 0;
              return;
            }

            // Copy over the non-multifont options, if specified
            util.forEach(newFontOptions, function (prop, n) {
              if (prop !== undefined && prop !== null && (typeof prop === 'undefined' ? 'undefined' : (0, _typeof3['default'])(prop)) !== 'object') {
                _this.fontOptions[n] = prop;
              }
            });
          }

          /**
           * If in-variable is a string, parse it as a font specifier.
           *
           * Note that following is not done here and have to be done after the call:
           * - No number conversion (size)
           * - Not all font options are set (vadjust, mod)
           *
           * @param {Object} outOptions  out-parameter, object in which to store the parse results (if any)
           * @param {Object} inOptions  font options to parse
           * @return {boolean} true if font parsed as string, false otherwise
           * @static
           */

        }, {
          key: 'constrain',

          /**
           * Set the width and height constraints based on 'nearest' value
           *
           * @param {Array} pile array of option objects to consider
           * @returns {object} the actual constraint values to use
           * @private
           */
          value: function constrain(pile) {
            // NOTE: constrainWidth and  constrainHeight never set!
            // NOTE: for edge labels, only 'maxWdt' set
            // Node labels can set all the fields
            var fontOptions = {
              constrainWidth: false,
              maxWdt: -1,
              minWdt: -1,
              constrainHeight: false,
              minHgt: -1,
              valign: 'middle'
            };

            var widthConstraint = util.topMost(pile, 'widthConstraint');
            if (typeof widthConstraint === 'number') {
              fontOptions.maxWdt = Number(widthConstraint);
              fontOptions.minWdt = Number(widthConstraint);
            } else if ((typeof widthConstraint === 'undefined' ? 'undefined' : (0, _typeof3['default'])(widthConstraint)) === 'object') {
              var widthConstraintMaximum = util.topMost(pile, ['widthConstraint', 'maximum']);
              if (typeof widthConstraintMaximum === 'number') {
                fontOptions.maxWdt = Number(widthConstraintMaximum);
              }
              var widthConstraintMinimum = util.topMost(pile, ['widthConstraint', 'minimum']);
              if (typeof widthConstraintMinimum === 'number') {
                fontOptions.minWdt = Number(widthConstraintMinimum);
              }
            }

            var heightConstraint = util.topMost(pile, 'heightConstraint');
            if (typeof heightConstraint === 'number') {
              fontOptions.minHgt = Number(heightConstraint);
            } else if ((typeof heightConstraint === 'undefined' ? 'undefined' : (0, _typeof3['default'])(heightConstraint)) === 'object') {
              var heightConstraintMinimum = util.topMost(pile, ['heightConstraint', 'minimum']);
              if (typeof heightConstraintMinimum === 'number') {
                fontOptions.minHgt = Number(heightConstraintMinimum);
              }
              var heightConstraintValign = util.topMost(pile, ['heightConstraint', 'valign']);
              if (typeof heightConstraintValign === 'string') {
                if (heightConstraintValign === 'top' || heightConstraintValign === 'bottom') {
                  fontOptions.valign = heightConstraintValign;
                }
              }
            }

            return fontOptions;
          }

          /**
           * Set options and update internal state
           *
           * @param {Object} options  options to set
           * @param {Array}  pile     array of option objects to consider for option 'chosen'
           */

        }, {
          key: 'update',
          value: function update(options, pile) {
            this.setOptions(options, true);
            this.propagateFonts(pile);
            util.deepExtend(this.fontOptions, this.constrain(pile));
            this.fontOptions.chooser = ComponentUtil.choosify('label', pile);
          }

          /**
           * When margins are set in an element, adjust sizes is called to remove them
           * from the width/height constraints. This must be done prior to label sizing.
           *
           * @param {{top: number, right: number, bottom: number, left: number}} margins
           */

        }, {
          key: 'adjustSizes',
          value: function adjustSizes(margins) {
            var widthBias = margins ? margins.right + margins.left : 0;
            if (this.fontOptions.constrainWidth) {
              this.fontOptions.maxWdt -= widthBias;
              this.fontOptions.minWdt -= widthBias;
            }
            var heightBias = margins ? margins.top + margins.bottom : 0;
            if (this.fontOptions.constrainHeight) {
              this.fontOptions.minHgt -= heightBias;
            }
          }

          /////////////////////////////////////////////////////////
          // Methods for handling options piles
          // Eventually, these will be moved to a separate class
          /////////////////////////////////////////////////////////

          /**
           * Add the font members of the passed list of option objects to the pile.
           *
           * @param {Pile} dstPile  pile of option objects add to 
           * @param {Pile} srcPile  pile of option objects to take font options from
           * @private
           */

        }, {
          key: 'addFontOptionsToPile',
          value: function addFontOptionsToPile(dstPile, srcPile) {
            for (var i = 0; i < srcPile.length; ++i) {
              this.addFontToPile(dstPile, srcPile[i]);
            }
          }

          /**
           * Add given font option object to the list of objects (the 'pile') to consider for determining
           * multi-font option values.
           *
           * @param {Pile} pile  pile of option objects to use
           * @param {object} options  instance to add to pile
           * @private
           */

        }, {
          key: 'addFontToPile',
          value: function addFontToPile(pile, options) {
            if (options === undefined) return;
            if (options.font === undefined || options.font === null) return;

            var item = options.font;
            pile.push(item);
          }

          /**
           * Collect all own-property values from the font pile that aren't multi-font option objectss.
           *
           * @param {Pile} pile  pile of option objects to use
           * @returns {object} object with all current own basic font properties
           * @private
           */

        }, {
          key: 'getBasicOptions',
          value: function getBasicOptions(pile) {
            var ret = {};

            // Scans the whole pile to get all options present
            for (var n = 0; n < pile.length; ++n) {
              var fontOptions = pile[n];

              // Convert shorthand if necessary
              var tmpShorthand = {};
              if (Label.parseFontString(tmpShorthand, fontOptions)) {
                fontOptions = tmpShorthand;
              }

              util.forEach(fontOptions, function (opt, name) {
                if (opt === undefined) return; // multi-font option need not be present 
                if (ret.hasOwnProperty(name)) return; // Keep first value we encounter

                if (multiFontStyle.indexOf(name) !== -1) {
                  // Skip multi-font properties but we do need the structure
                  ret[name] = {};
                } else {
                  ret[name] = opt;
                }
              });
            }

            return ret;
          }

          /**
           * Return the value for given option for the given multi-font.
           *
           * All available option objects are trawled in the set order to construct the option values.
           *
           * ---------------------------------------------------------------------
           * ## Traversal of pile for multi-fonts
           *
           * The determination of multi-font option values is a special case, because any values not
           * present in the multi-font options should by definition be taken from the main font options,
           * i.e. from the current 'parent' object of the multi-font option.
           *
           * ### Search order for multi-fonts
           *
           * 'bold' used as example:
           *
           *   - search in option group 'bold' in local properties
           *   - search in main font option group in local properties
           *
           * ---------------------------------------------------------------------
           *
           * @param {Pile} pile  pile of option objects to use
           * @param {MultiFontStyle} multiName sub path for the multi-font
           * @param {string} option  the option to search for, for the given multi-font
           * @returns {string|number} the value for the given option
           * @private
           */

        }, {
          key: 'getFontOption',
          value: function getFontOption(pile, multiName, option) {
            var multiFont = void 0;

            // Search multi font in local properties
            for (var n = 0; n < pile.length; ++n) {
              var fontOptions = pile[n];

              if (fontOptions.hasOwnProperty(multiName)) {
                multiFont = fontOptions[multiName];
                if (multiFont === undefined || multiFont === null) continue;

                // Convert shorthand if necessary
                // TODO: inefficient to do this conversion every time; find a better way.
                var tmpShorthand = {};
                if (Label.parseFontString(tmpShorthand, multiFont)) {
                  multiFont = tmpShorthand;
                }

                if (multiFont.hasOwnProperty(option)) {
                  return multiFont[option];
                }
              }
            }

            // Option is not mentioned in the multi font options; take it from the parent font options.
            // These have already been converted with getBasicOptions(), so use the converted values.
            if (this.fontOptions.hasOwnProperty(option)) {
              return this.fontOptions[option];
            }

            // A value **must** be found; you should never get here.
            throw new Error("Did not find value for multi-font for property: '" + option + "'");
          }

          /**
           * Return all options values for the given multi-font.
           *
           * All available option objects are trawled in the set order to construct the option values.
           *
           * @param {Pile} pile  pile of option objects to use
           * @param {MultiFontStyle} multiName sub path for the mod-font
           * @returns {MultiFontOptions}
           * @private
           */

        }, {
          key: 'getFontOptions',
          value: function getFontOptions(pile, multiName) {
            var result = {};
            var optionNames = ['color', 'size', 'face', 'mod', 'vadjust']; // List of allowed options per multi-font

            for (var i = 0; i < optionNames.length; ++i) {
              var mod = optionNames[i];
              result[mod] = this.getFontOption(pile, multiName, mod);
            }

            return result;
          }

          /////////////////////////////////////////////////////////
          // End methods for handling options piles
          /////////////////////////////////////////////////////////


          /**
           * Collapse the font options for the multi-font to single objects, from
           * the chain of option objects passed (the 'pile').
           *
           * @param {Pile} pile  sequence of option objects to consider.
           *                     First item in list assumed to be the newly set options.
           */

        }, {
          key: 'propagateFonts',
          value: function propagateFonts(pile) {
            var _this2 = this;

            var fontPile = []; // sequence of font objects to consider, order important

            // Note that this.elementOptions is not used here.
            this.addFontOptionsToPile(fontPile, pile);
            this.fontOptions = this.getBasicOptions(fontPile);

            // We set multifont values even if multi === false, for consistency (things break otherwise)

            var _loop = function _loop(i) {
              var mod = multiFontStyle[i];
              var modOptions = _this2.fontOptions[mod];
              var tmpMultiFontOptions = _this2.getFontOptions(fontPile, mod);

              // Copy over found values
              util.forEach(tmpMultiFontOptions, function (option, n) {
                modOptions[n] = option;
              });

              modOptions.size = Number(modOptions.size);
              modOptions.vadjust = Number(modOptions.vadjust);
            };

            for (var i = 0; i < multiFontStyle.length; ++i) {
              _loop(i);
            }
          }

          /**
           * Main function. This is called from anything that wants to draw a label.
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x
           * @param {number} y
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {string} [baseline='middle']
           */

        }, {
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover) {
            var baseline = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'middle';

            // if no label, return
            if (this.elementOptions.label === undefined) return;

            // check if we have to render the label
            var viewFontSize = this.fontOptions.size * this.body.view.scale;
            if (this.elementOptions.label && viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) return;

            // This ensures that there will not be HUGE letters on screen
            // by setting an upper limit on the visible text size (regardless of zoomLevel)
            if (viewFontSize >= this.elementOptions.scaling.label.maxVisible) {
              viewFontSize = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale;
            }

            // update the size cache if required
            this.calculateLabelSize(ctx, selected, hover, x, y, baseline);
            this._drawBackground(ctx);
            this._drawText(ctx, x, this.size.yLine, baseline, viewFontSize);
          }

          /**
           * Draws the label background
           * @param {CanvasRenderingContext2D} ctx
           * @private
           */

        }, {
          key: '_drawBackground',
          value: function _drawBackground(ctx) {
            if (this.fontOptions.background !== undefined && this.fontOptions.background !== "none") {
              ctx.fillStyle = this.fontOptions.background;
              var size = this.getSize();
              ctx.fillRect(size.left, size.top, size.width, size.height);
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x
           * @param {number} y
           * @param {string} [baseline='middle']
           * @param {number} viewFontSize 
           * @private
           */

        }, {
          key: '_drawText',
          value: function _drawText(ctx, x, y) {
            var baseline = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'middle';
            var viewFontSize = arguments[4];

            var _setAlignment2 = this._setAlignment(ctx, x, y, baseline);

            var _setAlignment3 = (0, _slicedToArray3['default'])(_setAlignment2, 2);

            x = _setAlignment3[0];
            y = _setAlignment3[1];

            ctx.textAlign = 'left';
            x = x - this.size.width / 2; // Shift label 1/2-distance to the left
            if (this.fontOptions.valign && this.size.height > this.size.labelHeight) {
              if (this.fontOptions.valign === 'top') {
                y -= (this.size.height - this.size.labelHeight) / 2;
              }
              if (this.fontOptions.valign === 'bottom') {
                y += (this.size.height - this.size.labelHeight) / 2;
              }
            }

            // draw the text
            for (var i = 0; i < this.lineCount; i++) {
              var line = this.lines[i];
              if (line && line.blocks) {
                var width = 0;
                if (this.isEdgeLabel || this.fontOptions.align === 'center') {
                  width += (this.size.width - line.width) / 2;
                } else if (this.fontOptions.align === 'right') {
                  width += this.size.width - line.width;
                }
                for (var j = 0; j < line.blocks.length; j++) {
                  var block = line.blocks[j];
                  ctx.font = block.font;

                  var _getColor2 = this._getColor(block.color, viewFontSize, block.strokeColor),
                      _getColor3 = (0, _slicedToArray3['default'])(_getColor2, 2),
                      fontColor = _getColor3[0],
                      strokeColor = _getColor3[1];

                  if (block.strokeWidth > 0) {
                    ctx.lineWidth = block.strokeWidth;
                    ctx.strokeStyle = strokeColor;
                    ctx.lineJoin = 'round';
                  }
                  ctx.fillStyle = fontColor;

                  if (block.strokeWidth > 0) {
                    ctx.strokeText(block.text, x + width, y + block.vadjust);
                  }
                  ctx.fillText(block.text, x + width, y + block.vadjust);
                  width += block.width;
                }
                y += line.height;
              }
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x
           * @param {number} y
           * @param {string} baseline
           * @returns {Array.<number>}
           * @private
           */

        }, {
          key: '_setAlignment',
          value: function _setAlignment(ctx, x, y, baseline) {
            // check for label alignment (for edges)
            // TODO: make alignment for nodes
            if (this.isEdgeLabel && this.fontOptions.align !== 'horizontal' && this.pointToSelf === false) {
              x = 0;
              y = 0;

              var lineMargin = 2;
              if (this.fontOptions.align === 'top') {
                ctx.textBaseline = 'alphabetic';
                y -= 2 * lineMargin; // distance from edge, required because we use alphabetic. Alphabetic has less difference between browsers
              } else if (this.fontOptions.align === 'bottom') {
                ctx.textBaseline = 'hanging';
                y += 2 * lineMargin; // distance from edge, required because we use hanging. Hanging has less difference between browsers
              } else {
                ctx.textBaseline = 'middle';
              }
            } else {
              ctx.textBaseline = baseline;
            }
            return [x, y];
          }

          /**
           * fade in when relative scale is between threshold and threshold - 1.
           * If the relative scale would be smaller than threshold -1 the draw function would have returned before coming here.
           *
           * @param {string} color  The font color to use
           * @param {number} viewFontSize
           * @param {string} initialStrokeColor
           * @returns {Array.<string>} An array containing the font color and stroke color
           * @private
           */

        }, {
          key: '_getColor',
          value: function _getColor(color, viewFontSize, initialStrokeColor) {
            var fontColor = color || '#000000';
            var strokeColor = initialStrokeColor || '#ffffff';
            if (viewFontSize <= this.elementOptions.scaling.label.drawThreshold) {
              var opacity = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - viewFontSize)));
              fontColor = util.overrideOpacity(fontColor, opacity);
              strokeColor = util.overrideOpacity(strokeColor, opacity);
            }
            return [fontColor, strokeColor];
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {boolean} selected
           * @param {boolean} hover
           * @returns {{width: number, height: number}}
           */

        }, {
          key: 'getTextSize',
          value: function getTextSize(ctx) {
            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            this._processLabel(ctx, selected, hover);
            return {
              width: this.size.width,
              height: this.size.height,
              lineCount: this.lineCount
            };
          }

          /**
           * Get the current dimensions of the label
           *
           * @return {rect}
           */

        }, {
          key: 'getSize',
          value: function getSize() {
            var lineMargin = 2;
            var x = this.size.left; // default values which might be overridden below
            var y = this.size.top - 0.5 * lineMargin; // idem

            if (this.isEdgeLabel) {
              var x2 = -this.size.width * 0.5;

              switch (this.fontOptions.align) {
                case 'middle':
                  x = x2;
                  y = -this.size.height * 0.5;
                  break;
                case 'top':
                  x = x2;
                  y = -(this.size.height + lineMargin);
                  break;
                case 'bottom':
                  x = x2;
                  y = lineMargin;
                  break;
              }
            }

            var ret = {
              left: x,
              top: y,
              width: this.size.width,
              height: this.size.height
            };

            return ret;
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {number} [x=0]
           * @param {number} [y=0]
           * @param {'middle'|'hanging'} [baseline='middle']
           */

        }, {
          key: 'calculateLabelSize',
          value: function calculateLabelSize(ctx, selected, hover) {
            var x = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var y = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
            var baseline = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'middle';

            this._processLabel(ctx, selected, hover);
            this.size.left = x - this.size.width * 0.5;
            this.size.top = y - this.size.height * 0.5;
            this.size.yLine = y + (1 - this.lineCount) * 0.5 * this.fontOptions.size;
            if (baseline === "hanging") {
              this.size.top += 0.5 * this.fontOptions.size;
              this.size.top += 4; // distance from node, required because we use hanging. Hanging has less difference between browsers
              this.size.yLine += 4; // distance from node
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {string} mod
           * @returns {{color, size, face, mod, vadjust, strokeWidth: *, strokeColor: (*|string|allOptions.edges.font.strokeColor|{string}|allOptions.nodes.font.strokeColor|Array)}}
           */

        }, {
          key: 'getFormattingValues',
          value: function getFormattingValues(ctx, selected, hover, mod) {
            var getValue = function getValue(fontOptions, mod, option) {
              if (mod === "normal") {
                if (option === 'mod') return "";
                return fontOptions[option];
              }

              if (fontOptions[mod][option] !== undefined) {
                // Grumbl leaving out test on undefined equals false for "" 
                return fontOptions[mod][option];
              } else {
                // Take from parent font option
                return fontOptions[option];
              }
            };

            var values = {
              color: getValue(this.fontOptions, mod, 'color'),
              size: getValue(this.fontOptions, mod, 'size'),
              face: getValue(this.fontOptions, mod, 'face'),
              mod: getValue(this.fontOptions, mod, 'mod'),
              vadjust: getValue(this.fontOptions, mod, 'vadjust'),
              strokeWidth: this.fontOptions.strokeWidth,
              strokeColor: this.fontOptions.strokeColor
            };
            if (selected || hover) {
              if (mod === "normal" && this.fontOptions.chooser === true && this.elementOptions.labelHighlightBold) {
                values.mod = 'bold';
              } else {
                if (typeof this.fontOptions.chooser === 'function') {
                  this.fontOptions.chooser(values, this.elementOptions.id, selected, hover);
                }
              }
            }

            var fontString = "";
            if (values.mod !== undefined && values.mod !== "") {
              // safeguard for undefined - this happened
              fontString += values.mod + " ";
            }
            fontString += values.size + "px " + values.face;

            ctx.font = fontString.replace(/"/g, "");
            values.font = ctx.font;
            values.height = values.size;
            return values;
          }

          /**
           *
           * @param {boolean} selected
           * @param {boolean} hover
           * @returns {boolean}
           */

        }, {
          key: 'differentState',
          value: function differentState(selected, hover) {
            return selected !== this.selectedState || hover !== this.hoverState;
          }

          /**
           * This explodes the passed text into lines and determines the width, height and number of lines.
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {string} inText  the text to explode
           * @returns {{width, height, lines}|*}
           * @private
           */

        }, {
          key: '_processLabelText',
          value: function _processLabelText(ctx, selected, hover, inText) {
            var splitter = new LabelSplitter(ctx, this, selected, hover);
            return splitter.process(inText);
          }

          /**
           * This explodes the label string into lines and sets the width, height and number of lines.
           * @param {CanvasRenderingContext2D} ctx
           * @param {boolean} selected
           * @param {boolean} hover
           * @private
           */

        }, {
          key: '_processLabel',
          value: function _processLabel(ctx, selected, hover) {

            if (this.labelDirty === false && !this.differentState(selected, hover)) return;

            var state = this._processLabelText(ctx, selected, hover, this.elementOptions.label);

            if (this.fontOptions.minWdt > 0 && state.width < this.fontOptions.minWdt) {
              state.width = this.fontOptions.minWdt;
            }

            this.size.labelHeight = state.height;
            if (this.fontOptions.minHgt > 0 && state.height < this.fontOptions.minHgt) {
              state.height = this.fontOptions.minHgt;
            }

            this.lines = state.lines;
            this.lineCount = state.lines.length;
            this.size.width = state.width;
            this.size.height = state.height;
            this.selectedState = selected;
            this.hoverState = hover;

            this.labelDirty = false;
          }

          /**
           * Check if this label is visible
           *
           * @return {boolean} true if this label will be show, false otherwise
           */

        }, {
          key: 'visible',
          value: function visible() {
            if (this.size.width === 0 || this.size.height === 0 || this.elementOptions.label === undefined) {
              return false; // nothing to display
            }

            var viewFontSize = this.fontOptions.size * this.body.view.scale;
            if (viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) {
              return false; // Too small or too far away to show
            }

            return true;
          }
        }], [{
          key: 'parseFontString',
          value: function parseFontString(outOptions, inOptions) {
            if (!inOptions || typeof inOptions !== 'string') return false;

            var newOptionsArray = inOptions.split(" ");

            outOptions.size = newOptionsArray[0].replace("px", '');
            outOptions.face = newOptionsArray[1];
            outOptions.color = newOptionsArray[2];

            return true;
          }
        }]);
        return Label;
      }();

      exports['default'] = Label;

      /***/
    },
    /* 118 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _slicedToArray2 = __webpack_require__(30);

      var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      var util = __webpack_require__(2);
      var EndPoints = __webpack_require__(119)["default"];

      /**
       * The Base Class for all edges.
       *
       */

      var EdgeBase = function () {
        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function EdgeBase(options, body, labelModule) {
          (0, _classCallCheck3["default"])(this, EdgeBase);

          this.body = body;
          this.labelModule = labelModule;
          this.options = {};
          this.setOptions(options);
          this.colorDirty = true;
          this.color = {};
          this.selectionWidth = 2;
          this.hoverWidth = 1.5;
          this.fromPoint = this.from;
          this.toPoint = this.to;
        }

        /**
         * Connects a node to itself
         */

        (0, _createClass3["default"])(EdgeBase, [{
          key: "connect",
          value: function connect() {
            this.from = this.body.nodes[this.options.from];
            this.to = this.body.nodes[this.options.to];
          }

          /**
           *
           * @returns {boolean} always false
           */

        }, {
          key: "cleanup",
          value: function cleanup() {
            return false;
          }

          /**
           *
           * @param {Object} options
           */

        }, {
          key: "setOptions",
          value: function setOptions(options) {
            this.options = options;
            this.from = this.body.nodes[this.options.from];
            this.to = this.body.nodes[this.options.to];
            this.id = this.options.id;
          }

          /**
           * Redraw a edge as a line
           * Draw this edge in the given canvas
           * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
           *
           * @param {CanvasRenderingContext2D}   ctx
           * @param {Array} values
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {Node} viaNode
           * @private
           */

        }, {
          key: "drawLine",
          value: function drawLine(ctx, values, selected, hover, viaNode) {
            // set style
            ctx.strokeStyle = this.getColor(ctx, values, selected, hover);
            ctx.lineWidth = values.width;

            if (values.dashes !== false) {
              this._drawDashedLine(ctx, values, viaNode);
            } else {
              this._drawLine(ctx, values, viaNode);
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D}   ctx
           * @param {Array} values
           * @param {Node} viaNode
           * @param {{x: number, y: number}} [fromPoint]
           * @param {{x: number, y: number}} [toPoint]
           * @private
           */

        }, {
          key: "_drawLine",
          value: function _drawLine(ctx, values, viaNode, fromPoint, toPoint) {
            if (this.from != this.to) {
              // draw line
              this._line(ctx, values, viaNode, fromPoint, toPoint);
            } else {
              var _getCircleData2 = this._getCircleData(ctx),
                  _getCircleData3 = (0, _slicedToArray3["default"])(_getCircleData2, 3),
                  x = _getCircleData3[0],
                  y = _getCircleData3[1],
                  radius = _getCircleData3[2];

              this._circle(ctx, values, x, y, radius);
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {Array} values
           * @param {Node} viaNode
           * @param {{x: number, y: number}} [fromPoint]  TODO: Remove in next major release
           * @param {{x: number, y: number}} [toPoint]    TODO: Remove in next major release
           * @private
           */

        }, {
          key: "_drawDashedLine",
          value: function _drawDashedLine(ctx, values, viaNode, fromPoint, toPoint) {
            // eslint-disable-line no-unused-vars
            ctx.lineCap = 'round';
            var pattern = [5, 5];
            if (Array.isArray(values.dashes) === true) {
              pattern = values.dashes;
            }

            // only firefox and chrome support this method, else we use the legacy one.
            if (ctx.setLineDash !== undefined) {
              ctx.save();

              // set dash settings for chrome or firefox
              ctx.setLineDash(pattern);
              ctx.lineDashOffset = 0;

              // draw the line
              if (this.from != this.to) {
                // draw line
                this._line(ctx, values, viaNode);
              } else {
                var _getCircleData4 = this._getCircleData(ctx),
                    _getCircleData5 = (0, _slicedToArray3["default"])(_getCircleData4, 3),
                    x = _getCircleData5[0],
                    y = _getCircleData5[1],
                    radius = _getCircleData5[2];

                this._circle(ctx, values, x, y, radius);
              }

              // restore the dash settings.
              ctx.setLineDash([0]);
              ctx.lineDashOffset = 0;
              ctx.restore();
            } else {
              // unsupporting smooth lines
              if (this.from != this.to) {
                // draw line
                ctx.dashedLine(this.from.x, this.from.y, this.to.x, this.to.y, pattern);
              } else {
                var _getCircleData6 = this._getCircleData(ctx),
                    _getCircleData7 = (0, _slicedToArray3["default"])(_getCircleData6, 3),
                    _x = _getCircleData7[0],
                    _y = _getCircleData7[1],
                    _radius = _getCircleData7[2];

                this._circle(ctx, values, _x, _y, _radius);
              }
              // draw shadow if enabled
              this.enableShadow(ctx, values);

              ctx.stroke();

              // disable shadows for other elements.
              this.disableShadow(ctx, values);
            }
          }

          /**
           *
           * @param {Node} nearNode
           * @param {CanvasRenderingContext2D} ctx
           * @param {Object} options
           * @returns {{x: number, y: number}}
           */

        }, {
          key: "findBorderPosition",
          value: function findBorderPosition(nearNode, ctx, options) {
            if (this.from != this.to) {
              return this._findBorderPosition(nearNode, ctx, options);
            } else {
              return this._findBorderPositionCircle(nearNode, ctx, options);
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @returns {{from: ({x: number, y: number, t: number}|*), to: ({x: number, y: number, t: number}|*)}}
           */

        }, {
          key: "findBorderPositions",
          value: function findBorderPositions(ctx) {
            var from = {};
            var to = {};
            if (this.from != this.to) {
              from = this._findBorderPosition(this.from, ctx);
              to = this._findBorderPosition(this.to, ctx);
            } else {
              var _getCircleData$slice = this._getCircleData(ctx).slice(0, 2),
                  _getCircleData$slice2 = (0, _slicedToArray3["default"])(_getCircleData$slice, 2),
                  x = _getCircleData$slice2[0],
                  y = _getCircleData$slice2[1];

              from = this._findBorderPositionCircle(this.from, ctx, { x: x, y: y, low: 0.25, high: 0.6, direction: -1 });
              to = this._findBorderPositionCircle(this.from, ctx, { x: x, y: y, low: 0.6, high: 0.8, direction: 1 });
            }
            return { from: from, to: to };
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @returns {Array.<number>} x, y, radius
           * @private
           */

        }, {
          key: "_getCircleData",
          value: function _getCircleData(ctx) {
            var x = void 0,
                y = void 0;
            var node = this.from;
            var radius = this.options.selfReferenceSize;

            if (ctx !== undefined) {
              if (node.shape.width === undefined) {
                node.shape.resize(ctx);
              }
            }

            // get circle coordinates
            if (node.shape.width > node.shape.height) {
              x = node.x + node.shape.width * 0.5;
              y = node.y - radius;
            } else {
              x = node.x + radius;
              y = node.y - node.shape.height * 0.5;
            }
            return [x, y, radius];
          }

          /**
           * Get a point on a circle
           * @param {number} x
           * @param {number} y
           * @param {number} radius
           * @param {number} percentage - Value between 0 (line start) and 1 (line end)
           * @return {Object} point
           * @private
           */

        }, {
          key: "_pointOnCircle",
          value: function _pointOnCircle(x, y, radius, percentage) {
            var angle = percentage * 2 * Math.PI;
            return {
              x: x + radius * Math.cos(angle),
              y: y - radius * Math.sin(angle)
            };
          }

          /**
           * This function uses binary search to look for the point where the circle crosses the border of the node.
           * @param {Node} node
           * @param {CanvasRenderingContext2D} ctx
           * @param {Object} options
           * @returns {*}
           * @private
           */

        }, {
          key: "_findBorderPositionCircle",
          value: function _findBorderPositionCircle(node, ctx, options) {
            var x = options.x;
            var y = options.y;
            var low = options.low;
            var high = options.high;
            var direction = options.direction;

            var maxIterations = 10;
            var iteration = 0;
            var radius = this.options.selfReferenceSize;
            var pos = void 0,
                angle = void 0,
                distanceToBorder = void 0,
                distanceToPoint = void 0,
                difference = void 0;
            var threshold = 0.05;
            var middle = (low + high) * 0.5;

            while (low <= high && iteration < maxIterations) {
              middle = (low + high) * 0.5;

              pos = this._pointOnCircle(x, y, radius, middle);
              angle = Math.atan2(node.y - pos.y, node.x - pos.x);
              distanceToBorder = node.distanceToBorder(ctx, angle);
              distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));
              difference = distanceToBorder - distanceToPoint;
              if (Math.abs(difference) < threshold) {
                break; // found
              } else if (difference > 0) {
                // distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.
                if (direction > 0) {
                  low = middle;
                } else {
                  high = middle;
                }
              } else {
                if (direction > 0) {
                  high = middle;
                } else {
                  low = middle;
                }
              }
              iteration++;
            }
            pos.t = middle;

            return pos;
          }

          /**
           * Get the line width of the edge. Depends on width and whether one of the
           * connected nodes is selected.
           * @param {boolean} selected
           * @param {boolean} hover
           * @returns {number} width
           * @private
           */

        }, {
          key: "getLineWidth",
          value: function getLineWidth(selected, hover) {
            if (selected === true) {
              return Math.max(this.selectionWidth, 0.3 / this.body.view.scale);
            } else {
              if (hover === true) {
                return Math.max(this.hoverWidth, 0.3 / this.body.view.scale);
              } else {
                return Math.max(this.options.width, 0.3 / this.body.view.scale);
              }
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           * @param {boolean} selected - Unused
           * @param {boolean} hover - Unused
           * @returns {string}
           */

        }, {
          key: "getColor",
          value: function getColor(ctx, values, selected, hover) {
            // eslint-disable-line no-unused-vars
            if (values.inheritsColor !== false) {
              // when this is a loop edge, just use the 'from' method
              if (values.inheritsColor === 'both' && this.from.id !== this.to.id) {
                var grd = ctx.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y);
                var fromColor = void 0,
                    toColor = void 0;
                fromColor = this.from.options.color.highlight.border;
                toColor = this.to.options.color.highlight.border;

                if (this.from.selected === false && this.to.selected === false) {
                  fromColor = util.overrideOpacity(this.from.options.color.border, values.opacity);
                  toColor = util.overrideOpacity(this.to.options.color.border, values.opacity);
                } else if (this.from.selected === true && this.to.selected === false) {
                  toColor = this.to.options.color.border;
                } else if (this.from.selected === false && this.to.selected === true) {
                  fromColor = this.from.options.color.border;
                }
                grd.addColorStop(0, fromColor);
                grd.addColorStop(1, toColor);

                // -------------------- this returns -------------------- //
                return grd;
              }

              if (values.inheritsColor === "to") {
                return util.overrideOpacity(this.to.options.color.border, values.opacity);
              } else {
                // "from"
                return util.overrideOpacity(this.from.options.color.border, values.opacity);
              }
            } else {
              return util.overrideOpacity(values.color, values.opacity);
            }
          }

          /**
           * Draw a line from a node to itself, a circle
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {Array} values
           * @param {number} x
           * @param {number} y
           * @param {number} radius
           * @private
           */

        }, {
          key: "_circle",
          value: function _circle(ctx, values, x, y, radius) {
            // draw shadow if enabled
            this.enableShadow(ctx, values);

            // draw a circle
            ctx.beginPath();
            ctx.arc(x, y, radius, 0, 2 * Math.PI, false);
            ctx.stroke();

            // disable shadows for other elements.
            this.disableShadow(ctx, values);
          }

          /**
           * Calculate the distance between a point (x3,y3) and a line segment from (x1,y1) to (x2,y2).
           * (x3,y3) is the point.
           *
           * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
           *
           * @param {number} x1
           * @param {number} y1
           * @param {number} x2
           * @param {number} y2
           * @param {number} x3
           * @param {number} y3
           * @param {Node} via
           * @param {Array} values
           * @returns {number}
           */

        }, {
          key: "getDistanceToEdge",
          value: function getDistanceToEdge(x1, y1, x2, y2, x3, y3, via, values) {
            // eslint-disable-line no-unused-vars
            var returnValue = 0;
            if (this.from != this.to) {
              returnValue = this._getDistanceToEdge(x1, y1, x2, y2, x3, y3, via);
            } else {
              var _getCircleData8 = this._getCircleData(undefined),
                  _getCircleData9 = (0, _slicedToArray3["default"])(_getCircleData8, 3),
                  x = _getCircleData9[0],
                  y = _getCircleData9[1],
                  radius = _getCircleData9[2];

              var dx = x - x3;
              var dy = y - y3;
              returnValue = Math.abs(Math.sqrt(dx * dx + dy * dy) - radius);
            }

            return returnValue;
          }

          /**
           *
           * @param {number} x1
           * @param {number} y1
           * @param {number} x2
           * @param {number} y2
           * @param {number} x3
           * @param {number} y3
           * @returns {number}
           * @private
           */

        }, {
          key: "_getDistanceToLine",
          value: function _getDistanceToLine(x1, y1, x2, y2, x3, y3) {
            var px = x2 - x1;
            var py = y2 - y1;
            var something = px * px + py * py;
            var u = ((x3 - x1) * px + (y3 - y1) * py) / something;

            if (u > 1) {
              u = 1;
            } else if (u < 0) {
              u = 0;
            }

            var x = x1 + u * px;
            var y = y1 + u * py;
            var dx = x - x3;
            var dy = y - y3;

            //# Note: If the actual distance does not matter,
            //# if you only want to compare what this function
            //# returns to other results of this function, you
            //# can just return the squared distance instead
            //# (i.e. remove the sqrt) to gain a little performance

            return Math.sqrt(dx * dx + dy * dy);
          }

          /**
           * @param {CanvasRenderingContext2D} ctx
           * @param {string} position
           * @param {Node} viaNode
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {Array} values
           * @returns {{point: *, core: {x: number, y: number}, angle: *, length: number, type: *}}
           */

        }, {
          key: "getArrowData",
          value: function getArrowData(ctx, position, viaNode, selected, hover, values) {
            // set lets
            var angle = void 0;
            var arrowPoint = void 0;
            var node1 = void 0;
            var node2 = void 0;
            var guideOffset = void 0;
            var scaleFactor = void 0;
            var type = void 0;
            var lineWidth = values.width;

            if (position === 'from') {
              node1 = this.from;
              node2 = this.to;
              guideOffset = 0.1;
              scaleFactor = values.fromArrowScale;
              type = values.fromArrowType;
            } else if (position === 'to') {
              node1 = this.to;
              node2 = this.from;
              guideOffset = -0.1;
              scaleFactor = values.toArrowScale;
              type = values.toArrowType;
            } else {
              node1 = this.to;
              node2 = this.from;
              scaleFactor = values.middleArrowScale;
              type = values.middleArrowType;
            }

            // if not connected to itself
            if (node1 != node2) {
              if (position !== 'middle') {
                // draw arrow head
                if (this.options.smooth.enabled === true) {
                  arrowPoint = this.findBorderPosition(node1, ctx, { via: viaNode });
                  var guidePos = this.getPoint(Math.max(0.0, Math.min(1.0, arrowPoint.t + guideOffset)), viaNode);
                  angle = Math.atan2(arrowPoint.y - guidePos.y, arrowPoint.x - guidePos.x);
                } else {
                  angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
                  arrowPoint = this.findBorderPosition(node1, ctx);
                }
              } else {
                angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
                arrowPoint = this.getPoint(0.5, viaNode); // this is 0.6 to account for the size of the arrow.
              }
            } else {
              // draw circle
              var _getCircleData10 = this._getCircleData(ctx),
                  _getCircleData11 = (0, _slicedToArray3["default"])(_getCircleData10, 3),
                  x = _getCircleData11[0],
                  y = _getCircleData11[1],
                  radius = _getCircleData11[2];

              if (position === 'from') {
                arrowPoint = this.findBorderPosition(this.from, ctx, { x: x, y: y, low: 0.25, high: 0.6, direction: -1 });
                angle = arrowPoint.t * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
              } else if (position === 'to') {
                arrowPoint = this.findBorderPosition(this.from, ctx, { x: x, y: y, low: 0.6, high: 1.0, direction: 1 });
                angle = arrowPoint.t * -2 * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI;
              } else {
                arrowPoint = this._pointOnCircle(x, y, radius, 0.175);
                angle = 3.9269908169872414; // === 0.175 * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
              }
            }

            if (position === 'middle' && scaleFactor < 0) lineWidth *= -1; // reversed middle arrow
            var length = 15 * scaleFactor + 3 * lineWidth; // 3* lineWidth is the width of the edge.

            var xi = arrowPoint.x - length * 0.9 * Math.cos(angle);
            var yi = arrowPoint.y - length * 0.9 * Math.sin(angle);
            var arrowCore = { x: xi, y: yi };

            return { point: arrowPoint, core: arrowCore, angle: angle, length: length, type: type };
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {Object} arrowData
           */

        }, {
          key: "drawArrowHead",
          value: function drawArrowHead(ctx, values, selected, hover, arrowData) {
            // set style
            ctx.strokeStyle = this.getColor(ctx, values, selected, hover);
            ctx.fillStyle = ctx.strokeStyle;
            ctx.lineWidth = values.width;

            EndPoints.draw(ctx, arrowData);

            // draw shadow if enabled
            this.enableShadow(ctx, values);
            ctx.fill();
            // disable shadows for other elements.
            this.disableShadow(ctx, values);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: "enableShadow",
          value: function enableShadow(ctx, values) {
            if (values.shadow === true) {
              ctx.shadowColor = values.shadowColor;
              ctx.shadowBlur = values.shadowSize;
              ctx.shadowOffsetX = values.shadowX;
              ctx.shadowOffsetY = values.shadowY;
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: "disableShadow",
          value: function disableShadow(ctx, values) {
            if (values.shadow === true) {
              ctx.shadowColor = 'rgba(0,0,0,0)';
              ctx.shadowBlur = 0;
              ctx.shadowOffsetX = 0;
              ctx.shadowOffsetY = 0;
            }
          }
        }]);
        return EdgeBase;
      }();

      exports["default"] = EdgeBase;

      /***/
    },
    /* 119 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /** ============================================================================
       * Location of all the endpoint drawing routines.
       *
       * Every endpoint has its own drawing routine, which contains an endpoint definition.
       *
       * The endpoint definitions must have the following properies:
       *
       * - (0,0) is the connection point to the node it attaches to
       * - The endpoints are orientated to the positive x-direction
       * - The length of the endpoint is at most 1
       *
       * As long as the endpoint classes remain simple and not too numerous, they will
       * be contained within this module.
       * All classes here except `EndPoints` should be considered as private to this module.
       *
       * -----------------------------------------------------------------------------
       * ### Further Actions
       *
       * After adding a new endpoint here, you also need to do the following things:
       *
       * - Add the new endpoint name to `network/options.js` in array `endPoints`.
       * - Add the new endpoint name to the documentation.
       *   Scan for 'arrows.to.type` and add it to the description.
       * - Add the endpoint to the examples. At the very least, add it to example
       *   `edgeStyles/arrowTypes`.
       * ============================================================================= */

      // NOTE: When a typedef is isolated in a separate comment block, an actual description is generated for it,
      //       using the rest of the commenting in the code block. Usage of typedef in other comments then
      //       link to there. TIL.
      //
      //       Also noteworthy, all typedef's set up in this manner are collected in a single, global page 'global.html'.
      //       In other words, it doesn't matter *where* the typedef's are defined in the code.
      //
      //
      // TODO: add descriptive commenting to given typedef's

      /**
       * @typedef {{type:string, point:Point, angle:number, length:number}} ArrowData
       *
       * Object containing instantiation data for a given endpoint.
       */

      /**
       * @typedef {{x:number, y:number}} Point
       * 
       * A point in view-coordinates.
       */

      /**
       * Common methods for endpoints
       *
       * @class
       */
      var EndPoint = function () {
        function EndPoint() {
          (0, _classCallCheck3['default'])(this, EndPoint);
        }

        (0, _createClass3['default'])(EndPoint, null, [{
          key: 'transform',

          /**
           * Apply transformation on points for display.
           *
           * The following is done:
           * - rotate by the specified angle
           * - multiply the (normalized) coordinates by the passed length
           * - offset by the target coordinates
           *
           * @param {Array<Point>} points
           * @param {ArrowData} arrowData
           * @static
           */
          value: function transform(points, arrowData) {
            if (!(points instanceof Array)) {
              points = [points];
            }

            var x = arrowData.point.x;
            var y = arrowData.point.y;
            var angle = arrowData.angle;
            var length = arrowData.length;

            for (var i = 0; i < points.length; ++i) {
              var p = points[i];
              var xt = p.x * Math.cos(angle) - p.y * Math.sin(angle);
              var yt = p.x * Math.sin(angle) + p.y * Math.cos(angle);

              p.x = x + length * xt;
              p.y = y + length * yt;
            }
          }

          /**
           * Draw a closed path using the given real coordinates.
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {Array.<Point>} points
           * @static
           */

        }, {
          key: 'drawPath',
          value: function drawPath(ctx, points) {
            ctx.beginPath();
            ctx.moveTo(points[0].x, points[0].y);
            for (var i = 1; i < points.length; ++i) {
              ctx.lineTo(points[i].x, points[i].y);
            }
            ctx.closePath();
          }
        }]);
        return EndPoint;
      }();

      /**
       * Drawing methods for the arrow endpoint.
       * @extends EndPoint
       */

      var Arrow = function (_EndPoint) {
        (0, _inherits3['default'])(Arrow, _EndPoint);

        function Arrow() {
          (0, _classCallCheck3['default'])(this, Arrow);
          return (0, _possibleConstructorReturn3['default'])(this, (Arrow.__proto__ || (0, _getPrototypeOf2['default'])(Arrow)).apply(this, arguments));
        }

        (0, _createClass3['default'])(Arrow, null, [{
          key: 'draw',

          /**
           * Draw this shape at the end of a line.
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {ArrowData} arrowData
           * @static
           */
          value: function draw(ctx, arrowData) {
            // Normalized points of closed path, in the order that they should be drawn.
            // (0, 0) is the attachment point, and the point around which should be rotated
            var points = [{ x: 0, y: 0 }, { x: -1, y: 0.3 }, { x: -0.9, y: 0 }, { x: -1, y: -0.3 }];

            EndPoint.transform(points, arrowData);
            EndPoint.drawPath(ctx, points);
          }
        }]);
        return Arrow;
      }(EndPoint);

      /**
       * Drawing methods for the circle endpoint.
       */

      var Circle = function () {
        function Circle() {
          (0, _classCallCheck3['default'])(this, Circle);
        }

        (0, _createClass3['default'])(Circle, null, [{
          key: 'draw',

          /**
           * Draw this shape at the end of a line.
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {ArrowData} arrowData
           * @static
           */
          value: function draw(ctx, arrowData) {
            var point = { x: -0.4, y: 0 };

            EndPoint.transform(point, arrowData);
            ctx.circle(point.x, point.y, arrowData.length * 0.4);
          }
        }]);
        return Circle;
      }();

      /**
       * Drawing methods for the bar endpoint.
       */

      var Bar = function () {
        function Bar() {
          (0, _classCallCheck3['default'])(this, Bar);
        }

        (0, _createClass3['default'])(Bar, null, [{
          key: 'draw',

          /**
           * Draw this shape at the end of a line.
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {ArrowData} arrowData
           * @static
           */
          value: function draw(ctx, arrowData) {
            /*
                var points = [
                  {x:0, y:0.5},
                  {x:0, y:-0.5}
                ];
            
                EndPoint.transform(points, arrowData);
                ctx.beginPath();
                ctx.moveTo(points[0].x, points[0].y);
                ctx.lineTo(points[1].x, points[1].y);
                ctx.stroke();
            */

            var points = [{ x: 0, y: 0.5 }, { x: 0, y: -0.5 }, { x: -0.15, y: -0.5 }, { x: -0.15, y: 0.5 }];

            EndPoint.transform(points, arrowData);
            EndPoint.drawPath(ctx, points);
          }
        }]);
        return Bar;
      }();

      /**
       * Drawing methods for the endpoints.
       */

      var EndPoints = function () {
        function EndPoints() {
          (0, _classCallCheck3['default'])(this, EndPoints);
        }

        (0, _createClass3['default'])(EndPoints, null, [{
          key: 'draw',

          /**
           * Draw an endpoint
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {ArrowData} arrowData
           * @static
           */
          value: function draw(ctx, arrowData) {
            var type;
            if (arrowData.type) {
              type = arrowData.type.toLowerCase();
            }

            switch (type) {
              case 'circle':
                Circle.draw(ctx, arrowData);
                break;
              case 'bar':
                Bar.draw(ctx, arrowData);
                break;
              case 'arrow': // fall-through
              default:
                Arrow.draw(ctx, arrowData);
            }
          }
        }]);
        return EndPoints;
      }();

      exports['default'] = EndPoints;

      /***/
    },
    /* 120 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * Barnes Hut Solver
       */
      var BarnesHutSolver = function () {
        /**
         * @param {Object} body
         * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
         * @param {Object} options
         */
        function BarnesHutSolver(body, physicsBody, options) {
          (0, _classCallCheck3["default"])(this, BarnesHutSolver);

          this.body = body;
          this.physicsBody = physicsBody;
          this.barnesHutTree;
          this.setOptions(options);
          this.randomSeed = 5;

          // debug: show grid
          // this.body.emitter.on("afterDrawing", (ctx) => {this._debug(ctx,'#ff0000')})
        }

        /**
         *
         * @param {Object} options
         */

        (0, _createClass3["default"])(BarnesHutSolver, [{
          key: "setOptions",
          value: function setOptions(options) {
            this.options = options;
            this.thetaInversed = 1 / this.options.theta;

            // if 1 then min distance = 0.5, if 0.5 then min distance = 0.5 + 0.5*node.shape.radius
            this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap));
          }

          /**
           *
           * @returns {number} random integer
           */

        }, {
          key: "seededRandom",
          value: function seededRandom() {
            var x = Math.sin(this.randomSeed++) * 10000;
            return x - Math.floor(x);
          }

          /**
           * This function calculates the forces the nodes apply on each other based on a gravitational model.
           * The Barnes Hut method is used to speed up this N-body simulation.
           *
           * @private
           */

        }, {
          key: "solve",
          value: function solve() {
            if (this.options.gravitationalConstant !== 0 && this.physicsBody.physicsNodeIndices.length > 0) {
              var node = void 0;
              var nodes = this.body.nodes;
              var nodeIndices = this.physicsBody.physicsNodeIndices;
              var nodeCount = nodeIndices.length;

              // create the tree
              var barnesHutTree = this._formBarnesHutTree(nodes, nodeIndices);

              // for debugging
              this.barnesHutTree = barnesHutTree;

              // place the nodes one by one recursively
              for (var i = 0; i < nodeCount; i++) {
                node = nodes[nodeIndices[i]];
                if (node.options.mass > 0) {
                  // starting with root is irrelevant, it never passes the BarnesHutSolver condition
                  this._getForceContributions(barnesHutTree.root, node);
                }
              }
            }
          }

          /**
           * @param {Object} parentBranch
           * @param {Node} node
           * @private
           */

        }, {
          key: "_getForceContributions",
          value: function _getForceContributions(parentBranch, node) {
            this._getForceContribution(parentBranch.children.NW, node);
            this._getForceContribution(parentBranch.children.NE, node);
            this._getForceContribution(parentBranch.children.SW, node);
            this._getForceContribution(parentBranch.children.SE, node);
          }

          /**
           * This function traverses the barnesHutTree. It checks when it can approximate distant nodes with their center of mass.
           * If a region contains a single node, we check if it is not itself, then we apply the force.
           *
           * @param {Object} parentBranch
           * @param {Node} node
           * @private
           */

        }, {
          key: "_getForceContribution",
          value: function _getForceContribution(parentBranch, node) {
            // we get no force contribution from an empty region
            if (parentBranch.childrenCount > 0) {
              var dx = void 0,
                  dy = void 0,
                  distance = void 0;

              // get the distance from the center of mass to the node.
              dx = parentBranch.centerOfMass.x - node.x;
              dy = parentBranch.centerOfMass.y - node.y;
              distance = Math.sqrt(dx * dx + dy * dy);

              // BarnesHutSolver condition
              // original condition : s/d < theta = passed  ===  d/s > 1/theta = passed
              // calcSize = 1/s --> d * 1/s > 1/theta = passed
              if (distance * parentBranch.calcSize > this.thetaInversed) {
                this._calculateForces(distance, dx, dy, node, parentBranch);
              } else {
                // Did not pass the condition, go into children if available
                if (parentBranch.childrenCount === 4) {
                  this._getForceContributions(parentBranch, node);
                } else {
                  // parentBranch must have only one node, if it was empty we wouldnt be here
                  if (parentBranch.children.data.id != node.id) {
                    // if it is not self
                    this._calculateForces(distance, dx, dy, node, parentBranch);
                  }
                }
              }
            }
          }

          /**
           * Calculate the forces based on the distance.
           *
           * @param {number} distance
           * @param {number} dx
           * @param {number} dy
           * @param {Node} node
           * @param {Object} parentBranch
           * @private
           */

        }, {
          key: "_calculateForces",
          value: function _calculateForces(distance, dx, dy, node, parentBranch) {
            if (distance === 0) {
              distance = 0.1;
              dx = distance;
            }

            if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {
              distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);
            }

            // the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines
            // it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce
            var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass / Math.pow(distance, 3);
            var fx = dx * gravityForce;
            var fy = dy * gravityForce;

            this.physicsBody.forces[node.id].x += fx;
            this.physicsBody.forces[node.id].y += fy;
          }

          /**
           * This function constructs the barnesHut tree recursively. It creates the root, splits it and starts placing the nodes.
           *
           * @param {Array.<Node>} nodes
           * @param {Array.<number>} nodeIndices
           * @returns {{root: {centerOfMass: {x: number, y: number}, mass: number, range: {minX: number, maxX: number, minY: number, maxY: number}, size: number, calcSize: number, children: {data: null}, maxWidth: number, level: number, childrenCount: number}}} BarnesHutTree
           * @private
           */

        }, {
          key: "_formBarnesHutTree",
          value: function _formBarnesHutTree(nodes, nodeIndices) {
            var node = void 0;
            var nodeCount = nodeIndices.length;

            var minX = nodes[nodeIndices[0]].x;
            var minY = nodes[nodeIndices[0]].y;
            var maxX = nodes[nodeIndices[0]].x;
            var maxY = nodes[nodeIndices[0]].y;

            // get the range of the nodes
            for (var i = 1; i < nodeCount; i++) {
              var _node = nodes[nodeIndices[i]];
              var x = _node.x;
              var y = _node.y;
              if (_node.options.mass > 0) {
                if (x < minX) {
                  minX = x;
                }
                if (x > maxX) {
                  maxX = x;
                }
                if (y < minY) {
                  minY = y;
                }
                if (y > maxY) {
                  maxY = y;
                }
              }
            }
            // make the range a square
            var sizeDiff = Math.abs(maxX - minX) - Math.abs(maxY - minY); // difference between X and Y
            if (sizeDiff > 0) {
              minY -= 0.5 * sizeDiff;
              maxY += 0.5 * sizeDiff;
            } // xSize > ySize
            else {
                minX += 0.5 * sizeDiff;
                maxX -= 0.5 * sizeDiff;
              } // xSize < ySize


            var minimumTreeSize = 1e-5;
            var rootSize = Math.max(minimumTreeSize, Math.abs(maxX - minX));
            var halfRootSize = 0.5 * rootSize;
            var centerX = 0.5 * (minX + maxX),
                centerY = 0.5 * (minY + maxY);

            // construct the barnesHutTree
            var barnesHutTree = {
              root: {
                centerOfMass: { x: 0, y: 0 },
                mass: 0,
                range: {
                  minX: centerX - halfRootSize, maxX: centerX + halfRootSize,
                  minY: centerY - halfRootSize, maxY: centerY + halfRootSize
                },
                size: rootSize,
                calcSize: 1 / rootSize,
                children: { data: null },
                maxWidth: 0,
                level: 0,
                childrenCount: 4
              }
            };
            this._splitBranch(barnesHutTree.root);

            // place the nodes one by one recursively
            for (var _i = 0; _i < nodeCount; _i++) {
              node = nodes[nodeIndices[_i]];
              if (node.options.mass > 0) {
                this._placeInTree(barnesHutTree.root, node);
              }
            }

            // make global
            return barnesHutTree;
          }

          /**
           * this updates the mass of a branch. this is increased by adding a node.
           *
           * @param {Object} parentBranch
           * @param {Node} node
           * @private
           */

        }, {
          key: "_updateBranchMass",
          value: function _updateBranchMass(parentBranch, node) {
            var centerOfMass = parentBranch.centerOfMass;
            var totalMass = parentBranch.mass + node.options.mass;
            var totalMassInv = 1 / totalMass;

            centerOfMass.x = centerOfMass.x * parentBranch.mass + node.x * node.options.mass;
            centerOfMass.x *= totalMassInv;

            centerOfMass.y = centerOfMass.y * parentBranch.mass + node.y * node.options.mass;
            centerOfMass.y *= totalMassInv;

            parentBranch.mass = totalMass;
            var biggestSize = Math.max(Math.max(node.height, node.radius), node.width);
            parentBranch.maxWidth = parentBranch.maxWidth < biggestSize ? biggestSize : parentBranch.maxWidth;
          }

          /**
           * determine in which branch the node will be placed.
           *
           * @param {Object} parentBranch
           * @param {Node} node
           * @param {boolean} skipMassUpdate
           * @private
           */

        }, {
          key: "_placeInTree",
          value: function _placeInTree(parentBranch, node, skipMassUpdate) {
            if (skipMassUpdate != true || skipMassUpdate === undefined) {
              // update the mass of the branch.
              this._updateBranchMass(parentBranch, node);
            }

            var range = parentBranch.children.NW.range;
            var region = void 0;
            if (range.maxX > node.x) {
              // in NW or SW
              if (range.maxY > node.y) {
                region = "NW";
              } else {
                region = "SW";
              }
            } else {
              // in NE or SE
              if (range.maxY > node.y) {
                region = "NE";
              } else {
                region = "SE";
              }
            }

            this._placeInRegion(parentBranch, node, region);
          }

          /**
           * actually place the node in a region (or branch)
           *
           * @param {Object} parentBranch
           * @param {Node} node
           * @param {'NW'| 'NE' | 'SW' | 'SE'} region
           * @private
           */

        }, {
          key: "_placeInRegion",
          value: function _placeInRegion(parentBranch, node, region) {
            var children = parentBranch.children[region];

            switch (children.childrenCount) {
              case 0:
                // place node here
                children.children.data = node;
                children.childrenCount = 1;
                this._updateBranchMass(children, node);
                break;
              case 1:
                // convert into children
                // if there are two nodes exactly overlapping (on init, on opening of cluster etc.)
                // we move one node a little bit and we do not put it in the tree.
                if (children.children.data.x === node.x && children.children.data.y === node.y) {
                  node.x += this.seededRandom();
                  node.y += this.seededRandom();
                } else {
                  this._splitBranch(children);
                  this._placeInTree(children, node);
                }
                break;
              case 4:
                // place in branch
                this._placeInTree(children, node);
                break;
            }
          }

          /**
           * this function splits a branch into 4 sub branches. If the branch contained a node, we place it in the subbranch
           * after the split is complete.
           *
           * @param {Object} parentBranch
           * @private
           */

        }, {
          key: "_splitBranch",
          value: function _splitBranch(parentBranch) {
            // if the branch is shaded with a node, replace the node in the new subset.
            var containedNode = null;
            if (parentBranch.childrenCount === 1) {
              containedNode = parentBranch.children.data;
              parentBranch.mass = 0;
              parentBranch.centerOfMass.x = 0;
              parentBranch.centerOfMass.y = 0;
            }
            parentBranch.childrenCount = 4;
            parentBranch.children.data = null;
            this._insertRegion(parentBranch, "NW");
            this._insertRegion(parentBranch, "NE");
            this._insertRegion(parentBranch, "SW");
            this._insertRegion(parentBranch, "SE");

            if (containedNode != null) {
              this._placeInTree(parentBranch, containedNode);
            }
          }

          /**
           * This function subdivides the region into four new segments.
           * Specifically, this inserts a single new segment.
           * It fills the children section of the parentBranch
           *
           * @param {Object} parentBranch
           * @param {'NW'| 'NE' | 'SW' | 'SE'} region
           * @private
           */

        }, {
          key: "_insertRegion",
          value: function _insertRegion(parentBranch, region) {
            var minX = void 0,
                maxX = void 0,
                minY = void 0,
                maxY = void 0;
            var childSize = 0.5 * parentBranch.size;
            switch (region) {
              case "NW":
                minX = parentBranch.range.minX;
                maxX = parentBranch.range.minX + childSize;
                minY = parentBranch.range.minY;
                maxY = parentBranch.range.minY + childSize;
                break;
              case "NE":
                minX = parentBranch.range.minX + childSize;
                maxX = parentBranch.range.maxX;
                minY = parentBranch.range.minY;
                maxY = parentBranch.range.minY + childSize;
                break;
              case "SW":
                minX = parentBranch.range.minX;
                maxX = parentBranch.range.minX + childSize;
                minY = parentBranch.range.minY + childSize;
                maxY = parentBranch.range.maxY;
                break;
              case "SE":
                minX = parentBranch.range.minX + childSize;
                maxX = parentBranch.range.maxX;
                minY = parentBranch.range.minY + childSize;
                maxY = parentBranch.range.maxY;
                break;
            }

            parentBranch.children[region] = {
              centerOfMass: { x: 0, y: 0 },
              mass: 0,
              range: { minX: minX, maxX: maxX, minY: minY, maxY: maxY },
              size: 0.5 * parentBranch.size,
              calcSize: 2 * parentBranch.calcSize,
              children: { data: null },
              maxWidth: 0,
              level: parentBranch.level + 1,
              childrenCount: 0
            };
          }

          //---------------------------  DEBUGGING BELOW  ---------------------------//


          /**
           * This function is for debugging purposed, it draws the tree.
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {string} color
           * @private
           */

        }, {
          key: "_debug",
          value: function _debug(ctx, color) {
            if (this.barnesHutTree !== undefined) {

              ctx.lineWidth = 1;

              this._drawBranch(this.barnesHutTree.root, ctx, color);
            }
          }

          /**
           * This function is for debugging purposes. It draws the branches recursively.
           *
           * @param {Object} branch
           * @param {CanvasRenderingContext2D} ctx
           * @param {string} color
           * @private
           */

        }, {
          key: "_drawBranch",
          value: function _drawBranch(branch, ctx, color) {
            if (color === undefined) {
              color = "#FF0000";
            }

            if (branch.childrenCount === 4) {
              this._drawBranch(branch.children.NW, ctx);
              this._drawBranch(branch.children.NE, ctx);
              this._drawBranch(branch.children.SE, ctx);
              this._drawBranch(branch.children.SW, ctx);
            }
            ctx.strokeStyle = color;
            ctx.beginPath();
            ctx.moveTo(branch.range.minX, branch.range.minY);
            ctx.lineTo(branch.range.maxX, branch.range.minY);
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(branch.range.maxX, branch.range.minY);
            ctx.lineTo(branch.range.maxX, branch.range.maxY);
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(branch.range.maxX, branch.range.maxY);
            ctx.lineTo(branch.range.minX, branch.range.maxY);
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(branch.range.minX, branch.range.maxY);
            ctx.lineTo(branch.range.minX, branch.range.minY);
            ctx.stroke();

            /*
             if (branch.mass > 0) {
             ctx.circle(branch.centerOfMass.x, branch.centerOfMass.y, 3*branch.mass);
             ctx.stroke();
             }
             */
          }
        }]);
        return BarnesHutSolver;
      }();

      exports["default"] = BarnesHutSolver;

      /***/
    },
    /* 121 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * Central Gravity Solver
       */
      var CentralGravitySolver = function () {
        /**
         * @param {Object} body
         * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
         * @param {Object} options
         */
        function CentralGravitySolver(body, physicsBody, options) {
          (0, _classCallCheck3["default"])(this, CentralGravitySolver);

          this.body = body;
          this.physicsBody = physicsBody;
          this.setOptions(options);
        }

        /**
         *
         * @param {Object} options
         */

        (0, _createClass3["default"])(CentralGravitySolver, [{
          key: "setOptions",
          value: function setOptions(options) {
            this.options = options;
          }

          /**
           * Calculates forces for each node
           */

        }, {
          key: "solve",
          value: function solve() {
            var dx = void 0,
                dy = void 0,
                distance = void 0,
                node = void 0;
            var nodes = this.body.nodes;
            var nodeIndices = this.physicsBody.physicsNodeIndices;
            var forces = this.physicsBody.forces;

            for (var i = 0; i < nodeIndices.length; i++) {
              var nodeId = nodeIndices[i];
              node = nodes[nodeId];
              dx = -node.x;
              dy = -node.y;
              distance = Math.sqrt(dx * dx + dy * dy);

              this._calculateForces(distance, dx, dy, forces, node);
            }
          }

          /**
           * Calculate the forces based on the distance.
           * @param {number} distance
           * @param {number} dx
           * @param {number} dy
           * @param {Object<Node.id, vis.Node>} forces
           * @param {Node} node
           * @private
           */

        }, {
          key: "_calculateForces",
          value: function _calculateForces(distance, dx, dy, forces, node) {
            var gravityForce = distance === 0 ? 0 : this.options.centralGravity / distance;
            forces[node.id].x = dx * gravityForce;
            forces[node.id].y = dy * gravityForce;
          }
        }]);
        return CentralGravitySolver;
      }();

      exports["default"] = CentralGravitySolver;

      /***/
    },
    /* 122 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /**
       * This object contains all possible options. It will check if the types are correct, if required if the option is one
       * of the allowed values.
       *
       * __any__ means that the name of the property does not matter.
       * __type__ is a required field for all objects and contains the allowed types of all objects
       */
      var string = 'string';
      var bool = 'boolean';
      var number = 'number';
      var array = 'array';
      var object = 'object'; // should only be in a __type__ property
      var dom = 'dom';
      var any = 'any';

      // List of endpoints
      var endPoints = ['arrow', 'circle', 'bar'];

      var allOptions = {
        configure: {
          enabled: { boolean: bool },
          filter: { boolean: bool, string: string, array: array, 'function': 'function' },
          container: { dom: dom },
          showButton: { boolean: bool },
          __type__: { object: object, boolean: bool, string: string, array: array, 'function': 'function' }
        },
        edges: {
          arrows: {
            to: { enabled: { boolean: bool }, scaleFactor: { number: number }, type: { string: endPoints }, __type__: { object: object, boolean: bool } },
            middle: { enabled: { boolean: bool }, scaleFactor: { number: number }, type: { string: endPoints }, __type__: { object: object, boolean: bool } },
            from: { enabled: { boolean: bool }, scaleFactor: { number: number }, type: { string: endPoints }, __type__: { object: object, boolean: bool } },
            __type__: { string: ['from', 'to', 'middle'], object: object }
          },
          arrowStrikethrough: { boolean: bool },
          chosen: {
            label: { boolean: bool, 'function': 'function' },
            edge: { boolean: bool, 'function': 'function' },
            __type__: { object: object, boolean: bool }
          },
          color: {
            color: { string: string },
            highlight: { string: string },
            hover: { string: string },
            inherit: { string: ['from', 'to', 'both'], boolean: bool },
            opacity: { number: number },
            __type__: { object: object, string: string }
          },
          dashes: { boolean: bool, array: array },
          font: {
            color: { string: string },
            size: { number: number }, // px
            face: { string: string },
            background: { string: string },
            strokeWidth: { number: number }, // px
            strokeColor: { string: string },
            align: { string: ['horizontal', 'top', 'middle', 'bottom'] },
            vadjust: { number: number },
            multi: { boolean: bool, string: string },
            bold: {
              color: { string: string },
              size: { number: number }, // px
              face: { string: string },
              mod: { string: string },
              vadjust: { number: number },
              __type__: { object: object, string: string }
            },
            boldital: {
              color: { string: string },
              size: { number: number }, // px
              face: { string: string },
              mod: { string: string },
              vadjust: { number: number },
              __type__: { object: object, string: string }
            },
            ital: {
              color: { string: string },
              size: { number: number }, // px
              face: { string: string },
              mod: { string: string },
              vadjust: { number: number },
              __type__: { object: object, string: string }
            },
            mono: {
              color: { string: string },
              size: { number: number }, // px
              face: { string: string },
              mod: { string: string },
              vadjust: { number: number },
              __type__: { object: object, string: string }
            },
            __type__: { object: object, string: string }
          },
          hidden: { boolean: bool },
          hoverWidth: { 'function': 'function', number: number },
          label: { string: string, 'undefined': 'undefined' },
          labelHighlightBold: { boolean: bool },
          length: { number: number, 'undefined': 'undefined' },
          physics: { boolean: bool },
          scaling: {
            min: { number: number },
            max: { number: number },
            label: {
              enabled: { boolean: bool },
              min: { number: number },
              max: { number: number },
              maxVisible: { number: number },
              drawThreshold: { number: number },
              __type__: { object: object, boolean: bool }
            },
            customScalingFunction: { 'function': 'function' },
            __type__: { object: object }
          },
          selectionWidth: { 'function': 'function', number: number },
          selfReferenceSize: { number: number },
          shadow: {
            enabled: { boolean: bool },
            color: { string: string },
            size: { number: number },
            x: { number: number },
            y: { number: number },
            __type__: { object: object, boolean: bool }
          },
          smooth: {
            enabled: { boolean: bool },
            type: { string: ['dynamic', 'continuous', 'discrete', 'diagonalCross', 'straightCross', 'horizontal', 'vertical', 'curvedCW', 'curvedCCW', 'cubicBezier'] },
            roundness: { number: number },
            forceDirection: { string: ['horizontal', 'vertical', 'none'], boolean: bool },
            __type__: { object: object, boolean: bool }
          },
          title: { string: string, 'undefined': 'undefined' },
          width: { number: number },
          widthConstraint: {
            maximum: { number: number },
            __type__: { object: object, boolean: bool, number: number }
          },
          value: { number: number, 'undefined': 'undefined' },
          __type__: { object: object }
        },
        groups: {
          useDefaultGroups: { boolean: bool },
          __any__: 'get from nodes, will be overwritten below',
          __type__: { object: object }
        },
        interaction: {
          dragNodes: { boolean: bool },
          dragView: { boolean: bool },
          hideEdgesOnDrag: { boolean: bool },
          hideNodesOnDrag: { boolean: bool },
          hover: { boolean: bool },
          keyboard: {
            enabled: { boolean: bool },
            speed: { x: { number: number }, y: { number: number }, zoom: { number: number }, __type__: { object: object } },
            bindToWindow: { boolean: bool },
            __type__: { object: object, boolean: bool }
          },
          multiselect: { boolean: bool },
          navigationButtons: { boolean: bool },
          selectable: { boolean: bool },
          selectConnectedEdges: { boolean: bool },
          hoverConnectedEdges: { boolean: bool },
          tooltipDelay: { number: number },
          zoomView: { boolean: bool },
          __type__: { object: object }
        },
        layout: {
          randomSeed: { 'undefined': 'undefined', number: number },
          improvedLayout: { boolean: bool },
          hierarchical: {
            enabled: { boolean: bool },
            levelSeparation: { number: number },
            nodeSpacing: { number: number },
            treeSpacing: { number: number },
            blockShifting: { boolean: bool },
            edgeMinimization: { boolean: bool },
            parentCentralization: { boolean: bool },
            direction: { string: ['UD', 'DU', 'LR', 'RL'] }, // UD, DU, LR, RL
            sortMethod: { string: ['hubsize', 'directed'] }, // hubsize, directed
            __type__: { object: object, boolean: bool }
          },
          __type__: { object: object }
        },
        manipulation: {
          enabled: { boolean: bool },
          initiallyActive: { boolean: bool },
          addNode: { boolean: bool, 'function': 'function' },
          addEdge: { boolean: bool, 'function': 'function' },
          editNode: { 'function': 'function' },
          editEdge: {
            editWithoutDrag: { 'function': 'function' },
            __type__: { object: object, boolean: bool, 'function': 'function' }
          },
          deleteNode: { boolean: bool, 'function': 'function' },
          deleteEdge: { boolean: bool, 'function': 'function' },
          controlNodeStyle: 'get from nodes, will be overwritten below',
          __type__: { object: object, boolean: bool }
        },
        nodes: {
          borderWidth: { number: number },
          borderWidthSelected: { number: number, 'undefined': 'undefined' },
          brokenImage: { string: string, 'undefined': 'undefined' },
          chosen: {
            label: { boolean: bool, 'function': 'function' },
            node: { boolean: bool, 'function': 'function' },
            __type__: { object: object, boolean: bool }
          },
          color: {
            border: { string: string },
            background: { string: string },
            highlight: {
              border: { string: string },
              background: { string: string },
              __type__: { object: object, string: string }
            },
            hover: {
              border: { string: string },
              background: { string: string },
              __type__: { object: object, string: string }
            },
            __type__: { object: object, string: string }
          },
          fixed: {
            x: { boolean: bool },
            y: { boolean: bool },
            __type__: { object: object, boolean: bool }
          },
          font: {
            align: { string: string },
            color: { string: string },
            size: { number: number }, // px
            face: { string: string },
            background: { string: string },
            strokeWidth: { number: number }, // px
            strokeColor: { string: string },
            vadjust: { number: number },
            multi: { boolean: bool, string: string },
            bold: {
              color: { string: string },
              size: { number: number }, // px
              face: { string: string },
              mod: { string: string },
              vadjust: { number: number },
              __type__: { object: object, string: string }
            },
            boldital: {
              color: { string: string },
              size: { number: number }, // px
              face: { string: string },
              mod: { string: string },
              vadjust: { number: number },
              __type__: { object: object, string: string }
            },
            ital: {
              color: { string: string },
              size: { number: number }, // px
              face: { string: string },
              mod: { string: string },
              vadjust: { number: number },
              __type__: { object: object, string: string }
            },
            mono: {
              color: { string: string },
              size: { number: number }, // px
              face: { string: string },
              mod: { string: string },
              vadjust: { number: number },
              __type__: { object: object, string: string }
            },
            __type__: { object: object, string: string }
          },
          group: { string: string, number: number, 'undefined': 'undefined' },
          heightConstraint: {
            minimum: { number: number },
            valign: { string: string },
            __type__: { object: object, boolean: bool, number: number }
          },
          hidden: { boolean: bool },
          icon: {
            face: { string: string },
            code: { string: string }, //'\uf007',
            size: { number: number }, //50,
            color: { string: string },
            __type__: { object: object }
          },
          id: { string: string, number: number },
          image: {
            selected: { string: string, 'undefined': 'undefined' }, // --> URL
            unselected: { string: string, 'undefined': 'undefined' }, // --> URL
            __type__: { object: object, string: string }
          },
          label: { string: string, 'undefined': 'undefined' },
          labelHighlightBold: { boolean: bool },
          level: { number: number, 'undefined': 'undefined' },
          margin: {
            top: { number: number },
            right: { number: number },
            bottom: { number: number },
            left: { number: number },
            __type__: { object: object, number: number }
          },
          mass: { number: number },
          physics: { boolean: bool },
          scaling: {
            min: { number: number },
            max: { number: number },
            label: {
              enabled: { boolean: bool },
              min: { number: number },
              max: { number: number },
              maxVisible: { number: number },
              drawThreshold: { number: number },
              __type__: { object: object, boolean: bool }
            },
            customScalingFunction: { 'function': 'function' },
            __type__: { object: object }
          },
          shadow: {
            enabled: { boolean: bool },
            color: { string: string },
            size: { number: number },
            x: { number: number },
            y: { number: number },
            __type__: { object: object, boolean: bool }
          },
          shape: { string: ['ellipse', 'circle', 'database', 'box', 'text', 'image', 'circularImage', 'diamond', 'dot', 'star', 'triangle', 'triangleDown', 'square', 'icon', 'hexagon'] },
          shapeProperties: {
            borderDashes: { boolean: bool, array: array },
            borderRadius: { number: number },
            interpolation: { boolean: bool },
            useImageSize: { boolean: bool },
            useBorderWithImage: { boolean: bool },
            __type__: { object: object }
          },
          size: { number: number },
          title: { string: string, dom: dom, 'undefined': 'undefined' },
          value: { number: number, 'undefined': 'undefined' },
          widthConstraint: {
            minimum: { number: number },
            maximum: { number: number },
            __type__: { object: object, boolean: bool, number: number }
          },
          x: { number: number },
          y: { number: number },
          __type__: { object: object }
        },
        physics: {
          enabled: { boolean: bool },
          barnesHut: {
            gravitationalConstant: { number: number },
            centralGravity: { number: number },
            springLength: { number: number },
            springConstant: { number: number },
            damping: { number: number },
            avoidOverlap: { number: number },
            __type__: { object: object }
          },
          forceAtlas2Based: {
            gravitationalConstant: { number: number },
            centralGravity: { number: number },
            springLength: { number: number },
            springConstant: { number: number },
            damping: { number: number },
            avoidOverlap: { number: number },
            __type__: { object: object }
          },
          repulsion: {
            centralGravity: { number: number },
            springLength: { number: number },
            springConstant: { number: number },
            nodeDistance: { number: number },
            damping: { number: number },
            __type__: { object: object }
          },
          hierarchicalRepulsion: {
            centralGravity: { number: number },
            springLength: { number: number },
            springConstant: { number: number },
            nodeDistance: { number: number },
            damping: { number: number },
            __type__: { object: object }
          },
          maxVelocity: { number: number },
          minVelocity: { number: number }, // px/s
          solver: { string: ['barnesHut', 'repulsion', 'hierarchicalRepulsion', 'forceAtlas2Based'] },
          stabilization: {
            enabled: { boolean: bool },
            iterations: { number: number }, // maximum number of iteration to stabilize
            updateInterval: { number: number },
            onlyDynamicEdges: { boolean: bool },
            fit: { boolean: bool },
            __type__: { object: object, boolean: bool }
          },
          timestep: { number: number },
          adaptiveTimestep: { boolean: bool },
          __type__: { object: object, boolean: bool }
        },

        //globals :
        autoResize: { boolean: bool },
        clickToUse: { boolean: bool },
        locale: { string: string },
        locales: {
          __any__: { any: any },
          __type__: { object: object }
        },
        height: { string: string },
        width: { string: string },
        __type__: { object: object }
      };

      allOptions.groups.__any__ = allOptions.nodes;
      allOptions.manipulation.controlNodeStyle = allOptions.nodes;

      var configureOptions = {
        nodes: {
          borderWidth: [1, 0, 10, 1],
          borderWidthSelected: [2, 0, 10, 1],
          color: {
            border: ['color', '#2B7CE9'],
            background: ['color', '#97C2FC'],
            highlight: {
              border: ['color', '#2B7CE9'],
              background: ['color', '#D2E5FF']
            },
            hover: {
              border: ['color', '#2B7CE9'],
              background: ['color', '#D2E5FF']
            }
          },
          fixed: {
            x: false,
            y: false
          },
          font: {
            color: ['color', '#343434'],
            size: [14, 0, 100, 1], // px
            face: ['arial', 'verdana', 'tahoma'],
            background: ['color', 'none'],
            strokeWidth: [0, 0, 50, 1], // px
            strokeColor: ['color', '#ffffff']
          },
          //group: 'string',
          hidden: false,
          labelHighlightBold: true,
          //icon: {
          //  face: 'string',  //'FontAwesome',
          //  code: 'string',  //'\uf007',
          //  size: [50, 0, 200, 1],  //50,
          //  color: ['color','#2B7CE9']   //'#aa00ff'
          //},
          //image: 'string', // --> URL
          physics: true,
          scaling: {
            min: [10, 0, 200, 1],
            max: [30, 0, 200, 1],
            label: {
              enabled: false,
              min: [14, 0, 200, 1],
              max: [30, 0, 200, 1],
              maxVisible: [30, 0, 200, 1],
              drawThreshold: [5, 0, 20, 1]
            }
          },
          shadow: {
            enabled: false,
            color: 'rgba(0,0,0,0.5)',
            size: [10, 0, 20, 1],
            x: [5, -30, 30, 1],
            y: [5, -30, 30, 1]
          },
          shape: ['ellipse', 'box', 'circle', 'database', 'diamond', 'dot', 'square', 'star', 'text', 'triangle', 'triangleDown', 'hexagon'],
          shapeProperties: {
            borderDashes: false,
            borderRadius: [6, 0, 20, 1],
            interpolation: true,
            useImageSize: false
          },
          size: [25, 0, 200, 1]
        },
        edges: {
          arrows: {
            to: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' },
            middle: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' },
            from: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' }
          },
          arrowStrikethrough: true,
          color: {
            color: ['color', '#848484'],
            highlight: ['color', '#848484'],
            hover: ['color', '#848484'],
            inherit: ['from', 'to', 'both', true, false],
            opacity: [1, 0, 1, 0.05]
          },
          dashes: false,
          font: {
            color: ['color', '#343434'],
            size: [14, 0, 100, 1], // px
            face: ['arial', 'verdana', 'tahoma'],
            background: ['color', 'none'],
            strokeWidth: [2, 0, 50, 1], // px
            strokeColor: ['color', '#ffffff'],
            align: ['horizontal', 'top', 'middle', 'bottom']
          },
          hidden: false,
          hoverWidth: [1.5, 0, 5, 0.1],
          labelHighlightBold: true,
          physics: true,
          scaling: {
            min: [1, 0, 100, 1],
            max: [15, 0, 100, 1],
            label: {
              enabled: true,
              min: [14, 0, 200, 1],
              max: [30, 0, 200, 1],
              maxVisible: [30, 0, 200, 1],
              drawThreshold: [5, 0, 20, 1]
            }
          },
          selectionWidth: [1.5, 0, 5, 0.1],
          selfReferenceSize: [20, 0, 200, 1],
          shadow: {
            enabled: false,
            color: 'rgba(0,0,0,0.5)',
            size: [10, 0, 20, 1],
            x: [5, -30, 30, 1],
            y: [5, -30, 30, 1]
          },
          smooth: {
            enabled: true,
            type: ['dynamic', 'continuous', 'discrete', 'diagonalCross', 'straightCross', 'horizontal', 'vertical', 'curvedCW', 'curvedCCW', 'cubicBezier'],
            forceDirection: ['horizontal', 'vertical', 'none'],
            roundness: [0.5, 0, 1, 0.05]
          },
          width: [1, 0, 30, 1]
        },
        layout: {
          //randomSeed: [0, 0, 500, 1],
          //improvedLayout: true,
          hierarchical: {
            enabled: false,
            levelSeparation: [150, 20, 500, 5],
            nodeSpacing: [100, 20, 500, 5],
            treeSpacing: [200, 20, 500, 5],
            blockShifting: true,
            edgeMinimization: true,
            parentCentralization: true,
            direction: ['UD', 'DU', 'LR', 'RL'], // UD, DU, LR, RL
            sortMethod: ['hubsize', 'directed'] // hubsize, directed
          }
        },
        interaction: {
          dragNodes: true,
          dragView: true,
          hideEdgesOnDrag: false,
          hideNodesOnDrag: false,
          hover: false,
          keyboard: {
            enabled: false,
            speed: { x: [10, 0, 40, 1], y: [10, 0, 40, 1], zoom: [0.02, 0, 0.1, 0.005] },
            bindToWindow: true
          },
          multiselect: false,
          navigationButtons: false,
          selectable: true,
          selectConnectedEdges: true,
          hoverConnectedEdges: true,
          tooltipDelay: [300, 0, 1000, 25],
          zoomView: true
        },
        manipulation: {
          enabled: false,
          initiallyActive: false
        },
        physics: {
          enabled: true,
          barnesHut: {
            //theta: [0.5, 0.1, 1, 0.05],
            gravitationalConstant: [-2000, -30000, 0, 50],
            centralGravity: [0.3, 0, 10, 0.05],
            springLength: [95, 0, 500, 5],
            springConstant: [0.04, 0, 1.2, 0.005],
            damping: [0.09, 0, 1, 0.01],
            avoidOverlap: [0, 0, 1, 0.01]
          },
          forceAtlas2Based: {
            //theta: [0.5, 0.1, 1, 0.05],
            gravitationalConstant: [-50, -500, 0, 1],
            centralGravity: [0.01, 0, 1, 0.005],
            springLength: [95, 0, 500, 5],
            springConstant: [0.08, 0, 1.2, 0.005],
            damping: [0.4, 0, 1, 0.01],
            avoidOverlap: [0, 0, 1, 0.01]
          },
          repulsion: {
            centralGravity: [0.2, 0, 10, 0.05],
            springLength: [200, 0, 500, 5],
            springConstant: [0.05, 0, 1.2, 0.005],
            nodeDistance: [100, 0, 500, 5],
            damping: [0.09, 0, 1, 0.01]
          },
          hierarchicalRepulsion: {
            centralGravity: [0.2, 0, 10, 0.05],
            springLength: [100, 0, 500, 5],
            springConstant: [0.01, 0, 1.2, 0.005],
            nodeDistance: [120, 0, 500, 5],
            damping: [0.09, 0, 1, 0.01]
          },
          maxVelocity: [50, 0, 150, 1],
          minVelocity: [0.1, 0.01, 0.5, 0.01],
          solver: ['barnesHut', 'forceAtlas2Based', 'repulsion', 'hierarchicalRepulsion'],
          timestep: [0.5, 0.01, 1, 0.01]
          //adaptiveTimestep: true
        }
      };

      exports.allOptions = allOptions;
      exports.configureOptions = configureOptions;

      /***/
    },
    /* 123 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(2);

      // Graph3d
      util.extend(exports, __webpack_require__(159));

      // Timeline & Graph2d
      util.extend(exports, __webpack_require__(177));

      // Network
      util.extend(exports, __webpack_require__(181));

      /***/
    },
    /* 124 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(49);
      __webpack_require__(60);
      module.exports = __webpack_require__(136);

      /***/
    },
    /* 125 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var addToUnscopables = __webpack_require__(126);
      var step = __webpack_require__(127);
      var Iterators = __webpack_require__(31);
      var toIObject = __webpack_require__(25);

      // 22.1.3.4 Array.prototype.entries()
      // 22.1.3.13 Array.prototype.keys()
      // 22.1.3.29 Array.prototype.values()
      // 22.1.3.30 Array.prototype[@@iterator]()
      module.exports = __webpack_require__(79)(Array, 'Array', function (iterated, kind) {
        this._t = toIObject(iterated); // target
        this._i = 0; // next index
        this._k = kind; // kind
        // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
      }, function () {
        var O = this._t;
        var kind = this._k;
        var index = this._i++;
        if (!O || index >= O.length) {
          this._t = undefined;
          return step(1);
        }
        if (kind == 'keys') return step(0, index);
        if (kind == 'values') return step(0, O[index]);
        return step(0, [index, O[index]]);
      }, 'values');

      // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
      Iterators.Arguments = Iterators.Array;

      addToUnscopables('keys');
      addToUnscopables('values');
      addToUnscopables('entries');

      /***/
    },
    /* 126 */
    /***/function (module, exports) {

      module.exports = function () {/* empty */};

      /***/
    },
    /* 127 */
    /***/function (module, exports) {

      module.exports = function (done, value) {
        return { value: value, done: !!done };
      };

      /***/
    },
    /* 128 */
    /***/function (module, exports) {

      module.exports = function (it) {
        if (typeof it != 'function') throw TypeError(it + ' is not a function!');
        return it;
      };

      /***/
    },
    /* 129 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var create = __webpack_require__(54);
      var descriptor = __webpack_require__(39);
      var setToStringTag = __webpack_require__(59);
      var IteratorPrototype = {};

      // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
      __webpack_require__(26)(IteratorPrototype, __webpack_require__(13)('iterator'), function () {
        return this;
      });

      module.exports = function (Constructor, NAME, next) {
        Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
        setToStringTag(Constructor, NAME + ' Iterator');
      };

      /***/
    },
    /* 130 */
    /***/function (module, exports, __webpack_require__) {

      var dP = __webpack_require__(20);
      var anObject = __webpack_require__(27);
      var getKeys = __webpack_require__(33);

      module.exports = __webpack_require__(21) ? _defineProperties2['default'] : function defineProperties(O, Properties) {
        anObject(O);
        var keys = getKeys(Properties);
        var length = keys.length;
        var i = 0;
        var P;
        while (length > i) {
          dP.f(O, P = keys[i++], Properties[P]);
        }return O;
      };

      /***/
    },
    /* 131 */
    /***/function (module, exports, __webpack_require__) {

      // false -> Array#indexOf
      // true  -> Array#includes
      var toIObject = __webpack_require__(25);
      var toLength = __webpack_require__(132);
      var toAbsoluteIndex = __webpack_require__(133);
      module.exports = function (IS_INCLUDES) {
        return function ($this, el, fromIndex) {
          var O = toIObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value;
          // Array#includes uses SameValueZero equality algorithm
          // eslint-disable-next-line no-self-compare
          if (IS_INCLUDES && el != el) while (length > index) {
            value = O[index++];
            // eslint-disable-next-line no-self-compare
            if (value != value) return true;
            // Array#indexOf ignores holes, Array#includes - not
          } else for (; length > index; index++) {
            if (IS_INCLUDES || index in O) {
              if (O[index] === el) return IS_INCLUDES || index || 0;
            }
          }return !IS_INCLUDES && -1;
        };
      };

      /***/
    },
    /* 132 */
    /***/function (module, exports, __webpack_require__) {

      // 7.1.15 ToLength
      var toInteger = __webpack_require__(55);
      var min = Math.min;
      module.exports = function (it) {
        return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
      };

      /***/
    },
    /* 133 */
    /***/function (module, exports, __webpack_require__) {

      var toInteger = __webpack_require__(55);
      var max = Math.max;
      var min = Math.min;
      module.exports = function (index, length) {
        index = toInteger(index);
        return index < 0 ? max(index + length, 0) : min(index, length);
      };

      /***/
    },
    /* 134 */
    /***/function (module, exports, __webpack_require__) {

      var document = __webpack_require__(18).document;
      module.exports = document && document.documentElement;

      /***/
    },
    /* 135 */
    /***/function (module, exports, __webpack_require__) {

      var toInteger = __webpack_require__(55);
      var defined = __webpack_require__(51);
      // true  -> String#at
      // false -> String#codePointAt
      module.exports = function (TO_STRING) {
        return function (that, pos) {
          var s = String(defined(that));
          var i = toInteger(pos);
          var l = s.length;
          var a, b;
          if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
          a = s.charCodeAt(i);
          return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
        };
      };

      /***/
    },
    /* 136 */
    /***/function (module, exports, __webpack_require__) {

      var anObject = __webpack_require__(27);
      var get = __webpack_require__(137);
      module.exports = __webpack_require__(7).getIterator = function (it) {
        var iterFn = get(it);
        if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
        return anObject(iterFn.call(it));
      };

      /***/
    },
    /* 137 */
    /***/function (module, exports, __webpack_require__) {

      var classof = __webpack_require__(86);
      var ITERATOR = __webpack_require__(13)('iterator');
      var Iterators = __webpack_require__(31);
      module.exports = __webpack_require__(7).getIteratorMethod = function (it) {
        if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
      };

      /***/
    },
    /* 138 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(139);
      var $Object = __webpack_require__(7).Object;
      module.exports = function create(P, D) {
        return $Object.create(P, D);
      };

      /***/
    },
    /* 139 */
    /***/function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(17);
      // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
      $export($export.S, 'Object', { create: __webpack_require__(54) });

      /***/
    },
    /* 140 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(141);
      module.exports = __webpack_require__(7).Object.keys;

      /***/
    },
    /* 141 */
    /***/function (module, exports, __webpack_require__) {

      // 19.1.2.14 Object.keys(O)
      var toObject = __webpack_require__(41);
      var $keys = __webpack_require__(33);

      __webpack_require__(87)('keys', function () {
        return function keys(it) {
          return $keys(toObject(it));
        };
      });

      /***/
    },
    /* 142 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = { "default": __webpack_require__(143), __esModule: true };

      /***/
    },
    /* 143 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(60);
      __webpack_require__(49);
      module.exports = __webpack_require__(61).f('iterator');

      /***/
    },
    /* 144 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = { "default": __webpack_require__(145), __esModule: true };

      /***/
    },
    /* 145 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(146);
      __webpack_require__(151);
      __webpack_require__(152);
      __webpack_require__(153);
      module.exports = __webpack_require__(7).Symbol;

      /***/
    },
    /* 146 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // ECMAScript 6 symbols shim

      var global = __webpack_require__(18);
      var has = __webpack_require__(22);
      var DESCRIPTORS = __webpack_require__(21);
      var $export = __webpack_require__(17);
      var redefine = __webpack_require__(83);
      var META = __webpack_require__(147).KEY;
      var $fails = __webpack_require__(28);
      var shared = __webpack_require__(57);
      var setToStringTag = __webpack_require__(59);
      var uid = __webpack_require__(40);
      var wks = __webpack_require__(13);
      var wksExt = __webpack_require__(61);
      var wksDefine = __webpack_require__(62);
      var enumKeys = __webpack_require__(148);
      var isArray = __webpack_require__(149);
      var anObject = __webpack_require__(27);
      var toIObject = __webpack_require__(25);
      var toPrimitive = __webpack_require__(53);
      var createDesc = __webpack_require__(39);
      var _create = __webpack_require__(54);
      var gOPNExt = __webpack_require__(150);
      var $GOPD = __webpack_require__(89);
      var $DP = __webpack_require__(20);
      var $keys = __webpack_require__(33);
      var gOPD = $GOPD.f;
      var dP = $DP.f;
      var gOPN = gOPNExt.f;
      var $Symbol = global.Symbol;
      var $JSON = global.JSON;
      var _stringify = $JSON && $JSON.stringify;
      var PROTOTYPE = 'prototype';
      var HIDDEN = wks('_hidden');
      var TO_PRIMITIVE = wks('toPrimitive');
      var isEnum = {}.propertyIsEnumerable;
      var SymbolRegistry = shared('symbol-registry');
      var AllSymbols = shared('symbols');
      var OPSymbols = shared('op-symbols');
      var ObjectProto = Object[PROTOTYPE];
      var USE_NATIVE = typeof $Symbol == 'function';
      var QObject = global.QObject;
      // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
      var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

      // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
      var setSymbolDesc = DESCRIPTORS && $fails(function () {
        return _create(dP({}, 'a', {
          get: function get() {
            return dP(this, 'a', { value: 7 }).a;
          }
        })).a != 7;
      }) ? function (it, key, D) {
        var protoDesc = gOPD(ObjectProto, key);
        if (protoDesc) delete ObjectProto[key];
        dP(it, key, D);
        if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
      } : dP;

      var wrap = function wrap(tag) {
        var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
        sym._k = tag;
        return sym;
      };

      var isSymbol = USE_NATIVE && (0, _typeof6['default'])($Symbol.iterator) == 'symbol' ? function (it) {
        return (typeof it === 'undefined' ? 'undefined' : (0, _typeof6['default'])(it)) == 'symbol';
      } : function (it) {
        return it instanceof $Symbol;
      };

      var $defineProperty = function defineProperty(it, key, D) {
        if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
        anObject(it);
        key = toPrimitive(key, true);
        anObject(D);
        if (has(AllSymbols, key)) {
          if (!D.enumerable) {
            if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
            it[HIDDEN][key] = true;
          } else {
            if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
            D = _create(D, { enumerable: createDesc(0, false) });
          }return setSymbolDesc(it, key, D);
        }return dP(it, key, D);
      };
      var $defineProperties = function defineProperties(it, P) {
        anObject(it);
        var keys = enumKeys(P = toIObject(P));
        var i = 0;
        var l = keys.length;
        var key;
        while (l > i) {
          $defineProperty(it, key = keys[i++], P[key]);
        }return it;
      };
      var $create = function create(it, P) {
        return P === undefined ? _create(it) : $defineProperties(_create(it), P);
      };
      var $propertyIsEnumerable = function propertyIsEnumerable(key) {
        var E = isEnum.call(this, key = toPrimitive(key, true));
        if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
        return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
      };
      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
        it = toIObject(it);
        key = toPrimitive(key, true);
        if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
        var D = gOPD(it, key);
        if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
        return D;
      };
      var $getOwnPropertyNames = function getOwnPropertyNames(it) {
        var names = gOPN(toIObject(it));
        var result = [];
        var i = 0;
        var key;
        while (names.length > i) {
          if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
        }return result;
      };
      var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
        var IS_OP = it === ObjectProto;
        var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
        var result = [];
        var i = 0;
        var key;
        while (names.length > i) {
          if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
        }return result;
      };

      // 19.4.1.1 Symbol([description])
      if (!USE_NATIVE) {
        $Symbol = function _Symbol2() {
          if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
          var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
          var $set = function $set(value) {
            if (this === ObjectProto) $set.call(OPSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
            setSymbolDesc(this, tag, createDesc(1, value));
          };
          if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
          return wrap(tag);
        };
        redefine($Symbol[PROTOTYPE], 'toString', function toString() {
          return this._k;
        });

        $GOPD.f = $getOwnPropertyDescriptor;
        $DP.f = $defineProperty;
        __webpack_require__(88).f = gOPNExt.f = $getOwnPropertyNames;
        __webpack_require__(42).f = $propertyIsEnumerable;
        __webpack_require__(63).f = $getOwnPropertySymbols;

        if (DESCRIPTORS && !__webpack_require__(52)) {
          redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
        }

        wksExt.f = function (name) {
          return wrap(wks(name));
        };
      }

      $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

      for (var es6Symbols =
      // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
      'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
        wks(es6Symbols[j++]);
      }for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
        wksDefine(wellKnownSymbols[k++]);
      }$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
        // 19.4.2.1 Symbol.for(key)
        'for': function _for(key) {
          return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
        },
        // 19.4.2.5 Symbol.keyFor(sym)
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
          for (var key in SymbolRegistry) {
            if (SymbolRegistry[key] === sym) return key;
          }
        },
        useSetter: function useSetter() {
          setter = true;
        },
        useSimple: function useSimple() {
          setter = false;
        }
      });

      $export($export.S + $export.F * !USE_NATIVE, 'Object', {
        // 19.1.2.2 Object.create(O [, Properties])
        create: $create,
        // 19.1.2.4 Object.defineProperty(O, P, Attributes)
        defineProperty: $defineProperty,
        // 19.1.2.3 Object.defineProperties(O, Properties)
        defineProperties: $defineProperties,
        // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
        // 19.1.2.7 Object.getOwnPropertyNames(O)
        getOwnPropertyNames: $getOwnPropertyNames,
        // 19.1.2.8 Object.getOwnPropertySymbols(O)
        getOwnPropertySymbols: $getOwnPropertySymbols
      });

      // 24.3.2 JSON.stringify(value [, replacer [, space]])
      $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
        var S = $Symbol();
        // MS Edge converts symbol values to JSON as {}
        // WebKit converts symbol values to JSON as null
        // V8 throws on boxed symbols
        return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
      })), 'JSON', {
        stringify: function stringify(it) {
          if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
          var args = [it];
          var i = 1;
          var replacer, $replacer;
          while (arguments.length > i) {
            args.push(arguments[i++]);
          }replacer = args[1];
          if (typeof replacer == 'function') $replacer = replacer;
          if ($replacer || !isArray(replacer)) replacer = function replacer(key, value) {
            if ($replacer) value = $replacer.call(this, key, value);
            if (!isSymbol(value)) return value;
          };
          args[1] = replacer;
          return _stringify.apply($JSON, args);
        }
      });

      // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
      $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(26)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
      // 19.4.3.5 Symbol.prototype[@@toStringTag]
      setToStringTag($Symbol, 'Symbol');
      // 20.2.1.9 Math[@@toStringTag]
      setToStringTag(Math, 'Math', true);
      // 24.3.3 JSON[@@toStringTag]
      setToStringTag(global.JSON, 'JSON', true);

      /***/
    },
    /* 147 */
    /***/function (module, exports, __webpack_require__) {

      var META = __webpack_require__(40)('meta');
      var isObject = __webpack_require__(32);
      var has = __webpack_require__(22);
      var setDesc = __webpack_require__(20).f;
      var id = 0;
      var isExtensible = _isExtensible2['default'] || function () {
        return true;
      };
      var FREEZE = !__webpack_require__(28)(function () {
        return isExtensible((0, _preventExtensions2['default'])({}));
      });
      var setMeta = function setMeta(it) {
        setDesc(it, META, { value: {
            i: 'O' + ++id, // object ID
            w: {} // weak collections IDs
          } });
      };
      var fastKey = function fastKey(it, create) {
        // return primitive with prefix
        if (!isObject(it)) return (typeof it === 'undefined' ? 'undefined' : (0, _typeof6['default'])(it)) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
        if (!has(it, META)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return 'F';
          // not necessary to add metadata
          if (!create) return 'E';
          // add missing metadata
          setMeta(it);
          // return object ID
        }return it[META].i;
      };
      var getWeak = function getWeak(it, create) {
        if (!has(it, META)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return true;
          // not necessary to add metadata
          if (!create) return false;
          // add missing metadata
          setMeta(it);
          // return hash weak collections IDs
        }return it[META].w;
      };
      // add metadata on freeze-family methods calling
      var onFreeze = function onFreeze(it) {
        if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
        return it;
      };
      var meta = module.exports = {
        KEY: META,
        NEED: false,
        fastKey: fastKey,
        getWeak: getWeak,
        onFreeze: onFreeze
      };

      /***/
    },
    /* 148 */
    /***/function (module, exports, __webpack_require__) {

      // all enumerable object keys, includes symbols
      var getKeys = __webpack_require__(33);
      var gOPS = __webpack_require__(63);
      var pIE = __webpack_require__(42);
      module.exports = function (it) {
        var result = getKeys(it);
        var getSymbols = gOPS.f;
        if (getSymbols) {
          var symbols = getSymbols(it);
          var isEnum = pIE.f;
          var i = 0;
          var key;
          while (symbols.length > i) {
            if (isEnum.call(it, key = symbols[i++])) result.push(key);
          }
        }return result;
      };

      /***/
    },
    /* 149 */
    /***/function (module, exports, __webpack_require__) {

      // 7.2.2 IsArray(argument)
      var cof = __webpack_require__(50);
      module.exports = Array.isArray || function isArray(arg) {
        return cof(arg) == 'Array';
      };

      /***/
    },
    /* 150 */
    /***/function (module, exports, __webpack_require__) {

      // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
      var toIObject = __webpack_require__(25);
      var gOPN = __webpack_require__(88).f;
      var toString = {}.toString;

      var windowNames = (typeof window === 'undefined' ? 'undefined' : (0, _typeof6['default'])(window)) == 'object' && window && _getOwnPropertyNames2['default'] ? (0, _getOwnPropertyNames2['default'])(window) : [];

      var getWindowNames = function getWindowNames(it) {
        try {
          return gOPN(it);
        } catch (e) {
          return windowNames.slice();
        }
      };

      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
      };

      /***/
    },
    /* 151 */
    /***/function (module, exports) {

      /***/},
    /* 152 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(62)('asyncIterator');

      /***/
    },
    /* 153 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(62)('observable');

      /***/
    },
    /* 154 */
    /***/function (module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function (module) {
        var require; //! moment.js
        //! version : 2.19.1
        //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
        //! license : MIT
        //! momentjs.com

        ;(function (global, factory) {
          true ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
        })(this, function () {
          'use strict';

          var hookCallback;

          function hooks() {
            return hookCallback.apply(null, arguments);
          }

          // This is done to register the method called with moment()
          // without creating circular dependencies.
          function setHookCallback(callback) {
            hookCallback = callback;
          }

          function isArray(input) {
            return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
          }

          function isObject(input) {
            // IE8 will treat undefined and null as object if it wasn't for
            // input != null
            return input != null && Object.prototype.toString.call(input) === '[object Object]';
          }

          function isObjectEmpty(obj) {
            if (_getOwnPropertyNames2['default']) {
              return (0, _getOwnPropertyNames2['default'])(obj).length === 0;
            } else {
              var k;
              for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                  return false;
                }
              }
              return true;
            }
          }

          function isUndefined(input) {
            return input === void 0;
          }

          function isNumber(input) {
            return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
          }

          function isDate(input) {
            return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
          }

          function map(arr, fn) {
            var res = [],
                i;
            for (i = 0; i < arr.length; ++i) {
              res.push(fn(arr[i], i));
            }
            return res;
          }

          function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
          }

          function extend(a, b) {
            for (var i in b) {
              if (hasOwnProp(b, i)) {
                a[i] = b[i];
              }
            }

            if (hasOwnProp(b, 'toString')) {
              a.toString = b.toString;
            }

            if (hasOwnProp(b, 'valueOf')) {
              a.valueOf = b.valueOf;
            }

            return a;
          }

          function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
          }

          function defaultParsingFlags() {
            // We need to deep clone this object.
            return {
              empty: false,
              unusedTokens: [],
              unusedInput: [],
              overflow: -2,
              charsLeftOver: 0,
              nullInput: false,
              invalidMonth: null,
              invalidFormat: false,
              userInvalidated: false,
              iso: false,
              parsedDateParts: [],
              meridiem: null,
              rfc2822: false,
              weekdayMismatch: false
            };
          }

          function getParsingFlags(m) {
            if (m._pf == null) {
              m._pf = defaultParsingFlags();
            }
            return m._pf;
          }

          var some;
          if (Array.prototype.some) {
            some = Array.prototype.some;
          } else {
            some = function some(fun) {
              var t = Object(this);
              var len = t.length >>> 0;

              for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                  return true;
                }
              }

              return false;
            };
          }

          function isValid(m) {
            if (m._isValid == null) {
              var flags = getParsingFlags(m);
              var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
              });
              var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

              if (m._strict) {
                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
              }

              if (_isFrozen2['default'] == null || !(0, _isFrozen2['default'])(m)) {
                m._isValid = isNowValid;
              } else {
                return isNowValid;
              }
            }
            return m._isValid;
          }

          function createInvalid(flags) {
            var m = createUTC(NaN);
            if (flags != null) {
              extend(getParsingFlags(m), flags);
            } else {
              getParsingFlags(m).userInvalidated = true;
            }

            return m;
          }

          // Plugins that add properties should also add the key here (null value),
          // so we can properly clone ourselves.
          var momentProperties = hooks.momentProperties = [];

          function copyConfig(to, from) {
            var i, prop, val;

            if (!isUndefined(from._isAMomentObject)) {
              to._isAMomentObject = from._isAMomentObject;
            }
            if (!isUndefined(from._i)) {
              to._i = from._i;
            }
            if (!isUndefined(from._f)) {
              to._f = from._f;
            }
            if (!isUndefined(from._l)) {
              to._l = from._l;
            }
            if (!isUndefined(from._strict)) {
              to._strict = from._strict;
            }
            if (!isUndefined(from._tzm)) {
              to._tzm = from._tzm;
            }
            if (!isUndefined(from._isUTC)) {
              to._isUTC = from._isUTC;
            }
            if (!isUndefined(from._offset)) {
              to._offset = from._offset;
            }
            if (!isUndefined(from._pf)) {
              to._pf = getParsingFlags(from);
            }
            if (!isUndefined(from._locale)) {
              to._locale = from._locale;
            }

            if (momentProperties.length > 0) {
              for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                  to[prop] = val;
                }
              }
            }

            return to;
          }

          var updateInProgress = false;

          // Moment prototype object
          function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
            if (!this.isValid()) {
              this._d = new Date(NaN);
            }
            // Prevent infinite loop in case updateOffset creates new moment
            // objects.
            if (updateInProgress === false) {
              updateInProgress = true;
              hooks.updateOffset(this);
              updateInProgress = false;
            }
          }

          function isMoment(obj) {
            return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
          }

          function absFloor(number) {
            if (number < 0) {
              // -0 -> 0
              return Math.ceil(number) || 0;
            } else {
              return Math.floor(number);
            }
          }

          function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
                value = 0;

            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
              value = absFloor(coercedNumber);
            }

            return value;
          }

          // compare two arrays, return the number of differences
          function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
                lengthDiff = Math.abs(array1.length - array2.length),
                diffs = 0,
                i;
            for (i = 0; i < len; i++) {
              if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
              }
            }
            return diffs + lengthDiff;
          }

          function warn(msg) {
            if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
              console.warn('Deprecation warning: ' + msg);
            }
          }

          function deprecate(msg, fn) {
            var firstTime = true;

            return extend(function () {
              if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
              }
              if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                  arg = '';
                  if ((0, _typeof6['default'])(arguments[i]) === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                      arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                  } else {
                    arg = arguments[i];
                  }
                  args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                firstTime = false;
              }
              return fn.apply(this, arguments);
            }, fn);
          }

          var deprecations = {};

          function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(name, msg);
            }
            if (!deprecations[name]) {
              warn(msg);
              deprecations[name] = true;
            }
          }

          hooks.suppressDeprecationWarnings = false;
          hooks.deprecationHandler = null;

          function isFunction(input) {
            return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
          }

          function set(config) {
            var prop, i;
            for (i in config) {
              prop = config[i];
              if (isFunction(prop)) {
                this[i] = prop;
              } else {
                this['_' + i] = prop;
              }
            }
            this._config = config;
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
            // TODO: Remove "ordinalParse" fallback in next major release.
            this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
          }

          function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig),
                prop;
            for (prop in childConfig) {
              if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                  res[prop] = {};
                  extend(res[prop], parentConfig[prop]);
                  extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                  res[prop] = childConfig[prop];
                } else {
                  delete res[prop];
                }
              }
            }
            for (prop in parentConfig) {
              if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
              }
            }
            return res;
          }

          function Locale(config) {
            if (config != null) {
              this.set(config);
            }
          }

          var keys;

          if (_keys4['default']) {
            keys = _keys4['default'];
          } else {
            keys = function keys(obj) {
              var i,
                  res = [];
              for (i in obj) {
                if (hasOwnProp(obj, i)) {
                  res.push(i);
                }
              }
              return res;
            };
          }

          var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
          };

          function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
          }

          var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A'
          };

          function longDateFormat(key) {
            var format = this._longDateFormat[key],
                formatUpper = this._longDateFormat[key.toUpperCase()];

            if (format || !formatUpper) {
              return format;
            }

            this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
              return val.slice(1);
            });

            return this._longDateFormat[key];
          }

          var defaultInvalidDate = 'Invalid date';

          function invalidDate() {
            return this._invalidDate;
          }

          var defaultOrdinal = '%d';
          var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

          function ordinal(number) {
            return this._ordinal.replace('%d', number);
          }

          var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
          };

          function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
          }

          function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
          }

          var aliases = {};

          function addUnitAlias(unit, shorthand) {
            var lowerCase = unit.toLowerCase();
            aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
          }

          function normalizeUnits(units) {
            return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
          }

          function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
                normalizedProp,
                prop;

            for (prop in inputObject) {
              if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                  normalizedInput[normalizedProp] = inputObject[prop];
                }
              }
            }

            return normalizedInput;
          }

          var priorities = {};

          function addUnitPriority(unit, priority) {
            priorities[unit] = priority;
          }

          function getPrioritizedUnits(unitsObj) {
            var units = [];
            for (var u in unitsObj) {
              units.push({ unit: u, priority: priorities[u] });
            }
            units.sort(function (a, b) {
              return a.priority - b.priority;
            });
            return units;
          }

          function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number),
                zerosToFill = targetLength - absNumber.length,
                sign = number >= 0;
            return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
          }

          var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

          var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

          var formatFunctions = {};

          var formatTokenFunctions = {};

          // token:    'M'
          // padded:   ['MM', 2]
          // ordinal:  'Mo'
          // callback: function () { this.month() + 1 }
          function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;
            if (typeof callback === 'string') {
              func = function func() {
                return this[callback]();
              };
            }
            if (token) {
              formatTokenFunctions[token] = func;
            }
            if (padded) {
              formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
              };
            }
            if (ordinal) {
              formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
              };
            }
          }

          function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
              return input.replace(/^\[|\]$/g, '');
            }
            return input.replace(/\\/g, '');
          }

          function makeFormatFunction(format) {
            var array = format.match(formattingTokens),
                i,
                length;

            for (i = 0, length = array.length; i < length; i++) {
              if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
              } else {
                array[i] = removeFormattingTokens(array[i]);
              }
            }

            return function (mom) {
              var output = '',
                  i;
              for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
              }
              return output;
            };
          }

          // format date using native date object
          function formatMoment(m, format) {
            if (!m.isValid()) {
              return m.localeData().invalidDate();
            }

            format = expandFormat(format, m.localeData());
            formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

            return formatFunctions[format](m);
          }

          function expandFormat(format, locale) {
            var i = 5;

            function replaceLongDateFormatTokens(input) {
              return locale.longDateFormat(input) || input;
            }

            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
              format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
              localFormattingTokens.lastIndex = 0;
              i -= 1;
            }

            return format;
          }

          var match1 = /\d/; //       0 - 9
          var match2 = /\d\d/; //      00 - 99
          var match3 = /\d{3}/; //     000 - 999
          var match4 = /\d{4}/; //    0000 - 9999
          var match6 = /[+-]?\d{6}/; // -999999 - 999999
          var match1to2 = /\d\d?/; //       0 - 99
          var match3to4 = /\d\d\d\d?/; //     999 - 9999
          var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999
          var match1to3 = /\d{1,3}/; //       0 - 999
          var match1to4 = /\d{1,4}/; //       0 - 9999
          var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

          var matchUnsigned = /\d+/; //       0 - inf
          var matchSigned = /[+-]?\d+/; //    -inf - inf

          var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
          var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

          var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

          // any word (or two) characters or numbers including two/three word month in arabic.
          // includes scottish gaelic two word and hyphenated months
          var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

          var regexes = {};

          function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
              return isStrict && strictRegex ? strictRegex : regex;
            };
          }

          function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
              return new RegExp(unescapeFormat(token));
            }

            return regexes[token](config._strict, config._locale);
          }

          // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
          function unescapeFormat(s) {
            return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
              return p1 || p2 || p3 || p4;
            }));
          }

          function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
          }

          var tokens = {};

          function addParseToken(token, callback) {
            var i,
                func = callback;
            if (typeof token === 'string') {
              token = [token];
            }
            if (isNumber(callback)) {
              func = function func(input, array) {
                array[callback] = toInt(input);
              };
            }
            for (i = 0; i < token.length; i++) {
              tokens[token[i]] = func;
            }
          }

          function addWeekParseToken(token, callback) {
            addParseToken(token, function (input, array, config, token) {
              config._w = config._w || {};
              callback(input, config._w, config, token);
            });
          }

          function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
              tokens[token](input, config._a, config, token);
            }
          }

          var YEAR = 0;
          var MONTH = 1;
          var DATE = 2;
          var HOUR = 3;
          var MINUTE = 4;
          var SECOND = 5;
          var MILLISECOND = 6;
          var WEEK = 7;
          var WEEKDAY = 8;

          // FORMATTING

          addFormatToken('Y', 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? '' + y : '+' + y;
          });

          addFormatToken(0, ['YY', 2], 0, function () {
            return this.year() % 100;
          });

          addFormatToken(0, ['YYYY', 4], 0, 'year');
          addFormatToken(0, ['YYYYY', 5], 0, 'year');
          addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

          // ALIASES

          addUnitAlias('year', 'y');

          // PRIORITIES

          addUnitPriority('year', 1);

          // PARSING

          addRegexToken('Y', matchSigned);
          addRegexToken('YY', match1to2, match2);
          addRegexToken('YYYY', match1to4, match4);
          addRegexToken('YYYYY', match1to6, match6);
          addRegexToken('YYYYYY', match1to6, match6);

          addParseToken(['YYYYY', 'YYYYYY'], YEAR);
          addParseToken('YYYY', function (input, array) {
            array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
          });
          addParseToken('YY', function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
          });
          addParseToken('Y', function (input, array) {
            array[YEAR] = parseInt(input, 10);
          });

          // HELPERS

          function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
          }

          function isLeapYear(year) {
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
          }

          // HOOKS

          hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
          };

          // MOMENTS

          var getSetYear = makeGetSet('FullYear', true);

          function getIsLeapYear() {
            return isLeapYear(this.year());
          }

          function makeGetSet(unit, keepTime) {
            return function (value) {
              if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
              } else {
                return get(this, unit);
              }
            };
          }

          function get(mom, unit) {
            return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
          }

          function set$1(mom, unit, value) {
            if (mom.isValid() && !isNaN(value)) {
              if (unit === 'FullYear' && isLeapYear(mom.year())) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
              } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
              }
            }
          }

          // MOMENTS

          function stringGet(units) {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
              return this[units]();
            }
            return this;
          }

          function stringSet(units, value) {
            if ((typeof units === 'undefined' ? 'undefined' : (0, _typeof6['default'])(units)) === 'object') {
              units = normalizeObjectUnits(units);
              var prioritized = getPrioritizedUnits(units);
              for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
              }
            } else {
              units = normalizeUnits(units);
              if (isFunction(this[units])) {
                return this[units](value);
              }
            }
            return this;
          }

          function mod(n, x) {
            return (n % x + x) % x;
          }

          var indexOf;

          if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
          } else {
            indexOf = function indexOf(o) {
              // I know
              var i;
              for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                  return i;
                }
              }
              return -1;
            };
          }

          function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
              return NaN;
            }
            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
          }

          // FORMATTING

          addFormatToken('M', ['MM', 2], 'Mo', function () {
            return this.month() + 1;
          });

          addFormatToken('MMM', 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
          });

          addFormatToken('MMMM', 0, 0, function (format) {
            return this.localeData().months(this, format);
          });

          // ALIASES

          addUnitAlias('month', 'M');

          // PRIORITY

          addUnitPriority('month', 8);

          // PARSING

          addRegexToken('M', match1to2);
          addRegexToken('MM', match1to2, match2);
          addRegexToken('MMM', function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
          });
          addRegexToken('MMMM', function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
          });

          addParseToken(['M', 'MM'], function (input, array) {
            array[MONTH] = toInt(input) - 1;
          });

          addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (month != null) {
              array[MONTH] = month;
            } else {
              getParsingFlags(config).invalidMonth = input;
            }
          });

          // LOCALES

          var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
          var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
          function localeMonths(m, format) {
            if (!m) {
              return isArray(this._months) ? this._months : this._months['standalone'];
            }
            return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
          }

          var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
          function localeMonthsShort(m, format) {
            if (!m) {
              return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
            }
            return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
          }

          function handleStrictParse(monthName, format, strict) {
            var i,
                ii,
                mom,
                llc = monthName.toLocaleLowerCase();
            if (!this._monthsParse) {
              // this is not used
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
              for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
              }
            }

            if (strict) {
              if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
              }
            } else {
              if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
              }
            }
          }

          function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;

            if (this._monthsParseExact) {
              return handleStrictParse.call(this, monthName, format, strict);
            }

            if (!this._monthsParse) {
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
            }

            // TODO: add sorting
            // Sorting makes sure if one month (or abbr) is a prefix of another
            // see sorting in computeMonthsParse
            for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
              }
              if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
              }
              // test the regex
              if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
              } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
              } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
              }
            }
          }

          // MOMENTS

          function setMonth(mom, value) {
            var dayOfMonth;

            if (!mom.isValid()) {
              // No op
              return mom;
            }

            if (typeof value === 'string') {
              if (/^\d+$/.test(value)) {
                value = toInt(value);
              } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                  return mom;
                }
              }
            }

            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
            return mom;
          }

          function getSetMonth(value) {
            if (value != null) {
              setMonth(this, value);
              hooks.updateOffset(this, true);
              return this;
            } else {
              return get(this, 'Month');
            }
          }

          function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
          }

          var defaultMonthsShortRegex = matchWord;
          function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
              }
              if (isStrict) {
                return this._monthsShortStrictRegex;
              } else {
                return this._monthsShortRegex;
              }
            } else {
              if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
              }
              return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
            }
          }

          var defaultMonthsRegex = matchWord;
          function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
              }
              if (isStrict) {
                return this._monthsStrictRegex;
              } else {
                return this._monthsRegex;
              }
            } else {
              if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
              }
              return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
            }
          }

          function computeMonthsParse() {
            function cmpLenRev(a, b) {
              return b.length - a.length;
            }

            var shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom;
            for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              shortPieces.push(this.monthsShort(mom, ''));
              longPieces.push(this.months(mom, ''));
              mixedPieces.push(this.months(mom, ''));
              mixedPieces.push(this.monthsShort(mom, ''));
            }
            // Sorting makes sure if one month (or abbr) is a prefix of another it
            // will match the longer piece.
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            for (i = 0; i < 12; i++) {
              shortPieces[i] = regexEscape(shortPieces[i]);
              longPieces[i] = regexEscape(longPieces[i]);
            }
            for (i = 0; i < 24; i++) {
              mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
          }

          function createDate(y, m, d, h, M, s, ms) {
            // can't just apply() to create a date:
            // https://stackoverflow.com/q/181348
            var date = new Date(y, m, d, h, M, s, ms);

            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
              date.setFullYear(y);
            }
            return date;
          }

          function createUTCDate(y) {
            var date = new Date(Date.UTC.apply(null, arguments));

            // the Date.UTC function remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
              date.setUTCFullYear(y);
            }
            return date;
          }

          // start-of-first-week - start-of-year
          function firstWeekOffset(year, dow, doy) {
            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,

            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

            return -fwdlw + fwd - 1;
          }

          // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
          function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
                weekOffset = firstWeekOffset(year, dow, doy),
                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                resYear,
                resDayOfYear;

            if (dayOfYear <= 0) {
              resYear = year - 1;
              resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
              resYear = year + 1;
              resDayOfYear = dayOfYear - daysInYear(year);
            } else {
              resYear = year;
              resDayOfYear = dayOfYear;
            }

            return {
              year: resYear,
              dayOfYear: resDayOfYear
            };
          }

          function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                resWeek,
                resYear;

            if (week < 1) {
              resYear = mom.year() - 1;
              resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
              resWeek = week - weeksInYear(mom.year(), dow, doy);
              resYear = mom.year() + 1;
            } else {
              resYear = mom.year();
              resWeek = week;
            }

            return {
              week: resWeek,
              year: resYear
            };
          }

          function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
          }

          // FORMATTING

          addFormatToken('w', ['ww', 2], 'wo', 'week');
          addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

          // ALIASES

          addUnitAlias('week', 'w');
          addUnitAlias('isoWeek', 'W');

          // PRIORITIES

          addUnitPriority('week', 5);
          addUnitPriority('isoWeek', 5);

          // PARSING

          addRegexToken('w', match1to2);
          addRegexToken('ww', match1to2, match2);
          addRegexToken('W', match1to2);
          addRegexToken('WW', match1to2, match2);

          addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
          });

          // HELPERS

          // LOCALES

          function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
          }

          var defaultLocaleWeek = {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
          };

          function localeFirstDayOfWeek() {
            return this._week.dow;
          }

          function localeFirstDayOfYear() {
            return this._week.doy;
          }

          // MOMENTS

          function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
          }

          function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
          }

          // FORMATTING

          addFormatToken('d', 0, 'do', 'day');

          addFormatToken('dd', 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
          });

          addFormatToken('ddd', 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
          });

          addFormatToken('dddd', 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
          });

          addFormatToken('e', 0, 0, 'weekday');
          addFormatToken('E', 0, 0, 'isoWeekday');

          // ALIASES

          addUnitAlias('day', 'd');
          addUnitAlias('weekday', 'e');
          addUnitAlias('isoWeekday', 'E');

          // PRIORITY
          addUnitPriority('day', 11);
          addUnitPriority('weekday', 11);
          addUnitPriority('isoWeekday', 11);

          // PARSING

          addRegexToken('d', match1to2);
          addRegexToken('e', match1to2);
          addRegexToken('E', match1to2);
          addRegexToken('dd', function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
          });
          addRegexToken('ddd', function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
          });
          addRegexToken('dddd', function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
          });

          addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict);
            // if we didn't get a weekday name, mark the date as invalid
            if (weekday != null) {
              week.d = weekday;
            } else {
              getParsingFlags(config).invalidWeekday = input;
            }
          });

          addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
            week[token] = toInt(input);
          });

          // HELPERS

          function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
              return input;
            }

            if (!isNaN(input)) {
              return parseInt(input, 10);
            }

            input = locale.weekdaysParse(input);
            if (typeof input === 'number') {
              return input;
            }

            return null;
          }

          function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
              return locale.weekdaysParse(input) % 7 || 7;
            }
            return isNaN(input) ? null : input;
          }

          // LOCALES

          var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
          function localeWeekdays(m, format) {
            if (!m) {
              return isArray(this._weekdays) ? this._weekdays : this._weekdays['standalone'];
            }
            return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
          }

          var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
          function localeWeekdaysShort(m) {
            return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
          }

          var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
          function localeWeekdaysMin(m) {
            return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
          }

          function handleStrictParse$1(weekdayName, format, strict) {
            var i,
                ii,
                mom,
                llc = weekdayName.toLocaleLowerCase();
            if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._minWeekdaysParse = [];

              for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
              }
            }

            if (strict) {
              if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              }
            } else {
              if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              }
            }
          }

          function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;

            if (this._weekdaysParseExact) {
              return handleStrictParse$1.call(this, weekdayName, format, strict);
            }

            if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._minWeekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._fullWeekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already

              mom = createUTC([2000, 1]).day(i);
              if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
              }
              if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
              }
              // test the regex
              if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
              } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
              } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
              } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
              }
            }
          }

          // MOMENTS

          function getSetDayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
              input = parseWeekday(input, this.localeData());
              return this.add(input - day, 'd');
            } else {
              return day;
            }
          }

          function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
          }

          function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }

            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.

            if (input != null) {
              var weekday = parseIsoWeekday(input, this.localeData());
              return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
              return this.day() || 7;
            }
          }

          var defaultWeekdaysRegex = matchWord;
          function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysStrictRegex;
              } else {
                return this._weekdaysRegex;
              }
            } else {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
              }
              return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
            }
          }

          var defaultWeekdaysShortRegex = matchWord;
          function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysShortStrictRegex;
              } else {
                return this._weekdaysShortRegex;
              }
            } else {
              if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
              }
              return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
            }
          }

          var defaultWeekdaysMinRegex = matchWord;
          function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysMinStrictRegex;
              } else {
                return this._weekdaysMinRegex;
              }
            } else {
              if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
              }
              return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
            }
          }

          function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
              return b.length - a.length;
            }

            var minPieces = [],
                shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom,
                minp,
                shortp,
                longp;
            for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, 1]).day(i);
              minp = this.weekdaysMin(mom, '');
              shortp = this.weekdaysShort(mom, '');
              longp = this.weekdays(mom, '');
              minPieces.push(minp);
              shortPieces.push(shortp);
              longPieces.push(longp);
              mixedPieces.push(minp);
              mixedPieces.push(shortp);
              mixedPieces.push(longp);
            }
            // Sorting makes sure if one weekday (or abbr) is a prefix of another it
            // will match the longer piece.
            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            for (i = 0; i < 7; i++) {
              shortPieces[i] = regexEscape(shortPieces[i]);
              longPieces[i] = regexEscape(longPieces[i]);
              mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;

            this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
            this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
          }

          // FORMATTING

          function hFormat() {
            return this.hours() % 12 || 12;
          }

          function kFormat() {
            return this.hours() || 24;
          }

          addFormatToken('H', ['HH', 2], 0, 'hour');
          addFormatToken('h', ['hh', 2], 0, hFormat);
          addFormatToken('k', ['kk', 2], 0, kFormat);

          addFormatToken('hmm', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
          });

          addFormatToken('hmmss', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
          });

          addFormatToken('Hmm', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
          });

          addFormatToken('Hmmss', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
          });

          function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function () {
              return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
            });
          }

          meridiem('a', true);
          meridiem('A', false);

          // ALIASES

          addUnitAlias('hour', 'h');

          // PRIORITY
          addUnitPriority('hour', 13);

          // PARSING

          function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
          }

          addRegexToken('a', matchMeridiem);
          addRegexToken('A', matchMeridiem);
          addRegexToken('H', match1to2);
          addRegexToken('h', match1to2);
          addRegexToken('k', match1to2);
          addRegexToken('HH', match1to2, match2);
          addRegexToken('hh', match1to2, match2);
          addRegexToken('kk', match1to2, match2);

          addRegexToken('hmm', match3to4);
          addRegexToken('hmmss', match5to6);
          addRegexToken('Hmm', match3to4);
          addRegexToken('Hmmss', match5to6);

          addParseToken(['H', 'HH'], HOUR);
          addParseToken(['k', 'kk'], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
          });
          addParseToken(['a', 'A'], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
          });
          addParseToken(['h', 'hh'], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
          });
          addParseToken('hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
          });
          addParseToken('hmmss', function (input, array, config) {
            var pos1 = input.length - 4;
            var pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
          });
          addParseToken('Hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
          });
          addParseToken('Hmmss', function (input, array, config) {
            var pos1 = input.length - 4;
            var pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
          });

          // LOCALES

          function localeIsPM(input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return (input + '').toLowerCase().charAt(0) === 'p';
          }

          var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
          function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
              return isLower ? 'pm' : 'PM';
            } else {
              return isLower ? 'am' : 'AM';
            }
          }

          // MOMENTS

          // Setting the hour should keep the time, because the user explicitly
          // specified which hour he wants. So trying to maintain the same hour (in
          // a new timezone) makes sense. Adding/subtracting hours does not follow
          // this rule.
          var getSetHour = makeGetSet('Hours', true);

          // months
          // week
          // weekdays
          // meridiem
          var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,

            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,

            week: defaultLocaleWeek,

            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,

            meridiemParse: defaultLocaleMeridiemParse
          };

          // internal storage for locale config files
          var locales = {};
          var localeFamilies = {};
          var globalLocale;

          function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
          }

          // pick the locale from the array
          // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
          // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
          function chooseLocale(names) {
            var i = 0,
                j,
                next,
                locale,
                split;

            while (i < names.length) {
              split = normalizeLocale(names[i]).split('-');
              j = split.length;
              next = normalizeLocale(names[i + 1]);
              next = next ? next.split('-') : null;
              while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                  return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                  //the next array item is better than a shallower substring of this one
                  break;
                }
                j--;
              }
              i++;
            }
            return null;
          }

          function loadLocale(name) {
            var oldLocale = null;
            // TODO: Find a better way to register and load all the locales in Node
            if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
              try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                !function webpackMissingModule() {
                  var e = new Error("Cannot find module \"./locale\"");e.code = 'MODULE_NOT_FOUND';throw e;
                }();
                getSetGlobalLocale(oldLocale);
              } catch (e) {}
            }
            return locales[name];
          }

          // This function will load locale and then set the global locale.  If
          // no arguments are passed in, it will simply return the current global
          // locale key.
          function getSetGlobalLocale(key, values) {
            var data;
            if (key) {
              if (isUndefined(values)) {
                data = getLocale(key);
              } else {
                data = defineLocale(key, values);
              }

              if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
              }
            }

            return globalLocale._abbr;
          }

          function defineLocale(name, config) {
            if (config !== null) {
              var parentConfig = baseConfig;
              config.abbr = name;
              if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
              } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                  parentConfig = locales[config.parentLocale]._config;
                } else {
                  if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                  }
                  localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                  });
                  return null;
                }
              }
              locales[name] = new Locale(mergeConfigs(parentConfig, config));

              if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                  defineLocale(x.name, x.config);
                });
              }

              // backwards compat for now: also set the locale
              // make sure we set the locale AFTER all child locales have been
              // created, so we won't end up with the child locale set.
              getSetGlobalLocale(name);

              return locales[name];
            } else {
              // useful for testing
              delete locales[name];
              return null;
            }
          }

          function updateLocale(name, config) {
            if (config != null) {
              var locale,
                  parentConfig = baseConfig;
              // MERGE
              if (locales[name] != null) {
                parentConfig = locales[name]._config;
              }
              config = mergeConfigs(parentConfig, config);
              locale = new Locale(config);
              locale.parentLocale = locales[name];
              locales[name] = locale;

              // backwards compat for now: also set the locale
              getSetGlobalLocale(name);
            } else {
              // pass null for config to unupdate, useful for tests
              if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                  locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                  delete locales[name];
                }
              }
            }
            return locales[name];
          }

          // returns locale data
          function getLocale(key) {
            var locale;

            if (key && key._locale && key._locale._abbr) {
              key = key._locale._abbr;
            }

            if (!key) {
              return globalLocale;
            }

            if (!isArray(key)) {
              //short-circuit everything else
              locale = loadLocale(key);
              if (locale) {
                return locale;
              }
              key = [key];
            }

            return chooseLocale(key);
          }

          function listLocales() {
            return keys(locales);
          }

          function checkOverflow(m) {
            var overflow;
            var a = m._a;

            if (a && getParsingFlags(m).overflow === -2) {
              overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

              if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
              }
              if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
              }
              if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
              }

              getParsingFlags(m).overflow = overflow;
            }

            return m;
          }

          // Pick the first defined of two or three arguments.
          function defaults(a, b, c) {
            if (a != null) {
              return a;
            }
            if (b != null) {
              return b;
            }
            return c;
          }

          function currentDateArray(config) {
            // hooks is actually the exported moment object
            var nowValue = new Date(hooks.now());
            if (config._useUTC) {
              return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
            }
            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
          }

          // convert an array to a date.
          // the array should mirror the parameters below
          // note: all values past the year are optional and will default to the lowest possible value.
          // [year, month, day , hour, minute, second, millisecond]
          function configFromArray(config) {
            var i,
                date,
                input = [],
                currentDate,
                yearToUse;

            if (config._d) {
              return;
            }

            currentDate = currentDateArray(config);

            //compute day of the year from weeks and weekdays
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
              dayOfYearFromWeekInfo(config);
            }

            //if the day of the year is set, figure out what it is
            if (config._dayOfYear != null) {
              yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

              if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
              }

              date = createUTCDate(yearToUse, 0, config._dayOfYear);
              config._a[MONTH] = date.getUTCMonth();
              config._a[DATE] = date.getUTCDate();
            }

            // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
              config._a[i] = input[i] = currentDate[i];
            }

            // Zero out whatever was not defaulted, including time
            for (; i < 7; i++) {
              config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
            }

            // Check for 24:00:00.000
            if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
              config._nextDay = true;
              config._a[HOUR] = 0;
            }

            config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
            // Apply timezone offset from input. The actual utcOffset can be changed
            // with parseZone.
            if (config._tzm != null) {
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }

            if (config._nextDay) {
              config._a[HOUR] = 24;
            }

            // check for mismatching day of week
            if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== config._d.getDay()) {
              getParsingFlags(config).weekdayMismatch = true;
            }
          }

          function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
              dow = 1;
              doy = 4;

              // TODO: We need to take the current isoWeekYear, but that depends on
              // how we interpret now (local, utc, fixed offset). So create
              // a now version of current config (take local/utc/offset flags, and
              // create now).
              weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
              week = defaults(w.W, 1);
              weekday = defaults(w.E, 1);
              if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
              }
            } else {
              dow = config._locale._week.dow;
              doy = config._locale._week.doy;

              var curWeek = weekOfYear(createLocal(), dow, doy);

              weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

              // Default to current week.
              week = defaults(w.w, curWeek.week);

              if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                  weekdayOverflow = true;
                }
              } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                  weekdayOverflow = true;
                }
              } else {
                // default to begining of week
                weekday = dow;
              }
            }
            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
              getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
              getParsingFlags(config)._overflowWeekday = true;
            } else {
              temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
              config._a[YEAR] = temp.year;
              config._dayOfYear = temp.dayOfYear;
            }
          }

          // iso 8601 regex
          // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
          var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
          var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

          var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

          var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/],
          // YYYYMM is NOT allowed by the standard
          ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]];

          // iso time formats and regexes
          var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];

          var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

          // date from iso format
          function configFromISO(config) {
            var i,
                l,
                string = config._i,
                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                allowTime,
                dateFormat,
                timeFormat,
                tzFormat;

            if (match) {
              getParsingFlags(config).iso = true;

              for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                  dateFormat = isoDates[i][0];
                  allowTime = isoDates[i][2] !== false;
                  break;
                }
              }
              if (dateFormat == null) {
                config._isValid = false;
                return;
              }
              if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                  if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                  }
                }
                if (timeFormat == null) {
                  config._isValid = false;
                  return;
                }
              }
              if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
              }
              if (match[4]) {
                if (tzRegex.exec(match[4])) {
                  tzFormat = 'Z';
                } else {
                  config._isValid = false;
                  return;
                }
              }
              config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
              configFromStringAndFormat(config);
            } else {
              config._isValid = false;
            }
          }

          // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
          var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

          function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
            var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

            if (secondStr) {
              result.push(parseInt(secondStr, 10));
            }

            return result;
          }

          function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);
            if (year <= 49) {
              return 2000 + year;
            } else if (year <= 999) {
              return 1900 + year;
            }
            return year;
          }

          function preprocessRFC2822(s) {
            // Remove comments and folding whitespace and replace multiple-spaces with a single space
            return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').trim();
          }

          function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
              // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
              var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                  weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
              if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
              }
            }
            return true;
          }

          var obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60
          };

          function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
              return obsOffsets[obsOffset];
            } else if (militaryOffset) {
              // the only allowed military tz is Z
              return 0;
            } else {
              var hm = parseInt(numOffset, 10);
              var m = hm % 100,
                  h = (hm - m) / 100;
              return h * 60 + m;
            }
          }

          // date and time from ref 2822 format
          function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i));
            if (match) {
              var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
              if (!checkWeekday(match[1], parsedArray, config)) {
                return;
              }

              config._a = parsedArray;
              config._tzm = calculateOffset(match[8], match[9], match[10]);

              config._d = createUTCDate.apply(null, config._a);
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

              getParsingFlags(config).rfc2822 = true;
            } else {
              config._isValid = false;
            }
          }

          // date from iso format or fallback
          function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);

            if (matched !== null) {
              config._d = new Date(+matched[1]);
              return;
            }

            configFromISO(config);
            if (config._isValid === false) {
              delete config._isValid;
            } else {
              return;
            }

            configFromRFC2822(config);
            if (config._isValid === false) {
              delete config._isValid;
            } else {
              return;
            }

            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
          }

          hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
          });

          // constant that refers to the ISO standard
          hooks.ISO_8601 = function () {};

          // constant that refers to the RFC 2822 form
          hooks.RFC_2822 = function () {};

          // date from string and format string
          function configFromStringAndFormat(config) {
            // TODO: Move this to another part of the creation flow to prevent circular deps
            if (config._f === hooks.ISO_8601) {
              configFromISO(config);
              return;
            }
            if (config._f === hooks.RFC_2822) {
              configFromRFC2822(config);
              return;
            }
            config._a = [];
            getParsingFlags(config).empty = true;

            // This array is used to make a Date, either with `new Date` or `Date.UTC`
            var string = '' + config._i,
                i,
                parsedInput,
                tokens,
                token,
                skipped,
                stringLength = string.length,
                totalParsedInputLength = 0;

            tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

            for (i = 0; i < tokens.length; i++) {
              token = tokens[i];
              parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
              // console.log('token', token, 'parsedInput', parsedInput,
              //         'regex', getParseRegexForToken(token, config));
              if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                  getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
              }
              // don't parse if it's not a known token
              if (formatTokenFunctions[token]) {
                if (parsedInput) {
                  getParsingFlags(config).empty = false;
                } else {
                  getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
              } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
              }
            }

            // add remaining unparsed input length to the string
            getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
            if (string.length > 0) {
              getParsingFlags(config).unusedInput.push(string);
            }

            // clear _12h flag if hour is <= 12
            if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
              getParsingFlags(config).bigHour = undefined;
            }

            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            // handle meridiem
            config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

            configFromArray(config);
            checkOverflow(config);
          }

          function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;

            if (meridiem == null) {
              // nothing to do
              return hour;
            }
            if (locale.meridiemHour != null) {
              return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
              // Fallback
              isPm = locale.isPM(meridiem);
              if (isPm && hour < 12) {
                hour += 12;
              }
              if (!isPm && hour === 12) {
                hour = 0;
              }
              return hour;
            } else {
              // this is not supposed to happen
              return hour;
            }
          }

          // date from string and array of format strings
          function configFromStringAndArray(config) {
            var tempConfig, bestMoment, scoreToBeat, i, currentScore;

            if (config._f.length === 0) {
              getParsingFlags(config).invalidFormat = true;
              config._d = new Date(NaN);
              return;
            }

            for (i = 0; i < config._f.length; i++) {
              currentScore = 0;
              tempConfig = copyConfig({}, config);
              if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
              }
              tempConfig._f = config._f[i];
              configFromStringAndFormat(tempConfig);

              if (!isValid(tempConfig)) {
                continue;
              }

              // if there is any input that was not parsed add a penalty for that format
              currentScore += getParsingFlags(tempConfig).charsLeftOver;

              //or tokens
              currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

              getParsingFlags(tempConfig).score = currentScore;

              if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
              }
            }

            extend(config, bestMoment || tempConfig);
          }

          function configFromObject(config) {
            if (config._d) {
              return;
            }

            var i = normalizeObjectUnits(config._i);
            config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
              return obj && parseInt(obj, 10);
            });

            configFromArray(config);
          }

          function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));
            if (res._nextDay) {
              // Adding is smart enough around DST
              res.add(1, 'd');
              res._nextDay = undefined;
            }

            return res;
          }

          function prepareConfig(config) {
            var input = config._i,
                format = config._f;

            config._locale = config._locale || getLocale(config._l);

            if (input === null || format === undefined && input === '') {
              return createInvalid({ nullInput: true });
            }

            if (typeof input === 'string') {
              config._i = input = config._locale.preparse(input);
            }

            if (isMoment(input)) {
              return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
              config._d = input;
            } else if (isArray(format)) {
              configFromStringAndArray(config);
            } else if (format) {
              configFromStringAndFormat(config);
            } else {
              configFromInput(config);
            }

            if (!isValid(config)) {
              config._d = null;
            }

            return config;
          }

          function configFromInput(config) {
            var input = config._i;
            if (isUndefined(input)) {
              config._d = new Date(hooks.now());
            } else if (isDate(input)) {
              config._d = new Date(input.valueOf());
            } else if (typeof input === 'string') {
              configFromString(config);
            } else if (isArray(input)) {
              config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
              });
              configFromArray(config);
            } else if (isObject(input)) {
              configFromObject(config);
            } else if (isNumber(input)) {
              // from milliseconds
              config._d = new Date(input);
            } else {
              hooks.createFromInputFallback(config);
            }
          }

          function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};

            if (locale === true || locale === false) {
              strict = locale;
              locale = undefined;
            }

            if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
              input = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;

            return createFromConfig(c);
          }

          function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
          }

          var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other < this ? this : other;
            } else {
              return createInvalid();
            }
          });

          var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other > this ? this : other;
            } else {
              return createInvalid();
            }
          });

          // Pick a moment m from moments so that m[fn](other) is true for all
          // other. This relies on the function fn to be transitive.
          //
          // moments should either be an array of moment objects or an array, whose
          // first element is an array of moment objects.
          function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
              moments = moments[0];
            }
            if (!moments.length) {
              return createLocal();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
              if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
              }
            }
            return res;
          }

          // TODO: Use [].sort instead?
          function min() {
            var args = [].slice.call(arguments, 0);

            return pickBy('isBefore', args);
          }

          function max() {
            var args = [].slice.call(arguments, 0);

            return pickBy('isAfter', args);
          }

          var now = function now() {
            return Date.now ? Date.now() : +new Date();
          };

          var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

          function isDurationValid(m) {
            for (var key in m) {
              if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
              }
            }

            var unitHasDecimal = false;
            for (var i = 0; i < ordering.length; ++i) {
              if (m[ordering[i]]) {
                if (unitHasDecimal) {
                  return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                  unitHasDecimal = true;
                }
              }
            }

            return true;
          }

          function isValid$1() {
            return this._isValid;
          }

          function createInvalid$1() {
            return createDuration(NaN);
          }

          function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration),
                years = normalizedInput.year || 0,
                quarters = normalizedInput.quarter || 0,
                months = normalizedInput.month || 0,
                weeks = normalizedInput.week || 0,
                days = normalizedInput.day || 0,
                hours = normalizedInput.hour || 0,
                minutes = normalizedInput.minute || 0,
                seconds = normalizedInput.second || 0,
                milliseconds = normalizedInput.millisecond || 0;

            this._isValid = isDurationValid(normalizedInput);

            // representation for dateAddRemove
            this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = +days + weeks * 7;
            // It is impossible to translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = +months + quarters * 3 + years * 12;

            this._data = {};

            this._locale = getLocale();

            this._bubble();
          }

          function isDuration(obj) {
            return obj instanceof Duration;
          }

          function absRound(number) {
            if (number < 0) {
              return Math.round(-1 * number) * -1;
            } else {
              return Math.round(number);
            }
          }

          // FORMATTING

          function offset(token, separator) {
            addFormatToken(token, 0, 0, function () {
              var offset = this.utcOffset();
              var sign = '+';
              if (offset < 0) {
                offset = -offset;
                sign = '-';
              }
              return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
            });
          }

          offset('Z', ':');
          offset('ZZ', '');

          // PARSING

          addRegexToken('Z', matchShortOffset);
          addRegexToken('ZZ', matchShortOffset);
          addParseToken(['Z', 'ZZ'], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
          });

          // HELPERS

          // timezone chunker
          // '+10:00' > ['10',  '00']
          // '-1530'  > ['-15', '30']
          var chunkOffset = /([\+\-]|\d\d)/gi;

          function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher);

            if (matches === null) {
              return null;
            }

            var chunk = matches[matches.length - 1] || [];
            var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            var minutes = +(parts[1] * 60) + toInt(parts[2]);

            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
          }

          // Return a moment from input, that is local/utc/zone equivalent to model.
          function cloneWithOffset(input, model) {
            var res, diff;
            if (model._isUTC) {
              res = model.clone();
              diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
              // Use low-level api, because this fn is low-level api.
              res._d.setTime(res._d.valueOf() + diff);
              hooks.updateOffset(res, false);
              return res;
            } else {
              return createLocal(input).local();
            }
          }

          function getDateOffset(m) {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
          }

          // HOOKS

          // This function will be called whenever a moment is mutated.
          // It is intended to keep the offset in sync with the timezone.
          hooks.updateOffset = function () {};

          // MOMENTS

          // keepLocalTime = true means only change the timezone, without
          // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
          // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
          // +0200, so we adjust the time as needed, to be valid.
          //
          // Keeping the time actually adds/subtracts (one hour)
          // from the actual represented time. That is why we call updateOffset
          // a second time. In case it wants us to change the offset again
          // _changeInProgress == true case, then we have to adjust, because
          // there is no such time in the given timezone.
          function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
                localAdjust;
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            if (input != null) {
              if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                  return this;
                }
              } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
              }
              if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
              }
              this._offset = input;
              this._isUTC = true;
              if (localAdjust != null) {
                this.add(localAdjust, 'm');
              }
              if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                  addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                  this._changeInProgress = true;
                  hooks.updateOffset(this, true);
                  this._changeInProgress = null;
                }
              }
              return this;
            } else {
              return this._isUTC ? offset : getDateOffset(this);
            }
          }

          function getSetZone(input, keepLocalTime) {
            if (input != null) {
              if (typeof input !== 'string') {
                input = -input;
              }

              this.utcOffset(input, keepLocalTime);

              return this;
            } else {
              return -this.utcOffset();
            }
          }

          function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
          }

          function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
              this.utcOffset(0, keepLocalTime);
              this._isUTC = false;

              if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
              }
            }
            return this;
          }

          function setOffsetToParsedOffset() {
            if (this._tzm != null) {
              this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === 'string') {
              var tZone = offsetFromString(matchOffset, this._i);
              if (tZone != null) {
                this.utcOffset(tZone);
              } else {
                this.utcOffset(0, true);
              }
            }
            return this;
          }

          function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
              return false;
            }
            input = input ? createLocal(input).utcOffset() : 0;

            return (this.utcOffset() - input) % 60 === 0;
          }

          function isDaylightSavingTime() {
            return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
          }

          function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
              return this._isDSTShifted;
            }

            var c = {};

            copyConfig(c, this);
            c = prepareConfig(c);

            if (c._a) {
              var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
              this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            } else {
              this._isDSTShifted = false;
            }

            return this._isDSTShifted;
          }

          function isLocal() {
            return this.isValid() ? !this._isUTC : false;
          }

          function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
          }

          function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
          }

          // ASP.NET json date format regex
          var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

          // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
          // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
          // and further modified to allow for strings containing both week and day
          var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

          function createDuration(input, key) {
            var duration = input,

            // matching against regexp is expensive, do it on demand
            match = null,
                sign,
                ret,
                diffRes;

            if (isDuration(input)) {
              duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
              };
            } else if (isNumber(input)) {
              duration = {};
              if (key) {
                duration[key] = input;
              } else {
                duration.milliseconds = input;
              }
            } else if (!!(match = aspNetRegex.exec(input))) {
              sign = match[1] === '-' ? -1 : 1;
              duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
              };
            } else if (!!(match = isoRegex.exec(input))) {
              sign = match[1] === '-' ? -1 : match[1] === '+' ? 1 : 1;
              duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
              };
            } else if (duration == null) {
              // checks for null or undefined
              duration = {};
            } else if ((typeof duration === 'undefined' ? 'undefined' : (0, _typeof6['default'])(duration)) === 'object' && ('from' in duration || 'to' in duration)) {
              diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

              duration = {};
              duration.ms = diffRes.milliseconds;
              duration.M = diffRes.months;
            }

            ret = new Duration(duration);

            if (isDuration(input) && hasOwnProp(input, '_locale')) {
              ret._locale = input._locale;
            }

            return ret;
          }

          createDuration.fn = Duration.prototype;
          createDuration.invalid = createInvalid$1;

          function parseIso(inp, sign) {
            // We'd normally use ~~inp for this, but unfortunately it also
            // converts floats to ints.
            // inp may be undefined, so careful calling replace on it.
            var res = inp && parseFloat(inp.replace(',', '.'));
            // apply sign while we're at it
            return (isNaN(res) ? 0 : res) * sign;
          }

          function positiveMomentsDifference(base, other) {
            var res = { milliseconds: 0, months: 0 };

            res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
            if (base.clone().add(res.months, 'M').isAfter(other)) {
              --res.months;
            }

            res.milliseconds = +other - +base.clone().add(res.months, 'M');

            return res;
          }

          function momentsDifference(base, other) {
            var res;
            if (!(base.isValid() && other.isValid())) {
              return { milliseconds: 0, months: 0 };
            }

            other = cloneWithOffset(other, base);
            if (base.isBefore(other)) {
              res = positiveMomentsDifference(base, other);
            } else {
              res = positiveMomentsDifference(other, base);
              res.milliseconds = -res.milliseconds;
              res.months = -res.months;
            }

            return res;
          }

          // TODO: remove 'name' arg after deprecation is removed
          function createAdder(direction, name) {
            return function (val, period) {
              var dur, tmp;
              //invert the arguments, but complain about it
              if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val;val = period;period = tmp;
              }

              val = typeof val === 'string' ? +val : val;
              dur = createDuration(val, period);
              addSubtract(this, dur, direction);
              return this;
            };
          }

          function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
                days = absRound(duration._days),
                months = absRound(duration._months);

            if (!mom.isValid()) {
              // No op
              return;
            }

            updateOffset = updateOffset == null ? true : updateOffset;

            if (months) {
              setMonth(mom, get(mom, 'Month') + months * isAdding);
            }
            if (days) {
              set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }
            if (milliseconds) {
              mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }
            if (updateOffset) {
              hooks.updateOffset(mom, days || months);
            }
          }

          var add = createAdder(1, 'add');
          var subtract = createAdder(-1, 'subtract');

          function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
          }

          function calendar$1(time, formats) {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're local/utc/offset or not.
            var now = time || createLocal(),
                sod = cloneWithOffset(now, this).startOf('day'),
                format = hooks.calendarFormat(this, sod) || 'sameElse';

            var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

            return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
          }

          function clone() {
            return new Moment(this);
          }

          function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
            if (units === 'millisecond') {
              return this.valueOf() > localInput.valueOf();
            } else {
              return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
          }

          function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
            if (units === 'millisecond') {
              return this.valueOf() < localInput.valueOf();
            } else {
              return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
          }

          function isBetween(from, to, units, inclusivity) {
            inclusivity = inclusivity || '()';
            return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
          }

          function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
                inputMs;
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units || 'millisecond');
            if (units === 'millisecond') {
              return this.valueOf() === localInput.valueOf();
            } else {
              inputMs = localInput.valueOf();
              return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
            }
          }

          function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
          }

          function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
          }

          function diff(input, units, asFloat) {
            var that, zoneDelta, delta, output;

            if (!this.isValid()) {
              return NaN;
            }

            that = cloneWithOffset(input, this);

            if (!that.isValid()) {
              return NaN;
            }

            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

            units = normalizeUnits(units);

            switch (units) {
              case 'year':
                output = monthDiff(this, that) / 12;break;
              case 'month':
                output = monthDiff(this, that);break;
              case 'quarter':
                output = monthDiff(this, that) / 3;break;
              case 'second':
                output = (this - that) / 1e3;break; // 1000
              case 'minute':
                output = (this - that) / 6e4;break; // 1000 * 60
              case 'hour':
                output = (this - that) / 36e5;break; // 1000 * 60 * 60
              case 'day':
                output = (this - that - zoneDelta) / 864e5;break; // 1000 * 60 * 60 * 24, negate dst
              case 'week':
                output = (this - that - zoneDelta) / 6048e5;break; // 1000 * 60 * 60 * 24 * 7, negate dst
              default:
                output = this - that;
            }

            return asFloat ? output : absFloor(output);
          }

          function monthDiff(a, b) {
            // difference in months
            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),

            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
                anchor2,
                adjust;

            if (b - anchor < 0) {
              anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
              // linear across the month
              adjust = (b - anchor) / (anchor - anchor2);
            } else {
              anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
              // linear across the month
              adjust = (b - anchor) / (anchor2 - anchor);
            }

            //check for negative zero, return zero if negative zero
            return -(wholeMonthDiff + adjust) || 0;
          }

          hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
          hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

          function toString() {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
          }

          function toISOString() {
            if (!this.isValid()) {
              return null;
            }
            var m = this.clone().utc();
            if (m.year() < 0 || m.year() > 9999) {
              return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
            if (isFunction(Date.prototype.toISOString)) {
              // native implementation is ~50x faster, use it when we can
              return this.toDate().toISOString();
            }
            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
          }

          /**
           * Return a human readable representation of a moment that can
           * also be evaluated to get a new moment which is the same
           *
           * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
           */
          function inspect() {
            if (!this.isValid()) {
              return 'moment.invalid(/* ' + this._i + ' */)';
            }
            var func = 'moment';
            var zone = '';
            if (!this.isLocal()) {
              func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
              zone = 'Z';
            }
            var prefix = '[' + func + '("]';
            var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
            var datetime = '-MM-DD[T]HH:mm:ss.SSS';
            var suffix = zone + '[")]';

            return this.format(prefix + year + datetime + suffix);
          }

          function format(inputString) {
            if (!inputString) {
              inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
            }
            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
          }

          function from(time, withoutSuffix) {
            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
              return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
            } else {
              return this.localeData().invalidDate();
            }
          }

          function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
          }

          function to(time, withoutSuffix) {
            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
              return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
            } else {
              return this.localeData().invalidDate();
            }
          }

          function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
          }

          // If passed a locale key, it will set the locale for this
          // instance.  Otherwise, it will return the locale configuration
          // variables for this instance.
          function locale(key) {
            var newLocaleData;

            if (key === undefined) {
              return this._locale._abbr;
            } else {
              newLocaleData = getLocale(key);
              if (newLocaleData != null) {
                this._locale = newLocaleData;
              }
              return this;
            }
          }

          var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
            if (key === undefined) {
              return this.localeData();
            } else {
              return this.locale(key);
            }
          });

          function localeData() {
            return this._locale;
          }

          function startOf(units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
              case 'year':
                this.month(0);
              /* falls through */
              case 'quarter':
              case 'month':
                this.date(1);
              /* falls through */
              case 'week':
              case 'isoWeek':
              case 'day':
              case 'date':
                this.hours(0);
              /* falls through */
              case 'hour':
                this.minutes(0);
              /* falls through */
              case 'minute':
                this.seconds(0);
              /* falls through */
              case 'second':
                this.milliseconds(0);
            }

            // weeks are a special case
            if (units === 'week') {
              this.weekday(0);
            }
            if (units === 'isoWeek') {
              this.isoWeekday(1);
            }

            // quarters are also special
            if (units === 'quarter') {
              this.month(Math.floor(this.month() / 3) * 3);
            }

            return this;
          }

          function endOf(units) {
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond') {
              return this;
            }

            // 'date' is an alias for 'day', so it should be considered as such.
            if (units === 'date') {
              units = 'day';
            }

            return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
          }

          function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
          }

          function unix() {
            return Math.floor(this.valueOf() / 1000);
          }

          function toDate() {
            return new Date(this.valueOf());
          }

          function toArray() {
            var m = this;
            return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
          }

          function toObject() {
            var m = this;
            return {
              years: m.year(),
              months: m.month(),
              date: m.date(),
              hours: m.hours(),
              minutes: m.minutes(),
              seconds: m.seconds(),
              milliseconds: m.milliseconds()
            };
          }

          function toJSON() {
            // new Date(NaN).toJSON() === null
            return this.isValid() ? this.toISOString() : null;
          }

          function isValid$2() {
            return isValid(this);
          }

          function parsingFlags() {
            return extend({}, getParsingFlags(this));
          }

          function invalidAt() {
            return getParsingFlags(this).overflow;
          }

          function creationData() {
            return {
              input: this._i,
              format: this._f,
              locale: this._locale,
              isUTC: this._isUTC,
              strict: this._strict
            };
          }

          // FORMATTING

          addFormatToken(0, ['gg', 2], 0, function () {
            return this.weekYear() % 100;
          });

          addFormatToken(0, ['GG', 2], 0, function () {
            return this.isoWeekYear() % 100;
          });

          function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
          }

          addWeekYearFormatToken('gggg', 'weekYear');
          addWeekYearFormatToken('ggggg', 'weekYear');
          addWeekYearFormatToken('GGGG', 'isoWeekYear');
          addWeekYearFormatToken('GGGGG', 'isoWeekYear');

          // ALIASES

          addUnitAlias('weekYear', 'gg');
          addUnitAlias('isoWeekYear', 'GG');

          // PRIORITY

          addUnitPriority('weekYear', 1);
          addUnitPriority('isoWeekYear', 1);

          // PARSING

          addRegexToken('G', matchSigned);
          addRegexToken('g', matchSigned);
          addRegexToken('GG', match1to2, match2);
          addRegexToken('gg', match1to2, match2);
          addRegexToken('GGGG', match1to4, match4);
          addRegexToken('gggg', match1to4, match4);
          addRegexToken('GGGGG', match1to6, match6);
          addRegexToken('ggggg', match1to6, match6);

          addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
          });

          addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
          });

          // MOMENTS

          function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
          }

          function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
          }

          function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
          }

          function getWeeksInYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
          }

          function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;
            if (input == null) {
              return weekOfYear(this, dow, doy).year;
            } else {
              weeksTarget = weeksInYear(input, dow, doy);
              if (week > weeksTarget) {
                week = weeksTarget;
              }
              return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
          }

          function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
          }

          // FORMATTING

          addFormatToken('Q', 0, 'Qo', 'quarter');

          // ALIASES

          addUnitAlias('quarter', 'Q');

          // PRIORITY

          addUnitPriority('quarter', 7);

          // PARSING

          addRegexToken('Q', match1);
          addParseToken('Q', function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
          });

          // MOMENTS

          function getSetQuarter(input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
          }

          // FORMATTING

          addFormatToken('D', ['DD', 2], 'Do', 'date');

          // ALIASES

          addUnitAlias('date', 'D');

          // PRIOROITY
          addUnitPriority('date', 9);

          // PARSING

          addRegexToken('D', match1to2);
          addRegexToken('DD', match1to2, match2);
          addRegexToken('Do', function (isStrict, locale) {
            // TODO: Remove "ordinalParse" fallback in next major release.
            return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
          });

          addParseToken(['D', 'DD'], DATE);
          addParseToken('Do', function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0], 10);
          });

          // MOMENTS

          var getSetDayOfMonth = makeGetSet('Date', true);

          // FORMATTING

          addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

          // ALIASES

          addUnitAlias('dayOfYear', 'DDD');

          // PRIORITY
          addUnitPriority('dayOfYear', 4);

          // PARSING

          addRegexToken('DDD', match1to3);
          addRegexToken('DDDD', match3);
          addParseToken(['DDD', 'DDDD'], function (input, array, config) {
            config._dayOfYear = toInt(input);
          });

          // HELPERS

          // MOMENTS

          function getSetDayOfYear(input) {
            var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
          }

          // FORMATTING

          addFormatToken('m', ['mm', 2], 0, 'minute');

          // ALIASES

          addUnitAlias('minute', 'm');

          // PRIORITY

          addUnitPriority('minute', 14);

          // PARSING

          addRegexToken('m', match1to2);
          addRegexToken('mm', match1to2, match2);
          addParseToken(['m', 'mm'], MINUTE);

          // MOMENTS

          var getSetMinute = makeGetSet('Minutes', false);

          // FORMATTING

          addFormatToken('s', ['ss', 2], 0, 'second');

          // ALIASES

          addUnitAlias('second', 's');

          // PRIORITY

          addUnitPriority('second', 15);

          // PARSING

          addRegexToken('s', match1to2);
          addRegexToken('ss', match1to2, match2);
          addParseToken(['s', 'ss'], SECOND);

          // MOMENTS

          var getSetSecond = makeGetSet('Seconds', false);

          // FORMATTING

          addFormatToken('S', 0, 0, function () {
            return ~~(this.millisecond() / 100);
          });

          addFormatToken(0, ['SS', 2], 0, function () {
            return ~~(this.millisecond() / 10);
          });

          addFormatToken(0, ['SSS', 3], 0, 'millisecond');
          addFormatToken(0, ['SSSS', 4], 0, function () {
            return this.millisecond() * 10;
          });
          addFormatToken(0, ['SSSSS', 5], 0, function () {
            return this.millisecond() * 100;
          });
          addFormatToken(0, ['SSSSSS', 6], 0, function () {
            return this.millisecond() * 1000;
          });
          addFormatToken(0, ['SSSSSSS', 7], 0, function () {
            return this.millisecond() * 10000;
          });
          addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
            return this.millisecond() * 100000;
          });
          addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
            return this.millisecond() * 1000000;
          });

          // ALIASES

          addUnitAlias('millisecond', 'ms');

          // PRIORITY

          addUnitPriority('millisecond', 16);

          // PARSING

          addRegexToken('S', match1to3, match1);
          addRegexToken('SS', match1to3, match2);
          addRegexToken('SSS', match1to3, match3);

          var token;
          for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
          }

          function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
          }

          for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
          }
          // MOMENTS

          var getSetMillisecond = makeGetSet('Milliseconds', false);

          // FORMATTING

          addFormatToken('z', 0, 0, 'zoneAbbr');
          addFormatToken('zz', 0, 0, 'zoneName');

          // MOMENTS

          function getZoneAbbr() {
            return this._isUTC ? 'UTC' : '';
          }

          function getZoneName() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
          }

          var proto = Moment.prototype;

          proto.add = add;
          proto.calendar = calendar$1;
          proto.clone = clone;
          proto.diff = diff;
          proto.endOf = endOf;
          proto.format = format;
          proto.from = from;
          proto.fromNow = fromNow;
          proto.to = to;
          proto.toNow = toNow;
          proto.get = stringGet;
          proto.invalidAt = invalidAt;
          proto.isAfter = isAfter;
          proto.isBefore = isBefore;
          proto.isBetween = isBetween;
          proto.isSame = isSame;
          proto.isSameOrAfter = isSameOrAfter;
          proto.isSameOrBefore = isSameOrBefore;
          proto.isValid = isValid$2;
          proto.lang = lang;
          proto.locale = locale;
          proto.localeData = localeData;
          proto.max = prototypeMax;
          proto.min = prototypeMin;
          proto.parsingFlags = parsingFlags;
          proto.set = stringSet;
          proto.startOf = startOf;
          proto.subtract = subtract;
          proto.toArray = toArray;
          proto.toObject = toObject;
          proto.toDate = toDate;
          proto.toISOString = toISOString;
          proto.inspect = inspect;
          proto.toJSON = toJSON;
          proto.toString = toString;
          proto.unix = unix;
          proto.valueOf = valueOf;
          proto.creationData = creationData;

          // Year
          proto.year = getSetYear;
          proto.isLeapYear = getIsLeapYear;

          // Week Year
          proto.weekYear = getSetWeekYear;
          proto.isoWeekYear = getSetISOWeekYear;

          // Quarter
          proto.quarter = proto.quarters = getSetQuarter;

          // Month
          proto.month = getSetMonth;
          proto.daysInMonth = getDaysInMonth;

          // Week
          proto.week = proto.weeks = getSetWeek;
          proto.isoWeek = proto.isoWeeks = getSetISOWeek;
          proto.weeksInYear = getWeeksInYear;
          proto.isoWeeksInYear = getISOWeeksInYear;

          // Day
          proto.date = getSetDayOfMonth;
          proto.day = proto.days = getSetDayOfWeek;
          proto.weekday = getSetLocaleDayOfWeek;
          proto.isoWeekday = getSetISODayOfWeek;
          proto.dayOfYear = getSetDayOfYear;

          // Hour
          proto.hour = proto.hours = getSetHour;

          // Minute
          proto.minute = proto.minutes = getSetMinute;

          // Second
          proto.second = proto.seconds = getSetSecond;

          // Millisecond
          proto.millisecond = proto.milliseconds = getSetMillisecond;

          // Offset
          proto.utcOffset = getSetOffset;
          proto.utc = setOffsetToUTC;
          proto.local = setOffsetToLocal;
          proto.parseZone = setOffsetToParsedOffset;
          proto.hasAlignedHourOffset = hasAlignedHourOffset;
          proto.isDST = isDaylightSavingTime;
          proto.isLocal = isLocal;
          proto.isUtcOffset = isUtcOffset;
          proto.isUtc = isUtc;
          proto.isUTC = isUtc;

          // Timezone
          proto.zoneAbbr = getZoneAbbr;
          proto.zoneName = getZoneName;

          // Deprecations
          proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
          proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
          proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
          proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
          proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

          function createUnix(input) {
            return createLocal(input * 1000);
          }

          function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
          }

          function preParsePostFormat(string) {
            return string;
          }

          var proto$1 = Locale.prototype;

          proto$1.calendar = calendar;
          proto$1.longDateFormat = longDateFormat;
          proto$1.invalidDate = invalidDate;
          proto$1.ordinal = ordinal;
          proto$1.preparse = preParsePostFormat;
          proto$1.postformat = preParsePostFormat;
          proto$1.relativeTime = relativeTime;
          proto$1.pastFuture = pastFuture;
          proto$1.set = set;

          // Month
          proto$1.months = localeMonths;
          proto$1.monthsShort = localeMonthsShort;
          proto$1.monthsParse = localeMonthsParse;
          proto$1.monthsRegex = monthsRegex;
          proto$1.monthsShortRegex = monthsShortRegex;

          // Week
          proto$1.week = localeWeek;
          proto$1.firstDayOfYear = localeFirstDayOfYear;
          proto$1.firstDayOfWeek = localeFirstDayOfWeek;

          // Day of Week
          proto$1.weekdays = localeWeekdays;
          proto$1.weekdaysMin = localeWeekdaysMin;
          proto$1.weekdaysShort = localeWeekdaysShort;
          proto$1.weekdaysParse = localeWeekdaysParse;

          proto$1.weekdaysRegex = weekdaysRegex;
          proto$1.weekdaysShortRegex = weekdaysShortRegex;
          proto$1.weekdaysMinRegex = weekdaysMinRegex;

          // Hours
          proto$1.isPM = localeIsPM;
          proto$1.meridiem = localeMeridiem;

          function get$1(format, index, field, setter) {
            var locale = getLocale();
            var utc = createUTC().set(setter, index);
            return locale[field](utc, format);
          }

          function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
              index = format;
              format = undefined;
            }

            format = format || '';

            if (index != null) {
              return get$1(format, index, field, 'month');
            }

            var i;
            var out = [];
            for (i = 0; i < 12; i++) {
              out[i] = get$1(format, i, field, 'month');
            }
            return out;
          }

          // ()
          // (5)
          // (fmt, 5)
          // (fmt)
          // (true)
          // (true, 5)
          // (true, fmt, 5)
          // (true, fmt)
          function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
              if (isNumber(format)) {
                index = format;
                format = undefined;
              }

              format = format || '';
            } else {
              format = localeSorted;
              index = format;
              localeSorted = false;

              if (isNumber(format)) {
                index = format;
                format = undefined;
              }

              format = format || '';
            }

            var locale = getLocale(),
                shift = localeSorted ? locale._week.dow : 0;

            if (index != null) {
              return get$1(format, (index + shift) % 7, field, 'day');
            }

            var i;
            var out = [];
            for (i = 0; i < 7; i++) {
              out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }
            return out;
          }

          function listMonths(format, index) {
            return listMonthsImpl(format, index, 'months');
          }

          function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
          }

          function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
          }

          function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
          }

          function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
          }

          getSetGlobalLocale('en', {
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function ordinal(number) {
              var b = number % 10,
                  output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
              return number + output;
            }
          });

          // Side effect imports
          hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
          hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

          var mathAbs = Math.abs;

          function abs() {
            var data = this._data;

            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);

            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);

            return this;
          }

          function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);

            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;

            return duration._bubble();
          }

          // supports only 2.0-style add(1, 's') or add(duration)
          function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
          }

          // supports only 2.0-style subtract(1, 's') or subtract(duration)
          function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
          }

          function absCeil(number) {
            if (number < 0) {
              return Math.floor(number);
            } else {
              return Math.ceil(number);
            }
          }

          function bubble() {
            var milliseconds = this._milliseconds;
            var days = this._days;
            var months = this._months;
            var data = this._data;
            var seconds, minutes, hours, years, monthsFromDays;

            // if we have a mix of positive and negative values, bubble down first
            // check: https://github.com/moment/moment/issues/2166
            if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
              milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
              days = 0;
              months = 0;
            }

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;

            hours = absFloor(minutes / 60);
            data.hours = hours % 24;

            days += absFloor(hours / 24);

            // convert days to months
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;

            return this;
          }

          function daysToMonths(days) {
            // 400 years have 146097 days (taking into account leap year rules)
            // 400 years have 12 months === 4800
            return days * 4800 / 146097;
          }

          function monthsToDays(months) {
            // the reverse of daysToMonths
            return months * 146097 / 4800;
          }

          function as(units) {
            if (!this.isValid()) {
              return NaN;
            }
            var days;
            var months;
            var milliseconds = this._milliseconds;

            units = normalizeUnits(units);

            if (units === 'month' || units === 'year') {
              days = this._days + milliseconds / 864e5;
              months = this._months + daysToMonths(days);
              return units === 'month' ? months : months / 12;
            } else {
              // handle milliseconds separately because of floating point math errors (issue #1867)
              days = this._days + Math.round(monthsToDays(this._months));
              switch (units) {
                case 'week':
                  return days / 7 + milliseconds / 6048e5;
                case 'day':
                  return days + milliseconds / 864e5;
                case 'hour':
                  return days * 24 + milliseconds / 36e5;
                case 'minute':
                  return days * 1440 + milliseconds / 6e4;
                case 'second':
                  return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                  return Math.floor(days * 864e5) + milliseconds;
                default:
                  throw new Error('Unknown unit ' + units);
              }
            }
          }

          // TODO: Use this.as('ms')?
          function valueOf$1() {
            if (!this.isValid()) {
              return NaN;
            }
            return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
          }

          function makeAs(alias) {
            return function () {
              return this.as(alias);
            };
          }

          var asMilliseconds = makeAs('ms');
          var asSeconds = makeAs('s');
          var asMinutes = makeAs('m');
          var asHours = makeAs('h');
          var asDays = makeAs('d');
          var asWeeks = makeAs('w');
          var asMonths = makeAs('M');
          var asYears = makeAs('y');

          function clone$1() {
            return createDuration(this);
          }

          function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
          }

          function makeGetter(name) {
            return function () {
              return this.isValid() ? this._data[name] : NaN;
            };
          }

          var milliseconds = makeGetter('milliseconds');
          var seconds = makeGetter('seconds');
          var minutes = makeGetter('minutes');
          var hours = makeGetter('hours');
          var days = makeGetter('days');
          var months = makeGetter('months');
          var years = makeGetter('years');

          function weeks() {
            return absFloor(this.days() / 7);
          }

          var round = Math.round;
          var thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month
            M: 11 // months to year
          };

          // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
          function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
          }

          function relativeTime$1(posNegDuration, withoutSuffix, locale) {
            var duration = createDuration(posNegDuration).abs();
            var seconds = round(duration.as('s'));
            var minutes = round(duration.as('m'));
            var hours = round(duration.as('h'));
            var days = round(duration.as('d'));
            var months = round(duration.as('M'));
            var years = round(duration.as('y'));

            var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];

            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
          }

          // This function allows you to set the rounding function for relative time strings
          function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
              return round;
            }
            if (typeof roundingFunction === 'function') {
              round = roundingFunction;
              return true;
            }
            return false;
          }

          // This function allows you to set a threshold for relative time strings
          function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
              return false;
            }
            if (limit === undefined) {
              return thresholds[threshold];
            }
            thresholds[threshold] = limit;
            if (threshold === 's') {
              thresholds.ss = limit - 1;
            }
            return true;
          }

          function humanize(withSuffix) {
            if (!this.isValid()) {
              return this.localeData().invalidDate();
            }

            var locale = this.localeData();
            var output = relativeTime$1(this, !withSuffix, locale);

            if (withSuffix) {
              output = locale.pastFuture(+this, output);
            }

            return locale.postformat(output);
          }

          var abs$1 = Math.abs;

          function sign(x) {
            return (x > 0) - (x < 0) || +x;
          }

          function toISOString$1() {
            // for ISO strings we do not use the normal bubbling rules:
            //  * milliseconds bubble up until they become hours
            //  * days do not bubble at all
            //  * months bubble up until they become years
            // This is because there is no context-free conversion between hours and days
            // (think of clock changes)
            // and also not between days and months (28-31 days per month)
            if (!this.isValid()) {
              return this.localeData().invalidDate();
            }

            var seconds = abs$1(this._milliseconds) / 1000;
            var days = abs$1(this._days);
            var months = abs$1(this._months);
            var minutes, hours, years;

            // 3600 seconds -> 60 minutes -> 1 hour
            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var Y = years;
            var M = months;
            var D = days;
            var h = hours;
            var m = minutes;
            var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
            var total = this.asSeconds();

            if (!total) {
              // this is the same as C#'s (Noda) and python (isodate)...
              // but not other JS (goog.date)
              return 'P0D';
            }

            var totalSign = total < 0 ? '-' : '';
            var ymSign = sign(this._months) !== sign(total) ? '-' : '';
            var daysSign = sign(this._days) !== sign(total) ? '-' : '';
            var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

            return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
          }

          var proto$2 = Duration.prototype;

          proto$2.isValid = isValid$1;
          proto$2.abs = abs;
          proto$2.add = add$1;
          proto$2.subtract = subtract$1;
          proto$2.as = as;
          proto$2.asMilliseconds = asMilliseconds;
          proto$2.asSeconds = asSeconds;
          proto$2.asMinutes = asMinutes;
          proto$2.asHours = asHours;
          proto$2.asDays = asDays;
          proto$2.asWeeks = asWeeks;
          proto$2.asMonths = asMonths;
          proto$2.asYears = asYears;
          proto$2.valueOf = valueOf$1;
          proto$2._bubble = bubble;
          proto$2.clone = clone$1;
          proto$2.get = get$2;
          proto$2.milliseconds = milliseconds;
          proto$2.seconds = seconds;
          proto$2.minutes = minutes;
          proto$2.hours = hours;
          proto$2.days = days;
          proto$2.weeks = weeks;
          proto$2.months = months;
          proto$2.years = years;
          proto$2.humanize = humanize;
          proto$2.toISOString = toISOString$1;
          proto$2.toString = toISOString$1;
          proto$2.toJSON = toISOString$1;
          proto$2.locale = locale;
          proto$2.localeData = localeData;

          // Deprecations
          proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
          proto$2.lang = lang;

          // Side effect imports

          // FORMATTING

          addFormatToken('X', 0, 0, 'unix');
          addFormatToken('x', 0, 0, 'valueOf');

          // PARSING

          addRegexToken('x', matchSigned);
          addRegexToken('X', matchTimestamp);
          addParseToken('X', function (input, array, config) {
            config._d = new Date(parseFloat(input, 10) * 1000);
          });
          addParseToken('x', function (input, array, config) {
            config._d = new Date(toInt(input));
          });

          // Side effect imports


          hooks.version = '2.19.1';

          setHookCallback(createLocal);

          hooks.fn = proto;
          hooks.min = min;
          hooks.max = max;
          hooks.now = now;
          hooks.utc = createUTC;
          hooks.unix = createUnix;
          hooks.months = listMonths;
          hooks.isDate = isDate;
          hooks.locale = getSetGlobalLocale;
          hooks.invalid = createInvalid;
          hooks.duration = createDuration;
          hooks.isMoment = isMoment;
          hooks.weekdays = listWeekdays;
          hooks.parseZone = createInZone;
          hooks.localeData = getLocale;
          hooks.isDuration = isDuration;
          hooks.monthsShort = listMonthsShort;
          hooks.weekdaysMin = listWeekdaysMin;
          hooks.defineLocale = defineLocale;
          hooks.updateLocale = updateLocale;
          hooks.locales = listLocales;
          hooks.weekdaysShort = listWeekdaysShort;
          hooks.normalizeUnits = normalizeUnits;
          hooks.relativeTimeRounding = getSetRelativeTimeRounding;
          hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
          hooks.calendarFormat = getCalendarFormat;
          hooks.prototype = proto;

          return hooks;
        });

        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(155)(module));

      /***/
    },
    /* 155 */
    /***/function (module, exports) {

      module.exports = function (module) {
        if (!module.webpackPolyfill) {
          module.deprecate = function () {};
          module.paths = [];
          // module.parent = undefined by default
          if (!module.children) module.children = [];
          Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function get() {
              return module.l;
            }
          });
          Object.defineProperty(module, "id", {
            enumerable: true,
            get: function get() {
              return module.i;
            }
          });
          module.webpackPolyfill = 1;
        }
        return module;
      };

      /***/
    },
    /* 156 */
    /***/function (module, exports) {

      function webpackEmptyContext(req) {
        throw new Error("Cannot find module '" + req + "'.");
      }
      webpackEmptyContext.keys = function () {
        return [];
      };
      webpackEmptyContext.resolve = webpackEmptyContext;
      module.exports = webpackEmptyContext;
      webpackEmptyContext.id = 156;

      /***/
    },
    /* 157 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";
      /* WEBPACK VAR INJECTION */
      (function (global) {

        /* eslint-disable require-jsdoc */

        var _rng;

        var globalVar = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : null;

        if (globalVar && globalVar.crypto && crypto.getRandomValues) {
          // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
          // Moderately fast, high quality
          var _rnds8 = new Uint8Array(16);
          _rng = function whatwgRNG() {
            crypto.getRandomValues(_rnds8);
            return _rnds8;
          };
        }

        if (!_rng) {
          // Math.random()-based (RNG)
          //
          // If all else fails, use Math.random().  It's fast, but is of unspecified
          // quality.
          var _rnds = new Array(16);
          _rng = function _rng() {
            for (var i = 0, r; i < 16; i++) {
              if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
              _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
            }

            return _rnds;
          };
        }

        //     uuid.js
        //
        //     Copyright (c) 2010-2012 Robert Kieffer
        //     MIT License - http://opensource.org/licenses/mit-license.php

        // Unique ID creation requires a high quality random # generator.  We feature
        // detect to determine the best RNG source, normalizing to a function that
        // returns 128-bits of randomness, since that's what's usually required

        //var _rng = require('./rng');

        // Maps for number <-> hex string conversion
        var _byteToHex = [];
        var _hexToByte = {};
        for (var i = 0; i < 256; i++) {
          _byteToHex[i] = (i + 0x100).toString(16).substr(1);
          _hexToByte[_byteToHex[i]] = i;
        }

        // **`parse()` - Parse a UUID into it's component bytes**
        function parse(s, buf, offset) {
          var i = buf && offset || 0,
              ii = 0;

          buf = buf || [];
          s.toLowerCase().replace(/[0-9a-f]{2}/g, function (oct) {
            if (ii < 16) {
              // Don't overflow!
              buf[i + ii++] = _hexToByte[oct];
            }
          });

          // Zero out remaining bytes if string was short
          while (ii < 16) {
            buf[i + ii++] = 0;
          }

          return buf;
        }

        // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
        function unparse(buf, offset) {
          var i = offset || 0,
              bth = _byteToHex;
          return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
        }

        // **`v1()` - Generate time-based UUID**
        //
        // Inspired by https://github.com/LiosK/UUID.js
        // and http://docs.python.org/library/uuid.html

        // random #'s we need to init node and clockseq
        var _seedBytes = _rng();

        // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        var _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];

        // Per 4.2.2, randomize (14 bit) clockseq
        var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

        // Previous uuid creation time
        var _lastMSecs = 0,
            _lastNSecs = 0;

        // See https://github.com/broofa/node-uuid for API details
        function v1(options, buf, offset) {
          var i = buf && offset || 0;
          var b = buf || [];

          options = options || {};

          var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

          // UUID timestamps are 100 nano-second units since the Gregorian epoch,
          // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
          // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
          // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
          var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

          // Per 4.2.1.2, use count of uuid's generated during the current clock
          // cycle to simulate higher resolution clock
          var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

          // Time since last uuid creation (in msecs)
          var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;

          // Per 4.2.1.2, Bump clockseq on clock regression
          if (dt < 0 && options.clockseq === undefined) {
            clockseq = clockseq + 1 & 0x3fff;
          }

          // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
          // time interval
          if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
            nsecs = 0;
          }

          // Per 4.2.1.2 Throw error if too many uuids are requested
          if (nsecs >= 10000) {
            throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
          }

          _lastMSecs = msecs;
          _lastNSecs = nsecs;
          _clockseq = clockseq;

          // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
          msecs += 12219292800000;

          // `time_low`
          var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
          b[i++] = tl >>> 24 & 0xff;
          b[i++] = tl >>> 16 & 0xff;
          b[i++] = tl >>> 8 & 0xff;
          b[i++] = tl & 0xff;

          // `time_mid`
          var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
          b[i++] = tmh >>> 8 & 0xff;
          b[i++] = tmh & 0xff;

          // `time_high_and_version`
          b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
          b[i++] = tmh >>> 16 & 0xff;

          // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
          b[i++] = clockseq >>> 8 | 0x80;

          // `clock_seq_low`
          b[i++] = clockseq & 0xff;

          // `node`
          var node = options.node || _nodeId;
          for (var n = 0; n < 6; n++) {
            b[i + n] = node[n];
          }

          return buf ? buf : unparse(b);
        }

        // **`v4()` - Generate random UUID**

        // See https://github.com/broofa/node-uuid for API details
        function v4(options, buf, offset) {
          // Deprecated - 'format' argument, as supported in v1.2
          var i = buf && offset || 0;

          if (typeof options == 'string') {
            buf = options == 'binary' ? new Array(16) : null;
            options = null;
          }
          options = options || {};

          var rnds = options.random || (options.rng || _rng)();

          // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
          rnds[6] = rnds[6] & 0x0f | 0x40;
          rnds[8] = rnds[8] & 0x3f | 0x80;

          // Copy bytes to buffer, if provided
          if (buf) {
            for (var ii = 0; ii < 16; ii++) {
              buf[i + ii] = rnds[ii];
            }
          }

          return buf || unparse(rnds);
        }

        // Export public API
        var uuid = v4;
        uuid.v1 = v1;
        uuid.v4 = v4;
        uuid.parse = parse;
        uuid.unparse = unparse;

        module.exports = uuid;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(158));

      /***/
    },
    /* 158 */
    /***/function (module, exports) {

      var g;

      // This works in non-strict mode
      g = function () {
        return this;
      }();

      try {
        // This works if eval is allowed (see CSP)
        g = g || Function("return this")() || (1, eval)("this");
      } catch (e) {
        // This works if the window reference is available
        if ((typeof window === 'undefined' ? 'undefined' : (0, _typeof6['default'])(window)) === "object") g = window;
      }

      // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}

      module.exports = g;

      /***/
    },
    /* 159 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // utils

      exports.util = __webpack_require__(2);
      exports.DOMutil = __webpack_require__(14);

      // data
      exports.DataSet = __webpack_require__(11);
      exports.DataView = __webpack_require__(12);
      exports.Queue = __webpack_require__(43);

      // Graph3d
      exports.Graph3d = __webpack_require__(161);
      exports.graph3d = {
        Camera: __webpack_require__(95),
        Filter: __webpack_require__(96),
        Point2d: __webpack_require__(91),
        Point3d: __webpack_require__(34),
        Slider: __webpack_require__(92),
        StepNumber: __webpack_require__(93)
      };

      // bundled external libraries
      exports.moment = __webpack_require__(9);
      exports.Hammer = __webpack_require__(10);
      exports.keycharm = __webpack_require__(35);

      /***/
    },
    /* 160 */
    /***/function (module, exports, __webpack_require__) {

      var core = __webpack_require__(7);
      var $JSON = core.JSON || (core.JSON = { stringify: _stringify4['default'] });
      module.exports = function stringify(it) {
        // eslint-disable-line no-unused-vars
        return $JSON.stringify.apply($JSON, arguments);
      };

      /***/
    },
    /* 161 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _assign = __webpack_require__(90);

      var _assign2 = _interopRequireDefault(_assign);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var Emitter = __webpack_require__(44);
      var util = __webpack_require__(2);
      var Point3d = __webpack_require__(34);
      var Point2d = __webpack_require__(91);
      var Slider = __webpack_require__(92);
      var StepNumber = __webpack_require__(93);
      var Settings = __webpack_require__(94);
      var Validator = __webpack_require__(15)['default'];

      var _require = __webpack_require__(15),
          printStyle = _require.printStyle;

      var _require2 = __webpack_require__(172),
          allOptions = _require2.allOptions;

      var DataGroup = __webpack_require__(173);

      /// enumerate the available styles
      Graph3d.STYLE = Settings.STYLE;

      /**
       * Following label is used in the settings to describe values which should be
       * determined by the code while running, from the current data and graph style.
       *
       * Using 'undefined' directly achieves the same thing, but this is more
       * descriptive by describing the intent.
       */
      var autoByDefault = undefined;

      /**
       * Default values for option settings.
       *
       * These are the values used when a Graph3d instance is initialized without
       * custom settings.
       *
       * If a field is not in this list, a default value of 'autoByDefault' is assumed,
       * which is just an alias for 'undefined'.
       */
      Graph3d.DEFAULTS = {
        width: '400px',
        height: '400px',
        filterLabel: 'time',
        legendLabel: 'value',
        xLabel: 'x',
        yLabel: 'y',
        zLabel: 'z',
        xValueLabel: function xValueLabel(v) {
          return v;
        },
        yValueLabel: function yValueLabel(v) {
          return v;
        },
        zValueLabel: function zValueLabel(v) {
          return v;
        },
        showXAxis: true,
        showYAxis: true,
        showZAxis: true,
        showGrid: true,
        showPerspective: true,
        showShadow: false,
        keepAspectRatio: true,
        verticalRatio: 0.5, // 0.1 to 1.0, where 1.0 results in a 'cube'

        dotSizeRatio: 0.02, // size of the dots as a fraction of the graph width
        dotSizeMinFraction: 0.5, // size of min-value dot as a fraction of dotSizeRatio	
        dotSizeMaxFraction: 2.5, // size of max-value dot as a fraction of dotSizeRatio	

        showAnimationControls: autoByDefault,
        animationInterval: 1000, // milliseconds
        animationPreload: false,
        animationAutoStart: autoByDefault,

        axisColor: '#4D4D4D',
        gridColor: '#D3D3D3',
        xCenter: '55%',
        yCenter: '50%',

        style: Graph3d.STYLE.DOT,
        tooltip: false,

        tooltipStyle: {
          content: {
            padding: '10px',
            border: '1px solid #4d4d4d',
            color: '#1a1a1a',
            background: 'rgba(255,255,255,0.7)',
            borderRadius: '2px',
            boxShadow: '5px 5px 10px rgba(128,128,128,0.5)'
          },
          line: {
            height: '40px',
            width: '0',
            borderLeft: '1px solid #4d4d4d'
          },
          dot: {
            height: '0',
            width: '0',
            border: '5px solid #4d4d4d',
            borderRadius: '5px'
          }
        },

        dataColor: {
          fill: '#7DC1FF',
          stroke: '#3267D2',
          strokeWidth: 1 // px
        },

        cameraPosition: {
          horizontal: 1.0,
          vertical: 0.5,
          distance: 1.7
        },

        /*
          The following fields are 'auto by default', see above.
         */
        showLegend: autoByDefault, // determined by graph style
        backgroundColor: autoByDefault,

        xBarWidth: autoByDefault,
        yBarWidth: autoByDefault,
        valueMin: autoByDefault,
        valueMax: autoByDefault,
        xMin: autoByDefault,
        xMax: autoByDefault,
        xStep: autoByDefault,
        yMin: autoByDefault,
        yMax: autoByDefault,
        yStep: autoByDefault,
        zMin: autoByDefault,
        zMax: autoByDefault,
        zStep: autoByDefault
      };

      // -----------------------------------------------------------------------------
      // Class Graph3d
      // -----------------------------------------------------------------------------


      /**
       * Graph3d displays data in 3d.
       *
       * Graph3d is developed in javascript as a Google Visualization Chart.
       *
       * @constructor Graph3d
       * @param {Element} container   The DOM element in which the Graph3d will
       *                              be created. Normally a div element.
       * @param {DataSet | DataView | Array} [data]
       * @param {Object} [options]
       */
      function Graph3d(container, data, options) {
        if (!(this instanceof Graph3d)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        // create variables and set default values
        this.containerElement = container;

        this.dataGroup = new DataGroup();
        this.dataPoints = null; // The table with point objects

        // create a frame and canvas
        this.create();

        Settings.setDefaults(Graph3d.DEFAULTS, this);

        // the column indexes
        this.colX = undefined;
        this.colY = undefined;
        this.colZ = undefined;
        this.colValue = undefined;

        // TODO: customize axis range

        // apply options (also when undefined)
        this.setOptions(options);

        // apply data
        this.setData(data);
      }

      // Extend Graph3d with an Emitter mixin
      Emitter(Graph3d.prototype);

      /**
       * Calculate the scaling values, dependent on the range in x, y, and z direction
       */
      Graph3d.prototype._setScale = function () {
        this.scale = new Point3d(1 / this.xRange.range(), 1 / this.yRange.range(), 1 / this.zRange.range());

        // keep aspect ration between x and y scale if desired
        if (this.keepAspectRatio) {
          if (this.scale.x < this.scale.y) {
            //noinspection JSSuspiciousNameCombination
            this.scale.y = this.scale.x;
          } else {
            //noinspection JSSuspiciousNameCombination
            this.scale.x = this.scale.y;
          }
        }

        // scale the vertical axis
        this.scale.z *= this.verticalRatio;
        // TODO: can this be automated? verticalRatio?

        // determine scale for (optional) value
        if (this.valueRange !== undefined) {
          this.scale.value = 1 / this.valueRange.range();
        }

        // position the camera arm
        var xCenter = this.xRange.center() * this.scale.x;
        var yCenter = this.yRange.center() * this.scale.y;
        var zCenter = this.zRange.center() * this.scale.z;
        this.camera.setArmLocation(xCenter, yCenter, zCenter);
      };

      /**
       * Convert a 3D location to a 2D location on screen
       * Source: ttp://en.wikipedia.org/wiki/3D_projection
       *
       * @param   {Point3d} point3d  A 3D point with parameters x, y, z
       * @returns {Point2d} point2d  A 2D point with parameters x, y
       */
      Graph3d.prototype._convert3Dto2D = function (point3d) {
        var translation = this._convertPointToTranslation(point3d);
        return this._convertTranslationToScreen(translation);
      };

      /**
       * Convert a 3D location its translation seen from the camera
       * Source: http://en.wikipedia.org/wiki/3D_projection
       *
       * @param   {Point3d} point3d     A 3D point with parameters x, y, z
       * @returns {Point3d} translation A 3D point with parameters x, y, z This is
       *                                the translation of the point, seen from the
       *                                camera.
       */
      Graph3d.prototype._convertPointToTranslation = function (point3d) {
        var cameraLocation = this.camera.getCameraLocation(),
            cameraRotation = this.camera.getCameraRotation(),
            ax = point3d.x * this.scale.x,
            ay = point3d.y * this.scale.y,
            az = point3d.z * this.scale.z,
            cx = cameraLocation.x,
            cy = cameraLocation.y,
            cz = cameraLocation.z,


        // calculate angles
        sinTx = Math.sin(cameraRotation.x),
            cosTx = Math.cos(cameraRotation.x),
            sinTy = Math.sin(cameraRotation.y),
            cosTy = Math.cos(cameraRotation.y),
            sinTz = Math.sin(cameraRotation.z),
            cosTz = Math.cos(cameraRotation.z),


        // calculate translation
        dx = cosTy * (sinTz * (ay - cy) + cosTz * (ax - cx)) - sinTy * (az - cz),
            dy = sinTx * (cosTy * (az - cz) + sinTy * (sinTz * (ay - cy) + cosTz * (ax - cx))) + cosTx * (cosTz * (ay - cy) - sinTz * (ax - cx)),
            dz = cosTx * (cosTy * (az - cz) + sinTy * (sinTz * (ay - cy) + cosTz * (ax - cx))) - sinTx * (cosTz * (ay - cy) - sinTz * (ax - cx));

        return new Point3d(dx, dy, dz);
      };

      /**
       * Convert a translation point to a point on the screen
       *
       * @param   {Point3d} translation A 3D point with parameters x, y, z This is
       *                                the translation of the point, seen from the
       *                                camera.
       * @returns {Point2d} point2d     A 2D point with parameters x, y
       */
      Graph3d.prototype._convertTranslationToScreen = function (translation) {
        var ex = this.eye.x,
            ey = this.eye.y,
            ez = this.eye.z,
            dx = translation.x,
            dy = translation.y,
            dz = translation.z;

        // calculate position on screen from translation
        var bx;
        var by;
        if (this.showPerspective) {
          bx = (dx - ex) * (ez / dz);
          by = (dy - ey) * (ez / dz);
        } else {
          bx = dx * -(ez / this.camera.getArmLength());
          by = dy * -(ez / this.camera.getArmLength());
        }

        // shift and scale the point to the center of the screen
        // use the width of the graph to scale both horizontally and vertically.
        return new Point2d(this.currentXCenter + bx * this.frame.canvas.clientWidth, this.currentYCenter - by * this.frame.canvas.clientWidth);
      };

      /**
       * Calculate the translations and screen positions of all points
       *
       * @param {Array.<Point3d>} points
       * @private
       */
      Graph3d.prototype._calcTranslations = function (points) {
        for (var i = 0; i < points.length; i++) {
          var point = points[i];
          point.trans = this._convertPointToTranslation(point.point);
          point.screen = this._convertTranslationToScreen(point.trans);

          // calculate the translation of the point at the bottom (needed for sorting)
          var transBottom = this._convertPointToTranslation(point.bottom);
          point.dist = this.showPerspective ? transBottom.length() : -transBottom.z;
        }

        // sort the points on depth of their (x,y) position (not on z)
        var sortDepth = function sortDepth(a, b) {
          return b.dist - a.dist;
        };
        points.sort(sortDepth);
      };

      /**
       * Transfer min/max values to the Graph3d instance.
       */
      Graph3d.prototype._initializeRanges = function () {
        // TODO: later on, all min/maxes of all datagroups will be combined here
        var dg = this.dataGroup;
        this.xRange = dg.xRange;
        this.yRange = dg.yRange;
        this.zRange = dg.zRange;
        this.valueRange = dg.valueRange;

        // Values currently needed but which need to be sorted out for
        // the multiple graph case.
        this.xStep = dg.xStep;
        this.yStep = dg.yStep;
        this.zStep = dg.zStep;
        this.xBarWidth = dg.xBarWidth;
        this.yBarWidth = dg.yBarWidth;
        this.colX = dg.colX;
        this.colY = dg.colY;
        this.colZ = dg.colZ;
        this.colValue = dg.colValue;

        // set the scale dependent on the ranges.
        this._setScale();
      };

      /**
       * Return all data values as a list of Point3d objects
       *
       * @param {vis.DataSet} data
       * @returns {Array.<Object>}
       */
      Graph3d.prototype.getDataPoints = function (data) {
        var dataPoints = [];

        for (var i = 0; i < data.length; i++) {
          var point = new Point3d();
          point.x = data[i][this.colX] || 0;
          point.y = data[i][this.colY] || 0;
          point.z = data[i][this.colZ] || 0;
          point.data = data[i];

          if (this.colValue !== undefined) {
            point.value = data[i][this.colValue] || 0;
          }

          var obj = {};
          obj.point = point;
          obj.bottom = new Point3d(point.x, point.y, this.zRange.min);
          obj.trans = undefined;
          obj.screen = undefined;

          dataPoints.push(obj);
        }

        return dataPoints;
      };

      /**
       * Filter the data based on the current filter
       *
       * @param   {Array} data
       * @returns {Array} dataPoints Array with point objects which can be drawn on
       *                             screen
       */
      Graph3d.prototype._getDataPoints = function (data) {
        // TODO: store the created matrix dataPoints in the filters instead of
        //       reloading each time.
        var x, y, i, obj;

        var dataPoints = [];

        if (this.style === Graph3d.STYLE.GRID || this.style === Graph3d.STYLE.SURFACE) {
          // copy all values from the data table to a matrix
          // the provided values are supposed to form a grid of (x,y) positions

          // create two lists with all present x and y values
          var dataX = this.dataGroup.getDistinctValues(this.colX, data);
          var dataY = this.dataGroup.getDistinctValues(this.colY, data);

          dataPoints = this.getDataPoints(data);

          // create a grid, a 2d matrix, with all values.
          var dataMatrix = []; // temporary data matrix
          for (i = 0; i < dataPoints.length; i++) {
            obj = dataPoints[i];

            // TODO: implement Array().indexOf() for Internet Explorer
            var xIndex = dataX.indexOf(obj.point.x);
            var yIndex = dataY.indexOf(obj.point.y);

            if (dataMatrix[xIndex] === undefined) {
              dataMatrix[xIndex] = [];
            }

            dataMatrix[xIndex][yIndex] = obj;
          }

          // fill in the pointers to the neighbors.
          for (x = 0; x < dataMatrix.length; x++) {
            for (y = 0; y < dataMatrix[x].length; y++) {
              if (dataMatrix[x][y]) {
                dataMatrix[x][y].pointRight = x < dataMatrix.length - 1 ? dataMatrix[x + 1][y] : undefined;
                dataMatrix[x][y].pointTop = y < dataMatrix[x].length - 1 ? dataMatrix[x][y + 1] : undefined;
                dataMatrix[x][y].pointCross = x < dataMatrix.length - 1 && y < dataMatrix[x].length - 1 ? dataMatrix[x + 1][y + 1] : undefined;
              }
            }
          }
        } else {
          // 'dot', 'dot-line', etc.
          this._checkValueField(data);
          dataPoints = this.getDataPoints(data);

          if (this.style === Graph3d.STYLE.LINE) {
            // Add next member points for line drawing
            for (i = 0; i < dataPoints.length; i++) {
              if (i > 0) {
                dataPoints[i - 1].pointNext = dataPoints[i];
              }
            }
          }
        }

        return dataPoints;
      };

      /**
       * Create the main frame for the Graph3d.
       *
       * This function is executed once when a Graph3d object is created. The frame
       * contains a canvas, and this canvas contains all objects like the axis and
       * nodes.
       */
      Graph3d.prototype.create = function () {
        // remove all elements from the container element.
        while (this.containerElement.hasChildNodes()) {
          this.containerElement.removeChild(this.containerElement.firstChild);
        }

        this.frame = document.createElement('div');
        this.frame.style.position = 'relative';
        this.frame.style.overflow = 'hidden';

        // create the graph canvas (HTML canvas element)
        this.frame.canvas = document.createElement('canvas');
        this.frame.canvas.style.position = 'relative';
        this.frame.appendChild(this.frame.canvas);
        //if (!this.frame.canvas.getContext) {
        {
          var noCanvas = document.createElement('DIV');
          noCanvas.style.color = 'red';
          noCanvas.style.fontWeight = 'bold';
          noCanvas.style.padding = '10px';
          noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
          this.frame.canvas.appendChild(noCanvas);
        }

        this.frame.filter = document.createElement('div');
        this.frame.filter.style.position = 'absolute';
        this.frame.filter.style.bottom = '0px';
        this.frame.filter.style.left = '0px';
        this.frame.filter.style.width = '100%';
        this.frame.appendChild(this.frame.filter);

        // add event listeners to handle moving and zooming the contents
        var me = this;
        var onmousedown = function onmousedown(event) {
          me._onMouseDown(event);
        };
        var ontouchstart = function ontouchstart(event) {
          me._onTouchStart(event);
        };
        var onmousewheel = function onmousewheel(event) {
          me._onWheel(event);
        };
        var ontooltip = function ontooltip(event) {
          me._onTooltip(event);
        };
        var onclick = function onclick(event) {
          me._onClick(event);
        };
        // TODO: these events are never cleaned up... can give a 'memory leakage'

        util.addEventListener(this.frame.canvas, 'mousedown', onmousedown);
        util.addEventListener(this.frame.canvas, 'touchstart', ontouchstart);
        util.addEventListener(this.frame.canvas, 'mousewheel', onmousewheel);
        util.addEventListener(this.frame.canvas, 'mousemove', ontooltip);
        util.addEventListener(this.frame.canvas, 'click', onclick);

        // add the new graph to the container element
        this.containerElement.appendChild(this.frame);
      };

      /**
       * Set a new size for the graph
       *
       * @param {number} width
       * @param {number} height
       * @private
       */
      Graph3d.prototype._setSize = function (width, height) {
        this.frame.style.width = width;
        this.frame.style.height = height;

        this._resizeCanvas();
      };

      /**
       * Resize the canvas to the current size of the frame
       */
      Graph3d.prototype._resizeCanvas = function () {
        this.frame.canvas.style.width = '100%';
        this.frame.canvas.style.height = '100%';

        this.frame.canvas.width = this.frame.canvas.clientWidth;
        this.frame.canvas.height = this.frame.canvas.clientHeight;

        // adjust with for margin
        this.frame.filter.style.width = this.frame.canvas.clientWidth - 2 * 10 + 'px';
      };

      /**
       * Start playing the animation, if requested and filter present. Only applicable
       * when animation data is available.
       */
      Graph3d.prototype.animationStart = function () {
        // start animation when option is true
        if (!this.animationAutoStart || !this.dataGroup.dataFilter) return;

        if (!this.frame.filter || !this.frame.filter.slider) throw new Error('No animation available');

        this.frame.filter.slider.play();
      };

      /**
       * Stop animation
       */
      Graph3d.prototype.animationStop = function () {
        if (!this.frame.filter || !this.frame.filter.slider) return;

        this.frame.filter.slider.stop();
      };

      /**
       * Resize the center position based on the current values in this.xCenter
       * and this.yCenter (which are strings with a percentage or a value
       * in pixels). The center positions are the variables this.currentXCenter
       * and this.currentYCenter
       */
      Graph3d.prototype._resizeCenter = function () {
        // calculate the horizontal center position
        if (this.xCenter.charAt(this.xCenter.length - 1) === '%') {
          this.currentXCenter = parseFloat(this.xCenter) / 100 * this.frame.canvas.clientWidth;
        } else {
          this.currentXCenter = parseFloat(this.xCenter); // supposed to be in px
        }

        // calculate the vertical center position
        if (this.yCenter.charAt(this.yCenter.length - 1) === '%') {
          this.currentYCenter = parseFloat(this.yCenter) / 100 * (this.frame.canvas.clientHeight - this.frame.filter.clientHeight);
        } else {
          this.currentYCenter = parseFloat(this.yCenter); // supposed to be in px
        }
      };

      /**
       * Retrieve the current camera rotation
       *
       * @returns {object} An object with parameters horizontal, vertical, and
       *                   distance
       */
      Graph3d.prototype.getCameraPosition = function () {
        var pos = this.camera.getArmRotation();
        pos.distance = this.camera.getArmLength();
        return pos;
      };

      /**
       * Load data into the 3D Graph
       *
       * @param {vis.DataSet} data
       * @private
       */
      Graph3d.prototype._readData = function (data) {
        // read the data
        this.dataPoints = this.dataGroup.initializeData(this, data, this.style);

        this._initializeRanges();
        this._redrawFilter();
      };

      /**
       * Replace the dataset of the Graph3d
       *
       * @param {Array | DataSet | DataView} data
       */
      Graph3d.prototype.setData = function (data) {
        if (data === undefined || data === null) return;

        this._readData(data);
        this.redraw();
        this.animationStart();
      };

      /**
       * Update the options. Options will be merged with current options
       *
       * @param {Object} options
       */
      Graph3d.prototype.setOptions = function (options) {
        if (options === undefined) return;

        var errorFound = Validator.validate(options, allOptions);
        if (errorFound === true) {
          console.log('%cErrors have been found in the supplied options object.', printStyle);
        }

        this.animationStop();

        Settings.setOptions(options, this);
        this.setPointDrawingMethod();
        this._setSize(this.width, this.height);

        this.setData(this.dataGroup.getDataTable());
        this.animationStart();
      };

      /**
       * Determine which point drawing method to use for the current graph style.
       */
      Graph3d.prototype.setPointDrawingMethod = function () {
        var method = undefined;

        switch (this.style) {
          case Graph3d.STYLE.BAR:
            method = Graph3d.prototype._redrawBarGraphPoint;
            break;
          case Graph3d.STYLE.BARCOLOR:
            method = Graph3d.prototype._redrawBarColorGraphPoint;
            break;
          case Graph3d.STYLE.BARSIZE:
            method = Graph3d.prototype._redrawBarSizeGraphPoint;
            break;
          case Graph3d.STYLE.DOT:
            method = Graph3d.prototype._redrawDotGraphPoint;
            break;
          case Graph3d.STYLE.DOTLINE:
            method = Graph3d.prototype._redrawDotLineGraphPoint;
            break;
          case Graph3d.STYLE.DOTCOLOR:
            method = Graph3d.prototype._redrawDotColorGraphPoint;
            break;
          case Graph3d.STYLE.DOTSIZE:
            method = Graph3d.prototype._redrawDotSizeGraphPoint;
            break;
          case Graph3d.STYLE.SURFACE:
            method = Graph3d.prototype._redrawSurfaceGraphPoint;
            break;
          case Graph3d.STYLE.GRID:
            method = Graph3d.prototype._redrawGridGraphPoint;
            break;
          case Graph3d.STYLE.LINE:
            method = Graph3d.prototype._redrawLineGraphPoint;
            break;
          default:
            throw new Error('Can not determine point drawing method ' + 'for graph style \'' + this.style + '\'');
        }

        this._pointDrawingMethod = method;
      };

      /**
       * Redraw the Graph.
       */
      Graph3d.prototype.redraw = function () {
        if (this.dataPoints === undefined) {
          throw new Error('Graph data not initialized');
        }

        this._resizeCanvas();
        this._resizeCenter();
        this._redrawSlider();
        this._redrawClear();
        this._redrawAxis();

        this._redrawDataGraph();

        this._redrawInfo();
        this._redrawLegend();
      };

      /**
       * Get drawing context without exposing canvas
       *
       * @returns {CanvasRenderingContext2D}
       * @private
       */
      Graph3d.prototype._getContext = function () {
        var canvas = this.frame.canvas;
        var ctx = canvas.getContext('2d');

        ctx.lineJoin = 'round';
        ctx.lineCap = 'round';

        return ctx;
      };

      /**
       * Clear the canvas before redrawing
       */
      Graph3d.prototype._redrawClear = function () {
        var canvas = this.frame.canvas;
        var ctx = canvas.getContext('2d');

        ctx.clearRect(0, 0, canvas.width, canvas.height);
      };

      Graph3d.prototype._dotSize = function () {
        return this.frame.clientWidth * this.dotSizeRatio;
      };

      /**
       * Get legend width
       *
       * @returns {*}
       * @private
       */
      Graph3d.prototype._getLegendWidth = function () {
        var width;

        if (this.style === Graph3d.STYLE.DOTSIZE) {
          var dotSize = this._dotSize();
          //width =  dotSize / 2 + dotSize * 2;
          width = dotSize * this.dotSizeMaxFraction;
        } else if (this.style === Graph3d.STYLE.BARSIZE) {
          width = this.xBarWidth;
        } else {
          width = 20;
        }
        return width;
      };

      /**
       * Redraw the legend based on size, dot color, or surface height
       */
      Graph3d.prototype._redrawLegend = function () {

        //Return without drawing anything, if no legend is specified
        if (this.showLegend !== true) {
          return;
        }

        // Do not draw legend when graph style does not support
        if (this.style === Graph3d.STYLE.LINE || this.style === Graph3d.STYLE.BARSIZE //TODO add legend support for BARSIZE
        ) {
            return;
          }

        // Legend types - size and color. Determine if size legend.
        var isSizeLegend = this.style === Graph3d.STYLE.BARSIZE || this.style === Graph3d.STYLE.DOTSIZE;

        // Legend is either tracking z values or style values. This flag if false means use z values.
        var isValueLegend = this.style === Graph3d.STYLE.DOTSIZE || this.style === Graph3d.STYLE.DOTCOLOR || this.style === Graph3d.STYLE.BARCOLOR;

        var height = Math.max(this.frame.clientHeight * 0.25, 100);
        var top = this.margin;
        var width = this._getLegendWidth(); // px - overwritten by size legend
        var right = this.frame.clientWidth - this.margin;
        var left = right - width;
        var bottom = top + height;

        var ctx = this._getContext();
        ctx.lineWidth = 1;
        ctx.font = '14px arial'; // TODO: put in options

        if (isSizeLegend === false) {
          // draw the color bar
          var ymin = 0;
          var ymax = height; // Todo: make height customizable
          var y;

          for (y = ymin; y < ymax; y++) {
            var f = (y - ymin) / (ymax - ymin);
            var hue = f * 240;
            var color = this._hsv2rgb(hue, 1, 1);

            ctx.strokeStyle = color;
            ctx.beginPath();
            ctx.moveTo(left, top + y);
            ctx.lineTo(right, top + y);
            ctx.stroke();
          }
          ctx.strokeStyle = this.axisColor;
          ctx.strokeRect(left, top, width, height);
        } else {

          // draw the size legend box
          var widthMin;
          if (this.style === Graph3d.STYLE.DOTSIZE) {
            // Get the proportion to max and min right
            widthMin = width * (this.dotSizeMinFraction / this.dotSizeMaxFraction);
          } else if (this.style === Graph3d.STYLE.BARSIZE) {
            //widthMin = this.xBarWidth * 0.2 this is wrong - barwidth measures in terms of xvalues
          }
          ctx.strokeStyle = this.axisColor;
          ctx.fillStyle = this.dataColor.fill;
          ctx.beginPath();
          ctx.moveTo(left, top);
          ctx.lineTo(right, top);
          ctx.lineTo(left + widthMin, bottom);
          ctx.lineTo(left, bottom);
          ctx.closePath();
          ctx.fill();
          ctx.stroke();
        }

        // print value text along the legend edge
        var gridLineLen = 5; // px

        var legendMin = isValueLegend ? this.valueRange.min : this.zRange.min;
        var legendMax = isValueLegend ? this.valueRange.max : this.zRange.max;
        var step = new StepNumber(legendMin, legendMax, (legendMax - legendMin) / 5, true);
        step.start(true);

        var from;
        var to;
        while (!step.end()) {
          y = bottom - (step.getCurrent() - legendMin) / (legendMax - legendMin) * height;
          from = new Point2d(left - gridLineLen, y);
          to = new Point2d(left, y);
          this._line(ctx, from, to);

          ctx.textAlign = 'right';
          ctx.textBaseline = 'middle';
          ctx.fillStyle = this.axisColor;
          ctx.fillText(step.getCurrent(), left - 2 * gridLineLen, y);

          step.next();
        }

        ctx.textAlign = 'right';
        ctx.textBaseline = 'top';
        var label = this.legendLabel;
        ctx.fillText(label, right, bottom + this.margin);
      };

      /**
       * Redraw the filter
       */
      Graph3d.prototype._redrawFilter = function () {
        var dataFilter = this.dataGroup.dataFilter;
        var filter = this.frame.filter;
        filter.innerHTML = '';

        if (!dataFilter) {
          filter.slider = undefined;
          return;
        }

        var options = {
          'visible': this.showAnimationControls
        };
        var slider = new Slider(filter, options);
        filter.slider = slider;

        // TODO: css here is not nice here...
        filter.style.padding = '10px';
        //this.frame.filter.style.backgroundColor = '#EFEFEF';

        slider.setValues(dataFilter.values);
        slider.setPlayInterval(this.animationInterval);

        // create an event handler
        var me = this;
        var onchange = function onchange() {
          var dataFilter = me.dataGroup.dataFilter;
          var index = slider.getIndex();

          dataFilter.selectValue(index);
          me.dataPoints = dataFilter._getDataPoints();

          me.redraw();
        };

        slider.setOnChangeCallback(onchange);
      };

      /**
       * Redraw the slider
       */
      Graph3d.prototype._redrawSlider = function () {
        if (this.frame.filter.slider !== undefined) {
          this.frame.filter.slider.redraw();
        }
      };

      /**
       * Redraw common information
       */
      Graph3d.prototype._redrawInfo = function () {
        var info = this.dataGroup.getInfo();
        if (info === undefined) return;

        var ctx = this._getContext();

        ctx.font = '14px arial'; // TODO: put in options
        ctx.lineStyle = 'gray';
        ctx.fillStyle = 'gray';
        ctx.textAlign = 'left';
        ctx.textBaseline = 'top';

        var x = this.margin;
        var y = this.margin;
        ctx.fillText(info, x, y);
      };

      /**
       * Draw a line between 2d points 'from' and 'to'.
       *
       * If stroke style specified, set that as well.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {vis.Point2d} from
       * @param {vis.Point2d} to
       * @param {string} [strokeStyle]
       * @private
       */
      Graph3d.prototype._line = function (ctx, from, to, strokeStyle) {
        if (strokeStyle !== undefined) {
          ctx.strokeStyle = strokeStyle;
        }

        ctx.beginPath();
        ctx.moveTo(from.x, from.y);
        ctx.lineTo(to.x, to.y);
        ctx.stroke();
      };

      /**
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {vis.Point3d} point3d
       * @param {string} text
       * @param {number} armAngle
       * @param {number} [yMargin=0]
       */
      Graph3d.prototype.drawAxisLabelX = function (ctx, point3d, text, armAngle, yMargin) {
        if (yMargin === undefined) {
          yMargin = 0;
        }

        var point2d = this._convert3Dto2D(point3d);

        if (Math.cos(armAngle * 2) > 0) {
          ctx.textAlign = 'center';
          ctx.textBaseline = 'top';
          point2d.y += yMargin;
        } else if (Math.sin(armAngle * 2) < 0) {
          ctx.textAlign = 'right';
          ctx.textBaseline = 'middle';
        } else {
          ctx.textAlign = 'left';
          ctx.textBaseline = 'middle';
        }

        ctx.fillStyle = this.axisColor;
        ctx.fillText(text, point2d.x, point2d.y);
      };

      /**
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {vis.Point3d} point3d
       * @param {string} text
       * @param {number} armAngle
       * @param {number} [yMargin=0]
       */
      Graph3d.prototype.drawAxisLabelY = function (ctx, point3d, text, armAngle, yMargin) {
        if (yMargin === undefined) {
          yMargin = 0;
        }

        var point2d = this._convert3Dto2D(point3d);

        if (Math.cos(armAngle * 2) < 0) {
          ctx.textAlign = 'center';
          ctx.textBaseline = 'top';
          point2d.y += yMargin;
        } else if (Math.sin(armAngle * 2) > 0) {
          ctx.textAlign = 'right';
          ctx.textBaseline = 'middle';
        } else {
          ctx.textAlign = 'left';
          ctx.textBaseline = 'middle';
        }

        ctx.fillStyle = this.axisColor;
        ctx.fillText(text, point2d.x, point2d.y);
      };

      /**
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {vis.Point3d} point3d
       * @param {string} text
       * @param {number} [offset=0]
       */
      Graph3d.prototype.drawAxisLabelZ = function (ctx, point3d, text, offset) {
        if (offset === undefined) {
          offset = 0;
        }

        var point2d = this._convert3Dto2D(point3d);
        ctx.textAlign = 'right';
        ctx.textBaseline = 'middle';
        ctx.fillStyle = this.axisColor;
        ctx.fillText(text, point2d.x - offset, point2d.y);
      };

      /**
      
      
      /**
       * Draw a line between 2d points 'from' and 'to'.
       *
       * If stroke style specified, set that as well.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {vis.Point2d} from
       * @param {vis.Point2d} to
       * @param {string} [strokeStyle]
       * @private
       */
      Graph3d.prototype._line3d = function (ctx, from, to, strokeStyle) {
        var from2d = this._convert3Dto2D(from);
        var to2d = this._convert3Dto2D(to);

        this._line(ctx, from2d, to2d, strokeStyle);
      };

      /**
       * Redraw the axis
       */
      Graph3d.prototype._redrawAxis = function () {
        var ctx = this._getContext(),
            from,
            to,
            step,
            prettyStep,
            text,
            xText,
            yText,
            zText,
            offset,
            xOffset,
            yOffset;

        // TODO: get the actual rendered style of the containerElement
        //ctx.font = this.containerElement.style.font;
        ctx.font = 24 / this.camera.getArmLength() + 'px arial';

        // calculate the length for the short grid lines
        var gridLenX = 0.025 / this.scale.x;
        var gridLenY = 0.025 / this.scale.y;
        var textMargin = 5 / this.camera.getArmLength(); // px
        var armAngle = this.camera.getArmRotation().horizontal;
        var armVector = new Point2d(Math.cos(armAngle), Math.sin(armAngle));

        var xRange = this.xRange;
        var yRange = this.yRange;
        var zRange = this.zRange;
        var point3d;

        // draw x-grid lines
        ctx.lineWidth = 1;
        prettyStep = this.defaultXStep === undefined;
        step = new StepNumber(xRange.min, xRange.max, this.xStep, prettyStep);
        step.start(true);

        while (!step.end()) {
          var x = step.getCurrent();

          if (this.showGrid) {
            from = new Point3d(x, yRange.min, zRange.min);
            to = new Point3d(x, yRange.max, zRange.min);
            this._line3d(ctx, from, to, this.gridColor);
          } else if (this.showXAxis) {
            from = new Point3d(x, yRange.min, zRange.min);
            to = new Point3d(x, yRange.min + gridLenX, zRange.min);
            this._line3d(ctx, from, to, this.axisColor);

            from = new Point3d(x, yRange.max, zRange.min);
            to = new Point3d(x, yRange.max - gridLenX, zRange.min);
            this._line3d(ctx, from, to, this.axisColor);
          }

          if (this.showXAxis) {
            yText = armVector.x > 0 ? yRange.min : yRange.max;
            point3d = new Point3d(x, yText, zRange.min);
            var msg = '  ' + this.xValueLabel(x) + '  ';
            this.drawAxisLabelX(ctx, point3d, msg, armAngle, textMargin);
          }

          step.next();
        }

        // draw y-grid lines
        ctx.lineWidth = 1;
        prettyStep = this.defaultYStep === undefined;
        step = new StepNumber(yRange.min, yRange.max, this.yStep, prettyStep);
        step.start(true);

        while (!step.end()) {
          var y = step.getCurrent();

          if (this.showGrid) {
            from = new Point3d(xRange.min, y, zRange.min);
            to = new Point3d(xRange.max, y, zRange.min);
            this._line3d(ctx, from, to, this.gridColor);
          } else if (this.showYAxis) {
            from = new Point3d(xRange.min, y, zRange.min);
            to = new Point3d(xRange.min + gridLenY, y, zRange.min);
            this._line3d(ctx, from, to, this.axisColor);

            from = new Point3d(xRange.max, y, zRange.min);
            to = new Point3d(xRange.max - gridLenY, y, zRange.min);
            this._line3d(ctx, from, to, this.axisColor);
          }

          if (this.showYAxis) {
            xText = armVector.y > 0 ? xRange.min : xRange.max;
            point3d = new Point3d(xText, y, zRange.min);
            var _msg = '  ' + this.yValueLabel(y) + '  ';
            this.drawAxisLabelY(ctx, point3d, _msg, armAngle, textMargin);
          }

          step.next();
        }

        // draw z-grid lines and axis
        if (this.showZAxis) {
          ctx.lineWidth = 1;
          prettyStep = this.defaultZStep === undefined;
          step = new StepNumber(zRange.min, zRange.max, this.zStep, prettyStep);
          step.start(true);

          xText = armVector.x > 0 ? xRange.min : xRange.max;
          yText = armVector.y < 0 ? yRange.min : yRange.max;

          while (!step.end()) {
            var z = step.getCurrent();

            // TODO: make z-grid lines really 3d?
            var from3d = new Point3d(xText, yText, z);
            var from2d = this._convert3Dto2D(from3d);
            to = new Point2d(from2d.x - textMargin, from2d.y);
            this._line(ctx, from2d, to, this.axisColor);

            var _msg2 = this.zValueLabel(z) + ' ';
            this.drawAxisLabelZ(ctx, from3d, _msg2, 5);

            step.next();
          }

          ctx.lineWidth = 1;
          from = new Point3d(xText, yText, zRange.min);
          to = new Point3d(xText, yText, zRange.max);
          this._line3d(ctx, from, to, this.axisColor);
        }

        // draw x-axis
        if (this.showXAxis) {
          var xMin2d;
          var xMax2d;
          ctx.lineWidth = 1;

          // line at yMin
          xMin2d = new Point3d(xRange.min, yRange.min, zRange.min);
          xMax2d = new Point3d(xRange.max, yRange.min, zRange.min);
          this._line3d(ctx, xMin2d, xMax2d, this.axisColor);
          // line at ymax
          xMin2d = new Point3d(xRange.min, yRange.max, zRange.min);
          xMax2d = new Point3d(xRange.max, yRange.max, zRange.min);
          this._line3d(ctx, xMin2d, xMax2d, this.axisColor);
        }

        // draw y-axis
        if (this.showYAxis) {
          ctx.lineWidth = 1;
          // line at xMin
          from = new Point3d(xRange.min, yRange.min, zRange.min);
          to = new Point3d(xRange.min, yRange.max, zRange.min);
          this._line3d(ctx, from, to, this.axisColor);
          // line at xMax
          from = new Point3d(xRange.max, yRange.min, zRange.min);
          to = new Point3d(xRange.max, yRange.max, zRange.min);
          this._line3d(ctx, from, to, this.axisColor);
        }

        // draw x-label
        var xLabel = this.xLabel;
        if (xLabel.length > 0 && this.showXAxis) {
          yOffset = 0.1 / this.scale.y;
          xText = (xRange.max + 3 * xRange.min) / 4;
          yText = armVector.x > 0 ? yRange.min - yOffset : yRange.max + yOffset;
          text = new Point3d(xText, yText, zRange.min);
          this.drawAxisLabelX(ctx, text, xLabel, armAngle);
        }

        // draw y-label
        var yLabel = this.yLabel;
        if (yLabel.length > 0 && this.showYAxis) {
          xOffset = 0.1 / this.scale.x;
          xText = armVector.y > 0 ? xRange.min - xOffset : xRange.max + xOffset;
          yText = (yRange.max + 3 * yRange.min) / 4;
          text = new Point3d(xText, yText, zRange.min);

          this.drawAxisLabelY(ctx, text, yLabel, armAngle);
        }

        // draw z-label
        var zLabel = this.zLabel;
        if (zLabel.length > 0 && this.showZAxis) {
          offset = 30; // pixels.  // TODO: relate to the max width of the values on the z axis?
          xText = armVector.x > 0 ? xRange.min : xRange.max;
          yText = armVector.y < 0 ? yRange.min : yRange.max;
          zText = (zRange.max + 3 * zRange.min) / 4;
          text = new Point3d(xText, yText, zText);

          this.drawAxisLabelZ(ctx, text, zLabel, offset);
        }
      };

      /**
       * Calculate the color based on the given value.
       * @param {number} H   Hue, a value be between 0 and 360
       * @param {number} S   Saturation, a value between 0 and 1
       * @param {number} V   Value, a value between 0 and 1
       * @returns {string}
       * @private
       */
      Graph3d.prototype._hsv2rgb = function (H, S, V) {
        var R, G, B, C, Hi, X;

        C = V * S;
        Hi = Math.floor(H / 60); // hi = 0,1,2,3,4,5
        X = C * (1 - Math.abs(H / 60 % 2 - 1));

        switch (Hi) {
          case 0:
            R = C;G = X;B = 0;break;
          case 1:
            R = X;G = C;B = 0;break;
          case 2:
            R = 0;G = C;B = X;break;
          case 3:
            R = 0;G = X;B = C;break;
          case 4:
            R = X;G = 0;B = C;break;
          case 5:
            R = C;G = 0;B = X;break;

          default:
            R = 0;G = 0;B = 0;break;
        }

        return 'RGB(' + parseInt(R * 255) + ',' + parseInt(G * 255) + ',' + parseInt(B * 255) + ')';
      };

      /**
       *
       * @param {vis.Point3d} point
       * @returns {*}
       * @private
       */
      Graph3d.prototype._getStrokeWidth = function (point) {
        if (point !== undefined) {
          if (this.showPerspective) {
            return 1 / -point.trans.z * this.dataColor.strokeWidth;
          } else {
            return -(this.eye.z / this.camera.getArmLength()) * this.dataColor.strokeWidth;
          }
        }

        return this.dataColor.strokeWidth;
      };

      // -----------------------------------------------------------------------------
      // Drawing primitives for the graphs
      // -----------------------------------------------------------------------------


      /**
       * Draw a bar element in the view with the given properties.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Object} point
       * @param {number} xWidth
       * @param {number} yWidth
       * @param {string} color
       * @param {string} borderColor
       * @private
       */
      Graph3d.prototype._redrawBar = function (ctx, point, xWidth, yWidth, color, borderColor) {
        var surface;

        // calculate all corner points
        var me = this;
        var point3d = point.point;
        var zMin = this.zRange.min;
        var top = [{ point: new Point3d(point3d.x - xWidth, point3d.y - yWidth, point3d.z) }, { point: new Point3d(point3d.x + xWidth, point3d.y - yWidth, point3d.z) }, { point: new Point3d(point3d.x + xWidth, point3d.y + yWidth, point3d.z) }, { point: new Point3d(point3d.x - xWidth, point3d.y + yWidth, point3d.z) }];
        var bottom = [{ point: new Point3d(point3d.x - xWidth, point3d.y - yWidth, zMin) }, { point: new Point3d(point3d.x + xWidth, point3d.y - yWidth, zMin) }, { point: new Point3d(point3d.x + xWidth, point3d.y + yWidth, zMin) }, { point: new Point3d(point3d.x - xWidth, point3d.y + yWidth, zMin) }];

        // calculate screen location of the points
        top.forEach(function (obj) {
          obj.screen = me._convert3Dto2D(obj.point);
        });
        bottom.forEach(function (obj) {
          obj.screen = me._convert3Dto2D(obj.point);
        });

        // create five sides, calculate both corner points and center points
        var surfaces = [{ corners: top, center: Point3d.avg(bottom[0].point, bottom[2].point) }, { corners: [top[0], top[1], bottom[1], bottom[0]], center: Point3d.avg(bottom[1].point, bottom[0].point) }, { corners: [top[1], top[2], bottom[2], bottom[1]], center: Point3d.avg(bottom[2].point, bottom[1].point) }, { corners: [top[2], top[3], bottom[3], bottom[2]], center: Point3d.avg(bottom[3].point, bottom[2].point) }, { corners: [top[3], top[0], bottom[0], bottom[3]], center: Point3d.avg(bottom[0].point, bottom[3].point) }];
        point.surfaces = surfaces;

        // calculate the distance of each of the surface centers to the camera
        for (var j = 0; j < surfaces.length; j++) {
          surface = surfaces[j];
          var transCenter = this._convertPointToTranslation(surface.center);
          surface.dist = this.showPerspective ? transCenter.length() : -transCenter.z;
          // TODO: this dept calculation doesn't work 100% of the cases due to perspective,
          //     but the current solution is fast/simple and works in 99.9% of all cases
          //     the issue is visible in example 14, with graph.setCameraPosition({horizontal: 2.97, vertical: 0.5, distance: 0.9})
        }

        // order the surfaces by their (translated) depth
        surfaces.sort(function (a, b) {
          var diff = b.dist - a.dist;
          if (diff) return diff;

          // if equal depth, sort the top surface last
          if (a.corners === top) return 1;
          if (b.corners === top) return -1;

          // both are equal
          return 0;
        });

        // draw the ordered surfaces
        ctx.lineWidth = this._getStrokeWidth(point);
        ctx.strokeStyle = borderColor;
        ctx.fillStyle = color;
        // NOTE: we start at j=2 instead of j=0 as we don't need to draw the two surfaces at the backside
        for (var _j = 2; _j < surfaces.length; _j++) {
          surface = surfaces[_j];
          this._polygon(ctx, surface.corners);
        }
      };

      /**
       * Draw a polygon using the passed points and fill it with the passed style and stroke.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Array.<vis.Point3d>} points      an array of points.
       * @param {string} [fillStyle] the fill style to set
       * @param {string} [strokeStyle] the stroke style to set
       */
      Graph3d.prototype._polygon = function (ctx, points, fillStyle, strokeStyle) {
        if (points.length < 2) {
          return;
        }

        if (fillStyle !== undefined) {
          ctx.fillStyle = fillStyle;
        }
        if (strokeStyle !== undefined) {
          ctx.strokeStyle = strokeStyle;
        }
        ctx.beginPath();
        ctx.moveTo(points[0].screen.x, points[0].screen.y);

        for (var i = 1; i < points.length; ++i) {
          var point = points[i];
          ctx.lineTo(point.screen.x, point.screen.y);
        }

        ctx.closePath();
        ctx.fill();
        ctx.stroke(); // TODO: only draw stroke when strokeWidth > 0
      };

      /**
       * @param {CanvasRenderingContext2D} ctx
       * @param {object} point
       * @param {string} color
       * @param {string} borderColor
       * @param {number} [size=this._dotSize()]
       * @private
       */
      Graph3d.prototype._drawCircle = function (ctx, point, color, borderColor, size) {
        var radius = this._calcRadius(point, size);

        ctx.lineWidth = this._getStrokeWidth(point);
        ctx.strokeStyle = borderColor;
        ctx.fillStyle = color;
        ctx.beginPath();
        ctx.arc(point.screen.x, point.screen.y, radius, 0, Math.PI * 2, true);
        ctx.fill();
        ctx.stroke();
      };

      /**
       * Determine the colors for the 'regular' graph styles.
       *
       * @param {object} point
       * @returns {{fill, border}}
       * @private
       */
      Graph3d.prototype._getColorsRegular = function (point) {
        // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
        var hue = (1 - (point.point.z - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;
        var color = this._hsv2rgb(hue, 1, 1);
        var borderColor = this._hsv2rgb(hue, 1, 0.8);

        return {
          fill: color,
          border: borderColor
        };
      };

      /**
       * Get the colors for the 'color' graph styles.
       * These styles are currently: 'bar-color' and 'dot-color'
       * Color may be set as a string representation of HTML color, like #ff00ff,
       * or calculated from a number, for example, distance from this point
       * The first option is useful when we have some pre-given legend, to which we have to adjust ourselves
       * The second option is useful when we are interested in automatically setting the color, from some value,
       * using some color scale
       * @param {object} point
       * @returns {{fill: *, border: *}}
       * @private
       */
      Graph3d.prototype._getColorsColor = function (point) {
        // calculate the color based on the value
        var color, borderColor;

        if (typeof point.point.value === "string") {
          color = point.point.value;
          borderColor = point.point.value;
        } else {
          var hue = (1 - (point.point.value - this.valueRange.min) * this.scale.value) * 240;
          color = this._hsv2rgb(hue, 1, 1);
          borderColor = this._hsv2rgb(hue, 1, 0.8);
        }
        return {
          fill: color,
          border: borderColor
        };
      };

      /**
       * Get the colors for the 'size' graph styles.
       * These styles are currently: 'bar-size' and 'dot-size'
       *
       * @returns {{fill: *, border: (string|colorOptions.stroke|{string, undefined}|string|colorOptions.stroke|{string}|*)}}
       * @private
       */
      Graph3d.prototype._getColorsSize = function () {
        return {
          fill: this.dataColor.fill,
          border: this.dataColor.stroke
        };
      };

      /**
       * Determine the size of a point on-screen, as determined by the
       * distance to the camera.
       *
       * @param {Object} point
       * @param {number} [size=this._dotSize()] the size that needs to be translated to screen coordinates.
       *             optional; if not passed, use the default point size.
       * @returns {number}
       * @private
       */
      Graph3d.prototype._calcRadius = function (point, size) {
        if (size === undefined) {
          size = this._dotSize();
        }

        var radius;
        if (this.showPerspective) {
          radius = size / -point.trans.z;
        } else {
          radius = size * -(this.eye.z / this.camera.getArmLength());
        }
        if (radius < 0) {
          radius = 0;
        }

        return radius;
      };

      // -----------------------------------------------------------------------------
      // Methods for drawing points per graph style.
      // -----------------------------------------------------------------------------


      /**
       * Draw single datapoint for graph style 'bar'.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Object} point
       * @private
       */
      Graph3d.prototype._redrawBarGraphPoint = function (ctx, point) {
        var xWidth = this.xBarWidth / 2;
        var yWidth = this.yBarWidth / 2;
        var colors = this._getColorsRegular(point);

        this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
      };

      /**
       * Draw single datapoint for graph style 'bar-color'.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Object} point
       * @private
       */
      Graph3d.prototype._redrawBarColorGraphPoint = function (ctx, point) {
        var xWidth = this.xBarWidth / 2;
        var yWidth = this.yBarWidth / 2;
        var colors = this._getColorsColor(point);

        this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
      };

      /**
       * Draw single datapoint for graph style 'bar-size'.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Object} point
       * @private
       */
      Graph3d.prototype._redrawBarSizeGraphPoint = function (ctx, point) {
        // calculate size for the bar
        var fraction = (point.point.value - this.valueRange.min) / this.valueRange.range();
        var xWidth = this.xBarWidth / 2 * (fraction * 0.8 + 0.2);
        var yWidth = this.yBarWidth / 2 * (fraction * 0.8 + 0.2);

        var colors = this._getColorsSize();

        this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
      };

      /**
       * Draw single datapoint for graph style 'dot'.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Object} point
       * @private
       */
      Graph3d.prototype._redrawDotGraphPoint = function (ctx, point) {
        var colors = this._getColorsRegular(point);

        this._drawCircle(ctx, point, colors.fill, colors.border);
      };

      /**
       * Draw single datapoint for graph style 'dot-line'.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Object} point
       * @private
       */
      Graph3d.prototype._redrawDotLineGraphPoint = function (ctx, point) {
        // draw a vertical line from the XY-plane to the graph value
        var from = this._convert3Dto2D(point.bottom);
        ctx.lineWidth = 1;
        this._line(ctx, from, point.screen, this.gridColor);

        this._redrawDotGraphPoint(ctx, point);
      };

      /**
       * Draw single datapoint for graph style 'dot-color'.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Object} point
       * @private
       */
      Graph3d.prototype._redrawDotColorGraphPoint = function (ctx, point) {
        var colors = this._getColorsColor(point);

        this._drawCircle(ctx, point, colors.fill, colors.border);
      };

      /**
       * Draw single datapoint for graph style 'dot-size'.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Object} point
       * @private
       */
      Graph3d.prototype._redrawDotSizeGraphPoint = function (ctx, point) {
        var dotSize = this._dotSize();
        var fraction = (point.point.value - this.valueRange.min) / this.valueRange.range();

        var sizeMin = dotSize * this.dotSizeMinFraction;
        var sizeRange = dotSize * this.dotSizeMaxFraction - sizeMin;
        var size = sizeMin + sizeRange * fraction;

        var colors = this._getColorsSize();

        this._drawCircle(ctx, point, colors.fill, colors.border, size);
      };

      /**
       * Draw single datapoint for graph style 'surface'.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Object} point
       * @private
       */
      Graph3d.prototype._redrawSurfaceGraphPoint = function (ctx, point) {
        var right = point.pointRight;
        var top = point.pointTop;
        var cross = point.pointCross;

        if (point === undefined || right === undefined || top === undefined || cross === undefined) {
          return;
        }

        var topSideVisible = true;
        var fillStyle;
        var strokeStyle;

        if (this.showGrayBottom || this.showShadow) {
          // calculate the cross product of the two vectors from center
          // to left and right, in order to know whether we are looking at the
          // bottom or at the top side. We can also use the cross product
          // for calculating light intensity
          var aDiff = Point3d.subtract(cross.trans, point.trans);
          var bDiff = Point3d.subtract(top.trans, right.trans);
          var crossproduct = Point3d.crossProduct(aDiff, bDiff);
          var len = crossproduct.length();
          // FIXME: there is a bug with determining the surface side (shadow or colored)

          topSideVisible = crossproduct.z > 0;
        }

        if (topSideVisible) {

          // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
          var zAvg = (point.point.z + right.point.z + top.point.z + cross.point.z) / 4;
          var h = (1 - (zAvg - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;
          var s = 1; // saturation
          var v;

          if (this.showShadow) {
            v = Math.min(1 + crossproduct.x / len / 2, 1); // value. TODO: scale
            fillStyle = this._hsv2rgb(h, s, v);
            strokeStyle = fillStyle;
          } else {
            v = 1;
            fillStyle = this._hsv2rgb(h, s, v);
            strokeStyle = this.axisColor; // TODO: should be customizable
          }
        } else {
          fillStyle = 'gray';
          strokeStyle = this.axisColor;
        }

        ctx.lineWidth = this._getStrokeWidth(point);
        // TODO: only draw stroke when strokeWidth > 0

        var points = [point, right, cross, top];
        this._polygon(ctx, points, fillStyle, strokeStyle);
      };

      /**
       * Helper method for _redrawGridGraphPoint()
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Object} from
       * @param {Object} to
       * @private
       */
      Graph3d.prototype._drawGridLine = function (ctx, from, to) {
        if (from === undefined || to === undefined) {
          return;
        }

        // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
        var zAvg = (from.point.z + to.point.z) / 2;
        var h = (1 - (zAvg - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;

        ctx.lineWidth = this._getStrokeWidth(from) * 2;
        ctx.strokeStyle = this._hsv2rgb(h, 1, 1);
        this._line(ctx, from.screen, to.screen);
      };

      /**
       * Draw single datapoint for graph style 'Grid'.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Object} point
       * @private
       */
      Graph3d.prototype._redrawGridGraphPoint = function (ctx, point) {
        this._drawGridLine(ctx, point, point.pointRight);
        this._drawGridLine(ctx, point, point.pointTop);
      };

      /**
       * Draw single datapoint for graph style 'line'.
       *
       * @param {CanvasRenderingContext2D} ctx
       * @param {Object} point
       * @private
       */
      Graph3d.prototype._redrawLineGraphPoint = function (ctx, point) {
        if (point.pointNext === undefined) {
          return;
        }

        ctx.lineWidth = this._getStrokeWidth(point);
        ctx.strokeStyle = this.dataColor.stroke;

        this._line(ctx, point.screen, point.pointNext.screen);
      };

      /**
       * Draw all datapoints for currently selected graph style.
       *
       */
      Graph3d.prototype._redrawDataGraph = function () {
        var ctx = this._getContext();
        var i;

        if (this.dataPoints === undefined || this.dataPoints.length <= 0) return; // TODO: throw exception?

        this._calcTranslations(this.dataPoints);

        for (i = 0; i < this.dataPoints.length; i++) {
          var point = this.dataPoints[i];

          // Using call() ensures that the correct context is used
          this._pointDrawingMethod.call(this, ctx, point);
        }
      };

      // -----------------------------------------------------------------------------
      // End methods for drawing points per graph style.
      // -----------------------------------------------------------------------------

      /**
       * Store startX, startY and startOffset for mouse operations
       *
       * @param {Event}     event     The event that occurred
       */
      Graph3d.prototype._storeMousePosition = function (event) {
        // get mouse position (different code for IE and all other browsers)
        this.startMouseX = getMouseX(event);
        this.startMouseY = getMouseY(event);

        this._startCameraOffset = this.camera.getOffset();
      };

      /**
       * Start a moving operation inside the provided parent element
       * @param {Event}     event     The event that occurred (required for
       *                  retrieving the  mouse position)
       */
      Graph3d.prototype._onMouseDown = function (event) {
        event = event || window.event;

        // check if mouse is still down (may be up when focus is lost for example
        // in an iframe)
        if (this.leftButtonDown) {
          this._onMouseUp(event);
        }

        // only react on left mouse button down
        this.leftButtonDown = event.which ? event.which === 1 : event.button === 1;
        if (!this.leftButtonDown && !this.touchDown) return;

        this._storeMousePosition(event);

        this.startStart = new Date(this.start);
        this.startEnd = new Date(this.end);
        this.startArmRotation = this.camera.getArmRotation();

        this.frame.style.cursor = 'move';

        // add event listeners to handle moving the contents
        // we store the function onmousemove and onmouseup in the graph, so we can
        // remove the eventlisteners lateron in the function mouseUp()
        var me = this;
        this.onmousemove = function (event) {
          me._onMouseMove(event);
        };
        this.onmouseup = function (event) {
          me._onMouseUp(event);
        };
        util.addEventListener(document, 'mousemove', me.onmousemove);
        util.addEventListener(document, 'mouseup', me.onmouseup);
        util.preventDefault(event);
      };

      /**
       * Perform moving operating.
       * This function activated from within the funcion Graph.mouseDown().
       * @param {Event}   event  Well, eehh, the event
       */
      Graph3d.prototype._onMouseMove = function (event) {
        this.moving = true;
        event = event || window.event;

        // calculate change in mouse position
        var diffX = parseFloat(getMouseX(event)) - this.startMouseX;
        var diffY = parseFloat(getMouseY(event)) - this.startMouseY;

        // move with ctrl or rotate by other
        if (event && event.ctrlKey === true) {
          // calculate change in mouse position
          var scaleX = this.frame.clientWidth * 0.5;
          var scaleY = this.frame.clientHeight * 0.5;

          var offXNew = (this._startCameraOffset.x || 0) - diffX / scaleX * this.camera.armLength * 0.8;
          var offYNew = (this._startCameraOffset.y || 0) + diffY / scaleY * this.camera.armLength * 0.8;

          this.camera.setOffset(offXNew, offYNew);
          this._storeMousePosition(event);
        } else {
          var horizontalNew = this.startArmRotation.horizontal + diffX / 200;
          var verticalNew = this.startArmRotation.vertical + diffY / 200;

          var snapAngle = 4; // degrees
          var snapValue = Math.sin(snapAngle / 360 * 2 * Math.PI);

          // snap horizontally to nice angles at 0pi, 0.5pi, 1pi, 1.5pi, etc...
          // the -0.001 is to take care that the vertical axis is always drawn at the left front corner
          if (Math.abs(Math.sin(horizontalNew)) < snapValue) {
            horizontalNew = Math.round(horizontalNew / Math.PI) * Math.PI - 0.001;
          }
          if (Math.abs(Math.cos(horizontalNew)) < snapValue) {
            horizontalNew = (Math.round(horizontalNew / Math.PI - 0.5) + 0.5) * Math.PI - 0.001;
          }

          // snap vertically to nice angles
          if (Math.abs(Math.sin(verticalNew)) < snapValue) {
            verticalNew = Math.round(verticalNew / Math.PI) * Math.PI;
          }
          if (Math.abs(Math.cos(verticalNew)) < snapValue) {
            verticalNew = (Math.round(verticalNew / Math.PI - 0.5) + 0.5) * Math.PI;
          }
          this.camera.setArmRotation(horizontalNew, verticalNew);
        }

        this.redraw();

        // fire a cameraPositionChange event
        var parameters = this.getCameraPosition();
        this.emit('cameraPositionChange', parameters);

        util.preventDefault(event);
      };

      /**
       * Stop moving operating.
       * This function activated from within the funcion Graph.mouseDown().
       * @param {Event}  event   The event
       */
      Graph3d.prototype._onMouseUp = function (event) {
        this.frame.style.cursor = 'auto';
        this.leftButtonDown = false;

        // remove event listeners here
        util.removeEventListener(document, 'mousemove', this.onmousemove);
        util.removeEventListener(document, 'mouseup', this.onmouseup);
        util.preventDefault(event);
      };

      /**
       * @param {Event}  event   The event
       */
      Graph3d.prototype._onClick = function (event) {
        if (!this.onclick_callback) return;
        if (!this.moving) {
          var boundingRect = this.frame.getBoundingClientRect();
          var mouseX = getMouseX(event) - boundingRect.left;
          var mouseY = getMouseY(event) - boundingRect.top;
          var dataPoint = this._dataPointFromXY(mouseX, mouseY);
          if (dataPoint) this.onclick_callback(dataPoint.point.data);
        } else {
          // disable onclick callback, if it came immediately after rotate/pan
          this.moving = false;
        }
        util.preventDefault(event);
      };

      /**
       * After having moved the mouse, a tooltip should pop up when the mouse is resting on a data point
       * @param {Event}  event   A mouse move event
       */
      Graph3d.prototype._onTooltip = function (event) {
        var delay = 300; // ms
        var boundingRect = this.frame.getBoundingClientRect();
        var mouseX = getMouseX(event) - boundingRect.left;
        var mouseY = getMouseY(event) - boundingRect.top;

        if (!this.showTooltip) {
          return;
        }

        if (this.tooltipTimeout) {
          clearTimeout(this.tooltipTimeout);
        }

        // (delayed) display of a tooltip only if no mouse button is down
        if (this.leftButtonDown) {
          this._hideTooltip();
          return;
        }

        if (this.tooltip && this.tooltip.dataPoint) {
          // tooltip is currently visible
          var dataPoint = this._dataPointFromXY(mouseX, mouseY);
          if (dataPoint !== this.tooltip.dataPoint) {
            // datapoint changed
            if (dataPoint) {
              this._showTooltip(dataPoint);
            } else {
              this._hideTooltip();
            }
          }
        } else {
          // tooltip is currently not visible
          var me = this;
          this.tooltipTimeout = setTimeout(function () {
            me.tooltipTimeout = null;

            // show a tooltip if we have a data point
            var dataPoint = me._dataPointFromXY(mouseX, mouseY);
            if (dataPoint) {
              me._showTooltip(dataPoint);
            }
          }, delay);
        }
      };

      /**
       * Event handler for touchstart event on mobile devices
       * @param {Event}  event   The event
       */
      Graph3d.prototype._onTouchStart = function (event) {
        this.touchDown = true;

        var me = this;
        this.ontouchmove = function (event) {
          me._onTouchMove(event);
        };
        this.ontouchend = function (event) {
          me._onTouchEnd(event);
        };
        util.addEventListener(document, 'touchmove', me.ontouchmove);
        util.addEventListener(document, 'touchend', me.ontouchend);

        this._onMouseDown(event);
      };

      /**
       * Event handler for touchmove event on mobile devices
       * @param {Event}  event   The event
       */
      Graph3d.prototype._onTouchMove = function (event) {
        this._onMouseMove(event);
      };

      /**
       * Event handler for touchend event on mobile devices
       * @param {Event}  event   The event
       */
      Graph3d.prototype._onTouchEnd = function (event) {
        this.touchDown = false;

        util.removeEventListener(document, 'touchmove', this.ontouchmove);
        util.removeEventListener(document, 'touchend', this.ontouchend);

        this._onMouseUp(event);
      };

      /**
       * Event handler for mouse wheel event, used to zoom the graph
       * Code from http://adomas.org/javascript-mouse-wheel/
       * @param {Event}  event   The event
       */
      Graph3d.prototype._onWheel = function (event) {
        if (!event) /* For IE. */
          event = window.event;

        // retrieve delta
        var delta = 0;
        if (event.wheelDelta) {
          /* IE/Opera. */
          delta = event.wheelDelta / 120;
        } else if (event.detail) {
          /* Mozilla case. */
          // In Mozilla, sign of delta is different than in IE.
          // Also, delta is multiple of 3.
          delta = -event.detail / 3;
        }

        // If delta is nonzero, handle it.
        // Basically, delta is now positive if wheel was scrolled up,
        // and negative, if wheel was scrolled down.
        if (delta) {
          var oldLength = this.camera.getArmLength();
          var newLength = oldLength * (1 - delta / 10);

          this.camera.setArmLength(newLength);
          this.redraw();

          this._hideTooltip();
        }

        // fire a cameraPositionChange event
        var parameters = this.getCameraPosition();
        this.emit('cameraPositionChange', parameters);

        // Prevent default actions caused by mouse wheel.
        // That might be ugly, but we handle scrolls somehow
        // anyway, so don't bother here..
        util.preventDefault(event);
      };

      /**
       * Test whether a point lies inside given 2D triangle
       *
       * @param   {vis.Point2d}   point
       * @param   {vis.Point2d[]} triangle
       * @returns {boolean}   true if given point lies inside or on the edge of the
       *                      triangle, false otherwise
       * @private
       */
      Graph3d.prototype._insideTriangle = function (point, triangle) {
        var a = triangle[0],
            b = triangle[1],
            c = triangle[2];

        /**
         *
         * @param {number} x
         * @returns {number}
         */
        function sign(x) {
          return x > 0 ? 1 : x < 0 ? -1 : 0;
        }

        var as = sign((b.x - a.x) * (point.y - a.y) - (b.y - a.y) * (point.x - a.x));
        var bs = sign((c.x - b.x) * (point.y - b.y) - (c.y - b.y) * (point.x - b.x));
        var cs = sign((a.x - c.x) * (point.y - c.y) - (a.y - c.y) * (point.x - c.x));

        // each of the three signs must be either equal to each other or zero
        return (as == 0 || bs == 0 || as == bs) && (bs == 0 || cs == 0 || bs == cs) && (as == 0 || cs == 0 || as == cs);
      };

      /**
       * Find a data point close to given screen position (x, y)
       *
       * @param   {number} x
       * @param   {number} y
       * @returns {Object | null} The closest data point or null if not close to any
       *                          data point
       * @private
       */
      Graph3d.prototype._dataPointFromXY = function (x, y) {
        var i,
            distMax = 100,

        // px
        dataPoint = null,
            closestDataPoint = null,
            closestDist = null,
            center = new Point2d(x, y);

        if (this.style === Graph3d.STYLE.BAR || this.style === Graph3d.STYLE.BARCOLOR || this.style === Graph3d.STYLE.BARSIZE) {
          // the data points are ordered from far away to closest
          for (i = this.dataPoints.length - 1; i >= 0; i--) {
            dataPoint = this.dataPoints[i];
            var surfaces = dataPoint.surfaces;
            if (surfaces) {
              for (var s = surfaces.length - 1; s >= 0; s--) {
                // split each surface in two triangles, and see if the center point is inside one of these
                var surface = surfaces[s];
                var corners = surface.corners;
                var triangle1 = [corners[0].screen, corners[1].screen, corners[2].screen];
                var triangle2 = [corners[2].screen, corners[3].screen, corners[0].screen];
                if (this._insideTriangle(center, triangle1) || this._insideTriangle(center, triangle2)) {
                  // return immediately at the first hit
                  return dataPoint;
                }
              }
            }
          }
        } else {
          // find the closest data point, using distance to the center of the point on 2d screen
          for (i = 0; i < this.dataPoints.length; i++) {
            dataPoint = this.dataPoints[i];
            var point = dataPoint.screen;
            if (point) {
              var distX = Math.abs(x - point.x);
              var distY = Math.abs(y - point.y);
              var dist = Math.sqrt(distX * distX + distY * distY);

              if ((closestDist === null || dist < closestDist) && dist < distMax) {
                closestDist = dist;
                closestDataPoint = dataPoint;
              }
            }
          }
        }

        return closestDataPoint;
      };

      /**
       * Determine if the given style has bars
       *
       * @param   {number} style the style to check
       * @returns {boolean} true if bar style, false otherwise
       */
      Graph3d.prototype.hasBars = function (style) {
        return style == Graph3d.STYLE.BAR || style == Graph3d.STYLE.BARCOLOR || style == Graph3d.STYLE.BARSIZE;
      };

      /**
       * Display a tooltip for given data point
       * @param {Object} dataPoint
       * @private
       */
      Graph3d.prototype._showTooltip = function (dataPoint) {
        var content, line, dot;

        if (!this.tooltip) {
          content = document.createElement('div');
          (0, _assign2['default'])(content.style, {}, this.tooltipStyle.content);
          content.style.position = 'absolute';

          line = document.createElement('div');
          (0, _assign2['default'])(line.style, {}, this.tooltipStyle.line);
          line.style.position = 'absolute';

          dot = document.createElement('div');
          (0, _assign2['default'])(dot.style, {}, this.tooltipStyle.dot);
          dot.style.position = 'absolute';

          this.tooltip = {
            dataPoint: null,
            dom: {
              content: content,
              line: line,
              dot: dot
            }
          };
        } else {
          content = this.tooltip.dom.content;
          line = this.tooltip.dom.line;
          dot = this.tooltip.dom.dot;
        }

        this._hideTooltip();

        this.tooltip.dataPoint = dataPoint;
        if (typeof this.showTooltip === 'function') {
          content.innerHTML = this.showTooltip(dataPoint.point);
        } else {
          content.innerHTML = '<table>' + '<tr><td>' + this.xLabel + ':</td><td>' + dataPoint.point.x + '</td></tr>' + '<tr><td>' + this.yLabel + ':</td><td>' + dataPoint.point.y + '</td></tr>' + '<tr><td>' + this.zLabel + ':</td><td>' + dataPoint.point.z + '</td></tr>' + '</table>';
        }

        content.style.left = '0';
        content.style.top = '0';
        this.frame.appendChild(content);
        this.frame.appendChild(line);
        this.frame.appendChild(dot);

        // calculate sizes
        var contentWidth = content.offsetWidth;
        var contentHeight = content.offsetHeight;
        var lineHeight = line.offsetHeight;
        var dotWidth = dot.offsetWidth;
        var dotHeight = dot.offsetHeight;

        var left = dataPoint.screen.x - contentWidth / 2;
        left = Math.min(Math.max(left, 10), this.frame.clientWidth - 10 - contentWidth);

        line.style.left = dataPoint.screen.x + 'px';
        line.style.top = dataPoint.screen.y - lineHeight + 'px';
        content.style.left = left + 'px';
        content.style.top = dataPoint.screen.y - lineHeight - contentHeight + 'px';
        dot.style.left = dataPoint.screen.x - dotWidth / 2 + 'px';
        dot.style.top = dataPoint.screen.y - dotHeight / 2 + 'px';
      };

      /**
       * Hide the tooltip when displayed
       * @private
       */
      Graph3d.prototype._hideTooltip = function () {
        if (this.tooltip) {
          this.tooltip.dataPoint = null;

          for (var prop in this.tooltip.dom) {
            if (this.tooltip.dom.hasOwnProperty(prop)) {
              var elem = this.tooltip.dom[prop];
              if (elem && elem.parentNode) {
                elem.parentNode.removeChild(elem);
              }
            }
          }
        }
      };

      /**--------------------------------------------------------------------------**/

      /**
       * Get the horizontal mouse position from a mouse event
       *
       * @param   {Event}  event
       * @returns {number} mouse x
       */
      function getMouseX(event) {
        if ('clientX' in event) return event.clientX;
        return event.targetTouches[0] && event.targetTouches[0].clientX || 0;
      }

      /**
       * Get the vertical mouse position from a mouse event
       *
       * @param   {Event}  event
       * @returns {number} mouse y
       */
      function getMouseY(event) {
        if ('clientY' in event) return event.clientY;
        return event.targetTouches[0] && event.targetTouches[0].clientY || 0;
      }

      // -----------------------------------------------------------------------------
      //  Public methods for specific settings
      // -----------------------------------------------------------------------------

      /**
       * Set the rotation and distance of the camera
       *
       * @param {Object}  pos            An object with the camera position
       * @param {number} [pos.horizontal] The horizontal rotation, between 0 and 2*PI.
       *                                 Optional, can be left undefined.
       * @param {number} [pos.vertical]  The vertical rotation, between 0 and 0.5*PI.
       *                                 if vertical=0.5*PI, the graph is shown from
       *                                 the top. Optional, can be left undefined.
       * @param {number} [pos.distance]  The (normalized) distance of the camera to the
       *                                 center of the graph, a value between 0.71 and
       *                                 5.0. Optional, can be left undefined.
       */
      Graph3d.prototype.setCameraPosition = function (pos) {
        Settings.setCameraPosition(pos, this);
        this.redraw();
      };

      /**
       * Set a new size for the graph
       *
       * @param {string} width  Width in pixels or percentage (for example '800px'
       *                        or '50%')
       * @param {string} height Height in pixels or percentage  (for example '400px'
       *                        or '30%')
       */
      Graph3d.prototype.setSize = function (width, height) {
        this._setSize(width, height);
        this.redraw();
      };

      // -----------------------------------------------------------------------------
      //  End public methods for specific settings
      // -----------------------------------------------------------------------------


      module.exports = Graph3d;

      /***/
    },
    /* 162 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(163);
      module.exports = __webpack_require__(7).Object.assign;

      /***/
    },
    /* 163 */
    /***/function (module, exports, __webpack_require__) {

      // 19.1.3.1 Object.assign(target, source)
      var $export = __webpack_require__(17);

      $export($export.S + $export.F, 'Object', { assign: __webpack_require__(164) });

      /***/
    },
    /* 164 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // 19.1.2.1 Object.assign(target, source, ...)

      var getKeys = __webpack_require__(33);
      var gOPS = __webpack_require__(63);
      var pIE = __webpack_require__(42);
      var toObject = __webpack_require__(41);
      var IObject = __webpack_require__(78);
      var $assign = _assign4['default'];

      // should work with symbols and should have deterministic property order (V8 bug)
      module.exports = !$assign || __webpack_require__(28)(function () {
        var A = {};
        var B = {};
        // eslint-disable-next-line no-undef
        var S = (0, _symbol4['default'])();
        var K = 'abcdefghijklmnopqrst';
        A[S] = 7;
        K.split('').forEach(function (k) {
          B[k] = k;
        });
        return $assign({}, A)[S] != 7 || (0, _keys4['default'])($assign({}, B)).join('') != K;
      }) ? function assign(target, source) {
        // eslint-disable-line no-unused-vars
        var T = toObject(target);
        var aLen = arguments.length;
        var index = 1;
        var getSymbols = gOPS.f;
        var isEnum = pIE.f;
        while (aLen > index) {
          var S = IObject(arguments[index++]);
          var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
          var length = keys.length;
          var j = 0;
          var key;
          while (length > j) {
            if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
          }
        }return T;
      } : $assign;

      /***/
    },
    /* 165 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = { "default": __webpack_require__(166), __esModule: true };

      /***/
    },
    /* 166 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(167);
      module.exports = __webpack_require__(7).Math.sign;

      /***/
    },
    /* 167 */
    /***/function (module, exports, __webpack_require__) {

      // 20.2.2.28 Math.sign(x)
      var $export = __webpack_require__(17);

      $export($export.S, 'Math', { sign: __webpack_require__(168) });

      /***/
    },
    /* 168 */
    /***/function (module, exports) {

      // 20.2.2.28 Math.sign(x)
      module.exports = _sign4['default'] || function sign(x) {
        // eslint-disable-next-line no-self-compare
        return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
      };

      /***/
    },
    /* 169 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = { "default": __webpack_require__(170), __esModule: true };

      /***/
    },
    /* 170 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(171);
      var $Object = __webpack_require__(7).Object;
      module.exports = function defineProperty(it, key, desc) {
        return $Object.defineProperty(it, key, desc);
      };

      /***/
    },
    /* 171 */
    /***/function (module, exports, __webpack_require__) {

      var $export = __webpack_require__(17);
      // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
      $export($export.S + $export.F * !__webpack_require__(21), 'Object', { defineProperty: __webpack_require__(20).f });

      /***/
    },
    /* 172 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /**
       * This object contains all possible options. It will check if the types are correct, if required if the option is one
       * of the allowed values.
       *
       * __any__ means that the name of the property does not matter.
       * __type__ is a required field for all objects and contains the allowed types of all objects
       */
      var string = 'string';
      var bool = 'boolean';
      var number = 'number';
      var object = 'object'; // should only be in a __type__ property
      // Following not used here, but useful for reference
      //let array    = 'array';
      //let dom      = 'dom';
      //let any      = 'any';


      var colorOptions = {
        fill: { string: string },
        stroke: { string: string },
        strokeWidth: { number: number },
        __type__: { string: string, object: object, 'undefined': 'undefined' }
      };

      /**
       * Order attempted to be alphabetical.
       *   - x/y/z-prefixes ignored in sorting
       *   - __type__ always at end
       *   - globals at end
       */
      var allOptions = {
        animationAutoStart: { boolean: bool, 'undefined': 'undefined' },
        animationInterval: { number: number },
        animationPreload: { boolean: bool },
        axisColor: { string: string },
        backgroundColor: colorOptions,
        xBarWidth: { number: number, 'undefined': 'undefined' },
        yBarWidth: { number: number, 'undefined': 'undefined' },
        cameraPosition: {
          distance: { number: number },
          horizontal: { number: number },
          vertical: { number: number },
          __type__: { object: object }
        },
        xCenter: { string: string },
        yCenter: { string: string },
        dataColor: colorOptions,
        dotSizeMinFraction: { number: number },
        dotSizeMaxFraction: { number: number },
        dotSizeRatio: { number: number },
        filterLabel: { string: string },
        gridColor: { string: string },
        onclick: { 'function': 'function' },
        keepAspectRatio: { boolean: bool },
        xLabel: { string: string },
        yLabel: { string: string },
        zLabel: { string: string },
        legendLabel: { string: string },
        xMin: { number: number, 'undefined': 'undefined' },
        yMin: { number: number, 'undefined': 'undefined' },
        zMin: { number: number, 'undefined': 'undefined' },
        xMax: { number: number, 'undefined': 'undefined' },
        yMax: { number: number, 'undefined': 'undefined' },
        zMax: { number: number, 'undefined': 'undefined' },
        showAnimationControls: { boolean: bool, 'undefined': 'undefined' },
        showGrid: { boolean: bool },
        showLegend: { boolean: bool, 'undefined': 'undefined' },
        showPerspective: { boolean: bool },
        showShadow: { boolean: bool },
        showXAxis: { boolean: bool },
        showYAxis: { boolean: bool },
        showZAxis: { boolean: bool },
        xStep: { number: number, 'undefined': 'undefined' },
        yStep: { number: number, 'undefined': 'undefined' },
        zStep: { number: number, 'undefined': 'undefined' },
        style: {
          number: number, // TODO: either Graph3d.DEFAULT has string, or number allowed in documentation
          string: ['bar', 'bar-color', 'bar-size', 'dot', 'dot-line', 'dot-color', 'dot-size', 'line', 'grid', 'surface']
        },
        tooltip: { boolean: bool, 'function': 'function' },
        tooltipStyle: {
          content: {
            color: { string: string },
            background: { string: string },
            border: { string: string },
            borderRadius: { string: string },
            boxShadow: { string: string },
            padding: { string: string },
            __type__: { object: object }
          },
          line: {
            borderLeft: { string: string },
            height: { string: string },
            width: { string: string },
            __type__: { object: object }
          },
          dot: {
            border: { string: string },
            borderRadius: { string: string },
            height: { string: string },
            width: { string: string },
            __type__: { object: object }
          },
          __type__: { object: object }
        },
        xValueLabel: { 'function': 'function' },
        yValueLabel: { 'function': 'function' },
        zValueLabel: { 'function': 'function' },
        valueMax: { number: number, 'undefined': 'undefined' },
        valueMin: { number: number, 'undefined': 'undefined' },
        verticalRatio: { number: number },

        //globals :
        height: { string: string },
        width: { string: string },
        __type__: { object: object }
      };

      exports.allOptions = allOptions;

      /***/
    },
    /* 173 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var DataSet = __webpack_require__(11);
      var DataView = __webpack_require__(12);
      var Range = __webpack_require__(174);
      var Filter = __webpack_require__(96);
      var Settings = __webpack_require__(94);
      var Point3d = __webpack_require__(34);

      /**
       * Creates a container for all data of one specific 3D-graph.
       *
       * On construction, the container is totally empty; the data
       * needs to be initialized with method initializeData().
       * Failure to do so will result in the following exception begin thrown
       * on instantiation of Graph3D:
       *
       *     Error: Array, DataSet, or DataView expected
       *
       * @constructor DataGroup
       */
      function DataGroup() {
        this.dataTable = null; // The original data table
      }

      /**
       * Initializes the instance from the passed data.
       *
       * Calculates minimum and maximum values and column index values.
       *
       * The graph3d instance is used internally to access the settings for
       * the given instance.
       * TODO: Pass settings only instead.
       *
       * @param {vis.Graph3d}  graph3d Reference to the calling Graph3D instance.
       * @param {Array | DataSet | DataView} rawData The data containing the items for
       *                                             the Graph.
       * @param {number}   style   Style Number
       * @returns {Array.<Object>}
       */
      DataGroup.prototype.initializeData = function (graph3d, rawData, style) {
        if (rawData === undefined) return;

        if (Array.isArray(rawData)) {
          rawData = new DataSet(rawData);
        }

        var data;
        if (rawData instanceof DataSet || rawData instanceof DataView) {
          data = rawData.get();
        } else {
          throw new Error('Array, DataSet, or DataView expected');
        }

        if (data.length == 0) return;

        this.style = style;

        // unsubscribe from the dataTable
        if (this.dataSet) {
          this.dataSet.off('*', this._onChange);
        }

        this.dataSet = rawData;
        this.dataTable = data;

        // subscribe to changes in the dataset
        var me = this;
        this._onChange = function () {
          graph3d.setData(me.dataSet);
        };
        this.dataSet.on('*', this._onChange);

        // determine the location of x,y,z,value,filter columns
        this.colX = 'x';
        this.colY = 'y';
        this.colZ = 'z';

        var withBars = graph3d.hasBars(style);

        // determine barWidth from data
        if (withBars) {
          if (graph3d.defaultXBarWidth !== undefined) {
            this.xBarWidth = graph3d.defaultXBarWidth;
          } else {
            this.xBarWidth = this.getSmallestDifference(data, this.colX) || 1;
          }

          if (graph3d.defaultYBarWidth !== undefined) {
            this.yBarWidth = graph3d.defaultYBarWidth;
          } else {
            this.yBarWidth = this.getSmallestDifference(data, this.colY) || 1;
          }
        }

        // calculate minima and maxima
        this._initializeRange(data, this.colX, graph3d, withBars);
        this._initializeRange(data, this.colY, graph3d, withBars);
        this._initializeRange(data, this.colZ, graph3d, false);

        if (data[0].hasOwnProperty('style')) {
          this.colValue = 'style';
          var valueRange = this.getColumnRange(data, this.colValue);
          this._setRangeDefaults(valueRange, graph3d.defaultValueMin, graph3d.defaultValueMax);
          this.valueRange = valueRange;
        }

        // Initialize data filter if a filter column is provided
        var table = this.getDataTable();
        if (table[0].hasOwnProperty('filter')) {
          if (this.dataFilter === undefined) {
            this.dataFilter = new Filter(this, 'filter', graph3d);
            this.dataFilter.setOnLoadCallback(function () {
              graph3d.redraw();
            });
          }
        }

        var dataPoints;
        if (this.dataFilter) {
          // apply filtering
          dataPoints = this.dataFilter._getDataPoints();
        } else {
          // no filtering. load all data
          dataPoints = this._getDataPoints(this.getDataTable());
        }
        return dataPoints;
      };

      /**
       * Collect the range settings for the given data column.
       *
       * This internal method is intended to make the range 
       * initalization more generic.
       *
       * TODO: if/when combined settings per axis defined, get rid of this.
       *
       * @private
       *
       * @param {'x'|'y'|'z'} column  The data column to process
       * @param {vis.Graph3d} graph3d Reference to the calling Graph3D instance;
       *                              required for access to settings
       * @returns {Object}
       */
      DataGroup.prototype._collectRangeSettings = function (column, graph3d) {
        var index = ['x', 'y', 'z'].indexOf(column);

        if (index == -1) {
          throw new Error('Column \'' + column + '\' invalid');
        }

        var upper = column.toUpperCase();

        return {
          barWidth: this[column + 'BarWidth'],
          min: graph3d['default' + upper + 'Min'],
          max: graph3d['default' + upper + 'Max'],
          step: graph3d['default' + upper + 'Step'],
          range_label: column + 'Range', // Name of instance field to write to
          step_label: column + 'Step' // Name of instance field to write to
        };
      };

      /**
       * Initializes the settings per given column.
       *
       * TODO: if/when combined settings per axis defined, rewrite this.
       *
       * @private
       *
       * @param {DataSet | DataView} data     The data containing the items for the Graph
       * @param {'x'|'y'|'z'}        column   The data column to process
       * @param {vis.Graph3d}        graph3d  Reference to the calling Graph3D instance;
       *                                      required for access to settings
       * @param {boolean}            withBars True if initializing for bar graph
       */
      DataGroup.prototype._initializeRange = function (data, column, graph3d, withBars) {
        var NUMSTEPS = 5;
        var settings = this._collectRangeSettings(column, graph3d);

        var range = this.getColumnRange(data, column);
        if (withBars && column != 'z') {
          // Safeguard for 'z'; it doesn't have a bar width
          range.expand(settings.barWidth / 2);
        }

        this._setRangeDefaults(range, settings.min, settings.max);
        this[settings.range_label] = range;
        this[settings.step_label] = settings.step !== undefined ? settings.step : range.range() / NUMSTEPS;
      };

      /**
       * Creates a list with all the different values in the data for the given column.
       *
       * If no data passed, use the internal data of this instance.
       *
       * @param {'x'|'y'|'z'}                column The data column to process
       * @param {DataSet|DataView|undefined} data   The data containing the items for the Graph
       *
       * @returns {Array} All distinct values in the given column data, sorted ascending.
       */
      DataGroup.prototype.getDistinctValues = function (column, data) {
        if (data === undefined) {
          data = this.dataTable;
        }

        var values = [];

        for (var i = 0; i < data.length; i++) {
          var value = data[i][column] || 0;
          if (values.indexOf(value) === -1) {
            values.push(value);
          }
        }

        return values.sort(function (a, b) {
          return a - b;
        });
      };

      /**
       * Determine the smallest difference between the values for given
       * column in the passed data set.
       *
       * @param {DataSet|DataView|undefined} data   The data containing the items for the Graph
       * @param {'x'|'y'|'z'}                column The data column to process
       *
       * @returns {number|null} Smallest difference value or
       *                        null, if it can't be determined.
       */
      DataGroup.prototype.getSmallestDifference = function (data, column) {
        var values = this.getDistinctValues(data, column);

        // Get all the distinct diffs
        // Array values is assumed to be sorted here
        var smallest_diff = null;

        for (var i = 1; i < values.length; i++) {
          var diff = values[i] - values[i - 1];

          if (smallest_diff == null || smallest_diff > diff) {
            smallest_diff = diff;
          }
        }

        return smallest_diff;
      };

      /**
       * Get the absolute min/max values for the passed data column.
       *
       * @param {DataSet|DataView|undefined} data   The data containing the items for the Graph
       * @param {'x'|'y'|'z'}                column The data column to process
       *
       * @returns {Range} A Range instance with min/max members properly set.
       */
      DataGroup.prototype.getColumnRange = function (data, column) {
        var range = new Range();

        // Adjust the range so that it covers all values in the passed data elements.
        for (var i = 0; i < data.length; i++) {
          var item = data[i][column];
          range.adjust(item);
        }

        return range;
      };

      /**
       * Determines the number of rows in the current data.
       *
       * @returns {number}
       */
      DataGroup.prototype.getNumberOfRows = function () {
        return this.dataTable.length;
      };

      /**
       * Set default values for range
       *
       * The default values override the range values, if defined.
       *
       * Because it's possible that only defaultMin or defaultMax is set, it's better
       * to pass in a range already set with the min/max set from the data. Otherwise,
       * it's quite hard to process the min/max properly.
       *
       * @param {vis.Range} range
       * @param {number} [defaultMin=range.min]
       * @param {number} [defaultMax=range.max]
       * @private
       */
      DataGroup.prototype._setRangeDefaults = function (range, defaultMin, defaultMax) {
        if (defaultMin !== undefined) {
          range.min = defaultMin;
        }

        if (defaultMax !== undefined) {
          range.max = defaultMax;
        }

        // This is the original way that the default min/max values were adjusted.
        // TODO: Perhaps it's better if an error is thrown if the values do not agree.
        //       But this will change the behaviour.
        if (range.max <= range.min) range.max = range.min + 1;
      };

      DataGroup.prototype.getDataTable = function () {
        return this.dataTable;
      };

      DataGroup.prototype.getDataSet = function () {
        return this.dataSet;
      };

      /**
       * Return all data values as a list of Point3d objects
       * @param {Array.<Object>} data
       * @returns {Array.<Object>}
       */
      DataGroup.prototype.getDataPoints = function (data) {
        var dataPoints = [];

        for (var i = 0; i < data.length; i++) {
          var point = new Point3d();
          point.x = data[i][this.colX] || 0;
          point.y = data[i][this.colY] || 0;
          point.z = data[i][this.colZ] || 0;
          point.data = data[i];

          if (this.colValue !== undefined) {
            point.value = data[i][this.colValue] || 0;
          }

          var obj = {};
          obj.point = point;
          obj.bottom = new Point3d(point.x, point.y, this.zRange.min);
          obj.trans = undefined;
          obj.screen = undefined;

          dataPoints.push(obj);
        }

        return dataPoints;
      };

      /**
       * Copy all values from the data table to a matrix.
       *
       * The provided values are supposed to form a grid of (x,y) positions.
       * @param {Array.<Object>} data
       * @returns {Array.<Object>}
       * @private
       */
      DataGroup.prototype.initDataAsMatrix = function (data) {
        // TODO: store the created matrix dataPoints in the filters instead of
        //       reloading each time.
        var x, y, i, obj;

        // create two lists with all present x and y values
        var dataX = this.getDistinctValues(this.colX, data);
        var dataY = this.getDistinctValues(this.colY, data);

        var dataPoints = this.getDataPoints(data);

        // create a grid, a 2d matrix, with all values.
        var dataMatrix = []; // temporary data matrix
        for (i = 0; i < dataPoints.length; i++) {
          obj = dataPoints[i];

          // TODO: implement Array().indexOf() for Internet Explorer
          var xIndex = dataX.indexOf(obj.point.x);
          var yIndex = dataY.indexOf(obj.point.y);

          if (dataMatrix[xIndex] === undefined) {
            dataMatrix[xIndex] = [];
          }

          dataMatrix[xIndex][yIndex] = obj;
        }

        // fill in the pointers to the neighbors.
        for (x = 0; x < dataMatrix.length; x++) {
          for (y = 0; y < dataMatrix[x].length; y++) {
            if (dataMatrix[x][y]) {
              dataMatrix[x][y].pointRight = x < dataMatrix.length - 1 ? dataMatrix[x + 1][y] : undefined;
              dataMatrix[x][y].pointTop = y < dataMatrix[x].length - 1 ? dataMatrix[x][y + 1] : undefined;
              dataMatrix[x][y].pointCross = x < dataMatrix.length - 1 && y < dataMatrix[x].length - 1 ? dataMatrix[x + 1][y + 1] : undefined;
            }
          }
        }

        return dataPoints;
      };

      /**
       * Return common information, if present
       *
       * @returns {string}
       */
      DataGroup.prototype.getInfo = function () {
        var dataFilter = this.dataFilter;
        if (!dataFilter) return undefined;

        return dataFilter.getLabel() + ': ' + dataFilter.getSelectedValue();
      };

      /**
       * Reload the data
       */
      DataGroup.prototype.reload = function () {
        if (this.dataTable) {
          this.setData(this.dataTable);
        }
      };

      /**
       * Filter the data based on the current filter
       *
       * @param   {Array} data
       * @returns {Array} dataPoints Array with point objects which can be drawn on
       *                             screen
       */
      DataGroup.prototype._getDataPoints = function (data) {
        var dataPoints = [];

        if (this.style === Settings.STYLE.GRID || this.style === Settings.STYLE.SURFACE) {
          dataPoints = this.initDataAsMatrix(data);
        } else {
          // 'dot', 'dot-line', etc.
          this._checkValueField(data);
          dataPoints = this.getDataPoints(data);

          if (this.style === Settings.STYLE.LINE) {
            // Add next member points for line drawing
            for (var i = 0; i < dataPoints.length; i++) {
              if (i > 0) {
                dataPoints[i - 1].pointNext = dataPoints[i];
              }
            }
          }
        }

        return dataPoints;
      };

      /**
       * Check if the state is consistent for the use of the value field.
       *
       * Throws if a problem is detected.
       *
       * @param {Array.<Object>} data
       * @private
       */
      DataGroup.prototype._checkValueField = function (data) {

        var hasValueField = this.style === Settings.STYLE.BARCOLOR || this.style === Settings.STYLE.BARSIZE || this.style === Settings.STYLE.DOTCOLOR || this.style === Settings.STYLE.DOTSIZE;

        if (!hasValueField) {
          return; // No need to check further
        }

        // Following field must be present for the current graph style
        if (this.colValue === undefined) {
          throw new Error('Expected data to have ' + ' field \'style\' ' + ' for graph style \'' + this.style + '\'');
        }

        // The data must also contain this field.
        // Note that only first data element is checked.
        if (data[0][this.colValue] === undefined) {
          throw new Error('Expected data to have ' + ' field \'' + this.colValue + '\' ' + ' for graph style \'' + this.style + '\'');
        }
      };

      module.exports = DataGroup;

      /***/
    },
    /* 174 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       * @prototype Range
       *
       * Helper class to make working with related min and max values easier.
       *
       * The range is inclusive; a given value is considered part of the range if:
       *
       *    this.min <= value <= this.max
       */

      function Range() {
        this.min = undefined;
        this.max = undefined;
      }

      /**
       * Adjust the range so that the passed value fits in it.
       *
       * If the value is outside of the current extremes, adjust
       * the min or max so that the value is within the range.
       *
       * @param {number} value Numeric value to fit in range
       */
      Range.prototype.adjust = function (value) {
        if (value === undefined) return;

        if (this.min === undefined || this.min > value) {
          this.min = value;
        }

        if (this.max === undefined || this.max < value) {
          this.max = value;
        }
      };

      /**
       * Adjust the current range so that the passed range fits in it.
       *
       * @param {Range} range Range instance to fit in current instance
       */
      Range.prototype.combine = function (range) {
        this.add(range.min);
        this.add(range.max);
      };

      /**
       * Expand the range by the given value
       *
       * min will be lowered by given value;
       * max will be raised by given value
       *
       * Shrinking by passing a negative value is allowed.
       *
       * @param {number} val Amount by which to expand or shrink current range with
       */
      Range.prototype.expand = function (val) {
        if (val === undefined) {
          return;
        }

        var newMin = this.min - val;
        var newMax = this.max + val;

        // Note that following allows newMin === newMax.
        // This should be OK, since method expand() allows this also.
        if (newMin > newMax) {
          throw new Error('Passed expansion value makes range invalid');
        }

        this.min = newMin;
        this.max = newMax;
      };

      /**
       * Determine the full range width of current instance.
       *
       * @returns {num} The calculated width of this range
       */
      Range.prototype.range = function () {
        return this.max - this.min;
      };

      /**
       * Determine the central point of current instance.
       *
       * @returns {number} the value in the middle of min and max
       */
      Range.prototype.center = function () {
        return (this.min + this.max) / 2;
      };

      module.exports = Range;

      /***/
    },
    /* 175 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

      (function (factory) {
        if (true) {
          // AMD. Register as an anonymous module.
          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if ((typeof exports === 'undefined' ? 'undefined' : (0, _typeof6['default'])(exports)) === 'object') {
          // Node. Does not work with strict CommonJS, but
          // only CommonJS-like environments that support module.exports,
          // like Node.
          module.exports = factory();
        } else {
          // Browser globals (root is window)
          window.propagating = factory();
        }
      })(function () {
        var _firstTarget = null; // singleton, will contain the target element where the touch event started

        /**
         * Extend an Hammer.js instance with event propagation.
         *
         * Features:
         * - Events emitted by hammer will propagate in order from child to parent
         *   elements.
         * - Events are extended with a function `event.stopPropagation()` to stop
         *   propagation to parent elements.
         * - An option `preventDefault` to stop all default browser behavior.
         *
         * Usage:
         *   var hammer = propagatingHammer(new Hammer(element));
         *   var hammer = propagatingHammer(new Hammer(element), {preventDefault: true});
         *
         * @param {Hammer.Manager} hammer   An hammer instance.
         * @param {Object} [options]        Available options:
         *                                  - `preventDefault: true | false | 'mouse' | 'touch' | 'pen'`.
         *                                    Enforce preventing the default browser behavior.
         *                                    Cannot be set to `false`.
         * @return {Hammer.Manager} Returns the same hammer instance with extended
         *                          functionality
         */
        return function propagating(hammer, options) {
          var _options = options || {
            preventDefault: false
          };

          if (hammer.Manager) {
            // This looks like the Hammer constructor.
            // Overload the constructors with our own.
            var Hammer = hammer;

            var PropagatingHammer = function PropagatingHammer(element, options) {
              var o = (0, _create4['default'])(_options);
              if (options) Hammer.assign(o, options);
              return propagating(new Hammer(element, o), o);
            };
            Hammer.assign(PropagatingHammer, Hammer);

            PropagatingHammer.Manager = function (element, options) {
              var o = (0, _create4['default'])(_options);
              if (options) Hammer.assign(o, options);
              return propagating(new Hammer.Manager(element, o), o);
            };

            return PropagatingHammer;
          }

          // create a wrapper object which will override the functions
          // `on`, `off`, `destroy`, and `emit` of the hammer instance
          var wrapper = (0, _create4['default'])(hammer);

          // attach to DOM element
          var element = hammer.element;

          if (!element.hammer) element.hammer = [];
          element.hammer.push(wrapper);

          // register an event to catch the start of a gesture and store the
          // target in a singleton
          hammer.on('hammer.input', function (event) {
            if (_options.preventDefault === true || _options.preventDefault === event.pointerType) {
              event.preventDefault();
            }
            if (event.isFirst) {
              _firstTarget = event.target;
            }
          });

          /** @type {Object.<String, Array.<function>>} */
          wrapper._handlers = {};

          /**
           * Register a handler for one or multiple events
           * @param {String} events    A space separated string with events
           * @param {function} handler A callback function, called as handler(event)
           * @returns {Hammer.Manager} Returns the hammer instance
           */
          wrapper.on = function (events, handler) {
            // register the handler
            split(events).forEach(function (event) {
              var _handlers = wrapper._handlers[event];
              if (!_handlers) {
                wrapper._handlers[event] = _handlers = [];

                // register the static, propagated handler
                hammer.on(event, propagatedHandler);
              }
              _handlers.push(handler);
            });

            return wrapper;
          };

          /**
           * Unregister a handler for one or multiple events
           * @param {String} events      A space separated string with events
           * @param {function} [handler] Optional. The registered handler. If not
           *                             provided, all handlers for given events
           *                             are removed.
           * @returns {Hammer.Manager}   Returns the hammer instance
           */
          wrapper.off = function (events, handler) {
            // unregister the handler
            split(events).forEach(function (event) {
              var _handlers = wrapper._handlers[event];
              if (_handlers) {
                _handlers = handler ? _handlers.filter(function (h) {
                  return h !== handler;
                }) : [];

                if (_handlers.length > 0) {
                  wrapper._handlers[event] = _handlers;
                } else {
                  // remove static, propagated handler
                  hammer.off(event, propagatedHandler);
                  delete wrapper._handlers[event];
                }
              }
            });

            return wrapper;
          };

          /**
           * Emit to the event listeners
           * @param {string} eventType
           * @param {Event} event
           */
          wrapper.emit = function (eventType, event) {
            _firstTarget = event.target;
            hammer.emit(eventType, event);
          };

          wrapper.destroy = function () {
            // Detach from DOM element
            var hammers = hammer.element.hammer;
            var idx = hammers.indexOf(wrapper);
            if (idx !== -1) hammers.splice(idx, 1);
            if (!hammers.length) delete hammer.element.hammer;

            // clear all handlers
            wrapper._handlers = {};

            // call original hammer destroy
            hammer.destroy();
          };

          // split a string with space separated words
          function split(events) {
            return events.match(/[^ ]+/g);
          }

          /**
           * A static event handler, applying event propagation.
           * @param {Object} event
           */
          function propagatedHandler(event) {
            // let only a single hammer instance handle this event
            if (event.type !== 'hammer.input') {
              // it is possible that the same srcEvent is used with multiple hammer events,
              // we keep track on which events are handled in an object _handled
              if (!event.srcEvent._handled) {
                event.srcEvent._handled = {};
              }

              if (event.srcEvent._handled[event.type]) {
                return;
              } else {
                event.srcEvent._handled[event.type] = true;
              }
            }

            // attach a stopPropagation function to the event
            var stopped = false;
            event.stopPropagation = function () {
              stopped = true;
            };

            //wrap the srcEvent's stopPropagation to also stop hammer propagation:
            var srcStop = event.srcEvent.stopPropagation.bind(event.srcEvent);
            if (typeof srcStop == "function") {
              event.srcEvent.stopPropagation = function () {
                srcStop();
                event.stopPropagation();
              };
            }

            // attach firstTarget property to the event
            event.firstTarget = _firstTarget;

            // propagate over all elements (until stopped)
            var elem = _firstTarget;
            while (elem && !stopped) {
              var elemHammer = elem.hammer;
              if (elemHammer) {
                var _handlers;
                for (var k = 0; k < elemHammer.length; k++) {
                  _handlers = elemHammer[k]._handlers[event.type];
                  if (_handlers) for (var i = 0; i < _handlers.length && !stopped; i++) {
                    _handlers[i](event);
                  }
                }
              }
              elem = elem.parentNode;
            }
          }

          return wrapper;
        };
      });

      /***/
    },
    /* 176 */
    /***/function (module, exports, __webpack_require__) {

      var __WEBPACK_AMD_DEFINE_RESULT__; /*! Hammer.JS - v2.0.7 - 2016-04-22
                                         * http://hammerjs.github.io/
                                         *
                                         * Copyright (c) 2016 Jorik Tangelder;
                                         * Licensed under the MIT license */
      (function (window, document, exportName, undefined) {
        'use strict';

        var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
        var TEST_ELEMENT = document.createElement('div');

        var TYPE_FUNCTION = 'function';

        var round = Math.round;
        var abs = Math.abs;
        var now = Date.now;

        /**
         * set a timeout with a given scope
         * @param {Function} fn
         * @param {Number} timeout
         * @param {Object} context
         * @returns {number}
         */
        function setTimeoutContext(fn, timeout, context) {
          return setTimeout(bindFn(fn, context), timeout);
        }

        /**
         * if the argument is an array, we want to execute the fn on each entry
         * if it aint an array we don't want to do a thing.
         * this is used by all the methods that accept a single and array argument.
         * @param {*|Array} arg
         * @param {String} fn
         * @param {Object} [context]
         * @returns {Boolean}
         */
        function invokeArrayArg(arg, fn, context) {
          if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
          }
          return false;
        }

        /**
         * walk objects and arrays
         * @param {Object} obj
         * @param {Function} iterator
         * @param {Object} context
         */
        function each(obj, iterator, context) {
          var i;

          if (!obj) {
            return;
          }

          if (obj.forEach) {
            obj.forEach(iterator, context);
          } else if (obj.length !== undefined) {
            i = 0;
            while (i < obj.length) {
              iterator.call(context, obj[i], i, obj);
              i++;
            }
          } else {
            for (i in obj) {
              obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
            }
          }
        }

        /**
         * wrap a method with a deprecation warning and stack trace
         * @param {Function} method
         * @param {String} name
         * @param {String} message
         * @returns {Function} A new function wrapping the supplied method.
         */
        function deprecate(method, name, message) {
          var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
          return function () {
            var e = new Error('get-stack-trace');
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

            var log = window.console && (window.console.warn || window.console.log);
            if (log) {
              log.call(window.console, deprecationMessage, stack);
            }
            return method.apply(this, arguments);
          };
        }

        /**
         * extend object.
         * means that properties in dest will be overwritten by the ones in src.
         * @param {Object} target
         * @param {...Object} objects_to_assign
         * @returns {Object} target
         */
        var assign;
        if (typeof _assign4['default'] !== 'function') {
          assign = function assign(target) {
            if (target === undefined || target === null) {
              throw new TypeError('Cannot convert undefined or null to object');
            }

            var output = Object(target);
            for (var index = 1; index < arguments.length; index++) {
              var source = arguments[index];
              if (source !== undefined && source !== null) {
                for (var nextKey in source) {
                  if (source.hasOwnProperty(nextKey)) {
                    output[nextKey] = source[nextKey];
                  }
                }
              }
            }
            return output;
          };
        } else {
          assign = _assign4['default'];
        }

        /**
         * extend object.
         * means that properties in dest will be overwritten by the ones in src.
         * @param {Object} dest
         * @param {Object} src
         * @param {Boolean} [merge=false]
         * @returns {Object} dest
         */
        var extend = deprecate(function extend(dest, src, merge) {
          var keys = (0, _keys4['default'])(src);
          var i = 0;
          while (i < keys.length) {
            if (!merge || merge && dest[keys[i]] === undefined) {
              dest[keys[i]] = src[keys[i]];
            }
            i++;
          }
          return dest;
        }, 'extend', 'Use `assign`.');

        /**
         * merge the values from src in the dest.
         * means that properties that exist in dest will not be overwritten by src
         * @param {Object} dest
         * @param {Object} src
         * @returns {Object} dest
         */
        var merge = deprecate(function merge(dest, src) {
          return extend(dest, src, true);
        }, 'merge', 'Use `assign`.');

        /**
         * simple class inheritance
         * @param {Function} child
         * @param {Function} base
         * @param {Object} [properties]
         */
        function inherit(child, base, properties) {
          var baseP = base.prototype,
              childP;

          childP = child.prototype = (0, _create4['default'])(baseP);
          childP.constructor = child;
          childP._super = baseP;

          if (properties) {
            assign(childP, properties);
          }
        }

        /**
         * simple function bind
         * @param {Function} fn
         * @param {Object} context
         * @returns {Function}
         */
        function bindFn(fn, context) {
          return function boundFn() {
            return fn.apply(context, arguments);
          };
        }

        /**
         * let a boolean value also be a function that must return a boolean
         * this first item in args will be used as the context
         * @param {Boolean|Function} val
         * @param {Array} [args]
         * @returns {Boolean}
         */
        function boolOrFn(val, args) {
          if ((typeof val === 'undefined' ? 'undefined' : (0, _typeof6['default'])(val)) == TYPE_FUNCTION) {
            return val.apply(args ? args[0] || undefined : undefined, args);
          }
          return val;
        }

        /**
         * use the val2 when val1 is undefined
         * @param {*} val1
         * @param {*} val2
         * @returns {*}
         */
        function ifUndefined(val1, val2) {
          return val1 === undefined ? val2 : val1;
        }

        /**
         * addEventListener with multiple events at once
         * @param {EventTarget} target
         * @param {String} types
         * @param {Function} handler
         */
        function addEventListeners(target, types, handler) {
          each(splitStr(types), function (type) {
            target.addEventListener(type, handler, false);
          });
        }

        /**
         * removeEventListener with multiple events at once
         * @param {EventTarget} target
         * @param {String} types
         * @param {Function} handler
         */
        function removeEventListeners(target, types, handler) {
          each(splitStr(types), function (type) {
            target.removeEventListener(type, handler, false);
          });
        }

        /**
         * find if a node is in the given parent
         * @method hasParent
         * @param {HTMLElement} node
         * @param {HTMLElement} parent
         * @return {Boolean} found
         */
        function hasParent(node, parent) {
          while (node) {
            if (node == parent) {
              return true;
            }
            node = node.parentNode;
          }
          return false;
        }

        /**
         * small indexOf wrapper
         * @param {String} str
         * @param {String} find
         * @returns {Boolean} found
         */
        function inStr(str, find) {
          return str.indexOf(find) > -1;
        }

        /**
         * split string on whitespace
         * @param {String} str
         * @returns {Array} words
         */
        function splitStr(str) {
          return str.trim().split(/\s+/g);
        }

        /**
         * find if a array contains the object using indexOf or a simple polyFill
         * @param {Array} src
         * @param {String} find
         * @param {String} [findByKey]
         * @return {Boolean|Number} false when not found, or the index
         */
        function inArray(src, find, findByKey) {
          if (src.indexOf && !findByKey) {
            return src.indexOf(find);
          } else {
            var i = 0;
            while (i < src.length) {
              if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
                return i;
              }
              i++;
            }
            return -1;
          }
        }

        /**
         * convert array-like objects to real arrays
         * @param {Object} obj
         * @returns {Array}
         */
        function toArray(obj) {
          return Array.prototype.slice.call(obj, 0);
        }

        /**
         * unique array with objects based on a key (like 'id') or just by the array's value
         * @param {Array} src [{id:1},{id:2},{id:1}]
         * @param {String} [key]
         * @param {Boolean} [sort=False]
         * @returns {Array} [{id:1},{id:2}]
         */
        function uniqueArray(src, key, sort) {
          var results = [];
          var values = [];
          var i = 0;

          while (i < src.length) {
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) {
              results.push(src[i]);
            }
            values[i] = val;
            i++;
          }

          if (sort) {
            if (!key) {
              results = results.sort();
            } else {
              results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key];
              });
            }
          }

          return results;
        }

        /**
         * get the prefixed property
         * @param {Object} obj
         * @param {String} property
         * @returns {String|Undefined} prefixed
         */
        function prefixed(obj, property) {
          var prefix, prop;
          var camelProp = property[0].toUpperCase() + property.slice(1);

          var i = 0;
          while (i < VENDOR_PREFIXES.length) {
            prefix = VENDOR_PREFIXES[i];
            prop = prefix ? prefix + camelProp : property;

            if (prop in obj) {
              return prop;
            }
            i++;
          }
          return undefined;
        }

        /**
         * get a unique id
         * @returns {number} uniqueId
         */
        var _uniqueId = 1;
        function uniqueId() {
          return _uniqueId++;
        }

        /**
         * get the window object of an element
         * @param {HTMLElement} element
         * @returns {DocumentView|Window}
         */
        function getWindowForElement(element) {
          var doc = element.ownerDocument || element;
          return doc.defaultView || doc.parentWindow || window;
        }

        var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

        var SUPPORT_TOUCH = 'ontouchstart' in window;
        var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
        var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

        var INPUT_TYPE_TOUCH = 'touch';
        var INPUT_TYPE_PEN = 'pen';
        var INPUT_TYPE_MOUSE = 'mouse';
        var INPUT_TYPE_KINECT = 'kinect';

        var COMPUTE_INTERVAL = 25;

        var INPUT_START = 1;
        var INPUT_MOVE = 2;
        var INPUT_END = 4;
        var INPUT_CANCEL = 8;

        var DIRECTION_NONE = 1;
        var DIRECTION_LEFT = 2;
        var DIRECTION_RIGHT = 4;
        var DIRECTION_UP = 8;
        var DIRECTION_DOWN = 16;

        var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
        var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
        var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

        var PROPS_XY = ['x', 'y'];
        var PROPS_CLIENT_XY = ['clientX', 'clientY'];

        /**
         * create new input type manager
         * @param {Manager} manager
         * @param {Function} callback
         * @returns {Input}
         * @constructor
         */
        function Input(manager, callback) {
          var self = this;
          this.manager = manager;
          this.callback = callback;
          this.element = manager.element;
          this.target = manager.options.inputTarget;

          // smaller wrapper around the handler, for the scope and the enabled state of the manager,
          // so when disabled the input events are completely bypassed.
          this.domHandler = function (ev) {
            if (boolOrFn(manager.options.enable, [manager])) {
              self.handler(ev);
            }
          };

          this.init();
        }

        Input.prototype = {
          /**
           * should handle the inputEvent data and trigger the callback
           * @virtual
           */
          handler: function handler() {},

          /**
           * bind the events
           */
          init: function init() {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
          },

          /**
           * unbind the events
           */
          destroy: function destroy() {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
          }
        };

        /**
         * create new input type manager
         * called by the Manager constructor
         * @param {Hammer} manager
         * @returns {Input}
         */
        function createInputInstance(manager) {
          var Type;
          var inputClass = manager.options.inputClass;

          if (inputClass) {
            Type = inputClass;
          } else if (SUPPORT_POINTER_EVENTS) {
            Type = PointerEventInput;
          } else if (SUPPORT_ONLY_TOUCH) {
            Type = TouchInput;
          } else if (!SUPPORT_TOUCH) {
            Type = MouseInput;
          } else {
            Type = TouchMouseInput;
          }
          return new Type(manager, inputHandler);
        }

        /**
         * handle input events
         * @param {Manager} manager
         * @param {String} eventType
         * @param {Object} input
         */
        function inputHandler(manager, eventType, input) {
          var pointersLen = input.pointers.length;
          var changedPointersLen = input.changedPointers.length;
          var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
          var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;

          input.isFirst = !!isFirst;
          input.isFinal = !!isFinal;

          if (isFirst) {
            manager.session = {};
          }

          // source event is the normalized value of the domEvents
          // like 'touchstart, mouseup, pointerdown'
          input.eventType = eventType;

          // compute scale, rotation etc
          computeInputData(manager, input);

          // emit secret event
          manager.emit('hammer.input', input);

          manager.recognize(input);
          manager.session.prevInput = input;
        }

        /**
         * extend the data with some usable properties like scale, rotate, velocity etc
         * @param {Object} manager
         * @param {Object} input
         */
        function computeInputData(manager, input) {
          var session = manager.session;
          var pointers = input.pointers;
          var pointersLength = pointers.length;

          // store the first input to calculate the distance and direction
          if (!session.firstInput) {
            session.firstInput = simpleCloneInputData(input);
          }

          // to compute scale and rotation we need to store the multiple touches
          if (pointersLength > 1 && !session.firstMultiple) {
            session.firstMultiple = simpleCloneInputData(input);
          } else if (pointersLength === 1) {
            session.firstMultiple = false;
          }

          var firstInput = session.firstInput;
          var firstMultiple = session.firstMultiple;
          var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

          var center = input.center = getCenter(pointers);
          input.timeStamp = now();
          input.deltaTime = input.timeStamp - firstInput.timeStamp;

          input.angle = getAngle(offsetCenter, center);
          input.distance = getDistance(offsetCenter, center);

          computeDeltaXY(session, input);
          input.offsetDirection = getDirection(input.deltaX, input.deltaY);

          var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
          input.overallVelocityX = overallVelocity.x;
          input.overallVelocityY = overallVelocity.y;
          input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;

          input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
          input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

          input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;

          computeIntervalInputData(session, input);

          // find the correct target
          var target = manager.element;
          if (hasParent(input.srcEvent.target, target)) {
            target = input.srcEvent.target;
          }
          input.target = target;
        }

        function computeDeltaXY(session, input) {
          var center = input.center;
          var offset = session.offsetDelta || {};
          var prevDelta = session.prevDelta || {};
          var prevInput = session.prevInput || {};

          if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
              x: prevInput.deltaX || 0,
              y: prevInput.deltaY || 0
            };

            offset = session.offsetDelta = {
              x: center.x,
              y: center.y
            };
          }

          input.deltaX = prevDelta.x + (center.x - offset.x);
          input.deltaY = prevDelta.y + (center.y - offset.y);
        }

        /**
         * velocity is calculated every x ms
         * @param {Object} session
         * @param {Object} input
         */
        function computeIntervalInputData(session, input) {
          var last = session.lastInterval || input,
              deltaTime = input.timeStamp - last.timeStamp,
              velocity,
              velocityX,
              velocityY,
              direction;

          if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;

            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);

            session.lastInterval = input;
          } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
          }

          input.velocity = velocity;
          input.velocityX = velocityX;
          input.velocityY = velocityY;
          input.direction = direction;
        }

        /**
         * create a simple clone from the input used for storage of firstInput and firstMultiple
         * @param {Object} input
         * @returns {Object} clonedInputData
         */
        function simpleCloneInputData(input) {
          // make a simple copy of the pointers because we will get a reference if we don't
          // we only need clientXY for the calculations
          var pointers = [];
          var i = 0;
          while (i < input.pointers.length) {
            pointers[i] = {
              clientX: round(input.pointers[i].clientX),
              clientY: round(input.pointers[i].clientY)
            };
            i++;
          }

          return {
            timeStamp: now(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
          };
        }

        /**
         * get the center of all the pointers
         * @param {Array} pointers
         * @return {Object} center contains `x` and `y` properties
         */
        function getCenter(pointers) {
          var pointersLength = pointers.length;

          // no need to loop when only one touch
          if (pointersLength === 1) {
            return {
              x: round(pointers[0].clientX),
              y: round(pointers[0].clientY)
            };
          }

          var x = 0,
              y = 0,
              i = 0;
          while (i < pointersLength) {
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
          }

          return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
          };
        }

        /**
         * calculate the velocity between two points. unit is in px per ms.
         * @param {Number} deltaTime
         * @param {Number} x
         * @param {Number} y
         * @return {Object} velocity `x` and `y`
         */
        function getVelocity(deltaTime, x, y) {
          return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
          };
        }

        /**
         * get the direction between two points
         * @param {Number} x
         * @param {Number} y
         * @return {Number} direction
         */
        function getDirection(x, y) {
          if (x === y) {
            return DIRECTION_NONE;
          }

          if (abs(x) >= abs(y)) {
            return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
          }
          return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
        }

        /**
         * calculate the absolute distance between two points
         * @param {Object} p1 {x, y}
         * @param {Object} p2 {x, y}
         * @param {Array} [props] containing x and y keys
         * @return {Number} distance
         */
        function getDistance(p1, p2, props) {
          if (!props) {
            props = PROPS_XY;
          }
          var x = p2[props[0]] - p1[props[0]],
              y = p2[props[1]] - p1[props[1]];

          return Math.sqrt(x * x + y * y);
        }

        /**
         * calculate the angle between two coordinates
         * @param {Object} p1
         * @param {Object} p2
         * @param {Array} [props] containing x and y keys
         * @return {Number} angle
         */
        function getAngle(p1, p2, props) {
          if (!props) {
            props = PROPS_XY;
          }
          var x = p2[props[0]] - p1[props[0]],
              y = p2[props[1]] - p1[props[1]];
          return Math.atan2(y, x) * 180 / Math.PI;
        }

        /**
         * calculate the rotation degrees between two pointersets
         * @param {Array} start array of pointers
         * @param {Array} end array of pointers
         * @return {Number} rotation
         */
        function getRotation(start, end) {
          return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
        }

        /**
         * calculate the scale factor between two pointersets
         * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
         * @param {Array} start array of pointers
         * @param {Array} end array of pointers
         * @return {Number} scale
         */
        function getScale(start, end) {
          return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
        }

        var MOUSE_INPUT_MAP = {
          mousedown: INPUT_START,
          mousemove: INPUT_MOVE,
          mouseup: INPUT_END
        };

        var MOUSE_ELEMENT_EVENTS = 'mousedown';
        var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

        /**
         * Mouse events input
         * @constructor
         * @extends Input
         */
        function MouseInput() {
          this.evEl = MOUSE_ELEMENT_EVENTS;
          this.evWin = MOUSE_WINDOW_EVENTS;

          this.pressed = false; // mousedown state

          Input.apply(this, arguments);
        }

        inherit(MouseInput, Input, {
          /**
           * handle mouse events
           * @param {Object} ev
           */
          handler: function MEhandler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type];

            // on start we want to have the left mouse button down
            if (eventType & INPUT_START && ev.button === 0) {
              this.pressed = true;
            }

            if (eventType & INPUT_MOVE && ev.which !== 1) {
              eventType = INPUT_END;
            }

            // mouse must be down
            if (!this.pressed) {
              return;
            }

            if (eventType & INPUT_END) {
              this.pressed = false;
            }

            this.callback(this.manager, eventType, {
              pointers: [ev],
              changedPointers: [ev],
              pointerType: INPUT_TYPE_MOUSE,
              srcEvent: ev
            });
          }
        });

        var POINTER_INPUT_MAP = {
          pointerdown: INPUT_START,
          pointermove: INPUT_MOVE,
          pointerup: INPUT_END,
          pointercancel: INPUT_CANCEL,
          pointerout: INPUT_CANCEL
        };

        // in IE10 the pointer types is defined as an enum
        var IE10_POINTER_TYPE_ENUM = {
          2: INPUT_TYPE_TOUCH,
          3: INPUT_TYPE_PEN,
          4: INPUT_TYPE_MOUSE,
          5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
        };

        var POINTER_ELEMENT_EVENTS = 'pointerdown';
        var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

        // IE10 has prefixed support, and case-sensitive
        if (window.MSPointerEvent && !window.PointerEvent) {
          POINTER_ELEMENT_EVENTS = 'MSPointerDown';
          POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
        }

        /**
         * Pointer events input
         * @constructor
         * @extends Input
         */
        function PointerEventInput() {
          this.evEl = POINTER_ELEMENT_EVENTS;
          this.evWin = POINTER_WINDOW_EVENTS;

          Input.apply(this, arguments);

          this.store = this.manager.session.pointerEvents = [];
        }

        inherit(PointerEventInput, Input, {
          /**
           * handle mouse events
           * @param {Object} ev
           */
          handler: function PEhandler(ev) {
            var store = this.store;
            var removePointer = false;

            var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

            var isTouch = pointerType == INPUT_TYPE_TOUCH;

            // get index of the event in the store
            var storeIndex = inArray(store, ev.pointerId, 'pointerId');

            // start and mouse must be down
            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
              if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
              }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
              removePointer = true;
            }

            // it not found, so the pointer hasn't been down (so it's probably a hover)
            if (storeIndex < 0) {
              return;
            }

            // update the event in the store
            store[storeIndex] = ev;

            this.callback(this.manager, eventType, {
              pointers: store,
              changedPointers: [ev],
              pointerType: pointerType,
              srcEvent: ev
            });

            if (removePointer) {
              // remove from the store
              store.splice(storeIndex, 1);
            }
          }
        });

        var SINGLE_TOUCH_INPUT_MAP = {
          touchstart: INPUT_START,
          touchmove: INPUT_MOVE,
          touchend: INPUT_END,
          touchcancel: INPUT_CANCEL
        };

        var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
        var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

        /**
         * Touch events input
         * @constructor
         * @extends Input
         */
        function SingleTouchInput() {
          this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
          this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
          this.started = false;

          Input.apply(this, arguments);
        }

        inherit(SingleTouchInput, Input, {
          handler: function TEhandler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

            // should we handle the touch events?
            if (type === INPUT_START) {
              this.started = true;
            }

            if (!this.started) {
              return;
            }

            var touches = normalizeSingleTouches.call(this, ev, type);

            // when done, reset the started state
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
              this.started = false;
            }

            this.callback(this.manager, type, {
              pointers: touches[0],
              changedPointers: touches[1],
              pointerType: INPUT_TYPE_TOUCH,
              srcEvent: ev
            });
          }
        });

        /**
         * @this {TouchInput}
         * @param {Object} ev
         * @param {Number} type flag
         * @returns {undefined|Array} [all, changed]
         */
        function normalizeSingleTouches(ev, type) {
          var all = toArray(ev.touches);
          var changed = toArray(ev.changedTouches);

          if (type & (INPUT_END | INPUT_CANCEL)) {
            all = uniqueArray(all.concat(changed), 'identifier', true);
          }

          return [all, changed];
        }

        var TOUCH_INPUT_MAP = {
          touchstart: INPUT_START,
          touchmove: INPUT_MOVE,
          touchend: INPUT_END,
          touchcancel: INPUT_CANCEL
        };

        var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

        /**
         * Multi-user touch events input
         * @constructor
         * @extends Input
         */
        function TouchInput() {
          this.evTarget = TOUCH_TARGET_EVENTS;
          this.targetIds = {};

          Input.apply(this, arguments);
        }

        inherit(TouchInput, Input, {
          handler: function MTEhandler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) {
              return;
            }

            this.callback(this.manager, type, {
              pointers: touches[0],
              changedPointers: touches[1],
              pointerType: INPUT_TYPE_TOUCH,
              srcEvent: ev
            });
          }
        });

        /**
         * @this {TouchInput}
         * @param {Object} ev
         * @param {Number} type flag
         * @returns {undefined|Array} [all, changed]
         */
        function getTouches(ev, type) {
          var allTouches = toArray(ev.touches);
          var targetIds = this.targetIds;

          // when there is only one touch, the process can be simplified
          if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [allTouches, allTouches];
          }

          var i,
              targetTouches,
              changedTouches = toArray(ev.changedTouches),
              changedTargetTouches = [],
              target = this.target;

          // get target touches from touches
          targetTouches = allTouches.filter(function (touch) {
            return hasParent(touch.target, target);
          });

          // collect touches
          if (type === INPUT_START) {
            i = 0;
            while (i < targetTouches.length) {
              targetIds[targetTouches[i].identifier] = true;
              i++;
            }
          }

          // filter changed touches to only contain touches that exist in the collected target ids
          i = 0;
          while (i < changedTouches.length) {
            if (targetIds[changedTouches[i].identifier]) {
              changedTargetTouches.push(changedTouches[i]);
            }

            // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) {
              delete targetIds[changedTouches[i].identifier];
            }
            i++;
          }

          if (!changedTargetTouches.length) {
            return;
          }

          return [
          // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
          uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
        }

        /**
         * Combined touch and mouse input
         *
         * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
         * This because touch devices also emit mouse events while doing a touch.
         *
         * @constructor
         * @extends Input
         */

        var DEDUP_TIMEOUT = 2500;
        var DEDUP_DISTANCE = 25;

        function TouchMouseInput() {
          Input.apply(this, arguments);

          var handler = bindFn(this.handler, this);
          this.touch = new TouchInput(this.manager, handler);
          this.mouse = new MouseInput(this.manager, handler);

          this.primaryTouch = null;
          this.lastTouches = [];
        }

        inherit(TouchMouseInput, Input, {
          /**
           * handle mouse and touch events
           * @param {Hammer} manager
           * @param {String} inputEvent
           * @param {Object} inputData
           */
          handler: function TMEhandler(manager, inputEvent, inputData) {
            var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
                isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;

            if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
              return;
            }

            // when we're in a touch event, record touches to  de-dupe synthetic mouse event
            if (isTouch) {
              recordTouches.call(this, inputEvent, inputData);
            } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
              return;
            }

            this.callback(manager, inputEvent, inputData);
          },

          /**
           * remove the event listeners
           */
          destroy: function destroy() {
            this.touch.destroy();
            this.mouse.destroy();
          }
        });

        function recordTouches(eventType, eventData) {
          if (eventType & INPUT_START) {
            this.primaryTouch = eventData.changedPointers[0].identifier;
            setLastTouch.call(this, eventData);
          } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            setLastTouch.call(this, eventData);
          }
        }

        function setLastTouch(eventData) {
          var touch = eventData.changedPointers[0];

          if (touch.identifier === this.primaryTouch) {
            var lastTouch = { x: touch.clientX, y: touch.clientY };
            this.lastTouches.push(lastTouch);
            var lts = this.lastTouches;
            var removeLastTouch = function removeLastTouch() {
              var i = lts.indexOf(lastTouch);
              if (i > -1) {
                lts.splice(i, 1);
              }
            };
            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
          }
        }

        function isSyntheticEvent(eventData) {
          var x = eventData.srcEvent.clientX,
              y = eventData.srcEvent.clientY;
          for (var i = 0; i < this.lastTouches.length; i++) {
            var t = this.lastTouches[i];
            var dx = Math.abs(x - t.x),
                dy = Math.abs(y - t.y);
            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
              return true;
            }
          }
          return false;
        }

        var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
        var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

        // magical touchAction value
        var TOUCH_ACTION_COMPUTE = 'compute';
        var TOUCH_ACTION_AUTO = 'auto';
        var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
        var TOUCH_ACTION_NONE = 'none';
        var TOUCH_ACTION_PAN_X = 'pan-x';
        var TOUCH_ACTION_PAN_Y = 'pan-y';
        var TOUCH_ACTION_MAP = getTouchActionProps();

        /**
         * Touch Action
         * sets the touchAction property or uses the js alternative
         * @param {Manager} manager
         * @param {String} value
         * @constructor
         */
        function TouchAction(manager, value) {
          this.manager = manager;
          this.set(value);
        }

        TouchAction.prototype = {
          /**
           * set the touchAction value on the element or enable the polyfill
           * @param {String} value
           */
          set: function set(value) {
            // find out the touch-action by the event handlers
            if (value == TOUCH_ACTION_COMPUTE) {
              value = this.compute();
            }

            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
              this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            }
            this.actions = value.toLowerCase().trim();
          },

          /**
           * just re-set the touchAction value
           */
          update: function update() {
            this.set(this.manager.options.touchAction);
          },

          /**
           * compute the value for the touchAction property based on the recognizer's settings
           * @returns {String} value
           */
          compute: function compute() {
            var actions = [];
            each(this.manager.recognizers, function (recognizer) {
              if (boolOrFn(recognizer.options.enable, [recognizer])) {
                actions = actions.concat(recognizer.getTouchAction());
              }
            });
            return cleanTouchActions(actions.join(' '));
          },

          /**
           * this method is called on each input cycle and provides the preventing of the browser behavior
           * @param {Object} input
           */
          preventDefaults: function preventDefaults(input) {
            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection;

            // if the touch action did prevented once this session
            if (this.manager.session.prevented) {
              srcEvent.preventDefault();
              return;
            }

            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

            if (hasNone) {
              //do not prevent defaults if this is a tap gesture

              var isTapPointer = input.pointers.length === 1;
              var isTapMovement = input.distance < 2;
              var isTapTouchTime = input.deltaTime < 250;

              if (isTapPointer && isTapMovement && isTapTouchTime) {
                return;
              }
            }

            if (hasPanX && hasPanY) {
              // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
              return;
            }

            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
              return this.preventSrc(srcEvent);
            }
          },

          /**
           * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
           * @param {Object} srcEvent
           */
          preventSrc: function preventSrc(srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
          }
        };

        /**
         * when the touchActions are collected they are not a valid value, so we need to clean things up. *
         * @param {String} actions
         * @returns {*}
         */
        function cleanTouchActions(actions) {
          // none
          if (inStr(actions, TOUCH_ACTION_NONE)) {
            return TOUCH_ACTION_NONE;
          }

          var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
          var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

          // if both pan-x and pan-y are set (different recognizers
          // for different directions, e.g. horizontal pan but vertical swipe?)
          // we need none (as otherwise with pan-x pan-y combined none of these
          // recognizers will work, since the browser would handle all panning
          if (hasPanX && hasPanY) {
            return TOUCH_ACTION_NONE;
          }

          // pan-x OR pan-y
          if (hasPanX || hasPanY) {
            return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
          }

          // manipulation
          if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
            return TOUCH_ACTION_MANIPULATION;
          }

          return TOUCH_ACTION_AUTO;
        }

        function getTouchActionProps() {
          if (!NATIVE_TOUCH_ACTION) {
            return false;
          }
          var touchMap = {};
          var cssSupports = window.CSS && window.CSS.supports;
          ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {

            // If css.supports is not supported but there is native touch-action assume it supports
            // all values. This is the case for IE 10 and 11.
            touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
          });
          return touchMap;
        }

        /**
         * Recognizer flow explained; *
         * All recognizers have the initial state of POSSIBLE when a input session starts.
         * The definition of a input session is from the first input until the last input, with all it's movement in it. *
         * Example session for mouse-input: mousedown -> mousemove -> mouseup
         *
         * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
         * which determines with state it should be.
         *
         * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
         * POSSIBLE to give it another change on the next cycle.
         *
         *               Possible
         *                  |
         *            +-----+---------------+
         *            |                     |
         *      +-----+-----+               |
         *      |           |               |
         *   Failed      Cancelled          |
         *                          +-------+------+
         *                          |              |
         *                      Recognized       Began
         *                                         |
         *                                      Changed
         *                                         |
         *                                  Ended/Recognized
         */
        var STATE_POSSIBLE = 1;
        var STATE_BEGAN = 2;
        var STATE_CHANGED = 4;
        var STATE_ENDED = 8;
        var STATE_RECOGNIZED = STATE_ENDED;
        var STATE_CANCELLED = 16;
        var STATE_FAILED = 32;

        /**
         * Recognizer
         * Every recognizer needs to extend from this class.
         * @constructor
         * @param {Object} options
         */
        function Recognizer(options) {
          this.options = assign({}, this.defaults, options || {});

          this.id = uniqueId();

          this.manager = null;

          // default is enable true
          this.options.enable = ifUndefined(this.options.enable, true);

          this.state = STATE_POSSIBLE;

          this.simultaneous = {};
          this.requireFail = [];
        }

        Recognizer.prototype = {
          /**
           * @virtual
           * @type {Object}
           */
          defaults: {},

          /**
           * set options
           * @param {Object} options
           * @return {Recognizer}
           */
          set: function set(options) {
            assign(this.options, options);

            // also update the touchAction, in case something changed about the directions/enabled state
            this.manager && this.manager.touchAction.update();
            return this;
          },

          /**
           * recognize simultaneous with an other recognizer.
           * @param {Recognizer} otherRecognizer
           * @returns {Recognizer} this
           */
          recognizeWith: function recognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
              return this;
            }

            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
              simultaneous[otherRecognizer.id] = otherRecognizer;
              otherRecognizer.recognizeWith(this);
            }
            return this;
          },

          /**
           * drop the simultaneous link. it doesnt remove the link on the other recognizer.
           * @param {Recognizer} otherRecognizer
           * @returns {Recognizer} this
           */
          dropRecognizeWith: function dropRecognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
              return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
          },

          /**
           * recognizer can only run when an other is failing
           * @param {Recognizer} otherRecognizer
           * @returns {Recognizer} this
           */
          requireFailure: function requireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
              return this;
            }

            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
              requireFail.push(otherRecognizer);
              otherRecognizer.requireFailure(this);
            }
            return this;
          },

          /**
           * drop the requireFailure link. it does not remove the link on the other recognizer.
           * @param {Recognizer} otherRecognizer
           * @returns {Recognizer} this
           */
          dropRequireFailure: function dropRequireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
              return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);
            if (index > -1) {
              this.requireFail.splice(index, 1);
            }
            return this;
          },

          /**
           * has require failures boolean
           * @returns {boolean}
           */
          hasRequireFailures: function hasRequireFailures() {
            return this.requireFail.length > 0;
          },

          /**
           * if the recognizer can recognize simultaneous with an other recognizer
           * @param {Recognizer} otherRecognizer
           * @returns {Boolean}
           */
          canRecognizeWith: function canRecognizeWith(otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
          },

          /**
           * You should use `tryEmit` instead of `emit` directly to check
           * that all the needed recognizers has failed before emitting.
           * @param {Object} input
           */
          emit: function emit(input) {
            var self = this;
            var state = this.state;

            function emit(event) {
              self.manager.emit(event, input);
            }

            // 'panstart' and 'panmove'
            if (state < STATE_ENDED) {
              emit(self.options.event + stateStr(state));
            }

            emit(self.options.event); // simple 'eventName' events

            if (input.additionalEvent) {
              // additional event(panleft, panright, pinchin, pinchout...)
              emit(input.additionalEvent);
            }

            // panend and pancancel
            if (state >= STATE_ENDED) {
              emit(self.options.event + stateStr(state));
            }
          },

          /**
           * Check that all the require failure recognizers has failed,
           * if true, it emits a gesture event,
           * otherwise, setup the state to FAILED.
           * @param {Object} input
           */
          tryEmit: function tryEmit(input) {
            if (this.canEmit()) {
              return this.emit(input);
            }
            // it's failing anyway
            this.state = STATE_FAILED;
          },

          /**
           * can we emit?
           * @returns {boolean}
           */
          canEmit: function canEmit() {
            var i = 0;
            while (i < this.requireFail.length) {
              if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                return false;
              }
              i++;
            }
            return true;
          },

          /**
           * update the recognizer
           * @param {Object} inputData
           */
          recognize: function recognize(inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = assign({}, inputData);

            // is is enabled and allow recognizing?
            if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
              this.reset();
              this.state = STATE_FAILED;
              return;
            }

            // reset when we've reached the end
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
              this.state = STATE_POSSIBLE;
            }

            this.state = this.process(inputDataClone);

            // the recognizer has recognized a gesture
            // so trigger an event
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
              this.tryEmit(inputDataClone);
            }
          },

          /**
           * return the state of the recognizer
           * the actual recognizing happens in this method
           * @virtual
           * @param {Object} inputData
           * @returns {Const} STATE
           */
          process: function process(inputData) {}, // jshint ignore:line

          /**
           * return the preferred touch-action
           * @virtual
           * @returns {Array}
           */
          getTouchAction: function getTouchAction() {},

          /**
           * called when the gesture isn't allowed to recognize
           * like when another is being recognized or it is disabled
           * @virtual
           */
          reset: function reset() {}
        };

        /**
         * get a usable string, used as event postfix
         * @param {Const} state
         * @returns {String} state
         */
        function stateStr(state) {
          if (state & STATE_CANCELLED) {
            return 'cancel';
          } else if (state & STATE_ENDED) {
            return 'end';
          } else if (state & STATE_CHANGED) {
            return 'move';
          } else if (state & STATE_BEGAN) {
            return 'start';
          }
          return '';
        }

        /**
         * direction cons to string
         * @param {Const} direction
         * @returns {String}
         */
        function directionStr(direction) {
          if (direction == DIRECTION_DOWN) {
            return 'down';
          } else if (direction == DIRECTION_UP) {
            return 'up';
          } else if (direction == DIRECTION_LEFT) {
            return 'left';
          } else if (direction == DIRECTION_RIGHT) {
            return 'right';
          }
          return '';
        }

        /**
         * get a recognizer by name if it is bound to a manager
         * @param {Recognizer|String} otherRecognizer
         * @param {Recognizer} recognizer
         * @returns {Recognizer}
         */
        function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
          var manager = recognizer.manager;
          if (manager) {
            return manager.get(otherRecognizer);
          }
          return otherRecognizer;
        }

        /**
         * This recognizer is just used as a base for the simple attribute recognizers.
         * @constructor
         * @extends Recognizer
         */
        function AttrRecognizer() {
          Recognizer.apply(this, arguments);
        }

        inherit(AttrRecognizer, Recognizer, {
          /**
           * @namespace
           * @memberof AttrRecognizer
           */
          defaults: {
            /**
             * @type {Number}
             * @default 1
             */
            pointers: 1
          },

          /**
           * Used to check if it the recognizer receives valid input, like input.distance > 10.
           * @memberof AttrRecognizer
           * @param {Object} input
           * @returns {Boolean} recognized
           */
          attrTest: function attrTest(input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
          },

          /**
           * Process the input and return the state for the recognizer
           * @memberof AttrRecognizer
           * @param {Object} input
           * @returns {*} State
           */
          process: function process(input) {
            var state = this.state;
            var eventType = input.eventType;

            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input);

            // on cancel input and we've recognized before, return STATE_CANCELLED
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
              return state | STATE_CANCELLED;
            } else if (isRecognized || isValid) {
              if (eventType & INPUT_END) {
                return state | STATE_ENDED;
              } else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
              }
              return state | STATE_CHANGED;
            }
            return STATE_FAILED;
          }
        });

        /**
         * Pan
         * Recognized when the pointer is down and moved in the allowed direction.
         * @constructor
         * @extends AttrRecognizer
         */
        function PanRecognizer() {
          AttrRecognizer.apply(this, arguments);

          this.pX = null;
          this.pY = null;
        }

        inherit(PanRecognizer, AttrRecognizer, {
          /**
           * @namespace
           * @memberof PanRecognizer
           */
          defaults: {
            event: 'pan',
            threshold: 10,
            pointers: 1,
            direction: DIRECTION_ALL
          },

          getTouchAction: function getTouchAction() {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL) {
              actions.push(TOUCH_ACTION_PAN_Y);
            }
            if (direction & DIRECTION_VERTICAL) {
              actions.push(TOUCH_ACTION_PAN_X);
            }
            return actions;
          },

          directionTest: function directionTest(input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY;

            // lock to axis?
            if (!(direction & options.direction)) {
              if (options.direction & DIRECTION_HORIZONTAL) {
                direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                hasMoved = x != this.pX;
                distance = Math.abs(input.deltaX);
              } else {
                direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                hasMoved = y != this.pY;
                distance = Math.abs(input.deltaY);
              }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
          },

          attrTest: function attrTest(input) {
            return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
          },

          emit: function emit(input) {

            this.pX = input.deltaX;
            this.pY = input.deltaY;

            var direction = directionStr(input.direction);

            if (direction) {
              input.additionalEvent = this.options.event + direction;
            }
            this._super.emit.call(this, input);
          }
        });

        /**
         * Pinch
         * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
         * @constructor
         * @extends AttrRecognizer
         */
        function PinchRecognizer() {
          AttrRecognizer.apply(this, arguments);
        }

        inherit(PinchRecognizer, AttrRecognizer, {
          /**
           * @namespace
           * @memberof PinchRecognizer
           */
          defaults: {
            event: 'pinch',
            threshold: 0,
            pointers: 2
          },

          getTouchAction: function getTouchAction() {
            return [TOUCH_ACTION_NONE];
          },

          attrTest: function attrTest(input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
          },

          emit: function emit(input) {
            if (input.scale !== 1) {
              var inOut = input.scale < 1 ? 'in' : 'out';
              input.additionalEvent = this.options.event + inOut;
            }
            this._super.emit.call(this, input);
          }
        });

        /**
         * Press
         * Recognized when the pointer is down for x ms without any movement.
         * @constructor
         * @extends Recognizer
         */
        function PressRecognizer() {
          Recognizer.apply(this, arguments);

          this._timer = null;
          this._input = null;
        }

        inherit(PressRecognizer, Recognizer, {
          /**
           * @namespace
           * @memberof PressRecognizer
           */
          defaults: {
            event: 'press',
            pointers: 1,
            time: 251, // minimal time of the pointer to be pressed
            threshold: 9 // a minimal movement is ok, but keep it low
          },

          getTouchAction: function getTouchAction() {
            return [TOUCH_ACTION_AUTO];
          },

          process: function process(input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;

            this._input = input;

            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
              this.reset();
            } else if (input.eventType & INPUT_START) {
              this.reset();
              this._timer = setTimeoutContext(function () {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
              }, options.time, this);
            } else if (input.eventType & INPUT_END) {
              return STATE_RECOGNIZED;
            }
            return STATE_FAILED;
          },

          reset: function reset() {
            clearTimeout(this._timer);
          },

          emit: function emit(input) {
            if (this.state !== STATE_RECOGNIZED) {
              return;
            }

            if (input && input.eventType & INPUT_END) {
              this.manager.emit(this.options.event + 'up', input);
            } else {
              this._input.timeStamp = now();
              this.manager.emit(this.options.event, this._input);
            }
          }
        });

        /**
         * Rotate
         * Recognized when two or more pointer are moving in a circular motion.
         * @constructor
         * @extends AttrRecognizer
         */
        function RotateRecognizer() {
          AttrRecognizer.apply(this, arguments);
        }

        inherit(RotateRecognizer, AttrRecognizer, {
          /**
           * @namespace
           * @memberof RotateRecognizer
           */
          defaults: {
            event: 'rotate',
            threshold: 0,
            pointers: 2
          },

          getTouchAction: function getTouchAction() {
            return [TOUCH_ACTION_NONE];
          },

          attrTest: function attrTest(input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
          }
        });

        /**
         * Swipe
         * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
         * @constructor
         * @extends AttrRecognizer
         */
        function SwipeRecognizer() {
          AttrRecognizer.apply(this, arguments);
        }

        inherit(SwipeRecognizer, AttrRecognizer, {
          /**
           * @namespace
           * @memberof SwipeRecognizer
           */
          defaults: {
            event: 'swipe',
            threshold: 10,
            velocity: 0.3,
            direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
            pointers: 1
          },

          getTouchAction: function getTouchAction() {
            return PanRecognizer.prototype.getTouchAction.call(this);
          },

          attrTest: function attrTest(input) {
            var direction = this.options.direction;
            var velocity;

            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
              velocity = input.overallVelocity;
            } else if (direction & DIRECTION_HORIZONTAL) {
              velocity = input.overallVelocityX;
            } else if (direction & DIRECTION_VERTICAL) {
              velocity = input.overallVelocityY;
            }

            return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
          },

          emit: function emit(input) {
            var direction = directionStr(input.offsetDirection);
            if (direction) {
              this.manager.emit(this.options.event + direction, input);
            }

            this.manager.emit(this.options.event, input);
          }
        });

        /**
         * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
         * between the given interval and position. The delay option can be used to recognize multi-taps without firing
         * a single tap.
         *
         * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
         * multi-taps being recognized.
         * @constructor
         * @extends Recognizer
         */
        function TapRecognizer() {
          Recognizer.apply(this, arguments);

          // previous time and center,
          // used for tap counting
          this.pTime = false;
          this.pCenter = false;

          this._timer = null;
          this._input = null;
          this.count = 0;
        }

        inherit(TapRecognizer, Recognizer, {
          /**
           * @namespace
           * @memberof PinchRecognizer
           */
          defaults: {
            event: 'tap',
            pointers: 1,
            taps: 1,
            interval: 300, // max time between the multi-tap taps
            time: 250, // max time of the pointer to be down (like finger on the screen)
            threshold: 9, // a minimal movement is ok, but keep it low
            posThreshold: 10 // a multi-tap can be a bit off the initial position
          },

          getTouchAction: function getTouchAction() {
            return [TOUCH_ACTION_MANIPULATION];
          },

          process: function process(input) {
            var options = this.options;

            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;

            this.reset();

            if (input.eventType & INPUT_START && this.count === 0) {
              return this.failTimeout();
            }

            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (validMovement && validTouchTime && validPointers) {
              if (input.eventType != INPUT_END) {
                return this.failTimeout();
              }

              var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
              var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

              this.pTime = input.timeStamp;
              this.pCenter = input.center;

              if (!validMultiTap || !validInterval) {
                this.count = 1;
              } else {
                this.count += 1;
              }

              this._input = input;

              // if tap count matches we have recognized it,
              // else it has began recognizing...
              var tapCount = this.count % options.taps;
              if (tapCount === 0) {
                // no failing requirements, immediately trigger the tap event
                // or wait as long as the multitap interval to trigger
                if (!this.hasRequireFailures()) {
                  return STATE_RECOGNIZED;
                } else {
                  this._timer = setTimeoutContext(function () {
                    this.state = STATE_RECOGNIZED;
                    this.tryEmit();
                  }, options.interval, this);
                  return STATE_BEGAN;
                }
              }
            }
            return STATE_FAILED;
          },

          failTimeout: function failTimeout() {
            this._timer = setTimeoutContext(function () {
              this.state = STATE_FAILED;
            }, this.options.interval, this);
            return STATE_FAILED;
          },

          reset: function reset() {
            clearTimeout(this._timer);
          },

          emit: function emit() {
            if (this.state == STATE_RECOGNIZED) {
              this._input.tapCount = this.count;
              this.manager.emit(this.options.event, this._input);
            }
          }
        });

        /**
         * Simple way to create a manager with a default set of recognizers.
         * @param {HTMLElement} element
         * @param {Object} [options]
         * @constructor
         */
        function Hammer(element, options) {
          options = options || {};
          options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
          return new Manager(element, options);
        }

        /**
         * @const {string}
         */
        Hammer.VERSION = '2.0.7';

        /**
         * default settings
         * @namespace
         */
        Hammer.defaults = {
          /**
           * set if DOM events are being triggered.
           * But this is slower and unused by simple implementations, so disabled by default.
           * @type {Boolean}
           * @default false
           */
          domEvents: false,

          /**
           * The value for the touchAction property/fallback.
           * When set to `compute` it will magically set the correct value based on the added recognizers.
           * @type {String}
           * @default compute
           */
          touchAction: TOUCH_ACTION_COMPUTE,

          /**
           * @type {Boolean}
           * @default true
           */
          enable: true,

          /**
           * EXPERIMENTAL FEATURE -- can be removed/changed
           * Change the parent input target element.
           * If Null, then it is being set the to main element.
           * @type {Null|EventTarget}
           * @default null
           */
          inputTarget: null,

          /**
           * force an input class
           * @type {Null|Function}
           * @default null
           */
          inputClass: null,

          /**
           * Default recognizer setup when calling `Hammer()`
           * When creating a new Manager these will be skipped.
           * @type {Array}
           */
          preset: [
          // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
          [RotateRecognizer, { enable: false }], [PinchRecognizer, { enable: false }, ['rotate']], [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL }], [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']], [TapRecognizer], [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']], [PressRecognizer]],

          /**
           * Some CSS properties can be used to improve the working of Hammer.
           * Add them to this method and they will be set when creating a new Manager.
           * @namespace
           */
          cssProps: {
            /**
             * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userSelect: 'none',

            /**
             * Disable the Windows Phone grippers when pressing an element.
             * @type {String}
             * @default 'none'
             */
            touchSelect: 'none',

            /**
             * Disables the default callout shown when you touch and hold a touch target.
             * On iOS, when you touch and hold a touch target such as a link, Safari displays
             * a callout containing information about the link. This property allows you to disable that callout.
             * @type {String}
             * @default 'none'
             */
            touchCallout: 'none',

            /**
             * Specifies whether zooming is enabled. Used by IE10>
             * @type {String}
             * @default 'none'
             */
            contentZooming: 'none',

            /**
             * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userDrag: 'none',

            /**
             * Overrides the highlight color shown when the user taps a link or a JavaScript
             * clickable element in iOS. This property obeys the alpha value, if specified.
             * @type {String}
             * @default 'rgba(0,0,0,0)'
             */
            tapHighlightColor: 'rgba(0,0,0,0)'
          }
        };

        var STOP = 1;
        var FORCED_STOP = 2;

        /**
         * Manager
         * @param {HTMLElement} element
         * @param {Object} [options]
         * @constructor
         */
        function Manager(element, options) {
          this.options = assign({}, Hammer.defaults, options || {});

          this.options.inputTarget = this.options.inputTarget || element;

          this.handlers = {};
          this.session = {};
          this.recognizers = [];
          this.oldCssProps = {};

          this.element = element;
          this.input = createInputInstance(this);
          this.touchAction = new TouchAction(this, this.options.touchAction);

          toggleCssProps(this, true);

          each(this.options.recognizers, function (item) {
            var recognizer = this.add(new item[0](item[1]));
            item[2] && recognizer.recognizeWith(item[2]);
            item[3] && recognizer.requireFailure(item[3]);
          }, this);
        }

        Manager.prototype = {
          /**
           * set options
           * @param {Object} options
           * @returns {Manager}
           */
          set: function set(options) {
            assign(this.options, options);

            // Options that need a little more setup
            if (options.touchAction) {
              this.touchAction.update();
            }
            if (options.inputTarget) {
              // Clean up existing event listeners and reinitialize
              this.input.destroy();
              this.input.target = options.inputTarget;
              this.input.init();
            }
            return this;
          },

          /**
           * stop recognizing for this session.
           * This session will be discarded, when a new [input]start event is fired.
           * When forced, the recognizer cycle is stopped immediately.
           * @param {Boolean} [force]
           */
          stop: function stop(force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
          },

          /**
           * run the recognizers!
           * called by the inputHandler function on every movement of the pointers (touches)
           * it walks through all the recognizers and tries to detect the gesture that is being made
           * @param {Object} inputData
           */
          recognize: function recognize(inputData) {
            var session = this.session;
            if (session.stopped) {
              return;
            }

            // run the touch-action polyfill
            this.touchAction.preventDefaults(inputData);

            var recognizer;
            var recognizers = this.recognizers;

            // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`
            var curRecognizer = session.curRecognizer;

            // reset when the last recognizer is recognized
            // or when we're in a new session
            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
              curRecognizer = session.curRecognizer = null;
            }

            var i = 0;
            while (i < recognizers.length) {
              recognizer = recognizers[i];

              // find out if we are allowed try to recognize the input for this one.
              // 1.   allow if the session is NOT forced stopped (see the .stop() method)
              // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
              //      that is being recognized.
              // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
              //      this can be setup with the `recognizeWith()` method on the recognizer.
              if (session.stopped !== FORCED_STOP && ( // 1
              !curRecognizer || recognizer == curRecognizer || // 2
              recognizer.canRecognizeWith(curRecognizer))) {
                // 3
                recognizer.recognize(inputData);
              } else {
                recognizer.reset();
              }

              // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
              // current active recognizer. but only if we don't already have an active recognizer
              if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                curRecognizer = session.curRecognizer = recognizer;
              }
              i++;
            }
          },

          /**
           * get a recognizer by its event name.
           * @param {Recognizer|String} recognizer
           * @returns {Recognizer|Null}
           */
          get: function get(recognizer) {
            if (recognizer instanceof Recognizer) {
              return recognizer;
            }

            var recognizers = this.recognizers;
            for (var i = 0; i < recognizers.length; i++) {
              if (recognizers[i].options.event == recognizer) {
                return recognizers[i];
              }
            }
            return null;
          },

          /**
           * add a recognizer to the manager
           * existing recognizers with the same event name will be removed
           * @param {Recognizer} recognizer
           * @returns {Recognizer|Manager}
           */
          add: function add(recognizer) {
            if (invokeArrayArg(recognizer, 'add', this)) {
              return this;
            }

            // remove existing
            var existing = this.get(recognizer.options.event);
            if (existing) {
              this.remove(existing);
            }

            this.recognizers.push(recognizer);
            recognizer.manager = this;

            this.touchAction.update();
            return recognizer;
          },

          /**
           * remove a recognizer by name or instance
           * @param {Recognizer|String} recognizer
           * @returns {Manager}
           */
          remove: function remove(recognizer) {
            if (invokeArrayArg(recognizer, 'remove', this)) {
              return this;
            }

            recognizer = this.get(recognizer);

            // let's make sure this recognizer exists
            if (recognizer) {
              var recognizers = this.recognizers;
              var index = inArray(recognizers, recognizer);

              if (index !== -1) {
                recognizers.splice(index, 1);
                this.touchAction.update();
              }
            }

            return this;
          },

          /**
           * bind event
           * @param {String} events
           * @param {Function} handler
           * @returns {EventEmitter} this
           */
          on: function on(events, handler) {
            if (events === undefined) {
              return;
            }
            if (handler === undefined) {
              return;
            }

            var handlers = this.handlers;
            each(splitStr(events), function (event) {
              handlers[event] = handlers[event] || [];
              handlers[event].push(handler);
            });
            return this;
          },

          /**
           * unbind event, leave emit blank to remove all handlers
           * @param {String} events
           * @param {Function} [handler]
           * @returns {EventEmitter} this
           */
          off: function off(events, handler) {
            if (events === undefined) {
              return;
            }

            var handlers = this.handlers;
            each(splitStr(events), function (event) {
              if (!handler) {
                delete handlers[event];
              } else {
                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
              }
            });
            return this;
          },

          /**
           * emit event to the listeners
           * @param {String} event
           * @param {Object} data
           */
          emit: function emit(event, data) {
            // we also want to trigger dom events
            if (this.options.domEvents) {
              triggerDomEvent(event, data);
            }

            // no handlers, so skip it all
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) {
              return;
            }

            data.type = event;
            data.preventDefault = function () {
              data.srcEvent.preventDefault();
            };

            var i = 0;
            while (i < handlers.length) {
              handlers[i](data);
              i++;
            }
          },

          /**
           * destroy the manager and unbinds all events
           * it doesn't unbind dom events, that is the user own responsibility
           */
          destroy: function destroy() {
            this.element && toggleCssProps(this, false);

            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
          }
        };

        /**
         * add/remove the css properties as defined in manager.options.cssProps
         * @param {Manager} manager
         * @param {Boolean} add
         */
        function toggleCssProps(manager, add) {
          var element = manager.element;
          if (!element.style) {
            return;
          }
          var prop;
          each(manager.options.cssProps, function (value, name) {
            prop = prefixed(element.style, name);
            if (add) {
              manager.oldCssProps[prop] = element.style[prop];
              element.style[prop] = value;
            } else {
              element.style[prop] = manager.oldCssProps[prop] || '';
            }
          });
          if (!add) {
            manager.oldCssProps = {};
          }
        }

        /**
         * trigger dom event
         * @param {String} event
         * @param {Object} data
         */
        function triggerDomEvent(event, data) {
          var gestureEvent = document.createEvent('Event');
          gestureEvent.initEvent(event, true, true);
          gestureEvent.gesture = data;
          data.target.dispatchEvent(gestureEvent);
        }

        assign(Hammer, {
          INPUT_START: INPUT_START,
          INPUT_MOVE: INPUT_MOVE,
          INPUT_END: INPUT_END,
          INPUT_CANCEL: INPUT_CANCEL,

          STATE_POSSIBLE: STATE_POSSIBLE,
          STATE_BEGAN: STATE_BEGAN,
          STATE_CHANGED: STATE_CHANGED,
          STATE_ENDED: STATE_ENDED,
          STATE_RECOGNIZED: STATE_RECOGNIZED,
          STATE_CANCELLED: STATE_CANCELLED,
          STATE_FAILED: STATE_FAILED,

          DIRECTION_NONE: DIRECTION_NONE,
          DIRECTION_LEFT: DIRECTION_LEFT,
          DIRECTION_RIGHT: DIRECTION_RIGHT,
          DIRECTION_UP: DIRECTION_UP,
          DIRECTION_DOWN: DIRECTION_DOWN,
          DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
          DIRECTION_VERTICAL: DIRECTION_VERTICAL,
          DIRECTION_ALL: DIRECTION_ALL,

          Manager: Manager,
          Input: Input,
          TouchAction: TouchAction,

          TouchInput: TouchInput,
          MouseInput: MouseInput,
          PointerEventInput: PointerEventInput,
          TouchMouseInput: TouchMouseInput,
          SingleTouchInput: SingleTouchInput,

          Recognizer: Recognizer,
          AttrRecognizer: AttrRecognizer,
          Tap: TapRecognizer,
          Pan: PanRecognizer,
          Swipe: SwipeRecognizer,
          Pinch: PinchRecognizer,
          Rotate: RotateRecognizer,
          Press: PressRecognizer,

          on: addEventListeners,
          off: removeEventListeners,
          each: each,
          merge: merge,
          extend: extend,
          assign: assign,
          inherit: inherit,
          bindFn: bindFn,
          prefixed: prefixed
        });

        // this prevents errors when Hammer is loaded in the presence of an AMD
        //  style loader but by script tag, not by the loader.
        var freeGlobal = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}; // jshint ignore:line
        freeGlobal.Hammer = Hammer;

        if (true) {
          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
            return Hammer;
          }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if (typeof module != 'undefined' && module.exports) {
          module.exports = Hammer;
        } else {
          window[exportName] = Hammer;
        }
      })(window, document, 'Hammer');

      /***/
    },
    /* 177 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // utils

      exports.util = __webpack_require__(2);
      exports.DOMutil = __webpack_require__(14);

      // data
      exports.DataSet = __webpack_require__(11);
      exports.DataView = __webpack_require__(12);
      exports.Queue = __webpack_require__(43);

      // Timeline
      exports.Timeline = __webpack_require__(178);
      exports.Graph2d = __webpack_require__(180);
      exports.timeline = {
        Core: __webpack_require__(65),
        DateUtil: __webpack_require__(36),
        Range: __webpack_require__(64),
        stack: __webpack_require__(100),
        TimeStep: __webpack_require__(66),

        components: {
          items: {
            Item: __webpack_require__(38),
            BackgroundItem: __webpack_require__(103),
            BoxItem: __webpack_require__(101),
            PointItem: __webpack_require__(102),
            RangeItem: __webpack_require__(70)
          },

          BackgroundGroup: __webpack_require__(69),
          Component: __webpack_require__(16),
          CurrentTime: __webpack_require__(67),
          CustomTime: __webpack_require__(46),
          DataAxis: __webpack_require__(107),
          DataScale: __webpack_require__(108),
          GraphGroup: __webpack_require__(109),
          Group: __webpack_require__(68),
          ItemSet: __webpack_require__(99),
          Legend: __webpack_require__(112),
          LineGraph: __webpack_require__(106),
          TimeAxis: __webpack_require__(45)
        }
      };

      // bundled external libraries
      exports.moment = __webpack_require__(9);
      exports.Hammer = __webpack_require__(10);
      exports.keycharm = __webpack_require__(35);

      /***/
    },
    /* 178 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var moment = __webpack_require__(9);
      var util = __webpack_require__(2);
      var DataSet = __webpack_require__(11);
      var DataView = __webpack_require__(12);
      var Range = __webpack_require__(64);
      var Core = __webpack_require__(65);
      var TimeAxis = __webpack_require__(45);
      var CurrentTime = __webpack_require__(67);
      var CustomTime = __webpack_require__(46);
      var ItemSet = __webpack_require__(99);

      var printStyle = __webpack_require__(15).printStyle;
      var allOptions = __webpack_require__(105).allOptions;
      var configureOptions = __webpack_require__(105).configureOptions;

      var Configurator = __webpack_require__(71)['default'];
      var Validator = __webpack_require__(15)['default'];

      /**
       * Create a timeline visualization
       * @param {HTMLElement} container
       * @param {vis.DataSet | vis.DataView | Array} [items]
       * @param {vis.DataSet | vis.DataView | Array} [groups]
       * @param {Object} [options]  See Timeline.setOptions for the available options.
       * @constructor Timeline
       * @extends Core
       */
      function Timeline(container, items, groups, options) {

        if (!(this instanceof Timeline)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        // if the third element is options, the forth is groups (optionally);
        if (!(Array.isArray(groups) || groups instanceof DataSet || groups instanceof DataView) && groups instanceof Object) {
          var forthArgument = options;
          options = groups;
          groups = forthArgument;
        }

        // TODO: REMOVE THIS in the next MAJOR release
        // see https://github.com/almende/vis/issues/2511
        if (options && options.throttleRedraw) {
          console.warn("Timeline option \"throttleRedraw\" is DEPRICATED and no longer supported. It will be removed in the next MAJOR release.");
        }

        var me = this;
        this.defaultOptions = {
          start: null,
          end: null,
          autoResize: true,
          orientation: {
            axis: 'bottom', // axis orientation: 'bottom', 'top', or 'both'
            item: 'bottom' // not relevant
          },
          moment: moment,
          width: null,
          height: null,
          maxHeight: null,
          minHeight: null
        };
        this.options = util.deepExtend({}, this.defaultOptions);

        // Create the DOM, props, and emitter
        this._create(container);
        if (!options || options && typeof options.rtl == "undefined") {
          this.dom.root.style.visibility = 'hidden';
          var directionFromDom,
              domNode = this.dom.root;
          while (!directionFromDom && domNode) {
            directionFromDom = window.getComputedStyle(domNode, null).direction;
            domNode = domNode.parentElement;
          }
          this.options.rtl = directionFromDom && directionFromDom.toLowerCase() == "rtl";
        } else {
          this.options.rtl = options.rtl;
        }

        this.options.rollingMode = options && options.rollingMode;
        this.options.onInitialDrawComplete = options && options.onInitialDrawComplete;

        // all components listed here will be repainted automatically
        this.components = [];

        this.body = {
          dom: this.dom,
          domProps: this.props,
          emitter: {
            on: this.on.bind(this),
            off: this.off.bind(this),
            emit: this.emit.bind(this)
          },
          hiddenDates: [],
          util: {
            getScale: function getScale() {
              return me.timeAxis.step.scale;
            },
            getStep: function getStep() {
              return me.timeAxis.step.step;
            },

            toScreen: me._toScreen.bind(me),
            toGlobalScreen: me._toGlobalScreen.bind(me), // this refers to the root.width
            toTime: me._toTime.bind(me),
            toGlobalTime: me._toGlobalTime.bind(me)
          }
        };

        // range
        this.range = new Range(this.body, this.options);
        this.components.push(this.range);
        this.body.range = this.range;

        // time axis
        this.timeAxis = new TimeAxis(this.body, this.options);
        this.timeAxis2 = null; // used in case of orientation option 'both'
        this.components.push(this.timeAxis);

        // current time bar
        this.currentTime = new CurrentTime(this.body, this.options);
        this.components.push(this.currentTime);

        // item set
        this.itemSet = new ItemSet(this.body, this.options);
        this.components.push(this.itemSet);

        this.itemsData = null; // DataSet
        this.groupsData = null; // DataSet

        this.dom.root.onclick = function (event) {
          me.emit('click', me.getEventProperties(event));
        };
        this.dom.root.ondblclick = function (event) {
          me.emit('doubleClick', me.getEventProperties(event));
        };
        this.dom.root.oncontextmenu = function (event) {
          me.emit('contextmenu', me.getEventProperties(event));
        };
        this.dom.root.onmouseover = function (event) {
          me.emit('mouseOver', me.getEventProperties(event));
        };
        if (window.PointerEvent) {
          this.dom.root.onpointerdown = function (event) {
            me.emit('mouseDown', me.getEventProperties(event));
          };
          this.dom.root.onpointermove = function (event) {
            me.emit('mouseMove', me.getEventProperties(event));
          };
          this.dom.root.onpointerup = function (event) {
            me.emit('mouseUp', me.getEventProperties(event));
          };
        } else {
          this.dom.root.onmousemove = function (event) {
            me.emit('mouseMove', me.getEventProperties(event));
          };
          this.dom.root.onmousedown = function (event) {
            me.emit('mouseDown', me.getEventProperties(event));
          };
          this.dom.root.onmouseup = function (event) {
            me.emit('mouseUp', me.getEventProperties(event));
          };
        }

        //Single time autoscale/fit
        this.initialFitDone = false;
        this.on('changed', function () {
          if (this.itemsData == null || this.options.rollingMode) return;
          if (!me.initialFitDone) {
            me.initialFitDone = true;
            if (me.options.start != undefined || me.options.end != undefined) {
              if (me.options.start == undefined || me.options.end == undefined) {
                var range = me.getItemRange();
              }

              var start = me.options.start != undefined ? me.options.start : range.min;
              var end = me.options.end != undefined ? me.options.end : range.max;
              me.setWindow(start, end, { animation: false });
            } else {
              me.fit({ animation: false });
            }
          }

          if (!me.initialDrawDone && me.initialRangeChangeDone) {
            me.initialDrawDone = true;
            me.dom.root.style.visibility = 'visible';
            if (me.options.onInitialDrawComplete) {
              setTimeout(function () {
                return me.options.onInitialDrawComplete();
              }, 0);
            }
          }
        });

        // apply options
        if (options) {
          this.setOptions(options);
        }

        // IMPORTANT: THIS HAPPENS BEFORE SET ITEMS!
        if (groups) {
          this.setGroups(groups);
        }

        // create itemset
        if (items) {
          this.setItems(items);
        }

        // draw for the first time
        this._redraw();
      }

      // Extend the functionality from Core
      Timeline.prototype = new Core();

      /**
       * Load a configurator
       * @return {Object}
       * @private
       */
      Timeline.prototype._createConfigurator = function () {
        return new Configurator(this, this.dom.container, configureOptions);
      };

      /**
       * Force a redraw. The size of all items will be recalculated.
       * Can be useful to manually redraw when option autoResize=false and the window
       * has been resized, or when the items CSS has been changed.
       *
       * Note: this function will be overridden on construction with a trottled version
       */
      Timeline.prototype.redraw = function () {
        this.itemSet && this.itemSet.markDirty({ refreshItems: true });
        this._redraw();
      };

      Timeline.prototype.setOptions = function (options) {
        // validate options
        var errorFound = Validator.validate(options, allOptions);

        if (errorFound === true) {
          console.log('%cErrors have been found in the supplied options object.', printStyle);
        }
        Core.prototype.setOptions.call(this, options);

        if ('type' in options) {
          if (options.type !== this.options.type) {
            this.options.type = options.type;

            // force recreation of all items
            var itemsData = this.itemsData;
            if (itemsData) {
              var selection = this.getSelection();
              this.setItems(null); // remove all
              this.setItems(itemsData); // add all
              this.setSelection(selection); // restore selection
            }
          }
        }
      };

      /**
       * Set items
       * @param {vis.DataSet | Array | null} items
       */
      Timeline.prototype.setItems = function (items) {
        // convert to type DataSet when needed
        var newDataSet;
        if (!items) {
          newDataSet = null;
        } else if (items instanceof DataSet || items instanceof DataView) {
          newDataSet = items;
        } else {
          // turn an array into a dataset
          newDataSet = new DataSet(items, {
            type: {
              start: 'Date',
              end: 'Date'
            }
          });
        }

        // set items
        this.itemsData = newDataSet;
        this.itemSet && this.itemSet.setItems(newDataSet);
      };

      /**
       * Set groups
       * @param {vis.DataSet | Array} groups
       */
      Timeline.prototype.setGroups = function (groups) {
        // convert to type DataSet when needed
        var newDataSet;
        if (!groups) {
          newDataSet = null;
        } else {
          var filter = function filter(group) {
            return group.visible !== false;
          };
          if (groups instanceof DataSet || groups instanceof DataView) {
            newDataSet = new DataView(groups, { filter: filter });
          } else {
            // turn an array into a dataset
            newDataSet = new DataSet(groups.filter(filter));
          }
        }

        this.groupsData = newDataSet;
        this.itemSet.setGroups(newDataSet);
      };

      /**
       * Set both items and groups in one go
       * @param {{items: (Array | vis.DataSet), groups: (Array | vis.DataSet)}} data
       */
      Timeline.prototype.setData = function (data) {
        if (data && data.groups) {
          this.setGroups(data.groups);
        }

        if (data && data.items) {
          this.setItems(data.items);
        }
      };

      /**
       * Set selected items by their id. Replaces the current selection
       * Unknown id's are silently ignored.
       * @param {string[] | string} [ids]  An array with zero or more id's of the items to be
       *                                selected. If ids is an empty array, all items will be
       *                                unselected.
       * @param {Object} [options]      Available options:
       *                                `focus: boolean`
       *                                    If true, focus will be set to the selected item(s)
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       *                                    Only applicable when option focus is true.
       */
      Timeline.prototype.setSelection = function (ids, options) {
        this.itemSet && this.itemSet.setSelection(ids);

        if (options && options.focus) {
          this.focus(ids, options);
        }
      };

      /**
       * Get the selected items by their id
       * @return {Array} ids  The ids of the selected items
       */
      Timeline.prototype.getSelection = function () {
        return this.itemSet && this.itemSet.getSelection() || [];
      };

      /**
       * Adjust the visible window such that the selected item (or multiple items)
       * are centered on screen.
       * @param {string | String[]} id     An item id or array with item ids
       * @param {Object} [options]      Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       */
      Timeline.prototype.focus = function (id, options) {
        if (!this.itemsData || id == undefined) return;

        var ids = Array.isArray(id) ? id : [id];

        // get the specified item(s)
        var itemsData = this.itemsData.getDataSet().get(ids, {
          type: {
            start: 'Date',
            end: 'Date'
          }
        });

        // calculate minimum start and maximum end of specified items
        var start = null;
        var end = null;
        itemsData.forEach(function (itemData) {
          var s = itemData.start.valueOf();
          var e = 'end' in itemData ? itemData.end.valueOf() : itemData.start.valueOf();

          if (start === null || s < start) {
            start = s;
          }

          if (end === null || e > end) {
            end = e;
          }
        });

        if (start !== null && end !== null) {
          var me = this;
          // Use the first item for the vertical focus
          var item = this.itemSet.items[ids[0]];
          var startPos = this._getScrollTop() * -1;
          var initialVerticalScroll = null;

          // Setup a handler for each frame of the vertical scroll
          var verticalAnimationFrame = function verticalAnimationFrame(ease, willDraw, done) {
            var verticalScroll = getItemVerticalScroll(me, item);

            if (!initialVerticalScroll) {
              initialVerticalScroll = verticalScroll;
            }

            if (initialVerticalScroll.itemTop == verticalScroll.itemTop && !initialVerticalScroll.shouldScroll) {
              return; // We don't need to scroll, so do nothing
            } else if (initialVerticalScroll.itemTop != verticalScroll.itemTop && verticalScroll.shouldScroll) {
              // The redraw shifted elements, so reset the animation to correct
              initialVerticalScroll = verticalScroll;
              startPos = me._getScrollTop() * -1;
            }

            var from = startPos;
            var to = initialVerticalScroll.scrollOffset;
            var scrollTop = done ? to : from + (to - from) * ease;

            me._setScrollTop(-scrollTop);

            if (!willDraw) {
              me._redraw();
            }
          };

          // Enforces the final vertical scroll position
          var setFinalVerticalPosition = function setFinalVerticalPosition() {
            var finalVerticalScroll = getItemVerticalScroll(me, item);

            if (finalVerticalScroll.shouldScroll && finalVerticalScroll.itemTop != initialVerticalScroll.itemTop) {
              me._setScrollTop(-finalVerticalScroll.scrollOffset);
              me._redraw();
            }
          };

          // Perform one last check at the end to make sure the final vertical
          // position is correct
          var finalVerticalCallback = function finalVerticalCallback() {
            // Double check we ended at the proper scroll position
            setFinalVerticalPosition();

            // Let the redraw settle and finalize the position.      
            setTimeout(setFinalVerticalPosition, 100);
          };

          // calculate the new middle and interval for the window
          var middle = (start + end) / 2;
          var interval = Math.max(this.range.end - this.range.start, (end - start) * 1.1);

          var animation = options && options.animation !== undefined ? options.animation : true;

          if (!animation) {
            // We aren't animating so set a default so that the final callback forces the vertical location
            initialVerticalScroll = { shouldScroll: false, scrollOffset: -1, itemTop: -1 };
          }

          this.range.setRange(middle - interval / 2, middle + interval / 2, { animation: animation }, finalVerticalCallback, verticalAnimationFrame);
        }
      };

      /**
       * Set Timeline window such that it fits all items
       * @param {Object} [options]  Available options:
       *                                `animation: boolean | {duration: number, easingFunction: string}`
       *                                    If true (default), the range is animated
       *                                    smoothly to the new window. An object can be
       *                                    provided to specify duration and easing function.
       *                                    Default duration is 500 ms, and default easing
       *                                    function is 'easeInOutQuad'.
       * @param {function} [callback]
       */
      Timeline.prototype.fit = function (options, callback) {
        var animation = options && options.animation !== undefined ? options.animation : true;
        var range;

        var dataset = this.itemsData && this.itemsData.getDataSet();
        if (dataset.length === 1 && dataset.get()[0].end === undefined) {
          // a single item -> don't fit, just show a range around the item from -4 to +3 days
          range = this.getDataRange();
          this.moveTo(range.min.valueOf(), { animation: animation }, callback);
        } else {
          // exactly fit the items (plus a small margin)
          range = this.getItemRange();
          this.range.setRange(range.min, range.max, { animation: animation }, callback);
        }
      };

      /**
       *
       * @param {vis.Item} item
       * @returns {number}
       */
      function getStart(item) {
        return util.convert(item.data.start, 'Date').valueOf();
      }

      /**
       *
       * @param {vis.Item} item
       * @returns {number}
       */
      function getEnd(item) {
        var end = item.data.end != undefined ? item.data.end : item.data.start;
        return util.convert(end, 'Date').valueOf();
      }

      /**
       * @param {vis.Timeline} timeline
       * @param {vis.Item} item
       * @return {{shouldScroll: bool, scrollOffset: number, itemTop: number}}
       */
      function getItemVerticalScroll(timeline, item) {
        var leftHeight = timeline.props.leftContainer.height;
        var contentHeight = timeline.props.left.height;

        var group = item.parent;
        var offset = group.top;
        var shouldScroll = true;
        var orientation = timeline.timeAxis.options.orientation.axis;

        var itemTop = function itemTop() {
          if (orientation == "bottom") {
            return group.height - item.top - item.height;
          } else {
            return item.top;
          }
        };

        var currentScrollHeight = timeline._getScrollTop() * -1;
        var targetOffset = offset + itemTop();
        var height = item.height;

        if (targetOffset < currentScrollHeight) {
          if (offset + leftHeight <= offset + itemTop() + height) {
            offset += itemTop() - timeline.itemSet.options.margin.item.vertical;
          }
        } else if (targetOffset + height > currentScrollHeight + leftHeight) {
          offset += itemTop() + height - leftHeight + timeline.itemSet.options.margin.item.vertical;
        } else {
          shouldScroll = false;
        }

        offset = Math.min(offset, contentHeight - leftHeight);

        return { shouldScroll: shouldScroll, scrollOffset: offset, itemTop: targetOffset };
      }

      /**
       * Determine the range of the items, taking into account their actual width
       * and a margin of 10 pixels on both sides.
       *
       * @returns {{min: Date, max: Date}}
       */
      Timeline.prototype.getItemRange = function () {
        // get a rough approximation for the range based on the items start and end dates
        var range = this.getDataRange();
        var min = range.min !== null ? range.min.valueOf() : null;
        var max = range.max !== null ? range.max.valueOf() : null;
        var minItem = null;
        var maxItem = null;

        if (min != null && max != null) {
          var interval = max - min; // ms
          if (interval <= 0) {
            interval = 10;
          }
          var factor = interval / this.props.center.width;

          var redrawQueue = {};
          var redrawQueueLength = 0;

          // collect redraw functions
          util.forEach(this.itemSet.items, function (item, key) {
            if (item.groupShowing) {
              var returnQueue = true;
              redrawQueue[key] = item.redraw(returnQueue);
              redrawQueueLength = redrawQueue[key].length;
            }
          });

          var needRedraw = redrawQueueLength > 0;
          if (needRedraw) {
            // redraw all regular items
            for (var i = 0; i < redrawQueueLength; i++) {
              util.forEach(redrawQueue, function (fns) {
                fns[i]();
              });
            }
          }

          // calculate the date of the left side and right side of the items given
          util.forEach(this.itemSet.items, function (item) {
            var start = getStart(item);
            var end = getEnd(item);
            var startSide;
            var endSide;

            if (this.options.rtl) {
              startSide = start - (item.getWidthRight() + 10) * factor;
              endSide = end + (item.getWidthLeft() + 10) * factor;
            } else {
              startSide = start - (item.getWidthLeft() + 10) * factor;
              endSide = end + (item.getWidthRight() + 10) * factor;
            }

            if (startSide < min) {
              min = startSide;
              minItem = item;
            }
            if (endSide > max) {
              max = endSide;
              maxItem = item;
            }
          }.bind(this));

          if (minItem && maxItem) {
            var lhs = minItem.getWidthLeft() + 10;
            var rhs = maxItem.getWidthRight() + 10;
            var delta = this.props.center.width - lhs - rhs; // px

            if (delta > 0) {
              if (this.options.rtl) {
                min = getStart(minItem) - rhs * interval / delta; // ms
                max = getEnd(maxItem) + lhs * interval / delta; // ms
              } else {
                min = getStart(minItem) - lhs * interval / delta; // ms
                max = getEnd(maxItem) + rhs * interval / delta; // ms
              }
            }
          }
        }

        return {
          min: min != null ? new Date(min) : null,
          max: max != null ? new Date(max) : null
        };
      };

      /**
       * Calculate the data range of the items start and end dates
       * @returns {{min: Date, max: Date}}
       */
      Timeline.prototype.getDataRange = function () {
        var min = null;
        var max = null;

        var dataset = this.itemsData && this.itemsData.getDataSet();
        if (dataset) {
          dataset.forEach(function (item) {
            var start = util.convert(item.start, 'Date').valueOf();
            var end = util.convert(item.end != undefined ? item.end : item.start, 'Date').valueOf();
            if (min === null || start < min) {
              min = start;
            }
            if (max === null || end > max) {
              max = end;
            }
          });
        }

        return {
          min: min != null ? new Date(min) : null,
          max: max != null ? new Date(max) : null
        };
      };

      /**
       * Generate Timeline related information from an event
       * @param {Event} event
       * @return {Object} An object with related information, like on which area
       *                  The event happened, whether clicked on an item, etc.
       */
      Timeline.prototype.getEventProperties = function (event) {
        var clientX = event.center ? event.center.x : event.clientX;
        var clientY = event.center ? event.center.y : event.clientY;
        var x;
        if (this.options.rtl) {
          x = util.getAbsoluteRight(this.dom.centerContainer) - clientX;
        } else {
          x = clientX - util.getAbsoluteLeft(this.dom.centerContainer);
        }
        var y = clientY - util.getAbsoluteTop(this.dom.centerContainer);

        var item = this.itemSet.itemFromTarget(event);
        var group = this.itemSet.groupFromTarget(event);
        var customTime = CustomTime.customTimeFromTarget(event);

        var snap = this.itemSet.options.snap || null;
        var scale = this.body.util.getScale();
        var step = this.body.util.getStep();
        var time = this._toTime(x);
        var snappedTime = snap ? snap(time, scale, step) : time;

        var element = util.getTarget(event);
        var what = null;
        if (item != null) {
          what = 'item';
        } else if (customTime != null) {
          what = 'custom-time';
        } else if (util.hasParent(element, this.timeAxis.dom.foreground)) {
          what = 'axis';
        } else if (this.timeAxis2 && util.hasParent(element, this.timeAxis2.dom.foreground)) {
          what = 'axis';
        } else if (util.hasParent(element, this.itemSet.dom.labelSet)) {
          what = 'group-label';
        } else if (util.hasParent(element, this.currentTime.bar)) {
          what = 'current-time';
        } else if (util.hasParent(element, this.dom.center)) {
          what = 'background';
        }

        return {
          event: event,
          item: item ? item.id : null,
          group: group ? group.groupId : null,
          what: what,
          pageX: event.srcEvent ? event.srcEvent.pageX : event.pageX,
          pageY: event.srcEvent ? event.srcEvent.pageY : event.pageY,
          x: x,
          y: y,
          time: time,
          snappedTime: snappedTime
        };
      };

      /**
       * Toggle Timeline rolling mode
       */

      Timeline.prototype.toggleRollingMode = function () {
        if (this.range.rolling) {
          this.range.stopRolling();
        } else {
          if (this.options.rollingMode == undefined) {
            this.setOptions(this.options);
          }
          this.range.startRolling();
        }
      };

      module.exports = Timeline;

      /***/
    },
    /* 179 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _stringify = __webpack_require__(19);

      var _stringify2 = _interopRequireDefault(_stringify);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var Hammer = __webpack_require__(10);
      var hammerUtil = __webpack_require__(37);
      var util = __webpack_require__(2);

      /**
       * @param {number} [pixelRatio=1]
       */

      var ColorPicker = function () {
        /**
         * @param {number} [pixelRatio=1]
         */
        function ColorPicker() {
          var pixelRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
          (0, _classCallCheck3['default'])(this, ColorPicker);

          this.pixelRatio = pixelRatio;
          this.generated = false;
          this.centerCoordinates = { x: 289 / 2, y: 289 / 2 };
          this.r = 289 * 0.49;
          this.color = { r: 255, g: 255, b: 255, a: 1.0 };
          this.hueCircle = undefined;
          this.initialColor = { r: 255, g: 255, b: 255, a: 1.0 };
          this.previousColor = undefined;
          this.applied = false;

          // bound by
          this.updateCallback = function () {};
          this.closeCallback = function () {};

          // create all DOM elements
          this._create();
        }

        /**
         * this inserts the colorPicker into a div from the DOM
         * @param {Element} container
         */

        (0, _createClass3['default'])(ColorPicker, [{
          key: 'insertTo',
          value: function insertTo(container) {
            if (this.hammer !== undefined) {
              this.hammer.destroy();
              this.hammer = undefined;
            }
            this.container = container;
            this.container.appendChild(this.frame);
            this._bindHammer();

            this._setSize();
          }

          /**
           * the callback is executed on apply and save. Bind it to the application
           * @param {function} callback
           */

        }, {
          key: 'setUpdateCallback',
          value: function setUpdateCallback(callback) {
            if (typeof callback === 'function') {
              this.updateCallback = callback;
            } else {
              throw new Error("Function attempted to set as colorPicker update callback is not a function.");
            }
          }

          /**
           * the callback is executed on apply and save. Bind it to the application
           * @param {function} callback
           */

        }, {
          key: 'setCloseCallback',
          value: function setCloseCallback(callback) {
            if (typeof callback === 'function') {
              this.closeCallback = callback;
            } else {
              throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
            }
          }

          /**
           *
           * @param {string} color
           * @returns {String}
           * @private
           */

        }, {
          key: '_isColorString',
          value: function _isColorString(color) {
            var htmlColors = { black: '#000000', navy: '#000080', darkblue: '#00008B', mediumblue: '#0000CD', blue: '#0000FF', darkgreen: '#006400', green: '#008000', teal: '#008080', darkcyan: '#008B8B', deepskyblue: '#00BFFF', darkturquoise: '#00CED1', mediumspringgreen: '#00FA9A', lime: '#00FF00', springgreen: '#00FF7F', aqua: '#00FFFF', cyan: '#00FFFF', midnightblue: '#191970', dodgerblue: '#1E90FF', lightseagreen: '#20B2AA', forestgreen: '#228B22', seagreen: '#2E8B57', darkslategray: '#2F4F4F', limegreen: '#32CD32', mediumseagreen: '#3CB371', turquoise: '#40E0D0', royalblue: '#4169E1', steelblue: '#4682B4', darkslateblue: '#483D8B', mediumturquoise: '#48D1CC', indigo: '#4B0082', darkolivegreen: '#556B2F', cadetblue: '#5F9EA0', cornflowerblue: '#6495ED', mediumaquamarine: '#66CDAA', dimgray: '#696969', slateblue: '#6A5ACD', olivedrab: '#6B8E23', slategray: '#708090', lightslategray: '#778899', mediumslateblue: '#7B68EE', lawngreen: '#7CFC00', chartreuse: '#7FFF00', aquamarine: '#7FFFD4', maroon: '#800000', purple: '#800080', olive: '#808000', gray: '#808080', skyblue: '#87CEEB', lightskyblue: '#87CEFA', blueviolet: '#8A2BE2', darkred: '#8B0000', darkmagenta: '#8B008B', saddlebrown: '#8B4513', darkseagreen: '#8FBC8F', lightgreen: '#90EE90', mediumpurple: '#9370D8', darkviolet: '#9400D3', palegreen: '#98FB98', darkorchid: '#9932CC', yellowgreen: '#9ACD32', sienna: '#A0522D', brown: '#A52A2A', darkgray: '#A9A9A9', lightblue: '#ADD8E6', greenyellow: '#ADFF2F', paleturquoise: '#AFEEEE', lightsteelblue: '#B0C4DE', powderblue: '#B0E0E6', firebrick: '#B22222', darkgoldenrod: '#B8860B', mediumorchid: '#BA55D3', rosybrown: '#BC8F8F', darkkhaki: '#BDB76B', silver: '#C0C0C0', mediumvioletred: '#C71585', indianred: '#CD5C5C', peru: '#CD853F', chocolate: '#D2691E', tan: '#D2B48C', lightgrey: '#D3D3D3', palevioletred: '#D87093', thistle: '#D8BFD8', orchid: '#DA70D6', goldenrod: '#DAA520', crimson: '#DC143C', gainsboro: '#DCDCDC', plum: '#DDA0DD', burlywood: '#DEB887', lightcyan: '#E0FFFF', lavender: '#E6E6FA', darksalmon: '#E9967A', violet: '#EE82EE', palegoldenrod: '#EEE8AA', lightcoral: '#F08080', khaki: '#F0E68C', aliceblue: '#F0F8FF', honeydew: '#F0FFF0', azure: '#F0FFFF', sandybrown: '#F4A460', wheat: '#F5DEB3', beige: '#F5F5DC', whitesmoke: '#F5F5F5', mintcream: '#F5FFFA', ghostwhite: '#F8F8FF', salmon: '#FA8072', antiquewhite: '#FAEBD7', linen: '#FAF0E6', lightgoldenrodyellow: '#FAFAD2', oldlace: '#FDF5E6', red: '#FF0000', fuchsia: '#FF00FF', magenta: '#FF00FF', deeppink: '#FF1493', orangered: '#FF4500', tomato: '#FF6347', hotpink: '#FF69B4', coral: '#FF7F50', darkorange: '#FF8C00', lightsalmon: '#FFA07A', orange: '#FFA500', lightpink: '#FFB6C1', pink: '#FFC0CB', gold: '#FFD700', peachpuff: '#FFDAB9', navajowhite: '#FFDEAD', moccasin: '#FFE4B5', bisque: '#FFE4C4', mistyrose: '#FFE4E1', blanchedalmond: '#FFEBCD', papayawhip: '#FFEFD5', lavenderblush: '#FFF0F5', seashell: '#FFF5EE', cornsilk: '#FFF8DC', lemonchiffon: '#FFFACD', floralwhite: '#FFFAF0', snow: '#FFFAFA', yellow: '#FFFF00', lightyellow: '#FFFFE0', ivory: '#FFFFF0', white: '#FFFFFF' };
            if (typeof color === 'string') {
              return htmlColors[color];
            }
          }

          /**
           * Set the color of the colorPicker
           * Supported formats:
           * 'red'                   --> HTML color string
           * '#ffffff'               --> hex string
           * 'rbg(255,255,255)'      --> rgb string
           * 'rgba(255,255,255,1.0)' --> rgba string
           * {r:255,g:255,b:255}     --> rgb object
           * {r:255,g:255,b:255,a:1.0} --> rgba object
           * @param {string|Object} color
           * @param {boolean} [setInitial=true]
           */

        }, {
          key: 'setColor',
          value: function setColor(color) {
            var setInitial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (color === 'none') {
              return;
            }

            var rgba = void 0;

            // if a html color shorthand is used, convert to hex
            var htmlColor = this._isColorString(color);
            if (htmlColor !== undefined) {
              color = htmlColor;
            }

            // check format
            if (util.isString(color) === true) {
              if (util.isValidRGB(color) === true) {
                var rgbaArray = color.substr(4).substr(0, color.length - 5).split(',');
                rgba = { r: rgbaArray[0], g: rgbaArray[1], b: rgbaArray[2], a: 1.0 };
              } else if (util.isValidRGBA(color) === true) {
                var _rgbaArray = color.substr(5).substr(0, color.length - 6).split(',');
                rgba = { r: _rgbaArray[0], g: _rgbaArray[1], b: _rgbaArray[2], a: _rgbaArray[3] };
              } else if (util.isValidHex(color) === true) {
                var rgbObj = util.hexToRGB(color);
                rgba = { r: rgbObj.r, g: rgbObj.g, b: rgbObj.b, a: 1.0 };
              }
            } else {
              if (color instanceof Object) {
                if (color.r !== undefined && color.g !== undefined && color.b !== undefined) {
                  var alpha = color.a !== undefined ? color.a : '1.0';
                  rgba = { r: color.r, g: color.g, b: color.b, a: alpha };
                }
              }
            }

            // set color
            if (rgba === undefined) {
              throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + (0, _stringify2['default'])(color));
            } else {
              this._setColor(rgba, setInitial);
            }
          }

          /**
           * this shows the color picker.
           * The hue circle is constructed once and stored.
           */

        }, {
          key: 'show',
          value: function show() {
            if (this.closeCallback !== undefined) {
              this.closeCallback();
              this.closeCallback = undefined;
            }

            this.applied = false;
            this.frame.style.display = 'block';
            this._generateHueCircle();
          }

          // ------------------------------------------ PRIVATE ----------------------------- //

          /**
           * Hide the picker. Is called by the cancel button.
           * Optional boolean to store the previous color for easy access later on.
           * @param {boolean} [storePrevious=true]
           * @private
           */

        }, {
          key: '_hide',
          value: function _hide() {
            var _this = this;

            var storePrevious = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            // store the previous color for next time;
            if (storePrevious === true) {
              this.previousColor = util.extend({}, this.color);
            }

            if (this.applied === true) {
              this.updateCallback(this.initialColor);
            }

            this.frame.style.display = 'none';

            // call the closing callback, restoring the onclick method.
            // this is in a setTimeout because it will trigger the show again before the click is done.
            setTimeout(function () {
              if (_this.closeCallback !== undefined) {
                _this.closeCallback();
                _this.closeCallback = undefined;
              }
            }, 0);
          }

          /**
           * bound to the save button. Saves and hides.
           * @private
           */

        }, {
          key: '_save',
          value: function _save() {
            this.updateCallback(this.color);
            this.applied = false;
            this._hide();
          }

          /**
           * Bound to apply button. Saves but does not close. Is undone by the cancel button.
           * @private
           */

        }, {
          key: '_apply',
          value: function _apply() {
            this.applied = true;
            this.updateCallback(this.color);
            this._updatePicker(this.color);
          }

          /**
           * load the color from the previous session.
           * @private
           */

        }, {
          key: '_loadLast',
          value: function _loadLast() {
            if (this.previousColor !== undefined) {
              this.setColor(this.previousColor, false);
            } else {
              alert("There is no last color to load...");
            }
          }

          /**
           * set the color, place the picker
           * @param {Object} rgba
           * @param {boolean} [setInitial=true]
           * @private
           */

        }, {
          key: '_setColor',
          value: function _setColor(rgba) {
            var setInitial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            // store the initial color
            if (setInitial === true) {
              this.initialColor = util.extend({}, rgba);
            }

            this.color = rgba;
            var hsv = util.RGBToHSV(rgba.r, rgba.g, rgba.b);

            var angleConvert = 2 * Math.PI;
            var radius = this.r * hsv.s;
            var x = this.centerCoordinates.x + radius * Math.sin(angleConvert * hsv.h);
            var y = this.centerCoordinates.y + radius * Math.cos(angleConvert * hsv.h);

            this.colorPickerSelector.style.left = x - 0.5 * this.colorPickerSelector.clientWidth + 'px';
            this.colorPickerSelector.style.top = y - 0.5 * this.colorPickerSelector.clientHeight + 'px';

            this._updatePicker(rgba);
          }

          /**
           * bound to opacity control
           * @param {number} value
           * @private
           */

        }, {
          key: '_setOpacity',
          value: function _setOpacity(value) {
            this.color.a = value / 100;
            this._updatePicker(this.color);
          }

          /**
           * bound to brightness control
           * @param {number} value
           * @private
           */

        }, {
          key: '_setBrightness',
          value: function _setBrightness(value) {
            var hsv = util.RGBToHSV(this.color.r, this.color.g, this.color.b);
            hsv.v = value / 100;
            var rgba = util.HSVToRGB(hsv.h, hsv.s, hsv.v);
            rgba['a'] = this.color.a;
            this.color = rgba;
            this._updatePicker();
          }

          /**
           * update the color picker. A black circle overlays the hue circle to mimic the brightness decreasing.
           * @param {Object} rgba
           * @private
           */

        }, {
          key: '_updatePicker',
          value: function _updatePicker() {
            var rgba = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.color;

            var hsv = util.RGBToHSV(rgba.r, rgba.g, rgba.b);
            var ctx = this.colorPickerCanvas.getContext('2d');
            if (this.pixelRation === undefined) {
              this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
            }
            ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);

            // clear the canvas
            var w = this.colorPickerCanvas.clientWidth;
            var h = this.colorPickerCanvas.clientHeight;
            ctx.clearRect(0, 0, w, h);

            ctx.putImageData(this.hueCircle, 0, 0);
            ctx.fillStyle = 'rgba(0,0,0,' + (1 - hsv.v) + ')';
            ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
            ctx.fill();

            this.brightnessRange.value = 100 * hsv.v;
            this.opacityRange.value = 100 * rgba.a;

            this.initialColorDiv.style.backgroundColor = 'rgba(' + this.initialColor.r + ',' + this.initialColor.g + ',' + this.initialColor.b + ',' + this.initialColor.a + ')';
            this.newColorDiv.style.backgroundColor = 'rgba(' + this.color.r + ',' + this.color.g + ',' + this.color.b + ',' + this.color.a + ')';
          }

          /**
           * used by create to set the size of the canvas.
           * @private
           */

        }, {
          key: '_setSize',
          value: function _setSize() {
            this.colorPickerCanvas.style.width = '100%';
            this.colorPickerCanvas.style.height = '100%';

            this.colorPickerCanvas.width = 289 * this.pixelRatio;
            this.colorPickerCanvas.height = 289 * this.pixelRatio;
          }

          /**
           * create all dom elements
           * TODO: cleanup, lots of similar dom elements
           * @private
           */

        }, {
          key: '_create',
          value: function _create() {
            this.frame = document.createElement('div');
            this.frame.className = 'vis-color-picker';

            this.colorPickerDiv = document.createElement('div');
            this.colorPickerSelector = document.createElement('div');
            this.colorPickerSelector.className = 'vis-selector';
            this.colorPickerDiv.appendChild(this.colorPickerSelector);

            this.colorPickerCanvas = document.createElement('canvas');
            this.colorPickerDiv.appendChild(this.colorPickerCanvas);

            if (!this.colorPickerCanvas.getContext) {
              var noCanvas = document.createElement('DIV');
              noCanvas.style.color = 'red';
              noCanvas.style.fontWeight = 'bold';
              noCanvas.style.padding = '10px';
              noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
              this.colorPickerCanvas.appendChild(noCanvas);
            } else {
              var ctx = this.colorPickerCanvas.getContext("2d");
              this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);

              this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
            }

            this.colorPickerDiv.className = 'vis-color';

            this.opacityDiv = document.createElement('div');
            this.opacityDiv.className = 'vis-opacity';

            this.brightnessDiv = document.createElement('div');
            this.brightnessDiv.className = 'vis-brightness';

            this.arrowDiv = document.createElement('div');
            this.arrowDiv.className = 'vis-arrow';

            this.opacityRange = document.createElement('input');
            try {
              this.opacityRange.type = 'range'; // Not supported on IE9
              this.opacityRange.min = '0';
              this.opacityRange.max = '100';
            }
            // TODO: Add some error handling and remove this lint exception
            catch (err) {} // eslint-disable-line no-empty
            this.opacityRange.value = '100';
            this.opacityRange.className = 'vis-range';

            this.brightnessRange = document.createElement('input');
            try {
              this.brightnessRange.type = 'range'; // Not supported on IE9
              this.brightnessRange.min = '0';
              this.brightnessRange.max = '100';
            }
            // TODO: Add some error handling and remove this lint exception
            catch (err) {} // eslint-disable-line no-empty
            this.brightnessRange.value = '100';
            this.brightnessRange.className = 'vis-range';

            this.opacityDiv.appendChild(this.opacityRange);
            this.brightnessDiv.appendChild(this.brightnessRange);

            var me = this;
            this.opacityRange.onchange = function () {
              me._setOpacity(this.value);
            };
            this.opacityRange.oninput = function () {
              me._setOpacity(this.value);
            };
            this.brightnessRange.onchange = function () {
              me._setBrightness(this.value);
            };
            this.brightnessRange.oninput = function () {
              me._setBrightness(this.value);
            };

            this.brightnessLabel = document.createElement("div");
            this.brightnessLabel.className = "vis-label vis-brightness";
            this.brightnessLabel.innerHTML = 'brightness:';

            this.opacityLabel = document.createElement("div");
            this.opacityLabel.className = "vis-label vis-opacity";
            this.opacityLabel.innerHTML = 'opacity:';

            this.newColorDiv = document.createElement("div");
            this.newColorDiv.className = "vis-new-color";
            this.newColorDiv.innerHTML = 'new';

            this.initialColorDiv = document.createElement("div");
            this.initialColorDiv.className = "vis-initial-color";
            this.initialColorDiv.innerHTML = 'initial';

            this.cancelButton = document.createElement("div");
            this.cancelButton.className = "vis-button vis-cancel";
            this.cancelButton.innerHTML = 'cancel';
            this.cancelButton.onclick = this._hide.bind(this, false);

            this.applyButton = document.createElement("div");
            this.applyButton.className = "vis-button vis-apply";
            this.applyButton.innerHTML = 'apply';
            this.applyButton.onclick = this._apply.bind(this);

            this.saveButton = document.createElement("div");
            this.saveButton.className = "vis-button vis-save";
            this.saveButton.innerHTML = 'save';
            this.saveButton.onclick = this._save.bind(this);

            this.loadButton = document.createElement("div");
            this.loadButton.className = "vis-button vis-load";
            this.loadButton.innerHTML = 'load last';
            this.loadButton.onclick = this._loadLast.bind(this);

            this.frame.appendChild(this.colorPickerDiv);
            this.frame.appendChild(this.arrowDiv);
            this.frame.appendChild(this.brightnessLabel);
            this.frame.appendChild(this.brightnessDiv);
            this.frame.appendChild(this.opacityLabel);
            this.frame.appendChild(this.opacityDiv);
            this.frame.appendChild(this.newColorDiv);
            this.frame.appendChild(this.initialColorDiv);

            this.frame.appendChild(this.cancelButton);
            this.frame.appendChild(this.applyButton);
            this.frame.appendChild(this.saveButton);
            this.frame.appendChild(this.loadButton);
          }

          /**
           * bind hammer to the color picker
           * @private
           */

        }, {
          key: '_bindHammer',
          value: function _bindHammer() {
            var _this2 = this;

            this.drag = {};
            this.pinch = {};
            this.hammer = new Hammer(this.colorPickerCanvas);
            this.hammer.get('pinch').set({ enable: true });

            hammerUtil.onTouch(this.hammer, function (event) {
              _this2._moveSelector(event);
            });
            this.hammer.on('tap', function (event) {
              _this2._moveSelector(event);
            });
            this.hammer.on('panstart', function (event) {
              _this2._moveSelector(event);
            });
            this.hammer.on('panmove', function (event) {
              _this2._moveSelector(event);
            });
            this.hammer.on('panend', function (event) {
              _this2._moveSelector(event);
            });
          }

          /**
           * generate the hue circle. This is relatively heavy (200ms) and is done only once on the first time it is shown.
           * @private
           */

        }, {
          key: '_generateHueCircle',
          value: function _generateHueCircle() {
            if (this.generated === false) {
              var ctx = this.colorPickerCanvas.getContext('2d');
              if (this.pixelRation === undefined) {
                this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
              }
              ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);

              // clear the canvas
              var w = this.colorPickerCanvas.clientWidth;
              var h = this.colorPickerCanvas.clientHeight;
              ctx.clearRect(0, 0, w, h);

              // draw hue circle
              var x = void 0,
                  y = void 0,
                  hue = void 0,
                  sat = void 0;
              this.centerCoordinates = { x: w * 0.5, y: h * 0.5 };
              this.r = 0.49 * w;
              var angleConvert = 2 * Math.PI / 360;
              var hfac = 1 / 360;
              var sfac = 1 / this.r;
              var rgb = void 0;
              for (hue = 0; hue < 360; hue++) {
                for (sat = 0; sat < this.r; sat++) {
                  x = this.centerCoordinates.x + sat * Math.sin(angleConvert * hue);
                  y = this.centerCoordinates.y + sat * Math.cos(angleConvert * hue);
                  rgb = util.HSVToRGB(hue * hfac, sat * sfac, 1);
                  ctx.fillStyle = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
                  ctx.fillRect(x - 0.5, y - 0.5, 2, 2);
                }
              }
              ctx.strokeStyle = 'rgba(0,0,0,1)';
              ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
              ctx.stroke();

              this.hueCircle = ctx.getImageData(0, 0, w, h);
            }
            this.generated = true;
          }

          /**
           * move the selector. This is called by hammer functions.
           *
           * @param {Event}  event   The event
           * @private
           */

        }, {
          key: '_moveSelector',
          value: function _moveSelector(event) {
            var rect = this.colorPickerDiv.getBoundingClientRect();
            var left = event.center.x - rect.left;
            var top = event.center.y - rect.top;

            var centerY = 0.5 * this.colorPickerDiv.clientHeight;
            var centerX = 0.5 * this.colorPickerDiv.clientWidth;

            var x = left - centerX;
            var y = top - centerY;

            var angle = Math.atan2(x, y);
            var radius = 0.98 * Math.min(Math.sqrt(x * x + y * y), centerX);

            var newTop = Math.cos(angle) * radius + centerY;
            var newLeft = Math.sin(angle) * radius + centerX;

            this.colorPickerSelector.style.top = newTop - 0.5 * this.colorPickerSelector.clientHeight + 'px';
            this.colorPickerSelector.style.left = newLeft - 0.5 * this.colorPickerSelector.clientWidth + 'px';

            // set color
            var h = angle / (2 * Math.PI);
            h = h < 0 ? h + 1 : h;
            var s = radius / this.r;
            var hsv = util.RGBToHSV(this.color.r, this.color.g, this.color.b);
            hsv.h = h;
            hsv.s = s;
            var rgba = util.HSVToRGB(hsv.h, hsv.s, hsv.v);
            rgba['a'] = this.color.a;
            this.color = rgba;

            // update previews
            this.initialColorDiv.style.backgroundColor = 'rgba(' + this.initialColor.r + ',' + this.initialColor.g + ',' + this.initialColor.b + ',' + this.initialColor.a + ')';
            this.newColorDiv.style.backgroundColor = 'rgba(' + this.color.r + ',' + this.color.g + ',' + this.color.b + ',' + this.color.a + ')';
          }
        }]);
        return ColorPicker;
      }();

      exports['default'] = ColorPicker;

      /***/
    },
    /* 180 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var moment = __webpack_require__(9);
      var util = __webpack_require__(2);
      var DataSet = __webpack_require__(11);
      var DataView = __webpack_require__(12);
      var Range = __webpack_require__(64);
      var Core = __webpack_require__(65);
      var TimeAxis = __webpack_require__(45);
      var CurrentTime = __webpack_require__(67);
      var CustomTime = __webpack_require__(46);
      var LineGraph = __webpack_require__(106);

      var printStyle = __webpack_require__(15).printStyle;
      var allOptions = __webpack_require__(113).allOptions;
      var configureOptions = __webpack_require__(113).configureOptions;

      var Configurator = __webpack_require__(71)['default'];
      var Validator = __webpack_require__(15)['default'];

      /**
       * Create a timeline visualization
       * @param {HTMLElement} container
       * @param {vis.DataSet | Array} [items]
       * @param {vis.DataSet | Array | vis.DataView | Object} [groups]
       * @param {Object} [options]  See Graph2d.setOptions for the available options.
       * @constructor Graph2d
       * @extends Core
       */
      function Graph2d(container, items, groups, options) {
        // if the third element is options, the forth is groups (optionally);
        if (!(Array.isArray(groups) || groups instanceof DataSet || groups instanceof DataView) && groups instanceof Object) {
          var forthArgument = options;
          options = groups;
          groups = forthArgument;
        }

        // TODO: REMOVE THIS in the next MAJOR release
        // see https://github.com/almende/vis/issues/2511
        if (options && options.throttleRedraw) {
          console.warn("Graph2d option \"throttleRedraw\" is DEPRICATED and no longer supported. It will be removed in the next MAJOR release.");
        }

        var me = this;
        this.defaultOptions = {
          start: null,
          end: null,

          autoResize: true,

          orientation: {
            axis: 'bottom', // axis orientation: 'bottom', 'top', or 'both'
            item: 'bottom' // not relevant for Graph2d
          },

          moment: moment,

          width: null,
          height: null,
          maxHeight: null,
          minHeight: null
        };
        this.options = util.deepExtend({}, this.defaultOptions);

        // Create the DOM, props, and emitter
        this._create(container);

        // all components listed here will be repainted automatically
        this.components = [];

        this.body = {
          dom: this.dom,
          domProps: this.props,
          emitter: {
            on: this.on.bind(this),
            off: this.off.bind(this),
            emit: this.emit.bind(this)
          },
          hiddenDates: [],
          util: {
            toScreen: me._toScreen.bind(me),
            toGlobalScreen: me._toGlobalScreen.bind(me), // this refers to the root.width
            toTime: me._toTime.bind(me),
            toGlobalTime: me._toGlobalTime.bind(me)
          }
        };

        // range
        this.range = new Range(this.body);
        this.components.push(this.range);
        this.body.range = this.range;

        // time axis
        this.timeAxis = new TimeAxis(this.body);
        this.components.push(this.timeAxis);
        //this.body.util.snap = this.timeAxis.snap.bind(this.timeAxis);

        // current time bar
        this.currentTime = new CurrentTime(this.body);
        this.components.push(this.currentTime);

        // item set
        this.linegraph = new LineGraph(this.body);

        this.components.push(this.linegraph);

        this.itemsData = null; // DataSet
        this.groupsData = null; // DataSet


        this.on('tap', function (event) {
          me.emit('click', me.getEventProperties(event));
        });
        this.on('doubletap', function (event) {
          me.emit('doubleClick', me.getEventProperties(event));
        });
        this.dom.root.oncontextmenu = function (event) {
          me.emit('contextmenu', me.getEventProperties(event));
        };

        // apply options
        if (options) {
          this.setOptions(options);
        }

        // IMPORTANT: THIS HAPPENS BEFORE SET ITEMS!
        if (groups) {
          this.setGroups(groups);
        }

        // create itemset
        if (items) {
          this.setItems(items);
        }

        // draw for the first time
        this._redraw();
      }

      // Extend the functionality from Core
      Graph2d.prototype = new Core();

      Graph2d.prototype.setOptions = function (options) {
        // validate options
        var errorFound = Validator.validate(options, allOptions);
        if (errorFound === true) {
          console.log('%cErrors have been found in the supplied options object.', printStyle);
        }

        Core.prototype.setOptions.call(this, options);
      };

      /**
       * Set items
       * @param {vis.DataSet | Array | null} items
       */
      Graph2d.prototype.setItems = function (items) {
        var initialLoad = this.itemsData == null;

        // convert to type DataSet when needed
        var newDataSet;
        if (!items) {
          newDataSet = null;
        } else if (items instanceof DataSet || items instanceof DataView) {
          newDataSet = items;
        } else {
          // turn an array into a dataset
          newDataSet = new DataSet(items, {
            type: {
              start: 'Date',
              end: 'Date'
            }
          });
        }

        // set items
        this.itemsData = newDataSet;
        this.linegraph && this.linegraph.setItems(newDataSet);

        if (initialLoad) {
          if (this.options.start != undefined || this.options.end != undefined) {
            var start = this.options.start != undefined ? this.options.start : null;
            var end = this.options.end != undefined ? this.options.end : null;
            this.setWindow(start, end, { animation: false });
          } else {
            this.fit({ animation: false });
          }
        }
      };

      /**
       * Set groups
       * @param {vis.DataSet | Array} groups
       */
      Graph2d.prototype.setGroups = function (groups) {
        // convert to type DataSet when needed
        var newDataSet;
        if (!groups) {
          newDataSet = null;
        } else if (groups instanceof DataSet || groups instanceof DataView) {
          newDataSet = groups;
        } else {
          // turn an array into a dataset
          newDataSet = new DataSet(groups);
        }

        this.groupsData = newDataSet;
        this.linegraph.setGroups(newDataSet);
      };

      /**
       * Returns an object containing an SVG element with the icon of the group (size determined by iconWidth and iconHeight), the label of the group (content) and the yAxisOrientation of the group (left or right).
       * @param {vis.GraphGroup.id} groupId
       * @param {number} width
       * @param {number} height
       * @returns {{icon: SVGElement, label: string, orientation: string}|string}
       */
      Graph2d.prototype.getLegend = function (groupId, width, height) {
        if (width === undefined) {
          width = 15;
        }
        if (height === undefined) {
          height = 15;
        }
        if (this.linegraph.groups[groupId] !== undefined) {
          return this.linegraph.groups[groupId].getLegend(width, height);
        } else {
          return "cannot find group:'" + groupId + "'";
        }
      };

      /**
       * This checks if the visible option of the supplied group (by ID) is true or false.
       * @param {vis.GraphGroup.id} groupId
       * @returns {boolean}
       */
      Graph2d.prototype.isGroupVisible = function (groupId) {
        if (this.linegraph.groups[groupId] !== undefined) {
          return this.linegraph.groups[groupId].visible && (this.linegraph.options.groups.visibility[groupId] === undefined || this.linegraph.options.groups.visibility[groupId] == true);
        } else {
          return false;
        }
      };

      /**
       * Get the data range of the item set.
       * @returns {{min: Date, max: Date}} range  A range with a start and end Date.
       *                                          When no minimum is found, min==null
       *                                          When no maximum is found, max==null
       */
      Graph2d.prototype.getDataRange = function () {
        var min = null;
        var max = null;

        // calculate min from start filed
        for (var groupId in this.linegraph.groups) {
          if (this.linegraph.groups.hasOwnProperty(groupId)) {
            if (this.linegraph.groups[groupId].visible == true) {
              for (var i = 0; i < this.linegraph.groups[groupId].itemsData.length; i++) {
                var item = this.linegraph.groups[groupId].itemsData[i];
                var value = util.convert(item.x, 'Date').valueOf();
                min = min == null ? value : min > value ? value : min;
                max = max == null ? value : max < value ? value : max;
              }
            }
          }
        }

        return {
          min: min != null ? new Date(min) : null,
          max: max != null ? new Date(max) : null
        };
      };

      /**
       * Generate Timeline related information from an event
       * @param {Event} event
       * @return {Object} An object with related information, like on which area
       *                  The event happened, whether clicked on an item, etc.
       */
      Graph2d.prototype.getEventProperties = function (event) {
        var clientX = event.center ? event.center.x : event.clientX;
        var clientY = event.center ? event.center.y : event.clientY;
        var x = clientX - util.getAbsoluteLeft(this.dom.centerContainer);
        var y = clientY - util.getAbsoluteTop(this.dom.centerContainer);
        var time = this._toTime(x);

        var customTime = CustomTime.customTimeFromTarget(event);

        var element = util.getTarget(event);
        var what = null;
        if (util.hasParent(element, this.timeAxis.dom.foreground)) {
          what = 'axis';
        } else if (this.timeAxis2 && util.hasParent(element, this.timeAxis2.dom.foreground)) {
          what = 'axis';
        } else if (util.hasParent(element, this.linegraph.yAxisLeft.dom.frame)) {
          what = 'data-axis';
        } else if (util.hasParent(element, this.linegraph.yAxisRight.dom.frame)) {
          what = 'data-axis';
        } else if (util.hasParent(element, this.linegraph.legendLeft.dom.frame)) {
          what = 'legend';
        } else if (util.hasParent(element, this.linegraph.legendRight.dom.frame)) {
          what = 'legend';
        } else if (customTime != null) {
          what = 'custom-time';
        } else if (util.hasParent(element, this.currentTime.bar)) {
          what = 'current-time';
        } else if (util.hasParent(element, this.dom.center)) {
          what = 'background';
        }

        var value = [];
        var yAxisLeft = this.linegraph.yAxisLeft;
        var yAxisRight = this.linegraph.yAxisRight;
        if (!yAxisLeft.hidden && this.itemsData.length > 0) {
          value.push(yAxisLeft.screenToValue(y));
        }
        if (!yAxisRight.hidden && this.itemsData.length > 0) {
          value.push(yAxisRight.screenToValue(y));
        }

        return {
          event: event,
          what: what,
          pageX: event.srcEvent ? event.srcEvent.pageX : event.pageX,
          pageY: event.srcEvent ? event.srcEvent.pageY : event.pageY,
          x: x,
          y: y,
          time: time,
          value: value
        };
      };

      /**
       * Load a configurator
       * @return {Object}
       * @private
       */
      Graph2d.prototype._createConfigurator = function () {
        return new Configurator(this, this.dom.container, configureOptions);
      };

      module.exports = Graph2d;

      /***/
    },
    /* 181 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // utils

      exports.util = __webpack_require__(2);
      exports.DOMutil = __webpack_require__(14);

      // data
      exports.DataSet = __webpack_require__(11);
      exports.DataView = __webpack_require__(12);
      exports.Queue = __webpack_require__(43);

      // Network
      exports.Network = __webpack_require__(182);
      exports.network = {
        Images: __webpack_require__(116),
        dotparser: __webpack_require__(114),
        gephiParser: __webpack_require__(115),
        allOptions: __webpack_require__(122)
      };
      exports.network.convertDot = function (input) {
        return exports.network.dotparser.DOTToGraph(input);
      };
      exports.network.convertGephi = function (input, options) {
        return exports.network.gephiParser.parseGephi(input, options);
      };

      // bundled external libraries
      exports.moment = __webpack_require__(9);
      exports.Hammer = __webpack_require__(10);
      exports.keycharm = __webpack_require__(35);

      /***/
    },
    /* 182 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // Load custom shapes into CanvasRenderingContext2D

      __webpack_require__(183);

      var Emitter = __webpack_require__(44);
      var util = __webpack_require__(2);
      var dotparser = __webpack_require__(114);
      var gephiParser = __webpack_require__(115);
      var Activator = __webpack_require__(97);
      var locales = __webpack_require__(184);

      var Images = __webpack_require__(116)['default'];
      var Groups = __webpack_require__(186)['default'];
      var NodesHandler = __webpack_require__(187)['default'];
      var EdgesHandler = __webpack_require__(214)['default'];
      var PhysicsEngine = __webpack_require__(220)['default'];
      var ClusterEngine = __webpack_require__(227)['default'];
      var CanvasRenderer = __webpack_require__(229)['default'];
      var Canvas = __webpack_require__(230)['default'];
      var View = __webpack_require__(231)['default'];
      var InteractionHandler = __webpack_require__(232)['default'];
      var SelectionHandler = __webpack_require__(234)['default'];
      var LayoutEngine = __webpack_require__(235)['default'];
      var ManipulationSystem = __webpack_require__(237)['default'];
      var Configurator = __webpack_require__(71)['default'];
      var Validator = __webpack_require__(15)['default'];

      var _require = __webpack_require__(15),
          printStyle = _require.printStyle;

      var _require2 = __webpack_require__(122),
          allOptions = _require2.allOptions,
          configureOptions = _require2.configureOptions;

      var KamadaKawai = __webpack_require__(238)['default'];

      /**
       * Create a network visualization, displaying nodes and edges.
       *
       * @param {Element} container   The DOM element in which the Network will
       *                                  be created. Normally a div element.
       * @param {Object} data         An object containing parameters
       *                              {Array} nodes
       *                              {Array} edges
       * @param {Object} options      Options
       * @constructor Network
       */
      function Network(container, data, options) {
        var _this = this;

        if (!(this instanceof Network)) {
          throw new SyntaxError('Constructor must be called with the new operator');
        }

        // set constant values
        this.options = {};
        this.defaultOptions = {
          locale: 'en',
          locales: locales,
          clickToUse: false
        };
        util.extend(this.options, this.defaultOptions);

        /**
         * Containers for nodes and edges.
         *
         * 'edges' and 'nodes' contain the full definitions of all the network elements.
         * 'nodeIndices' and 'edgeIndices' contain the id's of the active elements.
         *
         * The distinction is important, because a defined node need not be active, i.e.
         * visible on the canvas. This happens in particular when clusters are defined, in
         * that case there will be nodes and edges not displayed.
         * The bottom line is that all code with actions related to visibility, *must* use
         * 'nodeIndices' and 'edgeIndices', not 'nodes' and 'edges' directly.
         */
        this.body = {
          container: container,

          // See comment above for following fields
          nodes: {},
          nodeIndices: [],
          edges: {},
          edgeIndices: [],

          emitter: {
            on: this.on.bind(this),
            off: this.off.bind(this),
            emit: this.emit.bind(this),
            once: this.once.bind(this)
          },
          eventListeners: {
            onTap: function onTap() {},
            onTouch: function onTouch() {},
            onDoubleTap: function onDoubleTap() {},
            onHold: function onHold() {},
            onDragStart: function onDragStart() {},
            onDrag: function onDrag() {},
            onDragEnd: function onDragEnd() {},
            onMouseWheel: function onMouseWheel() {},
            onPinch: function onPinch() {},
            onMouseMove: function onMouseMove() {},
            onRelease: function onRelease() {},
            onContext: function onContext() {}
          },
          data: {
            nodes: null, // A DataSet or DataView
            edges: null // A DataSet or DataView
          },
          functions: {
            createNode: function createNode() {},
            createEdge: function createEdge() {},
            getPointer: function getPointer() {}
          },
          modules: {},
          view: {
            scale: 1,
            translation: { x: 0, y: 0 }
          }
        };

        // bind the event listeners
        this.bindEventListeners();

        // setting up all modules
        this.images = new Images(function () {
          return _this.body.emitter.emit("_requestRedraw");
        }); // object with images
        this.groups = new Groups(); // object with groups
        this.canvas = new Canvas(this.body); // DOM handler
        this.selectionHandler = new SelectionHandler(this.body, this.canvas); // Selection handler
        this.interactionHandler = new InteractionHandler(this.body, this.canvas, this.selectionHandler); // Interaction handler handles all the hammer bindings (that are bound by canvas), key
        this.view = new View(this.body, this.canvas); // camera handler, does animations and zooms
        this.renderer = new CanvasRenderer(this.body, this.canvas); // renderer, starts renderloop, has events that modules can hook into
        this.physics = new PhysicsEngine(this.body); // physics engine, does all the simulations
        this.layoutEngine = new LayoutEngine(this.body); // layout engine for inital layout and hierarchical layout
        this.clustering = new ClusterEngine(this.body); // clustering api
        this.manipulation = new ManipulationSystem(this.body, this.canvas, this.selectionHandler); // data manipulation system

        this.nodesHandler = new NodesHandler(this.body, this.images, this.groups, this.layoutEngine); // Handle adding, deleting and updating of nodes as well as global options
        this.edgesHandler = new EdgesHandler(this.body, this.images, this.groups); // Handle adding, deleting and updating of edges as well as global options

        this.body.modules["kamadaKawai"] = new KamadaKawai(this.body, 150, 0.05); // Layouting algorithm.
        this.body.modules["clustering"] = this.clustering;

        // create the DOM elements
        this.canvas._create();

        // apply options
        this.setOptions(options);

        // load data (the disable start variable will be the same as the enabled clustering)
        this.setData(data);
      }

      // Extend Network with an Emitter mixin
      Emitter(Network.prototype);

      /**
       * Set options
       * @param {Object} options
       */
      Network.prototype.setOptions = function (options) {
        var _this2 = this;

        if (options !== undefined) {
          var errorFound = Validator.validate(options, allOptions);
          if (errorFound === true) {
            console.log('%cErrors have been found in the supplied options object.', printStyle);
          }

          // copy the global fields over
          var fields = ['locale', 'locales', 'clickToUse'];
          util.selectiveDeepExtend(fields, this.options, options);

          // the hierarchical system can adapt the edges and the physics to it's own options because not all combinations work with the hierarichical system.
          options = this.layoutEngine.setOptions(options.layout, options);

          this.canvas.setOptions(options); // options for canvas are in globals

          // pass the options to the modules
          this.groups.setOptions(options.groups);
          this.nodesHandler.setOptions(options.nodes);
          this.edgesHandler.setOptions(options.edges);
          this.physics.setOptions(options.physics);
          this.manipulation.setOptions(options.manipulation, options, this.options); // manipulation uses the locales in the globals

          this.interactionHandler.setOptions(options.interaction);
          this.renderer.setOptions(options.interaction); // options for rendering are in interaction
          this.selectionHandler.setOptions(options.interaction); // options for selection are in interaction

          // reload the settings of the nodes to apply changes in groups that are not referenced by pointer.
          if (options.groups !== undefined) {
            this.body.emitter.emit("refreshNodes");
          }
          // these two do not have options at the moment, here for completeness
          //this.view.setOptions(options.view);
          //this.clustering.setOptions(options.clustering);

          if ('configure' in options) {
            if (!this.configurator) {
              this.configurator = new Configurator(this, this.body.container, configureOptions, this.canvas.pixelRatio);
            }

            this.configurator.setOptions(options.configure);
          }

          // if the configuration system is enabled, copy all options and put them into the config system
          if (this.configurator && this.configurator.options.enabled === true) {
            var networkOptions = { nodes: {}, edges: {}, layout: {}, interaction: {}, manipulation: {}, physics: {}, global: {} };
            util.deepExtend(networkOptions.nodes, this.nodesHandler.options);
            util.deepExtend(networkOptions.edges, this.edgesHandler.options);
            util.deepExtend(networkOptions.layout, this.layoutEngine.options);
            // load the selectionHandler and render default options in to the interaction group
            util.deepExtend(networkOptions.interaction, this.selectionHandler.options);
            util.deepExtend(networkOptions.interaction, this.renderer.options);

            util.deepExtend(networkOptions.interaction, this.interactionHandler.options);
            util.deepExtend(networkOptions.manipulation, this.manipulation.options);
            util.deepExtend(networkOptions.physics, this.physics.options);

            // load globals into the global object
            util.deepExtend(networkOptions.global, this.canvas.options);
            util.deepExtend(networkOptions.global, this.options);

            this.configurator.setModuleOptions(networkOptions);
          }

          // handle network global options
          if (options.clickToUse !== undefined) {
            if (options.clickToUse === true) {
              if (this.activator === undefined) {
                this.activator = new Activator(this.canvas.frame);
                this.activator.on('change', function () {
                  _this2.body.emitter.emit("activate");
                });
              }
            } else {
              if (this.activator !== undefined) {
                this.activator.destroy();
                delete this.activator;
              }
              this.body.emitter.emit("activate");
            }
          } else {
            this.body.emitter.emit("activate");
          }

          this.canvas.setSize();
          // start the physics simulation. Can be safely called multiple times.
          this.body.emitter.emit("startSimulation");
        }
      };

      /**
       * Update the visible nodes and edges list with the most recent node state.
       *
       * Visible nodes are stored in this.body.nodeIndices.
       * Visible edges are stored in this.body.edgeIndices.
       * A node or edges is visible if it is not hidden or clustered.
       *
       * @private
       */
      Network.prototype._updateVisibleIndices = function () {
        var nodes = this.body.nodes;
        var edges = this.body.edges;
        this.body.nodeIndices = [];
        this.body.edgeIndices = [];

        for (var nodeId in nodes) {
          if (nodes.hasOwnProperty(nodeId)) {
            if (!this.clustering._isClusteredNode(nodeId) && nodes[nodeId].options.hidden === false) {
              this.body.nodeIndices.push(nodes[nodeId].id);
            }
          }
        }

        for (var edgeId in edges) {
          if (edges.hasOwnProperty(edgeId)) {
            var edge = edges[edgeId];

            // It can happen that this is executed *after* a node edge has been removed,
            // but *before* the edge itself has been removed. Taking this into account.
            var fromNode = nodes[edge.fromId];
            var toNode = nodes[edge.toId];
            var edgeNodesPresent = fromNode !== undefined && toNode !== undefined;

            var isVisible = !this.clustering._isClusteredEdge(edgeId) && edge.options.hidden === false && edgeNodesPresent && fromNode.options.hidden === false // Also hidden if any of its connecting nodes are hidden
            && toNode.options.hidden === false; // idem

            if (isVisible) {
              this.body.edgeIndices.push(edge.id);
            }
          }
        }
      };

      /**
       * Bind all events
       */
      Network.prototype.bindEventListeners = function () {
        var _this3 = this;

        // This event will trigger a rebuilding of the cache everything.
        // Used when nodes or edges have been added or removed.
        this.body.emitter.on("_dataChanged", function () {
          _this3.edgesHandler._updateState();
          _this3.body.emitter.emit("_dataUpdated");
        });

        // this is called when options of EXISTING nodes or edges have changed.
        this.body.emitter.on("_dataUpdated", function () {
          // Order important in following block
          _this3.clustering._updateState();
          _this3._updateVisibleIndices();

          _this3._updateValueRange(_this3.body.nodes);
          _this3._updateValueRange(_this3.body.edges);
          // start simulation (can be called safely, even if already running)
          _this3.body.emitter.emit("startSimulation");
          _this3.body.emitter.emit("_requestRedraw");
        });
      };

      /**
       * Set nodes and edges, and optionally options as well.
       *
       * @param {Object} data              Object containing parameters:
       *                                   {Array | DataSet | DataView} [nodes] Array with nodes
       *                                   {Array | DataSet | DataView} [edges] Array with edges
       *                                   {String} [dot] String containing data in DOT format
       *                                   {String} [gephi] String containing data in gephi JSON format
       *                                   {Options} [options] Object with options
       */
      Network.prototype.setData = function (data) {
        // reset the physics engine.
        this.body.emitter.emit("resetPhysics");
        this.body.emitter.emit("_resetData");

        // unselect all to ensure no selections from old data are carried over.
        this.selectionHandler.unselectAll();

        if (data && data.dot && (data.nodes || data.edges)) {
          throw new SyntaxError('Data must contain either parameter "dot" or ' + ' parameter pair "nodes" and "edges", but not both.');
        }

        // set options
        this.setOptions(data && data.options);
        // set all data
        if (data && data.dot) {
          console.log('The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);');
          // parse DOT file
          var dotData = dotparser.DOTToGraph(data.dot);
          this.setData(dotData);
          return;
        } else if (data && data.gephi) {
          // parse DOT file
          console.log('The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);');
          var gephiData = gephiParser.parseGephi(data.gephi);
          this.setData(gephiData);
          return;
        } else {
          this.nodesHandler.setData(data && data.nodes, true);
          this.edgesHandler.setData(data && data.edges, true);
        }

        // emit change in data
        this.body.emitter.emit("_dataChanged");

        // emit data loaded
        this.body.emitter.emit("_dataLoaded");

        // find a stable position or start animating to a stable position
        this.body.emitter.emit("initPhysics");
      };

      /**
       * Cleans up all bindings of the network, removing it fully from the memory IF the variable is set to null after calling this function.
       * var network = new vis.Network(..);
       * network.destroy();
       * network = null;
       */
      Network.prototype.destroy = function () {
        this.body.emitter.emit("destroy");
        // clear events
        this.body.emitter.off();
        this.off();

        // delete modules
        delete this.groups;
        delete this.canvas;
        delete this.selectionHandler;
        delete this.interactionHandler;
        delete this.view;
        delete this.renderer;
        delete this.physics;
        delete this.layoutEngine;
        delete this.clustering;
        delete this.manipulation;
        delete this.nodesHandler;
        delete this.edgesHandler;
        delete this.configurator;
        delete this.images;

        for (var nodeId in this.body.nodes) {
          if (!this.body.nodes.hasOwnProperty(nodeId)) continue;
          delete this.body.nodes[nodeId];
        }

        for (var edgeId in this.body.edges) {
          if (!this.body.edges.hasOwnProperty(edgeId)) continue;
          delete this.body.edges[edgeId];
        }

        // remove the container and everything inside it recursively
        util.recursiveDOMDelete(this.body.container);
      };

      /**
       * Update the values of all object in the given array according to the current
       * value range of the objects in the array.
       * @param {Object} obj    An object containing a set of Edges or Nodes
       *                        The objects must have a method getValue() and
       *                        setValueRange(min, max).
       * @private
       */
      Network.prototype._updateValueRange = function (obj) {
        var id;

        // determine the range of the objects
        var valueMin = undefined;
        var valueMax = undefined;
        var valueTotal = 0;
        for (id in obj) {
          if (obj.hasOwnProperty(id)) {
            var value = obj[id].getValue();
            if (value !== undefined) {
              valueMin = valueMin === undefined ? value : Math.min(value, valueMin);
              valueMax = valueMax === undefined ? value : Math.max(value, valueMax);
              valueTotal += value;
            }
          }
        }

        // adjust the range of all objects
        if (valueMin !== undefined && valueMax !== undefined) {
          for (id in obj) {
            if (obj.hasOwnProperty(id)) {
              obj[id].setValueRange(valueMin, valueMax, valueTotal);
            }
          }
        }
      };

      /**
       * Returns true when the Network is active.
       * @returns {boolean}
       */
      Network.prototype.isActive = function () {
        return !this.activator || this.activator.active;
      };

      Network.prototype.setSize = function () {
        return this.canvas.setSize.apply(this.canvas, arguments);
      };
      Network.prototype.canvasToDOM = function () {
        return this.canvas.canvasToDOM.apply(this.canvas, arguments);
      };
      Network.prototype.DOMtoCanvas = function () {
        return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);
      };
      Network.prototype.findNode = function () {
        return this.clustering.findNode.apply(this.clustering, arguments);
      };
      Network.prototype.isCluster = function () {
        return this.clustering.isCluster.apply(this.clustering, arguments);
      };
      Network.prototype.openCluster = function () {
        return this.clustering.openCluster.apply(this.clustering, arguments);
      };
      Network.prototype.cluster = function () {
        return this.clustering.cluster.apply(this.clustering, arguments);
      };
      Network.prototype.getNodesInCluster = function () {
        return this.clustering.getNodesInCluster.apply(this.clustering, arguments);
      };
      Network.prototype.clusterByConnection = function () {
        return this.clustering.clusterByConnection.apply(this.clustering, arguments);
      };
      Network.prototype.clusterByHubsize = function () {
        return this.clustering.clusterByHubsize.apply(this.clustering, arguments);
      };
      Network.prototype.clusterOutliers = function () {
        return this.clustering.clusterOutliers.apply(this.clustering, arguments);
      };
      Network.prototype.getSeed = function () {
        return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);
      };
      Network.prototype.enableEditMode = function () {
        return this.manipulation.enableEditMode.apply(this.manipulation, arguments);
      };
      Network.prototype.disableEditMode = function () {
        return this.manipulation.disableEditMode.apply(this.manipulation, arguments);
      };
      Network.prototype.addNodeMode = function () {
        return this.manipulation.addNodeMode.apply(this.manipulation, arguments);
      };
      Network.prototype.editNode = function () {
        return this.manipulation.editNode.apply(this.manipulation, arguments);
      };
      Network.prototype.editNodeMode = function () {
        console.log("Deprecated: Please use editNode instead of editNodeMode.");return this.manipulation.editNode.apply(this.manipulation, arguments);
      };
      Network.prototype.addEdgeMode = function () {
        return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);
      };
      Network.prototype.editEdgeMode = function () {
        return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);
      };
      Network.prototype.deleteSelected = function () {
        return this.manipulation.deleteSelected.apply(this.manipulation, arguments);
      };
      Network.prototype.getPositions = function () {
        return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);
      };
      Network.prototype.storePositions = function () {
        return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);
      };
      Network.prototype.moveNode = function () {
        return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);
      };
      Network.prototype.getBoundingBox = function () {
        return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);
      };
      Network.prototype.getConnectedNodes = function (objectId) {
        if (this.body.nodes[objectId] !== undefined) {
          return this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments);
        } else {
          return this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);
        }
      };
      Network.prototype.getConnectedEdges = function () {
        return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);
      };
      Network.prototype.startSimulation = function () {
        return this.physics.startSimulation.apply(this.physics, arguments);
      };
      Network.prototype.stopSimulation = function () {
        return this.physics.stopSimulation.apply(this.physics, arguments);
      };
      Network.prototype.stabilize = function () {
        return this.physics.stabilize.apply(this.physics, arguments);
      };
      Network.prototype.getSelection = function () {
        return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);
      };
      Network.prototype.setSelection = function () {
        return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);
      };
      Network.prototype.getSelectedNodes = function () {
        return this.selectionHandler.getSelectedNodes.apply(this.selectionHandler, arguments);
      };
      Network.prototype.getSelectedEdges = function () {
        return this.selectionHandler.getSelectedEdges.apply(this.selectionHandler, arguments);
      };
      Network.prototype.getNodeAt = function () {
        var node = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);
        if (node !== undefined && node.id !== undefined) {
          return node.id;
        }
        return node;
      };
      Network.prototype.getEdgeAt = function () {
        var edge = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);
        if (edge !== undefined && edge.id !== undefined) {
          return edge.id;
        }
        return edge;
      };
      Network.prototype.selectNodes = function () {
        return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);
      };
      Network.prototype.selectEdges = function () {
        return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);
      };
      Network.prototype.unselectAll = function () {
        this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments);
        this.redraw();
      };
      Network.prototype.redraw = function () {
        return this.renderer.redraw.apply(this.renderer, arguments);
      };
      Network.prototype.getScale = function () {
        return this.view.getScale.apply(this.view, arguments);
      };
      Network.prototype.getViewPosition = function () {
        return this.view.getViewPosition.apply(this.view, arguments);
      };
      Network.prototype.fit = function () {
        return this.view.fit.apply(this.view, arguments);
      };
      Network.prototype.moveTo = function () {
        return this.view.moveTo.apply(this.view, arguments);
      };
      Network.prototype.focus = function () {
        return this.view.focus.apply(this.view, arguments);
      };
      Network.prototype.releaseNode = function () {
        return this.view.releaseNode.apply(this.view, arguments);
      };
      Network.prototype.getOptionsFromConfigurator = function () {
        var options = {};
        if (this.configurator) {
          options = this.configurator.getOptions.apply(this.configurator);
        }
        return options;
      };

      module.exports = Network;

      /***/
    },
    /* 183 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       * Canvas shapes used by Network
       */

      if (typeof CanvasRenderingContext2D !== 'undefined') {

        /**
         * Draw a circle shape
         *
         * @param {number} x
         * @param {number} y
         * @param {number} r
         */
        CanvasRenderingContext2D.prototype.circle = function (x, y, r) {
          this.beginPath();
          this.arc(x, y, r, 0, 2 * Math.PI, false);
          this.closePath();
        };

        /**
         * Draw a square shape
         * @param {number} x horizontal center
         * @param {number} y vertical center
         * @param {number} r   size, width and height of the square
         */
        CanvasRenderingContext2D.prototype.square = function (x, y, r) {
          this.beginPath();
          this.rect(x - r, y - r, r * 2, r * 2);
          this.closePath();
        };

        /**
         * Draw a triangle shape
         * @param {number} x horizontal center
         * @param {number} y vertical center
         * @param {number} r   radius, half the length of the sides of the triangle
         */
        CanvasRenderingContext2D.prototype.triangle = function (x, y, r) {
          // http://en.wikipedia.org/wiki/Equilateral_triangle
          this.beginPath();

          // the change in radius and the offset is here to center the shape
          r *= 1.15;
          y += 0.275 * r;

          var s = r * 2;
          var s2 = s / 2;
          var ir = Math.sqrt(3) / 6 * s; // radius of inner circle
          var h = Math.sqrt(s * s - s2 * s2); // height


          this.moveTo(x, y - (h - ir));
          this.lineTo(x + s2, y + ir);
          this.lineTo(x - s2, y + ir);
          this.lineTo(x, y - (h - ir));
          this.closePath();
        };

        /**
         * Draw a triangle shape in downward orientation
         * @param {number} x horizontal center
         * @param {number} y vertical center
         * @param {number} r radius
         */
        CanvasRenderingContext2D.prototype.triangleDown = function (x, y, r) {
          // http://en.wikipedia.org/wiki/Equilateral_triangle
          this.beginPath();

          // the change in radius and the offset is here to center the shape
          r *= 1.15;
          y -= 0.275 * r;

          var s = r * 2;
          var s2 = s / 2;
          var ir = Math.sqrt(3) / 6 * s; // radius of inner circle
          var h = Math.sqrt(s * s - s2 * s2); // height

          this.moveTo(x, y + (h - ir));
          this.lineTo(x + s2, y - ir);
          this.lineTo(x - s2, y - ir);
          this.lineTo(x, y + (h - ir));
          this.closePath();
        };

        /**
         * Draw a star shape, a star with 5 points
         * @param {number} x horizontal center
         * @param {number} y vertical center
         * @param {number} r   radius, half the length of the sides of the triangle
         */
        CanvasRenderingContext2D.prototype.star = function (x, y, r) {
          // http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/
          this.beginPath();

          // the change in radius and the offset is here to center the shape
          r *= 0.82;
          y += 0.1 * r;

          for (var n = 0; n < 10; n++) {
            var radius = n % 2 === 0 ? r * 1.3 : r * 0.5;
            this.lineTo(x + radius * Math.sin(n * 2 * Math.PI / 10), y - radius * Math.cos(n * 2 * Math.PI / 10));
          }

          this.closePath();
        };

        /**
         * Draw a Diamond shape
         * @param {number} x horizontal center
         * @param {number} y vertical center
         * @param {number} r   radius, half the length of the sides of the triangle
         */
        CanvasRenderingContext2D.prototype.diamond = function (x, y, r) {
          // http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/
          this.beginPath();

          this.lineTo(x, y + r);
          this.lineTo(x + r, y);
          this.lineTo(x, y - r);
          this.lineTo(x - r, y);

          this.closePath();
        };

        /**
         * http://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-on-html-canvas
         *
         * @param {number} x
         * @param {number} y
         * @param {number} w
         * @param {number} h
         * @param {number} r
         */
        CanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {
          var r2d = Math.PI / 180;
          if (w - 2 * r < 0) {
            r = w / 2;
          } //ensure that the radius isn't too large for x
          if (h - 2 * r < 0) {
            r = h / 2;
          } //ensure that the radius isn't too large for y
          this.beginPath();
          this.moveTo(x + r, y);
          this.lineTo(x + w - r, y);
          this.arc(x + w - r, y + r, r, r2d * 270, r2d * 360, false);
          this.lineTo(x + w, y + h - r);
          this.arc(x + w - r, y + h - r, r, 0, r2d * 90, false);
          this.lineTo(x + r, y + h);
          this.arc(x + r, y + h - r, r, r2d * 90, r2d * 180, false);
          this.lineTo(x, y + r);
          this.arc(x + r, y + r, r, r2d * 180, r2d * 270, false);
          this.closePath();
        };

        /**
         * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
         *
         * Postfix '_vis' added to discern it from standard method ellipse().
         *
         * @param {number} x
         * @param {number} y
         * @param {number} w
         * @param {number} h
         */
        CanvasRenderingContext2D.prototype.ellipse_vis = function (x, y, w, h) {
          var kappa = .5522848,
              ox = w / 2 * kappa,

          // control point offset horizontal
          oy = h / 2 * kappa,

          // control point offset vertical
          xe = x + w,

          // x-end
          ye = y + h,

          // y-end
          xm = x + w / 2,

          // x-middle
          ym = y + h / 2; // y-middle

          this.beginPath();
          this.moveTo(x, ym);
          this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
          this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
          this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
          this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
          this.closePath();
        };

        /**
         * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
         *
         * @param {number} x
         * @param {number} y
         * @param {number} w
         * @param {number} h
         */
        CanvasRenderingContext2D.prototype.database = function (x, y, w, h) {
          var f = 1 / 3;
          var wEllipse = w;
          var hEllipse = h * f;

          var kappa = .5522848,
              ox = wEllipse / 2 * kappa,

          // control point offset horizontal
          oy = hEllipse / 2 * kappa,

          // control point offset vertical
          xe = x + wEllipse,

          // x-end
          ye = y + hEllipse,

          // y-end
          xm = x + wEllipse / 2,

          // x-middle
          ym = y + hEllipse / 2,

          // y-middle
          ymb = y + (h - hEllipse / 2),

          // y-midlle, bottom ellipse
          yeb = y + h; // y-end, bottom ellipse

          this.beginPath();
          this.moveTo(xe, ym);

          this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
          this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);

          this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
          this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);

          this.lineTo(xe, ymb);

          this.bezierCurveTo(xe, ymb + oy, xm + ox, yeb, xm, yeb);
          this.bezierCurveTo(xm - ox, yeb, x, ymb + oy, x, ymb);

          this.lineTo(x, ym);
        };

        /**
         * Sets up the dashedLine functionality for drawing
         * Original code came from http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas
         * @author David Jordan
         * @date 2012-08-08
         *
         * @param {number} x
         * @param {number} y
         * @param {number} x2
         * @param {number} y2
         * @param {string} pattern
         */
        CanvasRenderingContext2D.prototype.dashedLine = function (x, y, x2, y2, pattern) {
          this.beginPath();
          this.moveTo(x, y);

          var patternLength = pattern.length;
          var dx = x2 - x;
          var dy = y2 - y;
          var slope = dy / dx;
          var distRemaining = Math.sqrt(dx * dx + dy * dy);
          var patternIndex = 0;
          var draw = true;
          var xStep = 0;
          var dashLength = pattern[0];

          while (distRemaining >= 0.1) {
            dashLength = pattern[patternIndex++ % patternLength];
            if (dashLength > distRemaining) {
              dashLength = distRemaining;
            }

            xStep = Math.sqrt(dashLength * dashLength / (1 + slope * slope));
            xStep = dx < 0 ? -xStep : xStep;
            x += xStep;
            y += slope * xStep;

            if (draw === true) {
              this.lineTo(x, y);
            } else {
              this.moveTo(x, y);
            }

            distRemaining -= dashLength;
            draw = !draw;
          }
        };

        /**
         * Draw a Hexagon shape with 6 sides
         * @param {Number} x horizontal center
         * @param {Number} y vertical center
         * @param {Number} r   radius
         */
        CanvasRenderingContext2D.prototype.hexagon = function (x, y, r) {
          this.beginPath();
          var sides = 6;
          var a = Math.PI * 2 / sides;
          this.moveTo(x + r, y);
          for (var i = 1; i < sides; i++) {
            this.lineTo(x + r * Math.cos(a * i), y + r * Math.sin(a * i));
          }
          this.closePath();
        };
      }

      /***/
    },
    /* 184 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // English

      exports['en'] = {
        edit: 'Edit',
        del: 'Delete selected',
        back: 'Back',
        addNode: 'Add Node',
        addEdge: 'Add Edge',
        editNode: 'Edit Node',
        editEdge: 'Edit Edge',
        addDescription: 'Click in an empty space to place a new node.',
        edgeDescription: 'Click on a node and drag the edge to another node to connect them.',
        editEdgeDescription: 'Click on the control points and drag them to a node to connect to it.',
        createEdgeError: 'Cannot link edges to a cluster.',
        deleteClusterError: 'Clusters cannot be deleted.',
        editClusterError: 'Clusters cannot be edited.'
      };
      exports['en_EN'] = exports['en'];
      exports['en_US'] = exports['en'];

      // German
      exports['de'] = {
        edit: 'Editieren',
        del: 'L\xF6sche Auswahl',
        back: 'Zur\xFCck',
        addNode: 'Knoten hinzuf\xFCgen',
        addEdge: 'Kante hinzuf\xFCgen',
        editNode: 'Knoten editieren',
        editEdge: 'Kante editieren',
        addDescription: 'Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.',
        edgeDescription: 'Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.',
        editEdgeDescription: 'Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.',
        createEdgeError: 'Es ist nicht m\xF6glich, Kanten mit Clustern zu verbinden.',
        deleteClusterError: 'Cluster k\xF6nnen nicht gel\xF6scht werden.',
        editClusterError: 'Cluster k\xF6nnen nicht editiert werden.'
      };
      exports['de_DE'] = exports['de'];

      // Spanish
      exports['es'] = {
        edit: 'Editar',
        del: 'Eliminar selecci\xF3n',
        back: '\xC1tras',
        addNode: 'A\xF1adir nodo',
        addEdge: 'A\xF1adir arista',
        editNode: 'Editar nodo',
        editEdge: 'Editar arista',
        addDescription: 'Haga clic en un lugar vac\xEDo para colocar un nuevo nodo.',
        edgeDescription: 'Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.',
        editEdgeDescription: 'Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.',
        createEdgeError: 'No se puede conectar una arista a un grupo.',
        deleteClusterError: 'No es posible eliminar grupos.',
        editClusterError: 'No es posible editar grupos.'
      };
      exports['es_ES'] = exports['es'];

      //Italiano
      exports['it'] = {
        edit: 'Modifica',
        del: 'Cancella la selezione',
        back: 'Indietro',
        addNode: 'Aggiungi un nodo',
        addEdge: 'Aggiungi un vertice',
        editNode: 'Modifica il nodo',
        editEdge: 'Modifica il vertice',
        addDescription: 'Clicca per aggiungere un nuovo nodo',
        edgeDescription: 'Clicca su un nodo e trascinalo ad un altro nodo per connetterli.',
        editEdgeDescription: 'Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.',
        createEdgeError: 'Non si possono collegare vertici ad un cluster',
        deleteClusterError: 'I cluster non possono essere cancellati',
        editClusterError: 'I clusters non possono essere modificati.'
      };
      exports['it_IT'] = exports['it'];

      // Dutch
      exports['nl'] = {
        edit: 'Wijzigen',
        del: 'Selectie verwijderen',
        back: 'Terug',
        addNode: 'Node toevoegen',
        addEdge: 'Link toevoegen',
        editNode: 'Node wijzigen',
        editEdge: 'Link wijzigen',
        addDescription: 'Klik op een leeg gebied om een nieuwe node te maken.',
        edgeDescription: 'Klik op een node en sleep de link naar een andere node om ze te verbinden.',
        editEdgeDescription: 'Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.',
        createEdgeError: 'Kan geen link maken naar een cluster.',
        deleteClusterError: 'Clusters kunnen niet worden verwijderd.',
        editClusterError: 'Clusters kunnen niet worden aangepast.'
      };
      exports['nl_NL'] = exports['nl'];
      exports['nl_BE'] = exports['nl'];

      // Portuguese Brazil
      exports['pt-br'] = {
        edit: 'Editar',
        del: 'Remover selecionado',
        back: 'Voltar',
        addNode: 'Adicionar nó',
        addEdge: 'Adicionar aresta',
        editNode: 'Editar nó',
        editEdge: 'Editar aresta',
        addDescription: 'Clique em um espaço em branco para adicionar um novo nó',
        edgeDescription: 'Clique em um nó e arraste a aresta até outro nó para conectá-los',
        editEdgeDescription: 'Clique nos pontos de controle e os arraste para um nó para conectá-los',
        createEdgeError: 'Não foi possível linkar arestas a um cluster.',
        deleteClusterError: 'Clusters não puderam ser removidos.',
        editClusterError: 'Clusters não puderam ser editados.'
      };
      exports['pt-BR'] = exports['pt-br'];
      exports['pt_BR'] = exports['pt-br'];
      exports['pt_br'] = exports['pt-br'];

      // Russian
      exports['ru'] = {
        edit: 'Редактировать',
        del: 'Удалить выбранное',
        back: 'Назад',
        addNode: 'Добавить узел',
        addEdge: 'Добавить ребро',
        editNode: 'Редактировать узел',
        editEdge: 'Редактировать ребро',
        addDescription: 'Кликните в свободное место, чтобы добавить новый узел.',
        edgeDescription: 'Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.',
        editEdgeDescription: 'Кликните на контрольные точки и перетащите их в узел, чтобы подключиться к нему.',
        createEdgeError: 'Невозможно соединить ребра в кластер.',
        deleteClusterError: 'Кластеры не могут быть удалены',
        editClusterError: 'Кластеры недоступны для редактирования.'
      };
      exports['ru_RU'] = exports['ru'];

      // Chinese
      exports['cn'] = {
        edit: '编辑',
        del: '删除选定',
        back: '返回',
        addNode: '添加节点',
        addEdge: '添加连接线',
        editNode: '编辑节点',
        editEdge: '编辑连接线',
        addDescription: '单击空白处放置新节点。',
        edgeDescription: '单击某个节点并将该连接线拖动到另一个节点以连接它们。',
        editEdgeDescription: '单击控制节点并将它们拖到节点上连接。',
        createEdgeError: '无法将连接线连接到群集。',
        deleteClusterError: '无法删除群集。',
        editClusterError: '无法编辑群集。'
      };
      exports['zh_CN'] = exports['cn'];

      /***/
    },
    /* 185 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * Associates a canvas to a given image, containing a number of renderings
       * of the image at various sizes.
       *
       * This technique is known as 'mipmapping'.
       *
       * NOTE: Images can also be of type 'data:svg+xml`. This code also works
       *       for svg, but the mipmapping may not be necessary.
       *
       * @param {Image} image
       */
      var CachedImage = function () {
        /**
         * @ignore
         */
        function CachedImage() {
          (0, _classCallCheck3['default'])(this, CachedImage);
          // eslint-disable-line no-unused-vars
          this.NUM_ITERATIONS = 4; // Number of items in the coordinates array

          this.image = new Image();
          this.canvas = document.createElement('canvas');
        }

        /**
         * Called when the image has been successfully loaded.
         */

        (0, _createClass3['default'])(CachedImage, [{
          key: 'init',
          value: function init() {
            if (this.initialized()) return;

            this.src = this.image.src; // For same interface with Image
            var w = this.image.width;
            var h = this.image.height;

            // Ease external access
            this.width = w;
            this.height = h;

            var h2 = Math.floor(h / 2);
            var h4 = Math.floor(h / 4);
            var h8 = Math.floor(h / 8);
            var h16 = Math.floor(h / 16);

            var w2 = Math.floor(w / 2);
            var w4 = Math.floor(w / 4);
            var w8 = Math.floor(w / 8);
            var w16 = Math.floor(w / 16);

            // Make canvas as small as possible
            this.canvas.width = 3 * w4;
            this.canvas.height = h2;

            // Coordinates and sizes of images contained in the canvas
            // Values per row:  [top x, left y, width, height]

            this.coordinates = [[0, 0, w2, h2], [w2, 0, w4, h4], [w2, h4, w8, h8], [5 * w8, h4, w16, h16]];

            this._fillMipMap();
          }

          /**
           * @return {Boolean} true if init() has been called, false otherwise.
           */

        }, {
          key: 'initialized',
          value: function initialized() {
            return this.coordinates !== undefined;
          }

          /**
           * Redraw main image in various sizes to the context.
           *
           * The rationale behind this is to reduce artefacts due to interpolation
           * at differing zoom levels.
           *
           * Source: http://stackoverflow.com/q/18761404/1223531
           *
           * This methods takes the resizing out of the drawing loop, in order to
           * reduce performance overhead.
           *
           * TODO: The code assumes that a 2D context can always be gotten. This is
           *       not necessarily true! OTOH, if not true then usage of this class
           *       is senseless.
           *
           * @private
           */

        }, {
          key: '_fillMipMap',
          value: function _fillMipMap() {
            var ctx = this.canvas.getContext('2d');

            // First zoom-level comes from the image
            var to = this.coordinates[0];
            ctx.drawImage(this.image, to[0], to[1], to[2], to[3]);

            // The rest are copy actions internal to the canvas/context
            for (var iterations = 1; iterations < this.NUM_ITERATIONS; iterations++) {
              var from = this.coordinates[iterations - 1];
              var _to = this.coordinates[iterations];

              ctx.drawImage(this.canvas, from[0], from[1], from[2], from[3], _to[0], _to[1], _to[2], _to[3]);
            }
          }

          /**
           * Draw the image, using the mipmap if necessary.
           *
           * MipMap is only used if param factor > 2; otherwise, original bitmap
           * is resized. This is also used to skip mipmap usage, e.g. by setting factor = 1
           *
           * Credits to 'Alex de Mulder' for original implementation.
           *
           * @param {CanvasRenderingContext2D} ctx  context on which to draw zoomed image
           * @param {Float} factor scale factor at which to draw
           * @param {number} left
           * @param {number} top
           * @param {number} width
           * @param {number} height
           */

        }, {
          key: 'drawImageAtPosition',
          value: function drawImageAtPosition(ctx, factor, left, top, width, height) {

            if (!this.initialized()) return; //can't draw image yet not intialized

            if (factor > 2) {
              // Determine which zoomed image to use
              factor *= 0.5;
              var iterations = 0;
              while (factor > 2 && iterations < this.NUM_ITERATIONS) {
                factor *= 0.5;
                iterations += 1;
              }

              if (iterations >= this.NUM_ITERATIONS) {
                iterations = this.NUM_ITERATIONS - 1;
              }
              //console.log("iterations: " + iterations);

              var from = this.coordinates[iterations];
              ctx.drawImage(this.canvas, from[0], from[1], from[2], from[3], left, top, width, height);
            } else {
              // Draw image directly
              ctx.drawImage(this.image, left, top, width, height);
            }
          }
        }]);
        return CachedImage;
      }();

      exports['default'] = CachedImage;

      /***/
    },
    /* 186 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      var util = __webpack_require__(2);

      /**
       * This class can store groups and options specific for groups.
       */

      var Groups = function () {
        /**
         * @ignore
         */
        function Groups() {
          (0, _classCallCheck3["default"])(this, Groups);

          this.clear();
          this.defaultIndex = 0;
          this.groupsArray = [];
          this.groupIndex = 0;

          this.defaultGroups = [{ border: "#2B7CE9", background: "#97C2FC", highlight: { border: "#2B7CE9", background: "#D2E5FF" }, hover: { border: "#2B7CE9", background: "#D2E5FF" } }, // 0: blue
          { border: "#FFA500", background: "#FFFF00", highlight: { border: "#FFA500", background: "#FFFFA3" }, hover: { border: "#FFA500", background: "#FFFFA3" } }, // 1: yellow
          { border: "#FA0A10", background: "#FB7E81", highlight: { border: "#FA0A10", background: "#FFAFB1" }, hover: { border: "#FA0A10", background: "#FFAFB1" } }, // 2: red
          { border: "#41A906", background: "#7BE141", highlight: { border: "#41A906", background: "#A1EC76" }, hover: { border: "#41A906", background: "#A1EC76" } }, // 3: green
          { border: "#E129F0", background: "#EB7DF4", highlight: { border: "#E129F0", background: "#F0B3F5" }, hover: { border: "#E129F0", background: "#F0B3F5" } }, // 4: magenta
          { border: "#7C29F0", background: "#AD85E4", highlight: { border: "#7C29F0", background: "#D3BDF0" }, hover: { border: "#7C29F0", background: "#D3BDF0" } }, // 5: purple
          { border: "#C37F00", background: "#FFA807", highlight: { border: "#C37F00", background: "#FFCA66" }, hover: { border: "#C37F00", background: "#FFCA66" } }, // 6: orange
          { border: "#4220FB", background: "#6E6EFD", highlight: { border: "#4220FB", background: "#9B9BFD" }, hover: { border: "#4220FB", background: "#9B9BFD" } }, // 7: darkblue
          { border: "#FD5A77", background: "#FFC0CB", highlight: { border: "#FD5A77", background: "#FFD1D9" }, hover: { border: "#FD5A77", background: "#FFD1D9" } }, // 8: pink
          { border: "#4AD63A", background: "#C2FABC", highlight: { border: "#4AD63A", background: "#E6FFE3" }, hover: { border: "#4AD63A", background: "#E6FFE3" } }, // 9: mint

          { border: "#990000", background: "#EE0000", highlight: { border: "#BB0000", background: "#FF3333" }, hover: { border: "#BB0000", background: "#FF3333" } }, // 10:bright red

          { border: "#FF6000", background: "#FF6000", highlight: { border: "#FF6000", background: "#FF6000" }, hover: { border: "#FF6000", background: "#FF6000" } }, // 12: real orange
          { border: "#97C2FC", background: "#2B7CE9", highlight: { border: "#D2E5FF", background: "#2B7CE9" }, hover: { border: "#D2E5FF", background: "#2B7CE9" } }, // 13: blue
          { border: "#399605", background: "#255C03", highlight: { border: "#399605", background: "#255C03" }, hover: { border: "#399605", background: "#255C03" } }, // 14: green
          { border: "#B70054", background: "#FF007E", highlight: { border: "#B70054", background: "#FF007E" }, hover: { border: "#B70054", background: "#FF007E" } }, // 15: magenta
          { border: "#AD85E4", background: "#7C29F0", highlight: { border: "#D3BDF0", background: "#7C29F0" }, hover: { border: "#D3BDF0", background: "#7C29F0" } }, // 16: purple
          { border: "#4557FA", background: "#000EA1", highlight: { border: "#6E6EFD", background: "#000EA1" }, hover: { border: "#6E6EFD", background: "#000EA1" } }, // 17: darkblue
          { border: "#FFC0CB", background: "#FD5A77", highlight: { border: "#FFD1D9", background: "#FD5A77" }, hover: { border: "#FFD1D9", background: "#FD5A77" } }, // 18: pink
          { border: "#C2FABC", background: "#74D66A", highlight: { border: "#E6FFE3", background: "#74D66A" }, hover: { border: "#E6FFE3", background: "#74D66A" } }, // 19: mint

          { border: "#EE0000", background: "#990000", highlight: { border: "#FF3333", background: "#BB0000" }, hover: { border: "#FF3333", background: "#BB0000" // 20:bright red
            } }];

          this.options = {};
          this.defaultOptions = {
            useDefaultGroups: true
          };
          util.extend(this.options, this.defaultOptions);
        }

        /**
         *
         * @param {Object} options
         */

        (0, _createClass3["default"])(Groups, [{
          key: "setOptions",
          value: function setOptions(options) {
            var optionFields = ['useDefaultGroups'];

            if (options !== undefined) {
              for (var groupName in options) {
                if (options.hasOwnProperty(groupName)) {
                  if (optionFields.indexOf(groupName) === -1) {
                    var group = options[groupName];
                    this.add(groupName, group);
                  }
                }
              }
            }
          }

          /**
           * Clear all groups
           */

        }, {
          key: "clear",
          value: function clear() {
            this.groups = {};
            this.groupsArray = [];
          }

          /**
           * Get group options of a groupname.
           * If groupname is not found, a new group may be created.
           *
           * @param {*}       groupname     Can be a number, string, Date, etc.
           * @param {boolean} [shouldCreate=true] If true, create a new group
           * @return {Object} The found or created group
           */

        }, {
          key: "get",
          value: function get(groupname) {
            var shouldCreate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var group = this.groups[groupname];

            if (group === undefined && shouldCreate) {
              if (this.options.useDefaultGroups === false && this.groupsArray.length > 0) {
                // create new group
                var index = this.groupIndex % this.groupsArray.length;
                this.groupIndex++;
                group = {};
                group.color = this.groups[this.groupsArray[index]];
                this.groups[groupname] = group;
              } else {
                // create new group
                var _index = this.defaultIndex % this.defaultGroups.length;
                this.defaultIndex++;
                group = {};
                group.color = this.defaultGroups[_index];
                this.groups[groupname] = group;
              }
            }

            return group;
          }

          /**
           * Add a custom group style
           * @param {string} groupName
           * @param {Object} style       An object containing borderColor,
           *                             backgroundColor, etc.
           * @return {Object} group      The created group object
           */

        }, {
          key: "add",
          value: function add(groupName, style) {
            this.groups[groupName] = style;
            this.groupsArray.push(groupName);
            return style;
          }
        }]);
        return Groups;
      }();

      exports["default"] = Groups;

      /***/
    },
    /* 187 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var DataSet = __webpack_require__(11);
      var DataView = __webpack_require__(12);
      var Node = __webpack_require__(47)['default'];

      /**
       * Handler for Nodes
       */

      var NodesHandler = function () {
        /**
         * @param {Object} body
         * @param {Images} images
         * @param {Array.<Group>} groups
         * @param {LayoutEngine} layoutEngine
         */
        function NodesHandler(body, images, groups, layoutEngine) {
          var _this = this;

          (0, _classCallCheck3['default'])(this, NodesHandler);

          this.body = body;
          this.images = images;
          this.groups = groups;
          this.layoutEngine = layoutEngine;

          // create the node API in the body container
          this.body.functions.createNode = this.create.bind(this);

          this.nodesListeners = {
            add: function add(event, params) {
              _this.add(params.items);
            },
            update: function update(event, params) {
              _this.update(params.items, params.data, params.oldData);
            },
            remove: function remove(event, params) {
              _this.remove(params.items);
            }
          };

          this.defaultOptions = {
            borderWidth: 1,
            borderWidthSelected: 2,
            brokenImage: undefined,
            color: {
              border: '#2B7CE9',
              background: '#97C2FC',
              highlight: {
                border: '#2B7CE9',
                background: '#D2E5FF'
              },
              hover: {
                border: '#2B7CE9',
                background: '#D2E5FF'
              }
            },
            fixed: {
              x: false,
              y: false
            },
            font: {
              color: '#343434',
              size: 14, // px
              face: 'arial',
              background: 'none',
              strokeWidth: 0, // px
              strokeColor: '#ffffff',
              align: 'center',
              vadjust: 0,
              multi: false,
              bold: {
                mod: 'bold'
              },
              boldital: {
                mod: 'bold italic'
              },
              ital: {
                mod: 'italic'
              },
              mono: {
                mod: '',
                size: 15, // px
                face: 'monospace',
                vadjust: 2
              }
            },
            group: undefined,
            hidden: false,
            icon: {
              face: 'FontAwesome', //'FontAwesome',
              code: undefined, //'\uf007',
              size: 50, //50,
              color: '#2B7CE9' //'#aa00ff'
            },
            image: undefined, // --> URL
            label: undefined,
            labelHighlightBold: true,
            level: undefined,
            margin: {
              top: 5,
              right: 5,
              bottom: 5,
              left: 5
            },
            mass: 1,
            physics: true,
            scaling: {
              min: 10,
              max: 30,
              label: {
                enabled: false,
                min: 14,
                max: 30,
                maxVisible: 30,
                drawThreshold: 5
              },
              customScalingFunction: function customScalingFunction(min, max, total, value) {
                if (max === min) {
                  return 0.5;
                } else {
                  var scale = 1 / (max - min);
                  return Math.max(0, (value - min) * scale);
                }
              }
            },
            shadow: {
              enabled: false,
              color: 'rgba(0,0,0,0.5)',
              size: 10,
              x: 5,
              y: 5
            },
            shape: 'ellipse',
            shapeProperties: {
              borderDashes: false, // only for borders
              borderRadius: 6, // only for box shape
              interpolation: true, // only for image and circularImage shapes
              useImageSize: false, // only for image and circularImage shapes
              useBorderWithImage: false // only for image shape
            },
            size: 25,
            title: undefined,
            value: undefined,
            x: undefined,
            y: undefined
          };

          // Protect from idiocy
          if (this.defaultOptions.mass <= 0) {
            throw 'Internal error: mass in defaultOptions of NodesHandler may not be zero or negative';
          }

          this.options = util.bridgeObject(this.defaultOptions);

          this.bindEventListeners();
        }

        /**
         * Binds event listeners
         */

        (0, _createClass3['default'])(NodesHandler, [{
          key: 'bindEventListeners',
          value: function bindEventListeners() {
            var _this2 = this;

            // refresh the nodes. Used when reverting from hierarchical layout
            this.body.emitter.on('refreshNodes', this.refresh.bind(this));
            this.body.emitter.on('refresh', this.refresh.bind(this));
            this.body.emitter.on('destroy', function () {
              util.forEach(_this2.nodesListeners, function (callback, event) {
                if (_this2.body.data.nodes) _this2.body.data.nodes.off(event, callback);
              });
              delete _this2.body.functions.createNode;
              delete _this2.nodesListeners.add;
              delete _this2.nodesListeners.update;
              delete _this2.nodesListeners.remove;
              delete _this2.nodesListeners;
            });
          }

          /**
           *
           * @param {Object} options
           */

        }, {
          key: 'setOptions',
          value: function setOptions(options) {
            if (options !== undefined) {
              Node.parseOptions(this.options, options);

              // update the shape in all nodes
              if (options.shape !== undefined) {
                for (var nodeId in this.body.nodes) {
                  if (this.body.nodes.hasOwnProperty(nodeId)) {
                    this.body.nodes[nodeId].updateShape();
                  }
                }
              }

              // update the font in all nodes
              if (options.font !== undefined) {
                for (var _nodeId in this.body.nodes) {
                  if (this.body.nodes.hasOwnProperty(_nodeId)) {
                    this.body.nodes[_nodeId].updateLabelModule();
                    this.body.nodes[_nodeId].needsRefresh();
                  }
                }
              }

              // update the shape size in all nodes
              if (options.size !== undefined) {
                for (var _nodeId2 in this.body.nodes) {
                  if (this.body.nodes.hasOwnProperty(_nodeId2)) {
                    this.body.nodes[_nodeId2].needsRefresh();
                  }
                }
              }

              // update the state of the variables if needed
              if (options.hidden !== undefined || options.physics !== undefined) {
                this.body.emitter.emit('_dataChanged');
              }
            }
          }

          /**
           * Set a data set with nodes for the network
           * @param {Array | DataSet | DataView} nodes         The data containing the nodes.
           * @param {boolean} [doNotEmit=false]
           * @private
           */

        }, {
          key: 'setData',
          value: function setData(nodes) {
            var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var oldNodesData = this.body.data.nodes;

            if (nodes instanceof DataSet || nodes instanceof DataView) {
              this.body.data.nodes = nodes;
            } else if (Array.isArray(nodes)) {
              this.body.data.nodes = new DataSet();
              this.body.data.nodes.add(nodes);
            } else if (!nodes) {
              this.body.data.nodes = new DataSet();
            } else {
              throw new TypeError('Array or DataSet expected');
            }

            if (oldNodesData) {
              // unsubscribe from old dataset
              util.forEach(this.nodesListeners, function (callback, event) {
                oldNodesData.off(event, callback);
              });
            }

            // remove drawn nodes
            this.body.nodes = {};

            if (this.body.data.nodes) {
              // subscribe to new dataset
              var me = this;
              util.forEach(this.nodesListeners, function (callback, event) {
                me.body.data.nodes.on(event, callback);
              });

              // draw all new nodes
              var ids = this.body.data.nodes.getIds();
              this.add(ids, true);
            }

            if (doNotEmit === false) {
              this.body.emitter.emit("_dataChanged");
            }
          }

          /**
           * Add nodes
           * @param {number[] | string[]} ids
           * @param {boolean} [doNotEmit=false]
           * @private
           */

        }, {
          key: 'add',
          value: function add(ids) {
            var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var id = void 0;
            var newNodes = [];
            for (var i = 0; i < ids.length; i++) {
              id = ids[i];
              var properties = this.body.data.nodes.get(id);
              var node = this.create(properties);
              newNodes.push(node);
              this.body.nodes[id] = node; // note: this may replace an existing node
            }

            this.layoutEngine.positionInitially(newNodes);

            if (doNotEmit === false) {
              this.body.emitter.emit("_dataChanged");
            }
          }

          /**
           * Update existing nodes, or create them when not yet existing
           * @param {number[] | string[]} ids id's of changed nodes
           * @param {Array} changedData array with changed data
           * @param {Array|undefined} oldData optional; array with previous data
           * @private
           */

        }, {
          key: 'update',
          value: function update(ids, changedData, oldData) {
            var nodes = this.body.nodes;
            var dataChanged = false;
            for (var i = 0; i < ids.length; i++) {
              var id = ids[i];
              var node = nodes[id];
              var data = changedData[i];
              if (node !== undefined) {
                // update node
                if (node.setOptions(data)) {
                  dataChanged = true;
                }
              } else {
                dataChanged = true;
                // create node
                node = this.create(data);
                nodes[id] = node;
              }
            }

            if (!dataChanged && oldData !== undefined) {
              // Check for any changes which should trigger a layout recalculation
              // For now, this is just 'level' for hierarchical layout
              // Assumption: old and new data arranged in same order; at time of writing, this holds.
              dataChanged = changedData.some(function (newValue, index) {
                var oldValue = oldData[index];
                return oldValue && oldValue.level !== newValue.level;
              });
            }

            if (dataChanged === true) {
              this.body.emitter.emit("_dataChanged");
            } else {
              this.body.emitter.emit("_dataUpdated");
            }
          }

          /**
           * Remove existing nodes. If nodes do not exist, the method will just ignore it.
           * @param {number[] | string[]} ids
           * @private
           */

        }, {
          key: 'remove',
          value: function remove(ids) {
            var nodes = this.body.nodes;

            for (var i = 0; i < ids.length; i++) {
              var id = ids[i];
              delete nodes[id];
            }

            this.body.emitter.emit("_dataChanged");
          }

          /**
           * create a node
           * @param {Object} properties
           * @param {class} [constructorClass=Node.default]
           * @returns {*}
           */

        }, {
          key: 'create',
          value: function create(properties) {
            var constructorClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Node;

            return new constructorClass(properties, this.body, this.images, this.groups, this.options, this.defaultOptions);
          }

          /**
           *
           * @param {boolean} [clearPositions=false]
           */

        }, {
          key: 'refresh',
          value: function refresh() {
            var _this3 = this;

            var clearPositions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            util.forEach(this.body.nodes, function (node, nodeId) {
              var data = _this3.body.data.nodes.get(nodeId);
              if (data !== undefined) {
                if (clearPositions === true) {
                  node.setOptions({ x: null, y: null });
                }
                node.setOptions({ fixed: false });
                node.setOptions(data);
              }
            });
          }

          /**
           * Returns the positions of the nodes.
           * @param {Array.<Node.id>|String} [ids]  --> optional, can be array of nodeIds, can be string
           * @returns {{}}
           */

        }, {
          key: 'getPositions',
          value: function getPositions(ids) {
            var dataArray = {};
            if (ids !== undefined) {
              if (Array.isArray(ids) === true) {
                for (var i = 0; i < ids.length; i++) {
                  if (this.body.nodes[ids[i]] !== undefined) {
                    var node = this.body.nodes[ids[i]];
                    dataArray[ids[i]] = { x: Math.round(node.x), y: Math.round(node.y) };
                  }
                }
              } else {
                if (this.body.nodes[ids] !== undefined) {
                  var _node = this.body.nodes[ids];
                  dataArray[ids] = { x: Math.round(_node.x), y: Math.round(_node.y) };
                }
              }
            } else {
              for (var _i = 0; _i < this.body.nodeIndices.length; _i++) {
                var _node2 = this.body.nodes[this.body.nodeIndices[_i]];
                dataArray[this.body.nodeIndices[_i]] = { x: Math.round(_node2.x), y: Math.round(_node2.y) };
              }
            }
            return dataArray;
          }

          /**
           * Load the XY positions of the nodes into the dataset.
           */

        }, {
          key: 'storePositions',
          value: function storePositions() {
            // todo: add support for clusters and hierarchical.
            var dataArray = [];
            var dataset = this.body.data.nodes.getDataSet();

            for (var nodeId in dataset._data) {
              if (dataset._data.hasOwnProperty(nodeId)) {
                var node = this.body.nodes[nodeId];
                if (dataset._data[nodeId].x != Math.round(node.x) || dataset._data[nodeId].y != Math.round(node.y)) {
                  dataArray.push({ id: node.id, x: Math.round(node.x), y: Math.round(node.y) });
                }
              }
            }
            dataset.update(dataArray);
          }

          /**
           * get the bounding box of a node.
           * @param {Node.id} nodeId
           * @returns {j|*}
           */

        }, {
          key: 'getBoundingBox',
          value: function getBoundingBox(nodeId) {
            if (this.body.nodes[nodeId] !== undefined) {
              return this.body.nodes[nodeId].shape.boundingBox;
            }
          }

          /**
           * Get the Ids of nodes connected to this node.
           * @param {Node.id} nodeId
           * @param {'to'|'from'|undefined} direction values 'from' and 'to' select respectively parent and child nodes only.
           *                                          Any other value returns both parent and child nodes.
           * @returns {Array}
           */

        }, {
          key: 'getConnectedNodes',
          value: function getConnectedNodes(nodeId, direction) {
            var nodeList = [];
            if (this.body.nodes[nodeId] !== undefined) {
              var node = this.body.nodes[nodeId];
              var nodeObj = {}; // used to quickly check if node already exists
              for (var i = 0; i < node.edges.length; i++) {
                var edge = node.edges[i];
                if (direction !== 'to' && edge.toId == node.id) {
                  // these are double equals since ids can be numeric or string
                  if (nodeObj[edge.fromId] === undefined) {
                    nodeList.push(edge.fromId);
                    nodeObj[edge.fromId] = true;
                  }
                } else if (direction !== 'from' && edge.fromId == node.id) {
                  // these are double equals since ids can be numeric or string
                  if (nodeObj[edge.toId] === undefined) {
                    nodeList.push(edge.toId);
                    nodeObj[edge.toId] = true;
                  }
                }
              }
            }
            return nodeList;
          }

          /**
           * Get the ids of the edges connected to this node.
           * @param {Node.id} nodeId
           * @returns {*}
           */

        }, {
          key: 'getConnectedEdges',
          value: function getConnectedEdges(nodeId) {
            var edgeList = [];
            if (this.body.nodes[nodeId] !== undefined) {
              var node = this.body.nodes[nodeId];
              for (var i = 0; i < node.edges.length; i++) {
                edgeList.push(node.edges[i].id);
              }
            } else {
              console.log("NodeId provided for getConnectedEdges does not exist. Provided: ", nodeId);
            }
            return edgeList;
          }

          /**
           * Move a node.
           *
           * @param {Node.id} nodeId
           * @param {number} x
           * @param {number} y
           */

        }, {
          key: 'moveNode',
          value: function moveNode(nodeId, x, y) {
            var _this4 = this;

            if (this.body.nodes[nodeId] !== undefined) {
              this.body.nodes[nodeId].x = Number(x);
              this.body.nodes[nodeId].y = Number(y);
              setTimeout(function () {
                _this4.body.emitter.emit("startSimulation");
              }, 0);
            } else {
              console.log("Node id supplied to moveNode does not exist. Provided: ", nodeId);
            }
          }
        }]);
        return NodesHandler;
      }();

      exports['default'] = NodesHandler;

      /***/
    },
    /* 188 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = { "default": __webpack_require__(189), __esModule: true };

      /***/
    },
    /* 189 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(49);
      __webpack_require__(60);
      module.exports = __webpack_require__(190);

      /***/
    },
    /* 190 */
    /***/function (module, exports, __webpack_require__) {

      var classof = __webpack_require__(86);
      var ITERATOR = __webpack_require__(13)('iterator');
      var Iterators = __webpack_require__(31);
      module.exports = __webpack_require__(7).isIterable = function (it) {
        var O = Object(it);
        return O[ITERATOR] !== undefined || '@@iterator' in O
        // eslint-disable-next-line no-prototype-builtins
        || Iterators.hasOwnProperty(classof(O));
      };

      /***/
    },
    /* 191 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var LabelAccumulator = __webpack_require__(192)['default'];
      var ComponentUtil = __webpack_require__(48)['default'];

      /**
       * Helper class for Label which explodes the label text into lines and blocks within lines
       *
       * @private
       */

      var LabelSplitter = function () {

        /**
         * @param {CanvasRenderingContext2D} ctx Canvas rendering context
         * @param {Label} parent reference to the Label instance using current instance
         * @param {boolean} selected 
         * @param {boolean} hover
         */
        function LabelSplitter(ctx, parent, selected, hover) {
          var _this = this;

          (0, _classCallCheck3['default'])(this, LabelSplitter);

          this.ctx = ctx;
          this.parent = parent;

          /**
           * Callback to determine text width; passed to LabelAccumulator instance
           *
           * @param  {String} text string to determine width of
           * @param  {String} mod  font type to use for this text
           * @return {Object} { width, values} width in pixels and font attributes
           */
          var textWidth = function textWidth(text, mod) {
            if (text === undefined) return 0;

            // TODO: This can be done more efficiently with caching
            var values = _this.parent.getFormattingValues(ctx, selected, hover, mod);

            var width = 0;
            if (text !== '') {
              // NOTE: The following may actually be *incorrect* for the mod fonts!
              //       This returns the size with a regular font, bold etc. may
              //       have different sizes.
              var measure = _this.ctx.measureText(text);
              width = measure.width;
            }

            return { width: width, values: values };
          };

          this.lines = new LabelAccumulator(textWidth);
        }

        /**
         * Split passed text of a label into lines and blocks.
         *
         * # NOTE
         *
         * The handling of spacing is option dependent:
         *
         * - if `font.multi : false`, all spaces are retained
         * - if `font.multi : true`, every sequence of spaces is compressed to a single space
         *
         * This might not be the best way to do it, but this is as it has been working till now.
         * In order not to break existing functionality, for the time being this behaviour will
         * be retained in any code changes. 
         *
         * @param {string} text  text to split
         * @returns {Array<line>}
         */

        (0, _createClass3['default'])(LabelSplitter, [{
          key: 'process',
          value: function process(text) {
            if (!ComponentUtil.isValidLabel(text)) {
              return this.lines.finalize();
            }

            var font = this.parent.fontOptions;

            // Normalize the end-of-line's to a single representation - order important
            text = text.replace(/\r\n/g, '\n'); // Dos EOL's
            text = text.replace(/\r/g, '\n'); // Mac EOL's

            // Note that at this point, there can be no \r's in the text.
            // This is used later on splitStringIntoLines() to split multifont texts.

            var nlLines = String(text).split('\n');
            var lineCount = nlLines.length;

            if (font.multi) {
              // Multi-font case: styling tags active
              for (var i = 0; i < lineCount; i++) {
                var blocks = this.splitBlocks(nlLines[i], font.multi);
                // Post: Sequences of tabs and spaces are reduced to single space

                if (blocks === undefined) continue;

                if (blocks.length === 0) {
                  this.lines.newLine("");
                  continue;
                }

                if (font.maxWdt > 0) {
                  // widthConstraint.maximum defined
                  //console.log('Running widthConstraint multi, max: ' + this.fontOptions.maxWdt);
                  for (var j = 0; j < blocks.length; j++) {
                    var mod = blocks[j].mod;
                    var _text = blocks[j].text;
                    this.splitStringIntoLines(_text, mod, true);
                  }
                } else {
                  // widthConstraint.maximum NOT defined
                  for (var _j = 0; _j < blocks.length; _j++) {
                    var _mod = blocks[_j].mod;
                    var _text2 = blocks[_j].text;
                    this.lines.append(_text2, _mod);
                  }
                }

                this.lines.newLine();
              }
            } else {
              // Single-font case
              if (font.maxWdt > 0) {
                // widthConstraint.maximum defined
                // console.log('Running widthConstraint normal, max: ' + this.fontOptions.maxWdt);
                for (var _i = 0; _i < lineCount; _i++) {
                  this.splitStringIntoLines(nlLines[_i]);
                }
              } else {
                // widthConstraint.maximum NOT defined
                for (var _i2 = 0; _i2 < lineCount; _i2++) {
                  this.lines.newLine(nlLines[_i2]);
                }
              }
            }

            return this.lines.finalize();
          }

          /**
           * normalize the markup system
           *
           * @param {boolean|'md'|'markdown'|'html'} markupSystem
           * @returns {string}
           */

        }, {
          key: 'decodeMarkupSystem',
          value: function decodeMarkupSystem(markupSystem) {
            var system = 'none';
            if (markupSystem === 'markdown' || markupSystem === 'md') {
              system = 'markdown';
            } else if (markupSystem === true || markupSystem === 'html') {
              system = 'html';
            }
            return system;
          }

          /**
           *
           * @param {string} text
           * @returns {Array}
           */

        }, {
          key: 'splitHtmlBlocks',
          value: function splitHtmlBlocks(text) {
            var blocks = [];

            // TODO: consolidate following + methods/closures with splitMarkdownBlocks()
            // NOTE: sequences of tabs and spaces are reduced to single space; scan usage of `this.spacing` within method
            var s = {
              bold: false,
              ital: false,
              mono: false,
              spacing: false,
              position: 0,
              buffer: "",
              modStack: []
            };

            s.mod = function () {
              return this.modStack.length === 0 ? 'normal' : this.modStack[0];
            };

            s.modName = function () {
              if (this.modStack.length === 0) return 'normal';else if (this.modStack[0] === 'mono') return 'mono';else {
                if (s.bold && s.ital) {
                  return 'boldital';
                } else if (s.bold) {
                  return 'bold';
                } else if (s.ital) {
                  return 'ital';
                }
              }
            };

            s.emitBlock = function () {
              var override = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              // eslint-disable-line no-unused-vars
              if (this.spacing) {
                this.add(" ");
                this.spacing = false;
              }
              if (this.buffer.length > 0) {
                blocks.push({ text: this.buffer, mod: this.modName() });
                this.buffer = "";
              }
            };

            s.add = function (text) {
              if (text === " ") {
                s.spacing = true;
              }
              if (s.spacing) {
                this.buffer += " ";
                this.spacing = false;
              }
              if (text != " ") {
                this.buffer += text;
              }
            };

            while (s.position < text.length) {
              var ch = text.charAt(s.position);
              if (/[ \t]/.test(ch)) {
                if (!s.mono) {
                  s.spacing = true;
                } else {
                  s.add(ch);
                }
              } else if (/</.test(ch)) {
                if (!s.mono && !s.bold && /<b>/.test(text.substr(s.position, 3))) {
                  s.emitBlock();
                  s.bold = true;
                  s.modStack.unshift("bold");
                  s.position += 2;
                } else if (!s.mono && !s.ital && /<i>/.test(text.substr(s.position, 3))) {
                  s.emitBlock();
                  s.ital = true;
                  s.modStack.unshift("ital");
                  s.position += 2;
                } else if (!s.mono && /<code>/.test(text.substr(s.position, 6))) {
                  s.emitBlock();
                  s.mono = true;
                  s.modStack.unshift("mono");
                  s.position += 5;
                } else if (!s.mono && s.mod() === 'bold' && /<\/b>/.test(text.substr(s.position, 4))) {
                  s.emitBlock();
                  s.bold = false;
                  s.modStack.shift();
                  s.position += 3;
                } else if (!s.mono && s.mod() === 'ital' && /<\/i>/.test(text.substr(s.position, 4))) {
                  s.emitBlock();
                  s.ital = false;
                  s.modStack.shift();
                  s.position += 3;
                } else if (s.mod() === 'mono' && /<\/code>/.test(text.substr(s.position, 7))) {
                  s.emitBlock();
                  s.mono = false;
                  s.modStack.shift();
                  s.position += 6;
                } else {
                  s.add(ch);
                }
              } else if (/&/.test(ch)) {
                if (/&lt;/.test(text.substr(s.position, 4))) {
                  s.add("<");
                  s.position += 3;
                } else if (/&amp;/.test(text.substr(s.position, 5))) {
                  s.add("&");
                  s.position += 4;
                } else {
                  s.add("&");
                }
              } else {
                s.add(ch);
              }
              s.position++;
            }
            s.emitBlock();
            return blocks;
          }

          /**
           *
           * @param {string} text
           * @returns {Array}
           */

        }, {
          key: 'splitMarkdownBlocks',
          value: function splitMarkdownBlocks(text) {
            var blocks = [];

            // TODO: consolidate following + methods/closures with splitHtmlBlocks()
            // NOTE: sequences of tabs and spaces are reduced to single space; scan usage of `this.spacing` within method
            var s = {
              bold: false,
              ital: false,
              mono: false,
              beginable: true,
              spacing: false,
              position: 0,
              buffer: "",
              modStack: []
            };

            s.mod = function () {
              return this.modStack.length === 0 ? 'normal' : this.modStack[0];
            };

            s.modName = function () {
              if (this.modStack.length === 0) return 'normal';else if (this.modStack[0] === 'mono') return 'mono';else {
                if (s.bold && s.ital) {
                  return 'boldital';
                } else if (s.bold) {
                  return 'bold';
                } else if (s.ital) {
                  return 'ital';
                }
              }
            };

            s.emitBlock = function () {
              var override = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              // eslint-disable-line no-unused-vars
              if (this.spacing) {
                this.add(" ");
                this.spacing = false;
              }
              if (this.buffer.length > 0) {
                blocks.push({ text: this.buffer, mod: this.modName() });
                this.buffer = "";
              }
            };

            s.add = function (text) {
              if (text === " ") {
                s.spacing = true;
              }
              if (s.spacing) {
                this.buffer += " ";
                this.spacing = false;
              }
              if (text != " ") {
                this.buffer += text;
              }
            };

            while (s.position < text.length) {
              var ch = text.charAt(s.position);
              if (/[ \t]/.test(ch)) {
                if (!s.mono) {
                  s.spacing = true;
                } else {
                  s.add(ch);
                }
                s.beginable = true;
              } else if (/\\/.test(ch)) {
                if (s.position < text.length + 1) {
                  s.position++;
                  ch = text.charAt(s.position);
                  if (/ \t/.test(ch)) {
                    s.spacing = true;
                  } else {
                    s.add(ch);
                    s.beginable = false;
                  }
                }
              } else if (!s.mono && !s.bold && (s.beginable || s.spacing) && /\*/.test(ch)) {
                s.emitBlock();
                s.bold = true;
                s.modStack.unshift("bold");
              } else if (!s.mono && !s.ital && (s.beginable || s.spacing) && /\_/.test(ch)) {
                s.emitBlock();
                s.ital = true;
                s.modStack.unshift("ital");
              } else if (!s.mono && (s.beginable || s.spacing) && /`/.test(ch)) {
                s.emitBlock();
                s.mono = true;
                s.modStack.unshift("mono");
              } else if (!s.mono && s.mod() === "bold" && /\*/.test(ch)) {
                if (s.position === text.length - 1 || /[.,_` \t\n]/.test(text.charAt(s.position + 1))) {
                  s.emitBlock();
                  s.bold = false;
                  s.modStack.shift();
                } else {
                  s.add(ch);
                }
              } else if (!s.mono && s.mod() === "ital" && /\_/.test(ch)) {
                if (s.position === text.length - 1 || /[.,*` \t\n]/.test(text.charAt(s.position + 1))) {
                  s.emitBlock();
                  s.ital = false;
                  s.modStack.shift();
                } else {
                  s.add(ch);
                }
              } else if (s.mono && s.mod() === "mono" && /`/.test(ch)) {
                if (s.position === text.length - 1 || /[.,*_ \t\n]/.test(text.charAt(s.position + 1))) {
                  s.emitBlock();
                  s.mono = false;
                  s.modStack.shift();
                } else {
                  s.add(ch);
                }
              } else {
                s.add(ch);
                s.beginable = false;
              }
              s.position++;
            }
            s.emitBlock();
            return blocks;
          }

          /**
           * Explodes a piece of text into single-font blocks using a given markup
           *
           * @param {string} text
           * @param {boolean|'md'|'markdown'|'html'} markupSystem
           * @returns {Array.<{text: string, mod: string}>}
           * @private
           */

        }, {
          key: 'splitBlocks',
          value: function splitBlocks(text, markupSystem) {
            var system = this.decodeMarkupSystem(markupSystem);
            if (system === 'none') {
              return [{
                text: text,
                mod: 'normal'
              }];
            } else if (system === 'markdown') {
              return this.splitMarkdownBlocks(text);
            } else if (system === 'html') {
              return this.splitHtmlBlocks(text);
            }
          }

          /**
           * @param {string} text
           * @returns {boolean} true if text length over the current max with
           * @private
           */

        }, {
          key: 'overMaxWidth',
          value: function overMaxWidth(text) {
            var width = this.ctx.measureText(text).width;
            return this.lines.curWidth() + width > this.parent.fontOptions.maxWdt;
          }

          /**
           * Determine the longest part of the sentence which still fits in the 
           * current max width.
           * 
           * @param {Array} words  Array of strings signifying a text lines
           * @return {number}      index of first item in string making string go over max
           * @private
           */

        }, {
          key: 'getLongestFit',
          value: function getLongestFit(words) {
            var text = '';
            var w = 0;

            while (w < words.length) {
              var pre = text === '' ? '' : ' ';
              var newText = text + pre + words[w];

              if (this.overMaxWidth(newText)) break;
              text = newText;
              w++;
            }

            return w;
          }

          /**
           * Determine the longest part of the string which still fits in the
           * current max width.
           * 
           * @param {Array} words Array of strings signifying a text lines
           * @return {number} index of first item in string making string go over max
           */

        }, {
          key: 'getLongestFitWord',
          value: function getLongestFitWord(words) {
            var w = 0;

            while (w < words.length) {
              if (this.overMaxWidth(words.slice(0, w))) break;
              w++;
            }

            return w;
          }

          /**
           * Split the passed text into lines, according to width constraint (if any).
           * 
           * The method assumes that the input string is a single line, i.e. without lines break.
           *
           * This method retains spaces, if still present (case `font.multi: false`).
           * A space which falls on an internal line break, will be replaced by a newline.
           * There is no special handling of tabs; these go along with the flow.
           * 
           * @param {string} str
           * @param {string} [mod='normal']
           * @param {boolean} [appendLast=false]
           * @private
           */

        }, {
          key: 'splitStringIntoLines',
          value: function splitStringIntoLines(str) {
            var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';
            var appendLast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            // Still-present spaces are relevant, retain them
            str = str.replace(/^( +)/g, '$1\r');
            str = str.replace(/([^\r][^ ]*)( +)/g, '$1\r$2\r');
            var words = str.split('\r');

            while (words.length > 0) {
              var w = this.getLongestFit(words);

              if (w === 0) {
                // Special case: the first word is already larger than the max width.
                var word = words[0];

                // Break the word to the largest part that fits the line
                var x = this.getLongestFitWord(word);
                this.lines.newLine(word.slice(0, x), mod);

                // Adjust the word, so that the rest will be done next iteration
                words[0] = word.slice(x);
              } else {
                // skip any space that is replaced by a newline
                var newW = w;
                if (words[w - 1] === ' ') {
                  w--;
                } else if (words[newW] === ' ') {
                  newW++;
                }

                var text = words.slice(0, w).join("");

                if (w == words.length && appendLast) {
                  this.lines.append(text, mod);
                } else {
                  this.lines.newLine(text, mod);
                }

                // Adjust the word, so that the rest will be done next iteration
                words = words.slice(newW);
              }
            }
          }
        }]);
        return LabelSplitter;
      }();

      exports['default'] = LabelSplitter;

      /***/
    },
    /* 192 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _assign = __webpack_require__(90);

      var _assign2 = _interopRequireDefault(_assign);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * Callback to determine text dimensions, using the parent label settings.
       * @callback MeasureText
       * @param {text} text
       * @param {text} mod
       * @return {Object} { width, values} width in pixels and font attributes
       */

      /**
       * Helper class for Label which collects results of splitting labels into lines and blocks.
       *
       * @private
       */
      var LabelAccumulator = function () {

        /**
         * @param {MeasureText} measureText
         */
        function LabelAccumulator(measureText) {
          (0, _classCallCheck3["default"])(this, LabelAccumulator);

          this.measureText = measureText;
          this.current = 0;
          this.width = 0;
          this.height = 0;
          this.lines = [];
        }

        /**
         * Append given text to the given line.
         *
         * @param {number}  l    index of line to add to
         * @param {string}  text string to append to line
         * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']
         * @private
         */

        (0, _createClass3["default"])(LabelAccumulator, [{
          key: "_add",
          value: function _add(l, text) {
            var mod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'normal';

            if (this.lines[l] === undefined) {
              this.lines[l] = {
                width: 0,
                height: 0,
                blocks: []
              };
            }

            // We still need to set a block for undefined and empty texts, hence return at this point
            // This is necessary because we don't know at this point if we're at the
            // start of an empty line or not.
            // To compensate, empty blocks are removed in `finalize()`.
            //
            // Empty strings should still have a height
            var tmpText = text;
            if (text === undefined || text === "") tmpText = " ";

            // Determine width and get the font properties
            var result = this.measureText(tmpText, mod);
            var block = (0, _assign2["default"])({}, result.values);
            block.text = text;
            block.width = result.width;
            block.mod = mod;

            if (text === undefined || text === "") {
              block.width = 0;
            }

            this.lines[l].blocks.push(block);

            // Update the line width. We need this for determining if a string goes over max width
            this.lines[l].width += block.width;
          }

          /**
           * Returns the width in pixels of the current line.
           *
           * @returns {number}
           */

        }, {
          key: "curWidth",
          value: function curWidth() {
            var line = this.lines[this.current];
            if (line === undefined) return 0;

            return line.width;
          }

          /**
           * Add text in block to current line
           *
           * @param {string} text
           * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']
           */

        }, {
          key: "append",
          value: function append(text) {
            var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';

            this._add(this.current, text, mod);
          }

          /**
           * Add text in block to current line and start a new line
           *
           * @param {string} text
           * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']
           */

        }, {
          key: "newLine",
          value: function newLine(text) {
            var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';

            this._add(this.current, text, mod);
            this.current++;
          }

          /**
           * Determine and set the heights of all the lines currently contained in this instance
           *
           * Note that width has already been set.
           * 
           * @private
           */

        }, {
          key: "determineLineHeights",
          value: function determineLineHeights() {
            for (var k = 0; k < this.lines.length; k++) {
              var line = this.lines[k];

              // Looking for max height of blocks in line
              var height = 0;

              if (line.blocks !== undefined) {
                // Can happen if text contains e.g. '\n '
                for (var l = 0; l < line.blocks.length; l++) {
                  var block = line.blocks[l];

                  if (height < block.height) {
                    height = block.height;
                  }
                }
              }

              line.height = height;
            }
          }

          /**
           * Determine the full size of the label text, as determined by current lines and blocks
           * 
           * @private
           */

        }, {
          key: "determineLabelSize",
          value: function determineLabelSize() {
            var width = 0;
            var height = 0;
            for (var k = 0; k < this.lines.length; k++) {
              var line = this.lines[k];

              if (line.width > width) {
                width = line.width;
              }
              height += line.height;
            }

            this.width = width;
            this.height = height;
          }

          /**
           * Remove all empty blocks and empty lines we don't need
           * 
           * This must be done after the width/height determination,
           * so that these are set properly for processing here.
           *
           * @returns {Array<Line>} Lines with empty blocks (and some empty lines) removed
           * @private
           */

        }, {
          key: "removeEmptyBlocks",
          value: function removeEmptyBlocks() {
            var tmpLines = [];
            for (var k = 0; k < this.lines.length; k++) {
              var line = this.lines[k];

              // Note: an empty line in between text has width zero but is still relevant to layout.
              // So we can't use width for testing empty line here
              if (line.blocks.length === 0) continue;

              // Discard final empty line always
              if (k === this.lines.length - 1) {
                if (line.width === 0) continue;
              }

              var tmpLine = {};
              (0, _assign2["default"])(tmpLine, line);
              tmpLine.blocks = [];

              var firstEmptyBlock = void 0;
              var tmpBlocks = [];
              for (var l = 0; l < line.blocks.length; l++) {
                var block = line.blocks[l];
                if (block.width !== 0) {
                  tmpBlocks.push(block);
                } else {
                  if (firstEmptyBlock === undefined) {
                    firstEmptyBlock = block;
                  }
                }
              }

              // Ensure that there is *some* text present
              if (tmpBlocks.length === 0 && firstEmptyBlock !== undefined) {
                tmpBlocks.push(firstEmptyBlock);
              }

              tmpLine.blocks = tmpBlocks;

              tmpLines.push(tmpLine);
            }

            return tmpLines;
          }

          /**
           * Set the sizes for all lines and the whole thing.
           *
           * @returns {{width: (number|*), height: (number|*), lines: Array}}
           */

        }, {
          key: "finalize",
          value: function finalize() {
            //console.log(JSON.stringify(this.lines, null, 2));

            this.determineLineHeights();
            this.determineLabelSize();
            var tmpLines = this.removeEmptyBlocks();

            // Return a simple hash object for further processing.
            return {
              width: this.width,
              height: this.height,
              lines: tmpLines
            };
          }
        }]);
        return LabelAccumulator;
      }();

      exports["default"] = LabelAccumulator;

      /***/
    },
    /* 193 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _NodeBase2 = __webpack_require__(23);

      var _NodeBase3 = _interopRequireDefault(_NodeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Box Node/Cluster shape.
       *
       * @extends NodeBase
       */
      var Box = function (_NodeBase) {
        (0, _inherits3['default'])(Box, _NodeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function Box(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, Box);

          var _this = (0, _possibleConstructorReturn3['default'])(this, (Box.__proto__ || (0, _getPrototypeOf2['default'])(Box)).call(this, options, body, labelModule));

          _this._setMargins(labelModule);
          return _this;
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {boolean} [selected]
         * @param {boolean} [hover]
         */

        (0, _createClass3['default'])(Box, [{
          key: 'resize',
          value: function resize(ctx) {
            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

            if (this.needsRefresh(selected, hover)) {
              var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);

              this.width = dimensions.width + this.margin.right + this.margin.left;
              this.height = dimensions.height + this.margin.top + this.margin.bottom;
              this.radius = this.width / 2;
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x width
           * @param {number} y height
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this.resize(ctx, selected, hover);
            this.left = x - this.width / 2;
            this.top = y - this.height / 2;

            this.initContextForDraw(ctx, values);
            ctx.roundRect(this.left, this.top, this.width, this.height, values.borderRadius);
            this.performFill(ctx, values);

            this.updateBoundingBox(x, y, ctx, selected, hover);
            this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
          }

          /**
           *
           * @param {number} x width
           * @param {number} y height
           * @param {CanvasRenderingContext2D} ctx
           * @param {boolean} selected
           * @param {boolean} hover
           */

        }, {
          key: 'updateBoundingBox',
          value: function updateBoundingBox(x, y, ctx, selected, hover) {
            this._updateBoundingBox(x, y, ctx, selected, hover);

            var borderRadius = this.options.shapeProperties.borderRadius; // only effective for box
            this._addBoundingBoxMargin(borderRadius);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            this.resize(ctx);
            var borderWidth = this.options.borderWidth;

            return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
          }
        }]);
        return Box;
      }(_NodeBase3['default']);

      exports['default'] = Box;

      /***/
    },
    /* 194 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(195);
      module.exports = __webpack_require__(7).Object.getPrototypeOf;

      /***/
    },
    /* 195 */
    /***/function (module, exports, __webpack_require__) {

      // 19.1.2.9 Object.getPrototypeOf(O)
      var toObject = __webpack_require__(41);
      var $getPrototypeOf = __webpack_require__(85);

      __webpack_require__(87)('getPrototypeOf', function () {
        return function getPrototypeOf(it) {
          return $getPrototypeOf(toObject(it));
        };
      });

      /***/
    },
    /* 196 */
    /***/function (module, exports, __webpack_require__) {

      module.exports = { "default": __webpack_require__(197), __esModule: true };

      /***/
    },
    /* 197 */
    /***/function (module, exports, __webpack_require__) {

      __webpack_require__(198);
      module.exports = __webpack_require__(7).Object.setPrototypeOf;

      /***/
    },
    /* 198 */
    /***/function (module, exports, __webpack_require__) {

      // 19.1.3.19 Object.setPrototypeOf(O, proto)
      var $export = __webpack_require__(17);
      $export($export.S, 'Object', { setPrototypeOf: __webpack_require__(199).set });

      /***/
    },
    /* 199 */
    /***/function (module, exports, __webpack_require__) {

      // Works with __proto__ only. Old v8 can't work with null proto objects.
      /* eslint-disable no-proto */
      var isObject = __webpack_require__(32);
      var anObject = __webpack_require__(27);
      var check = function check(O, proto) {
        anObject(O);
        if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
      };
      module.exports = {
        set: _setPrototypeOf4['default'] || ('__proto__' in {} ? // eslint-disable-line
        function (test, buggy, set) {
          try {
            set = __webpack_require__(80)(Function.call, __webpack_require__(89).f(Object.prototype, '__proto__').set, 2);
            set(test, []);
            buggy = !(test instanceof Array);
          } catch (e) {
            buggy = true;
          }
          return function setPrototypeOf(O, proto) {
            check(O, proto);
            if (buggy) O.__proto__ = proto;else set(O, proto);
            return O;
          };
        }({}, false) : undefined),
        check: check
      };

      /***/
    },
    /* 200 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _CircleImageBase2 = __webpack_require__(73);

      var _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Circle Node/Cluster shape.
       *
       * @extends CircleImageBase
       */
      var Circle = function (_CircleImageBase) {
        (0, _inherits3['default'])(Circle, _CircleImageBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function Circle(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, Circle);

          var _this = (0, _possibleConstructorReturn3['default'])(this, (Circle.__proto__ || (0, _getPrototypeOf2['default'])(Circle)).call(this, options, body, labelModule));

          _this._setMargins(labelModule);
          return _this;
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {boolean} [selected]
         * @param {boolean} [hover]
         */

        (0, _createClass3['default'])(Circle, [{
          key: 'resize',
          value: function resize(ctx) {
            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

            if (this.needsRefresh(selected, hover)) {
              var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);

              var diameter = Math.max(dimensions.width + this.margin.right + this.margin.left, dimensions.height + this.margin.top + this.margin.bottom);

              this.options.size = diameter / 2; // NOTE: this size field only set here, not in Ellipse, Database, Box
              this.width = diameter;
              this.height = diameter;
              this.radius = this.width / 2;
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x width
           * @param {number} y height
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this.resize(ctx, selected, hover);
            this.left = x - this.width / 2;
            this.top = y - this.height / 2;

            this._drawRawCircle(ctx, x, y, values);

            this.updateBoundingBox(x, y);
            this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, y, selected, hover);
          }

          /**
           *
           * @param {number} x width
           * @param {number} y height
           */

        }, {
          key: 'updateBoundingBox',
          value: function updateBoundingBox(x, y) {
            this.boundingBox.top = y - this.options.size;
            this.boundingBox.left = x - this.options.size;
            this.boundingBox.right = x + this.options.size;
            this.boundingBox.bottom = y + this.options.size;
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle - Unused
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            // eslint-disable-line no-unused-vars
            this.resize(ctx);
            return this.width * 0.5;
          }
        }]);
        return Circle;
      }(_CircleImageBase3['default']);

      exports['default'] = Circle;

      /***/
    },
    /* 201 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _CircleImageBase2 = __webpack_require__(73);

      var _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A CircularImage Node/Cluster shape.
       *
       * @extends CircleImageBase
       */
      var CircularImage = function (_CircleImageBase) {
        (0, _inherits3['default'])(CircularImage, _CircleImageBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         * @param {Image} imageObj
         * @param {Image} imageObjAlt
         */
        function CircularImage(options, body, labelModule, imageObj, imageObjAlt) {
          (0, _classCallCheck3['default'])(this, CircularImage);

          var _this = (0, _possibleConstructorReturn3['default'])(this, (CircularImage.__proto__ || (0, _getPrototypeOf2['default'])(CircularImage)).call(this, options, body, labelModule));

          _this.setImages(imageObj, imageObjAlt);
          return _this;
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {boolean} [selected]
         * @param {boolean} [hover]
         */

        (0, _createClass3['default'])(CircularImage, [{
          key: 'resize',
          value: function resize(ctx) {
            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

            var imageAbsent = this.imageObj.src === undefined || this.imageObj.width === undefined || this.imageObj.height === undefined;

            if (imageAbsent) {
              var diameter = this.options.size * 2;
              this.width = diameter;
              this.height = diameter;
              this.radius = 0.5 * this.width;
              return;
            }

            // At this point, an image is present, i.e. this.imageObj is valid.
            if (this.needsRefresh(selected, hover)) {
              this._resizeImage();
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x width
           * @param {number} y height
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this.switchImages(selected);
            this.resize();
            this.left = x - this.width / 2;
            this.top = y - this.height / 2;

            // draw the background circle. IMPORTANT: the stroke in this method is used by the clip method below.
            this._drawRawCircle(ctx, x, y, values);

            // now we draw in the circle, we save so we can revert the clip operation after drawing.
            ctx.save();
            // clip is used to use the stroke in drawRawCircle as an area that we can draw in.
            ctx.clip();
            // draw the image
            this._drawImageAtPosition(ctx, values);
            // restore so we can again draw on the full canvas
            ctx.restore();

            this._drawImageLabel(ctx, x, y, selected, hover);

            this.updateBoundingBox(x, y);
          }

          // TODO: compare with Circle.updateBoundingBox(), consolidate? More stuff is happening here
          /**
           *
           * @param {number} x width
           * @param {number} y height
           */

        }, {
          key: 'updateBoundingBox',
          value: function updateBoundingBox(x, y) {
            this.boundingBox.top = y - this.options.size;
            this.boundingBox.left = x - this.options.size;
            this.boundingBox.right = x + this.options.size;
            this.boundingBox.bottom = y + this.options.size;

            // TODO: compare with Image.updateBoundingBox(), consolidate?
            this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
            this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
            this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle - Unused
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            // eslint-disable-line no-unused-vars
            this.resize(ctx);
            return this.width * 0.5;
          }
        }]);
        return CircularImage;
      }(_CircleImageBase3['default']);

      exports['default'] = CircularImage;

      /***/
    },
    /* 202 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _NodeBase2 = __webpack_require__(23);

      var _NodeBase3 = _interopRequireDefault(_NodeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Database Node/Cluster shape.
       *
       * @extends NodeBase
       */
      var Database = function (_NodeBase) {
        (0, _inherits3['default'])(Database, _NodeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function Database(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, Database);

          var _this = (0, _possibleConstructorReturn3['default'])(this, (Database.__proto__ || (0, _getPrototypeOf2['default'])(Database)).call(this, options, body, labelModule));

          _this._setMargins(labelModule);
          return _this;
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {boolean} selected
         * @param {boolean} hover
         */

        (0, _createClass3['default'])(Database, [{
          key: 'resize',
          value: function resize(ctx, selected, hover) {
            if (this.needsRefresh(selected, hover)) {
              var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
              var size = dimensions.width + this.margin.right + this.margin.left;

              this.width = size;
              this.height = size;
              this.radius = this.width / 2;
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x width
           * @param {number} y height
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this.resize(ctx, selected, hover);
            this.left = x - this.width / 2;
            this.top = y - this.height / 2;

            this.initContextForDraw(ctx, values);
            ctx.database(x - this.width / 2, y - this.height / 2, this.width, this.height);
            this.performFill(ctx, values);

            this.updateBoundingBox(x, y, ctx, selected, hover);
            this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
          }
          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            return this._distanceToBorder(ctx, angle);
          }
        }]);
        return Database;
      }(_NodeBase3['default']);

      exports['default'] = Database;

      /***/
    },
    /* 203 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _ShapeBase2 = __webpack_require__(24);

      var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Diamond Node/Cluster shape.
       *
       * @extends ShapeBase
       */
      var Diamond = function (_ShapeBase) {
        (0, _inherits3['default'])(Diamond, _ShapeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function Diamond(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, Diamond);
          return (0, _possibleConstructorReturn3['default'])(this, (Diamond.__proto__ || (0, _getPrototypeOf2['default'])(Diamond)).call(this, options, body, labelModule));
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {number} x width
         * @param {number} y height
         * @param {boolean} selected
         * @param {boolean} hover
         * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
         */

        (0, _createClass3['default'])(Diamond, [{
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this._drawShape(ctx, 'diamond', 4, x, y, selected, hover, values);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            return this._distanceToBorder(ctx, angle);
          }
        }]);
        return Diamond;
      }(_ShapeBase3['default']);

      exports['default'] = Diamond;

      /***/
    },
    /* 204 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _ShapeBase2 = __webpack_require__(24);

      var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Dot Node/Cluster shape.
       *
       * @extends ShapeBase
       */
      var Dot = function (_ShapeBase) {
        (0, _inherits3['default'])(Dot, _ShapeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function Dot(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, Dot);
          return (0, _possibleConstructorReturn3['default'])(this, (Dot.__proto__ || (0, _getPrototypeOf2['default'])(Dot)).call(this, options, body, labelModule));
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {number} x width
         * @param {number} y height
         * @param {boolean} selected
         * @param {boolean} hover
         * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
         */

        (0, _createClass3['default'])(Dot, [{
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this._drawShape(ctx, 'circle', 2, x, y, selected, hover, values);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            // eslint-disable-line no-unused-vars
            this.resize(ctx);
            return this.options.size;
          }
        }]);
        return Dot;
      }(_ShapeBase3['default']);

      exports['default'] = Dot;

      /***/
    },
    /* 205 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _NodeBase2 = __webpack_require__(23);

      var _NodeBase3 = _interopRequireDefault(_NodeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * Am Ellipse Node/Cluster shape.
       *
       * @extends NodeBase
       */
      var Ellipse = function (_NodeBase) {
        (0, _inherits3['default'])(Ellipse, _NodeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function Ellipse(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, Ellipse);
          return (0, _possibleConstructorReturn3['default'])(this, (Ellipse.__proto__ || (0, _getPrototypeOf2['default'])(Ellipse)).call(this, options, body, labelModule));
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {boolean} [selected]
         * @param {boolean} [hover]
         */

        (0, _createClass3['default'])(Ellipse, [{
          key: 'resize',
          value: function resize(ctx) {
            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

            if (this.needsRefresh(selected, hover)) {
              var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);

              this.height = dimensions.height * 2;
              this.width = dimensions.width + dimensions.height;
              this.radius = 0.5 * this.width;
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x width
           * @param {number} y height
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this.resize(ctx, selected, hover);
            this.left = x - this.width * 0.5;
            this.top = y - this.height * 0.5;

            this.initContextForDraw(ctx, values);
            ctx.ellipse_vis(this.left, this.top, this.width, this.height);
            this.performFill(ctx, values);

            this.updateBoundingBox(x, y, ctx, selected, hover);
            this.labelModule.draw(ctx, x, y, selected, hover);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            this.resize(ctx);
            var a = this.width * 0.5;
            var b = this.height * 0.5;
            var w = Math.sin(angle) * a;
            var h = Math.cos(angle) * b;
            return a * b / Math.sqrt(w * w + h * h);
          }
        }]);
        return Ellipse;
      }(_NodeBase3['default']);

      exports['default'] = Ellipse;

      /***/
    },
    /* 206 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _NodeBase2 = __webpack_require__(23);

      var _NodeBase3 = _interopRequireDefault(_NodeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * An icon replacement for the default Node shape.
       *
       * @extends NodeBase
       */
      var Icon = function (_NodeBase) {
        (0, _inherits3['default'])(Icon, _NodeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function Icon(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, Icon);

          var _this = (0, _possibleConstructorReturn3['default'])(this, (Icon.__proto__ || (0, _getPrototypeOf2['default'])(Icon)).call(this, options, body, labelModule));

          _this._setMargins(labelModule);
          return _this;
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx - Unused.
         * @param {boolean} [selected]
         * @param {boolean} [hover]
         */

        (0, _createClass3['default'])(Icon, [{
          key: 'resize',
          value: function resize(ctx, selected, hover) {
            if (this.needsRefresh(selected, hover)) {
              this.iconSize = {
                width: Number(this.options.icon.size),
                height: Number(this.options.icon.size)
              };
              this.width = this.iconSize.width + this.margin.right + this.margin.left;
              this.height = this.iconSize.height + this.margin.top + this.margin.bottom;
              this.radius = 0.5 * this.width;
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x width
           * @param {number} y height
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this.resize(ctx, selected, hover);
            this.options.icon.size = this.options.icon.size || 50;

            this.left = x - this.width / 2;
            this.top = y - this.height / 2;
            this._icon(ctx, x, y, selected, hover, values);

            if (this.options.label !== undefined) {
              var iconTextSpacing = 5;
              this.labelModule.draw(ctx, this.left + this.iconSize.width / 2 + this.margin.left, y + this.height / 2 + iconTextSpacing, selected);
            }

            this.updateBoundingBox(x, y);
          }

          /**
           *
           * @param {number} x
           * @param {number} y
           */

        }, {
          key: 'updateBoundingBox',
          value: function updateBoundingBox(x, y) {
            this.boundingBox.top = y - this.options.icon.size * 0.5;
            this.boundingBox.left = x - this.options.icon.size * 0.5;
            this.boundingBox.right = x + this.options.icon.size * 0.5;
            this.boundingBox.bottom = y + this.options.icon.size * 0.5;

            if (this.options.label !== undefined && this.labelModule.size.width > 0) {
              var iconTextSpacing = 5;
              this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
              this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
              this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + iconTextSpacing);
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x width
           * @param {number} y height
           * @param {boolean} selected
           * @param {boolean} hover - Unused
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: '_icon',
          value: function _icon(ctx, x, y, selected, hover, values) {
            var iconSize = Number(this.options.icon.size);

            if (this.options.icon.code !== undefined) {
              ctx.font = (selected ? "bold " : "") + iconSize + "px " + this.options.icon.face;

              // draw icon
              ctx.fillStyle = this.options.icon.color || "black";
              ctx.textAlign = "center";
              ctx.textBaseline = "middle";

              // draw shadow if enabled
              this.enableShadow(ctx, values);
              ctx.fillText(this.options.icon.code, x, y);

              // disable shadows for other elements.
              this.disableShadow(ctx, values);
            } else {
              console.error('When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.');
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            return this._distanceToBorder(ctx, angle);
          }
        }]);
        return Icon;
      }(_NodeBase3['default']);

      exports['default'] = Icon;

      /***/
    },
    /* 207 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _CircleImageBase2 = __webpack_require__(73);

      var _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * An image-based replacement for the default Node shape.
       *
       * @extends CircleImageBase
       */
      var Image = function (_CircleImageBase) {
        (0, _inherits3['default'])(Image, _CircleImageBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         * @param {Image} imageObj
         * @param {Image} imageObjAlt
         */
        function Image(options, body, labelModule, imageObj, imageObjAlt) {
          (0, _classCallCheck3['default'])(this, Image);

          var _this = (0, _possibleConstructorReturn3['default'])(this, (Image.__proto__ || (0, _getPrototypeOf2['default'])(Image)).call(this, options, body, labelModule));

          _this.setImages(imageObj, imageObjAlt);
          return _this;
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx - Unused.
         * @param {boolean} [selected]
         * @param {boolean} [hover]
         */

        (0, _createClass3['default'])(Image, [{
          key: 'resize',
          value: function resize(ctx) {
            var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
            var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

            var imageAbsent = this.imageObj.src === undefined || this.imageObj.width === undefined || this.imageObj.height === undefined;

            if (imageAbsent) {
              var side = this.options.size * 2;
              this.width = side;
              this.height = side;
              return;
            }

            if (this.needsRefresh(selected, hover)) {
              this._resizeImage();
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x width
           * @param {number} y height
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this.switchImages(selected);
            this.resize();
            this.left = x - this.width / 2;
            this.top = y - this.height / 2;

            if (this.options.shapeProperties.useBorderWithImage === true) {
              var neutralborderWidth = this.options.borderWidth;
              var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;
              var borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;
              ctx.lineWidth = Math.min(this.width, borderWidth);

              ctx.beginPath();

              // setup the line properties.
              ctx.strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;

              // set a fillstyle
              ctx.fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;

              // draw a rectangle to form the border around. This rectangle is filled so the opacity of a picture (in future vis releases?) can be used to tint the image
              ctx.rect(this.left - 0.5 * ctx.lineWidth, this.top - 0.5 * ctx.lineWidth, this.width + ctx.lineWidth, this.height + ctx.lineWidth);
              ctx.fill();

              this.performStroke(ctx, values);

              ctx.closePath();
            }

            this._drawImageAtPosition(ctx, values);

            this._drawImageLabel(ctx, x, y, selected, hover);

            this.updateBoundingBox(x, y);
          }

          /**
           *
           * @param {number} x
           * @param {number} y
           */

        }, {
          key: 'updateBoundingBox',
          value: function updateBoundingBox(x, y) {
            this.resize();
            this._updateBoundingBox(x, y);

            if (this.options.label !== undefined && this.labelModule.size.width > 0) {
              this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
              this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
              this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            return this._distanceToBorder(ctx, angle);
          }
        }]);
        return Image;
      }(_CircleImageBase3['default']);

      exports['default'] = Image;

      /***/
    },
    /* 208 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _ShapeBase2 = __webpack_require__(24);

      var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Square Node/Cluster shape.
       *
       * @extends ShapeBase
       */
      var Square = function (_ShapeBase) {
        (0, _inherits3['default'])(Square, _ShapeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function Square(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, Square);
          return (0, _possibleConstructorReturn3['default'])(this, (Square.__proto__ || (0, _getPrototypeOf2['default'])(Square)).call(this, options, body, labelModule));
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {number} x width
         * @param {number} y height
         * @param {boolean} selected
         * @param {boolean} hover
         * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
         */

        (0, _createClass3['default'])(Square, [{
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this._drawShape(ctx, 'square', 2, x, y, selected, hover, values);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            return this._distanceToBorder(ctx, angle);
          }
        }]);
        return Square;
      }(_ShapeBase3['default']);

      exports['default'] = Square;

      /***/
    },
    /* 209 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _ShapeBase2 = __webpack_require__(24);

      var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Hexagon Node/Cluster shape.
       *
       * @extends ShapeBase
       */
      var Hexagon = function (_ShapeBase) {
        (0, _inherits3['default'])(Hexagon, _ShapeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function Hexagon(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, Hexagon);
          return (0, _possibleConstructorReturn3['default'])(this, (Hexagon.__proto__ || (0, _getPrototypeOf2['default'])(Hexagon)).call(this, options, body, labelModule));
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {number} x width
         * @param {number} y height
         * @param {boolean} selected
         * @param {boolean} hover
         * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
         */

        (0, _createClass3['default'])(Hexagon, [{
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this._drawShape(ctx, 'hexagon', 4, x, y, selected, hover, values);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            return this._distanceToBorder(ctx, angle);
          }
        }]);
        return Hexagon;
      }(_ShapeBase3['default']);

      exports['default'] = Hexagon;

      /***/
    },
    /* 210 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _ShapeBase2 = __webpack_require__(24);

      var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Star Node/Cluster shape.
       *
       * @extends ShapeBase
       */
      var Star = function (_ShapeBase) {
        (0, _inherits3['default'])(Star, _ShapeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function Star(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, Star);
          return (0, _possibleConstructorReturn3['default'])(this, (Star.__proto__ || (0, _getPrototypeOf2['default'])(Star)).call(this, options, body, labelModule));
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {number} x width
         * @param {number} y height
         * @param {boolean} selected
         * @param {boolean} hover
         * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
         */

        (0, _createClass3['default'])(Star, [{
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this._drawShape(ctx, 'star', 4, x, y, selected, hover, values);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            return this._distanceToBorder(ctx, angle);
          }
        }]);
        return Star;
      }(_ShapeBase3['default']);

      exports['default'] = Star;

      /***/
    },
    /* 211 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _NodeBase2 = __webpack_require__(23);

      var _NodeBase3 = _interopRequireDefault(_NodeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A text-based replacement for the default Node shape.
       *
       * @extends NodeBase
       */
      var Text = function (_NodeBase) {
        (0, _inherits3['default'])(Text, _NodeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function Text(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, Text);

          var _this = (0, _possibleConstructorReturn3['default'])(this, (Text.__proto__ || (0, _getPrototypeOf2['default'])(Text)).call(this, options, body, labelModule));

          _this._setMargins(labelModule);
          return _this;
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {boolean} selected
         * @param {boolean} hover
         */

        (0, _createClass3['default'])(Text, [{
          key: 'resize',
          value: function resize(ctx, selected, hover) {
            if (this.needsRefresh(selected, hover)) {
              this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
              this.width = this.textSize.width + this.margin.right + this.margin.left;
              this.height = this.textSize.height + this.margin.top + this.margin.bottom;
              this.radius = 0.5 * this.width;
            }
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} x width
           * @param {number} y height
           * @param {boolean} selected
           * @param {boolean} hover
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           */

        }, {
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this.resize(ctx, selected, hover);
            this.left = x - this.width / 2;
            this.top = y - this.height / 2;

            // draw shadow if enabled
            this.enableShadow(ctx, values);
            this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);

            // disable shadows for other elements.
            this.disableShadow(ctx, values);

            this.updateBoundingBox(x, y, ctx, selected, hover);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            return this._distanceToBorder(ctx, angle);
          }
        }]);
        return Text;
      }(_NodeBase3['default']);

      exports['default'] = Text;

      /***/
    },
    /* 212 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _ShapeBase2 = __webpack_require__(24);

      var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Triangle Node/Cluster shape.
       *
       * @extends ShapeBase
       */
      var Triangle = function (_ShapeBase) {
        (0, _inherits3['default'])(Triangle, _ShapeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function Triangle(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, Triangle);
          return (0, _possibleConstructorReturn3['default'])(this, (Triangle.__proto__ || (0, _getPrototypeOf2['default'])(Triangle)).call(this, options, body, labelModule));
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {number} x
         * @param {number} y
         * @param {boolean} selected
         * @param {boolean} hover
         * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
         */

        (0, _createClass3['default'])(Triangle, [{
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this._drawShape(ctx, 'triangle', 3, x, y, selected, hover, values);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            return this._distanceToBorder(ctx, angle);
          }
        }]);
        return Triangle;
      }(_ShapeBase3['default']);

      exports['default'] = Triangle;

      /***/
    },
    /* 213 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _ShapeBase2 = __webpack_require__(24);

      var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A downward facing Triangle Node/Cluster shape.
       *
       * @extends ShapeBase
       */
      var TriangleDown = function (_ShapeBase) {
        (0, _inherits3['default'])(TriangleDown, _ShapeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function TriangleDown(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, TriangleDown);
          return (0, _possibleConstructorReturn3['default'])(this, (TriangleDown.__proto__ || (0, _getPrototypeOf2['default'])(TriangleDown)).call(this, options, body, labelModule));
        }

        /**
         *
         * @param {CanvasRenderingContext2D} ctx
         * @param {number} x
         * @param {number} y
         * @param {boolean} selected
         * @param {boolean} hover
         * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
         */

        (0, _createClass3['default'])(TriangleDown, [{
          key: 'draw',
          value: function draw(ctx, x, y, selected, hover, values) {
            this._drawShape(ctx, 'triangleDown', 3, x, y, selected, hover, values);
          }

          /**
           *
           * @param {CanvasRenderingContext2D} ctx
           * @param {number} angle
           * @returns {number}
           */

        }, {
          key: 'distanceToBorder',
          value: function distanceToBorder(ctx, angle) {
            return this._distanceToBorder(ctx, angle);
          }
        }]);
        return TriangleDown;
      }(_ShapeBase3['default']);

      exports['default'] = TriangleDown;

      /***/
    },
    /* 214 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var DataSet = __webpack_require__(11);
      var DataView = __webpack_require__(12);
      var Edge = __webpack_require__(74)['default'];

      /**
       * Handler for Edges
       */

      var EdgesHandler = function () {
        /**
         * @param {Object} body
         * @param {Array.<Image>} images
         * @param {Array.<Group>} groups
         */
        function EdgesHandler(body, images, groups) {
          var _this = this;

          (0, _classCallCheck3['default'])(this, EdgesHandler);

          this.body = body;
          this.images = images;
          this.groups = groups;

          // create the edge API in the body container
          this.body.functions.createEdge = this.create.bind(this);

          this.edgesListeners = {
            add: function add(event, params) {
              _this.add(params.items);
            },
            update: function update(event, params) {
              _this.update(params.items);
            },
            remove: function remove(event, params) {
              _this.remove(params.items);
            }
          };

          this.options = {};
          this.defaultOptions = {
            arrows: {
              to: { enabled: false, scaleFactor: 1, type: 'arrow' }, // boolean / {arrowScaleFactor:1} / {enabled: false, arrowScaleFactor:1}
              middle: { enabled: false, scaleFactor: 1, type: 'arrow' },
              from: { enabled: false, scaleFactor: 1, type: 'arrow' }
            },
            arrowStrikethrough: true,
            color: {
              color: '#848484',
              highlight: '#848484',
              hover: '#848484',
              inherit: 'from',
              opacity: 1.0
            },
            dashes: false,
            font: {
              color: '#343434',
              size: 14, // px
              face: 'arial',
              background: 'none',
              strokeWidth: 2, // px
              strokeColor: '#ffffff',
              align: 'horizontal',
              multi: false,
              vadjust: 0,
              bold: {
                mod: 'bold'
              },
              boldital: {
                mod: 'bold italic'
              },
              ital: {
                mod: 'italic'
              },
              mono: {
                mod: '',
                size: 15, // px
                face: 'courier new',
                vadjust: 2
              }
            },
            hidden: false,
            hoverWidth: 1.5,
            label: undefined,
            labelHighlightBold: true,
            length: undefined,
            physics: true,
            scaling: {
              min: 1,
              max: 15,
              label: {
                enabled: true,
                min: 14,
                max: 30,
                maxVisible: 30,
                drawThreshold: 5
              },
              customScalingFunction: function customScalingFunction(min, max, total, value) {
                if (max === min) {
                  return 0.5;
                } else {
                  var scale = 1 / (max - min);
                  return Math.max(0, (value - min) * scale);
                }
              }
            },
            selectionWidth: 1.5,
            selfReferenceSize: 20,
            shadow: {
              enabled: false,
              color: 'rgba(0,0,0,0.5)',
              size: 10,
              x: 5,
              y: 5
            },
            smooth: {
              enabled: true,
              type: "dynamic",
              forceDirection: 'none',
              roundness: 0.5
            },
            title: undefined,
            width: 1,
            value: undefined
          };

          util.deepExtend(this.options, this.defaultOptions);

          this.bindEventListeners();
        }

        /**
         * Binds event listeners
         */

        (0, _createClass3['default'])(EdgesHandler, [{
          key: 'bindEventListeners',
          value: function bindEventListeners() {
            var _this2 = this;

            // this allows external modules to force all dynamic curves to turn static.
            this.body.emitter.on("_forceDisableDynamicCurves", function (type) {
              var emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

              if (type === 'dynamic') {
                type = 'continuous';
              }
              var dataChanged = false;
              for (var edgeId in _this2.body.edges) {
                if (_this2.body.edges.hasOwnProperty(edgeId)) {
                  var edge = _this2.body.edges[edgeId];
                  var edgeData = _this2.body.data.edges._data[edgeId];

                  // only forcibly remove the smooth curve if the data has been set of the edge has the smooth curves defined.
                  // this is because a change in the global would not affect these curves.
                  if (edgeData !== undefined) {
                    var smoothOptions = edgeData.smooth;
                    if (smoothOptions !== undefined) {
                      if (smoothOptions.enabled === true && smoothOptions.type === 'dynamic') {
                        if (type === undefined) {
                          edge.setOptions({ smooth: false });
                        } else {
                          edge.setOptions({ smooth: { type: type } });
                        }
                        dataChanged = true;
                      }
                    }
                  }
                }
              }
              if (emit === true && dataChanged === true) {
                _this2.body.emitter.emit("_dataChanged");
              }
            });

            // this is called when options of EXISTING nodes or edges have changed.
            //
            // NOTE: Not true, called when options have NOT changed, for both existing as well as new nodes.
            //       See update() for logic.
            // TODO: Verify and examine the consequences of this. It might still trigger when
            //       non-option fields have changed, but then reconnecting edges is still useless.
            //       Alternatively, it might also be called when edges are removed.
            //
            this.body.emitter.on("_dataUpdated", function () {
              _this2.reconnectEdges();
            });

            // refresh the edges. Used when reverting from hierarchical layout
            this.body.emitter.on("refreshEdges", this.refresh.bind(this));
            this.body.emitter.on("refresh", this.refresh.bind(this));
            this.body.emitter.on("destroy", function () {
              util.forEach(_this2.edgesListeners, function (callback, event) {
                if (_this2.body.data.edges) _this2.body.data.edges.off(event, callback);
              });
              delete _this2.body.functions.createEdge;
              delete _this2.edgesListeners.add;
              delete _this2.edgesListeners.update;
              delete _this2.edgesListeners.remove;
              delete _this2.edgesListeners;
            });
          }

          /**
           *
           * @param {Object} options
           */

        }, {
          key: 'setOptions',
          value: function setOptions(options) {
            if (options !== undefined) {
              // use the parser from the Edge class to fill in all shorthand notations
              Edge.parseOptions(this.options, options, true, this.defaultOptions, true);

              // update smooth settings in all edges
              var dataChanged = false;
              if (options.smooth !== undefined) {
                for (var edgeId in this.body.edges) {
                  if (this.body.edges.hasOwnProperty(edgeId)) {
                    dataChanged = this.body.edges[edgeId].updateEdgeType() || dataChanged;
                  }
                }
              }

              // update fonts in all edges
              if (options.font !== undefined) {
                for (var _edgeId in this.body.edges) {
                  if (this.body.edges.hasOwnProperty(_edgeId)) {
                    this.body.edges[_edgeId].updateLabelModule();
                  }
                }
              }

              // update the state of the variables if needed
              if (options.hidden !== undefined || options.physics !== undefined || dataChanged === true) {
                this.body.emitter.emit('_dataChanged');
              }
            }
          }

          /**
           * Load edges by reading the data table
           * @param {Array | DataSet | DataView} edges    The data containing the edges.
           * @param {boolean} [doNotEmit=false]
           * @private
           */

        }, {
          key: 'setData',
          value: function setData(edges) {
            var _this3 = this;

            var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var oldEdgesData = this.body.data.edges;

            if (edges instanceof DataSet || edges instanceof DataView) {
              this.body.data.edges = edges;
            } else if (Array.isArray(edges)) {
              this.body.data.edges = new DataSet();
              this.body.data.edges.add(edges);
            } else if (!edges) {
              this.body.data.edges = new DataSet();
            } else {
              throw new TypeError('Array or DataSet expected');
            }

            // TODO: is this null or undefined or false?
            if (oldEdgesData) {
              // unsubscribe from old dataset
              util.forEach(this.edgesListeners, function (callback, event) {
                oldEdgesData.off(event, callback);
              });
            }

            // remove drawn edges
            this.body.edges = {};

            // TODO: is this null or undefined or false?
            if (this.body.data.edges) {
              // subscribe to new dataset
              util.forEach(this.edgesListeners, function (callback, event) {
                _this3.body.data.edges.on(event, callback);
              });

              // draw all new nodes
              var ids = this.body.data.edges.getIds();
              this.add(ids, true);
            }

            this.body.emitter.emit('_adjustEdgesForHierarchicalLayout');
            if (doNotEmit === false) {
              this.body.emitter.emit("_dataChanged");
            }
          }

          /**
           * Add edges
           * @param {number[] | string[]} ids
           * @param {boolean} [doNotEmit=false]
           * @private
           */

        }, {
          key: 'add',
          value: function add(ids) {
            var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var edges = this.body.edges;
            var edgesData = this.body.data.edges;

            for (var i = 0; i < ids.length; i++) {
              var id = ids[i];

              var oldEdge = edges[id];
              if (oldEdge) {
                oldEdge.disconnect();
              }

              var data = edgesData.get(id, { "showInternalIds": true });
              edges[id] = this.create(data);
            }

            this.body.emitter.emit('_adjustEdgesForHierarchicalLayout');

            if (doNotEmit === false) {
              this.body.emitter.emit("_dataChanged");
            }
          }

          /**
           * Update existing edges, or create them when not yet existing
           * @param {number[] | string[]} ids
           * @private
           */

        }, {
          key: 'update',
          value: function update(ids) {
            var edges = this.body.edges;
            var edgesData = this.body.data.edges;
            var dataChanged = false;
            for (var i = 0; i < ids.length; i++) {
              var id = ids[i];
              var data = edgesData.get(id);
              var edge = edges[id];
              if (edge !== undefined) {
                // update edge
                edge.disconnect();
                dataChanged = edge.setOptions(data) || dataChanged; // if a support node is added, data can be changed.
                edge.connect();
              } else {
                // create edge
                this.body.edges[id] = this.create(data);
                dataChanged = true;
              }
            }

            if (dataChanged === true) {
              this.body.emitter.emit('_adjustEdgesForHierarchicalLayout');
              this.body.emitter.emit("_dataChanged");
            } else {
              this.body.emitter.emit("_dataUpdated");
            }
          }

          /**
           * Remove existing edges. Non existing ids will be ignored
           * @param {number[] | string[]} ids
           * @param {boolean} [emit=true]
           * @private
           */

        }, {
          key: 'remove',
          value: function remove(ids) {
            var emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (ids.length === 0) return; // early out

            var edges = this.body.edges;
            util.forEach(ids, function (id) {
              var edge = edges[id];
              if (edge !== undefined) {
                edge.remove();
              }
            });

            if (emit) {
              this.body.emitter.emit("_dataChanged");
            }
          }

          /**
           * Refreshes Edge Handler
           */

        }, {
          key: 'refresh',
          value: function refresh() {
            var _this4 = this;

            util.forEach(this.body.edges, function (edge, edgeId) {
              var data = _this4.body.data.edges._data[edgeId];
              if (data !== undefined) {
                edge.setOptions(data);
              }
            });
          }

          /**
           *
           * @param {Object} properties
           * @returns {Edge}
           */

        }, {
          key: 'create',
          value: function create(properties) {
            return new Edge(properties, this.body, this.options, this.defaultOptions);
          }

          /**
           * Reconnect all edges
           * @private
           */

        }, {
          key: 'reconnectEdges',
          value: function reconnectEdges() {
            var id;
            var nodes = this.body.nodes;
            var edges = this.body.edges;

            for (id in nodes) {
              if (nodes.hasOwnProperty(id)) {
                nodes[id].edges = [];
              }
            }

            for (id in edges) {
              if (edges.hasOwnProperty(id)) {
                var edge = edges[id];
                edge.from = null;
                edge.to = null;
                edge.connect();
              }
            }
          }

          /**
           *
           * @param {Edge.id} edgeId
           * @returns {Array}
           */

        }, {
          key: 'getConnectedNodes',
          value: function getConnectedNodes(edgeId) {
            var nodeList = [];
            if (this.body.edges[edgeId] !== undefined) {
              var edge = this.body.edges[edgeId];
              if (edge.fromId !== undefined) {
                nodeList.push(edge.fromId);
              }
              if (edge.toId !== undefined) {
                nodeList.push(edge.toId);
              }
            }
            return nodeList;
          }

          /**
           * There is no direct relation between the nodes and the edges DataSet,
           * so the right place to do call this is in the handler for event `_dataUpdated`.
           */

        }, {
          key: '_updateState',
          value: function _updateState() {
            this._addMissingEdges();
            this._removeInvalidEdges();
          }

          /**
           * Scan for missing nodes and remove corresponding edges, if any.
           * @private
           */

        }, {
          key: '_removeInvalidEdges',
          value: function _removeInvalidEdges() {
            var _this5 = this;

            var edgesToDelete = [];

            util.forEach(this.body.edges, function (edge, id) {
              var toNode = _this5.body.nodes[edge.toId];
              var fromNode = _this5.body.nodes[edge.fromId];

              // Skip clustering edges here, let the Clustering module handle those
              if (toNode !== undefined && toNode.isCluster === true || fromNode !== undefined && fromNode.isCluster === true) {
                return;
              }

              if (toNode === undefined || fromNode === undefined) {
                edgesToDelete.push(id);
              }
            });

            this.remove(edgesToDelete, false);
          }

          /**
           * add all edges from dataset that are not in the cached state
           * @private
           */

        }, {
          key: '_addMissingEdges',
          value: function _addMissingEdges() {
            var edges = this.body.edges;
            var edgesData = this.body.data.edges;
            var addIds = [];

            edgesData.forEach(function (edgeData, edgeId) {
              var edge = edges[edgeId];
              if (edge === undefined) {
                addIds.push(edgeId);
              }
            });

            this.add(addIds, true);
          }
        }]);
        return EdgesHandler;
      }();

      exports['default'] = EdgesHandler;

      /***/
    },
    /* 215 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _slicedToArray2 = __webpack_require__(30);

      var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _CubicBezierEdgeBase2 = __webpack_require__(216);

      var _CubicBezierEdgeBase3 = _interopRequireDefault(_CubicBezierEdgeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Cubic Bezier Edge. Bezier curves are used to model smooth gradual
       * curves in paths between nodes.
       *
       * @extends CubicBezierEdgeBase
       */
      var CubicBezierEdge = function (_CubicBezierEdgeBase) {
        (0, _inherits3['default'])(CubicBezierEdge, _CubicBezierEdgeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function CubicBezierEdge(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, CubicBezierEdge);
          return (0, _possibleConstructorReturn3['default'])(this, (CubicBezierEdge.__proto__ || (0, _getPrototypeOf2['default'])(CubicBezierEdge)).call(this, options, body, labelModule));
        }

        /**
         * Draw a line between two nodes
         * @param {CanvasRenderingContext2D} ctx
         * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
         * @param {Array.<Node>} viaNodes
         * @private
         */

        (0, _createClass3['default'])(CubicBezierEdge, [{
          key: '_line',
          value: function _line(ctx, values, viaNodes) {
            // get the coordinates of the support points.
            var via1 = viaNodes[0];
            var via2 = viaNodes[1];
            this._bezierCurve(ctx, values, via1, via2);
          }

          /**
           *
           * @returns {Array.<{x: number, y: number}>}
           * @private
           */

        }, {
          key: '_getViaCoordinates',
          value: function _getViaCoordinates() {
            var dx = this.from.x - this.to.x;
            var dy = this.from.y - this.to.y;

            var x1 = void 0,
                y1 = void 0,
                x2 = void 0,
                y2 = void 0;
            var roundness = this.options.smooth.roundness;

            // horizontal if x > y or if direction is forced or if direction is horizontal
            if ((Math.abs(dx) > Math.abs(dy) || this.options.smooth.forceDirection === true || this.options.smooth.forceDirection === 'horizontal') && this.options.smooth.forceDirection !== 'vertical') {
              y1 = this.from.y;
              y2 = this.to.y;
              x1 = this.from.x - roundness * dx;
              x2 = this.to.x + roundness * dx;
            } else {
              y1 = this.from.y - roundness * dy;
              y2 = this.to.y + roundness * dy;
              x1 = this.from.x;
              x2 = this.to.x;
            }

            return [{ x: x1, y: y1 }, { x: x2, y: y2 }];
          }

          /**
           *
           * @returns {Array.<{x: number, y: number}>}
           */

        }, {
          key: 'getViaNode',
          value: function getViaNode() {
            return this._getViaCoordinates();
          }

          /**
           *
           * @param {Node} nearNode
           * @param {CanvasRenderingContext2D} ctx
           * @returns {{x: number, y: number, t: number}}
           * @private
           */

        }, {
          key: '_findBorderPosition',
          value: function _findBorderPosition(nearNode, ctx) {
            return this._findBorderPositionBezier(nearNode, ctx);
          }

          /**
           *
           * @param {number} x1
           * @param {number} y1
           * @param {number} x2
           * @param {number} y2
           * @param {number} x3
           * @param {number} y3
           * @param {Node} via1
           * @param {Node} via2
           * @returns {number}
           * @private
           */

        }, {
          key: '_getDistanceToEdge',
          value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
            var _ref = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._getViaCoordinates(),
                _ref2 = (0, _slicedToArray3['default'])(_ref, 2),
                via1 = _ref2[0],
                via2 = _ref2[1];

            // x3,y3 is the point
            return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via1, via2);
          }

          /**
           * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
           * @param {number} percentage
           * @param {{x: number, y: number}} [via1=this._getViaCoordinates()[0]]
           * @param {{x: number, y: number}} [via2=this._getViaCoordinates()[1]]
           * @returns {{x: number, y: number}}
           * @private
           */

        }, {
          key: 'getPoint',
          value: function getPoint(percentage) {
            var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getViaCoordinates(),
                _ref4 = (0, _slicedToArray3['default'])(_ref3, 2),
                via1 = _ref4[0],
                via2 = _ref4[1];

            var t = percentage;
            var vec = [];
            vec[0] = Math.pow(1 - t, 3);
            vec[1] = 3 * t * Math.pow(1 - t, 2);
            vec[2] = 3 * Math.pow(t, 2) * (1 - t);
            vec[3] = Math.pow(t, 3);
            var x = vec[0] * this.fromPoint.x + vec[1] * via1.x + vec[2] * via2.x + vec[3] * this.toPoint.x;
            var y = vec[0] * this.fromPoint.y + vec[1] * via1.y + vec[2] * via2.y + vec[3] * this.toPoint.y;

            return { x: x, y: y };
          }
        }]);
        return CubicBezierEdge;
      }(_CubicBezierEdgeBase3['default']);

      exports['default'] = CubicBezierEdge;

      /***/
    },
    /* 216 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _BezierEdgeBase2 = __webpack_require__(75);

      var _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Base Class for all Cubic Bezier Edges. Bezier curves are used to model
       * smooth gradual curves in paths between nodes.
       *
       * @extends BezierEdgeBase
       */
      var CubicBezierEdgeBase = function (_BezierEdgeBase) {
        (0, _inherits3['default'])(CubicBezierEdgeBase, _BezierEdgeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function CubicBezierEdgeBase(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, CubicBezierEdgeBase);
          return (0, _possibleConstructorReturn3['default'])(this, (CubicBezierEdgeBase.__proto__ || (0, _getPrototypeOf2['default'])(CubicBezierEdgeBase)).call(this, options, body, labelModule));
        }

        /**
         * Calculate the distance between a point (x3,y3) and a line segment from
         * (x1,y1) to (x2,y2).
         * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
         * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
         * @param {number} x1 from x
         * @param {number} y1 from y
         * @param {number} x2 to x
         * @param {number} y2 to y
         * @param {number} x3 point to check x
         * @param {number} y3 point to check y
         * @param {Node} via1
         * @param {Node} via2
         * @returns {number}
         * @private
         */

        (0, _createClass3['default'])(CubicBezierEdgeBase, [{
          key: '_getDistanceToBezierEdge',
          value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via1, via2) {
            // x3,y3 is the point
            var minDistance = 1e9;
            var distance = void 0;
            var i = void 0,
                t = void 0,
                x = void 0,
                y = void 0;
            var lastX = x1;
            var lastY = y1;
            var vec = [0, 0, 0, 0];
            for (i = 1; i < 10; i++) {
              t = 0.1 * i;
              vec[0] = Math.pow(1 - t, 3);
              vec[1] = 3 * t * Math.pow(1 - t, 2);
              vec[2] = 3 * Math.pow(t, 2) * (1 - t);
              vec[3] = Math.pow(t, 3);
              x = vec[0] * x1 + vec[1] * via1.x + vec[2] * via2.x + vec[3] * x2;
              y = vec[0] * y1 + vec[1] * via1.y + vec[2] * via2.y + vec[3] * y2;
              if (i > 0) {
                distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);
                minDistance = distance < minDistance ? distance : minDistance;
              }
              lastX = x;
              lastY = y;
            }

            return minDistance;
          }
        }]);
        return CubicBezierEdgeBase;
      }(_BezierEdgeBase3['default']);

      exports['default'] = CubicBezierEdgeBase;

      /***/
    },
    /* 217 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _slicedToArray2 = __webpack_require__(30);

      var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _BezierEdgeBase2 = __webpack_require__(75);

      var _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * A Dynamic Bezier Edge. Bezier curves are used to model smooth gradual
       * curves in paths between nodes. The Dynamic piece refers to how the curve
       * reacts to physics changes.
       *
       * @extends BezierEdgeBase
       */
      var BezierEdgeDynamic = function (_BezierEdgeBase) {
        (0, _inherits3["default"])(BezierEdgeDynamic, _BezierEdgeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function BezierEdgeDynamic(options, body, labelModule) {
          (0, _classCallCheck3["default"])(this, BezierEdgeDynamic);

          // --> this calls the setOptions below
          var _this = (0, _possibleConstructorReturn3["default"])(this, (BezierEdgeDynamic.__proto__ || (0, _getPrototypeOf2["default"])(BezierEdgeDynamic)).call(this, options, body, labelModule));
          //this.via = undefined; // Here for completeness but not allowed to defined before super() is invoked.


          _this._boundFunction = function () {
            _this.positionBezierNode();
          };
          _this.body.emitter.on("_repositionBezierNodes", _this._boundFunction);
          return _this;
        }

        /**
         *
         * @param {Object} options
         */

        (0, _createClass3["default"])(BezierEdgeDynamic, [{
          key: "setOptions",
          value: function setOptions(options) {
            // check if the physics has changed.
            var physicsChange = false;
            if (this.options.physics !== options.physics) {
              physicsChange = true;
            }

            // set the options and the to and from nodes
            this.options = options;
            this.id = this.options.id;
            this.from = this.body.nodes[this.options.from];
            this.to = this.body.nodes[this.options.to];

            // setup the support node and connect
            this.setupSupportNode();
            this.connect();

            // when we change the physics state of the edge, we reposition the support node.
            if (physicsChange === true) {
              this.via.setOptions({ physics: this.options.physics });
              this.positionBezierNode();
            }
          }

          /**
           * Connects an edge to node(s)
           */

        }, {
          key: "connect",
          value: function connect() {
            this.from = this.body.nodes[this.options.from];
            this.to = this.body.nodes[this.options.to];
            if (this.from === undefined || this.to === undefined || this.options.physics === false) {
              this.via.setOptions({ physics: false });
            } else {
              // fix weird behaviour where a self referencing node has physics enabled
              if (this.from.id === this.to.id) {
                this.via.setOptions({ physics: false });
              } else {
                this.via.setOptions({ physics: true });
              }
            }
          }

          /**
           * remove the support nodes
           * @returns {boolean}
           */

        }, {
          key: "cleanup",
          value: function cleanup() {
            this.body.emitter.off("_repositionBezierNodes", this._boundFunction);
            if (this.via !== undefined) {
              delete this.body.nodes[this.via.id];
              this.via = undefined;
              return true;
            }
            return false;
          }

          /**
           * Bezier curves require an anchor point to calculate the smooth flow. These points are nodes. These nodes are invisible but
           * are used for the force calculation.
           *
           * The changed data is not called, if needed, it is returned by the main edge constructor.
           * @private
           */

        }, {
          key: "setupSupportNode",
          value: function setupSupportNode() {
            if (this.via === undefined) {
              var nodeId = "edgeId:" + this.id;
              var node = this.body.functions.createNode({
                id: nodeId,
                shape: 'circle',
                physics: true,
                hidden: true
              });
              this.body.nodes[nodeId] = node;
              this.via = node;
              this.via.parentEdgeId = this.id;
              this.positionBezierNode();
            }
          }

          /**
           * Positions bezier node
           */

        }, {
          key: "positionBezierNode",
          value: function positionBezierNode() {
            if (this.via !== undefined && this.from !== undefined && this.to !== undefined) {
              this.via.x = 0.5 * (this.from.x + this.to.x);
              this.via.y = 0.5 * (this.from.y + this.to.y);
            } else if (this.via !== undefined) {
              this.via.x = 0;
              this.via.y = 0;
            }
          }

          /**
           * Draw a line between two nodes
           * @param {CanvasRenderingContext2D} ctx
           * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
           * @param {Node} viaNode
           * @private
           */

        }, {
          key: "_line",
          value: function _line(ctx, values, viaNode) {
            this._bezierCurve(ctx, values, viaNode);
          }

          /**
           *
           * @returns {Node|undefined|*|{index, line, column}}
           */

        }, {
          key: "getViaNode",
          value: function getViaNode() {
            return this.via;
          }

          /**
           * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
           *
           * @param {number} percentage
           * @param {Node} viaNode
           * @returns {{x: number, y: number}}
           * @private
           */

        }, {
          key: "getPoint",
          value: function getPoint(percentage) {
            var viaNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.via;

            var t = percentage;
            var x = void 0,
                y = void 0;
            if (this.from === this.to) {
              var _getCircleData = this._getCircleData(this.from),
                  _getCircleData2 = (0, _slicedToArray3["default"])(_getCircleData, 3),
                  cx = _getCircleData2[0],
                  cy = _getCircleData2[1],
                  cr = _getCircleData2[2];

              var a = 2 * Math.PI * (1 - t);
              x = cx + cr * Math.sin(a);
              y = cy + cr - cr * (1 - Math.cos(a));
            } else {
              x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;
              y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;
            }

            return { x: x, y: y };
          }

          /**
           *
           * @param {Node} nearNode
           * @param {CanvasRenderingContext2D} ctx
           * @returns {*}
           * @private
           */

        }, {
          key: "_findBorderPosition",
          value: function _findBorderPosition(nearNode, ctx) {
            return this._findBorderPositionBezier(nearNode, ctx, this.via);
          }

          /**
           *
           * @param {number} x1
           * @param {number} y1
           * @param {number} x2
           * @param {number} y2
           * @param {number} x3
           * @param {number} y3
           * @returns {number}
           * @private
           */

        }, {
          key: "_getDistanceToEdge",
          value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
            // x3,y3 is the point
            return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, this.via);
          }
        }]);
        return BezierEdgeDynamic;
      }(_BezierEdgeBase3["default"]);

      exports["default"] = BezierEdgeDynamic;

      /***/
    },
    /* 218 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _BezierEdgeBase2 = __webpack_require__(75);

      var _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Static Bezier Edge. Bezier curves are used to model smooth gradual
       * curves in paths between nodes.
       *
       * @extends BezierEdgeBase
       */
      var BezierEdgeStatic = function (_BezierEdgeBase) {
        (0, _inherits3['default'])(BezierEdgeStatic, _BezierEdgeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function BezierEdgeStatic(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, BezierEdgeStatic);
          return (0, _possibleConstructorReturn3['default'])(this, (BezierEdgeStatic.__proto__ || (0, _getPrototypeOf2['default'])(BezierEdgeStatic)).call(this, options, body, labelModule));
        }

        /**
         * Draw a line between two nodes
         * @param {CanvasRenderingContext2D} ctx
         * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
         * @param {Node} viaNode
         * @private
         */

        (0, _createClass3['default'])(BezierEdgeStatic, [{
          key: '_line',
          value: function _line(ctx, values, viaNode) {
            this._bezierCurve(ctx, values, viaNode);
          }

          /**
           *
           * @returns {Array.<{x: number, y: number}>}
           */

        }, {
          key: 'getViaNode',
          value: function getViaNode() {
            return this._getViaCoordinates();
          }

          /**
           * We do not use the to and fromPoints here to make the via nodes the same as edges without arrows.
           * @returns {{x: undefined, y: undefined}}
           * @private
           */

        }, {
          key: '_getViaCoordinates',
          value: function _getViaCoordinates() {
            // Assumption: x/y coordinates in from/to always defined
            var xVia = undefined;
            var yVia = undefined;
            var factor = this.options.smooth.roundness;
            var type = this.options.smooth.type;
            var dx = Math.abs(this.from.x - this.to.x);
            var dy = Math.abs(this.from.y - this.to.y);
            if (type === 'discrete' || type === 'diagonalCross') {
              var stepX = void 0;
              var stepY = void 0;

              if (dx <= dy) {
                stepX = stepY = factor * dy;
              } else {
                stepX = stepY = factor * dx;
              }

              if (this.from.x > this.to.x) stepX = -stepX;
              if (this.from.y >= this.to.y) stepY = -stepY;

              xVia = this.from.x + stepX;
              yVia = this.from.y + stepY;

              if (type === "discrete") {
                if (dx <= dy) {
                  xVia = dx < factor * dy ? this.from.x : xVia;
                } else {
                  yVia = dy < factor * dx ? this.from.y : yVia;
                }
              }
            } else if (type === "straightCross") {
              var _stepX = (1 - factor) * dx;
              var _stepY = (1 - factor) * dy;

              if (dx <= dy) {
                // up - down
                _stepX = 0;
                if (this.from.y < this.to.y) _stepY = -_stepY;
              } else {
                // left - right
                if (this.from.x < this.to.x) _stepX = -_stepX;
                _stepY = 0;
              }
              xVia = this.to.x + _stepX;
              yVia = this.to.y + _stepY;
            } else if (type === 'horizontal') {
              var _stepX2 = (1 - factor) * dx;
              if (this.from.x < this.to.x) _stepX2 = -_stepX2;
              xVia = this.to.x + _stepX2;
              yVia = this.from.y;
            } else if (type === 'vertical') {
              var _stepY2 = (1 - factor) * dy;
              if (this.from.y < this.to.y) _stepY2 = -_stepY2;
              xVia = this.from.x;
              yVia = this.to.y + _stepY2;
            } else if (type === 'curvedCW') {
              dx = this.to.x - this.from.x;
              dy = this.from.y - this.to.y;
              var radius = Math.sqrt(dx * dx + dy * dy);
              var pi = Math.PI;

              var originalAngle = Math.atan2(dy, dx);
              var myAngle = (originalAngle + (factor * 0.5 + 0.5) * pi) % (2 * pi);

              xVia = this.from.x + (factor * 0.5 + 0.5) * radius * Math.sin(myAngle);
              yVia = this.from.y + (factor * 0.5 + 0.5) * radius * Math.cos(myAngle);
            } else if (type === 'curvedCCW') {
              dx = this.to.x - this.from.x;
              dy = this.from.y - this.to.y;
              var _radius = Math.sqrt(dx * dx + dy * dy);
              var _pi = Math.PI;

              var _originalAngle = Math.atan2(dy, dx);
              var _myAngle = (_originalAngle + (-factor * 0.5 + 0.5) * _pi) % (2 * _pi);

              xVia = this.from.x + (factor * 0.5 + 0.5) * _radius * Math.sin(_myAngle);
              yVia = this.from.y + (factor * 0.5 + 0.5) * _radius * Math.cos(_myAngle);
            } else {
              // continuous
              var _stepX3 = void 0;
              var _stepY3 = void 0;

              if (dx <= dy) {
                _stepX3 = _stepY3 = factor * dy;
              } else {
                _stepX3 = _stepY3 = factor * dx;
              }

              if (this.from.x > this.to.x) _stepX3 = -_stepX3;
              if (this.from.y >= this.to.y) _stepY3 = -_stepY3;

              xVia = this.from.x + _stepX3;
              yVia = this.from.y + _stepY3;

              if (dx <= dy) {
                if (this.from.x <= this.to.x) {
                  xVia = this.to.x < xVia ? this.to.x : xVia;
                } else {
                  xVia = this.to.x > xVia ? this.to.x : xVia;
                }
              } else {
                if (this.from.y >= this.to.y) {
                  yVia = this.to.y > yVia ? this.to.y : yVia;
                } else {
                  yVia = this.to.y < yVia ? this.to.y : yVia;
                }
              }
            }
            return { x: xVia, y: yVia };
          }

          /**
           *
           * @param {Node} nearNode
           * @param {CanvasRenderingContext2D} ctx
           * @param {Object} options
           * @returns {*}
           * @private
           */

        }, {
          key: '_findBorderPosition',
          value: function _findBorderPosition(nearNode, ctx) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this._findBorderPositionBezier(nearNode, ctx, options.via);
          }

          /**
           *
           * @param {number} x1
           * @param {number} y1
           * @param {number} x2
           * @param {number} y2
           * @param {number} x3
           * @param {number} y3
           * @param {Node} viaNode
           * @returns {number}
           * @private
           */

        }, {
          key: '_getDistanceToEdge',
          value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
            var viaNode = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._getViaCoordinates();
            // x3,y3 is the point
            return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, viaNode);
          }

          /**
           * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
           * @param {number} percentage
           * @param {Node} viaNode
           * @returns {{x: number, y: number}}
           * @private
           */

        }, {
          key: 'getPoint',
          value: function getPoint(percentage) {
            var viaNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getViaCoordinates();

            var t = percentage;
            var x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;
            var y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;

            return { x: x, y: y };
          }
        }]);
        return BezierEdgeStatic;
      }(_BezierEdgeBase3['default']);

      exports['default'] = BezierEdgeStatic;

      /***/
    },
    /* 219 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _EdgeBase2 = __webpack_require__(118);

      var _EdgeBase3 = _interopRequireDefault(_EdgeBase2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * A Straight Edge.
       *
       * @extends EdgeBase
       */
      var StraightEdge = function (_EdgeBase) {
        (0, _inherits3['default'])(StraightEdge, _EdgeBase);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Label} labelModule
         */
        function StraightEdge(options, body, labelModule) {
          (0, _classCallCheck3['default'])(this, StraightEdge);
          return (0, _possibleConstructorReturn3['default'])(this, (StraightEdge.__proto__ || (0, _getPrototypeOf2['default'])(StraightEdge)).call(this, options, body, labelModule));
        }

        /**
         * Draw a line between two nodes
         * @param {CanvasRenderingContext2D} ctx
         * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
         * @private
         */

        (0, _createClass3['default'])(StraightEdge, [{
          key: '_line',
          value: function _line(ctx, values) {
            // draw a straight line
            ctx.beginPath();
            ctx.moveTo(this.fromPoint.x, this.fromPoint.y);
            ctx.lineTo(this.toPoint.x, this.toPoint.y);
            // draw shadow if enabled
            this.enableShadow(ctx, values);
            ctx.stroke();
            this.disableShadow(ctx, values);
          }

          /**
           *
           * @returns {undefined}
           */

        }, {
          key: 'getViaNode',
          value: function getViaNode() {
            return undefined;
          }

          /**
           * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
           *
           * @param {number} percentage
           * @returns {{x: number, y: number}}
           * @private
           */

        }, {
          key: 'getPoint',
          value: function getPoint(percentage) {
            return {
              x: (1 - percentage) * this.fromPoint.x + percentage * this.toPoint.x,
              y: (1 - percentage) * this.fromPoint.y + percentage * this.toPoint.y
            };
          }

          /**
           *
           * @param {Node} nearNode
           * @param {CanvasRenderingContext2D} ctx
           * @returns {{x: number, y: number}}
           * @private
           */

        }, {
          key: '_findBorderPosition',
          value: function _findBorderPosition(nearNode, ctx) {
            var node1 = this.to;
            var node2 = this.from;
            if (nearNode.id === this.from.id) {
              node1 = this.from;
              node2 = this.to;
            }

            var angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
            var dx = node1.x - node2.x;
            var dy = node1.y - node2.y;
            var edgeSegmentLength = Math.sqrt(dx * dx + dy * dy);
            var toBorderDist = nearNode.distanceToBorder(ctx, angle);
            var toBorderPoint = (edgeSegmentLength - toBorderDist) / edgeSegmentLength;

            var borderPos = {};
            borderPos.x = (1 - toBorderPoint) * node2.x + toBorderPoint * node1.x;
            borderPos.y = (1 - toBorderPoint) * node2.y + toBorderPoint * node1.y;

            return borderPos;
          }

          /**
           *
           * @param {number} x1
           * @param {number} y1
           * @param {number} x2
           * @param {number} y2
           * @param {number} x3
           * @param {number} y3
           * @returns {number}
           * @private
           */

        }, {
          key: '_getDistanceToEdge',
          value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
            // x3,y3 is the point
            return this._getDistanceToLine(x1, y1, x2, y2, x3, y3);
          }
        }]);
        return StraightEdge;
      }(_EdgeBase3['default']);

      exports['default'] = StraightEdge;

      /***/
    },
    /* 220 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var BarnesHutSolver = __webpack_require__(120)['default'];
      var Repulsion = __webpack_require__(221)['default'];
      var HierarchicalRepulsion = __webpack_require__(222)['default'];
      var SpringSolver = __webpack_require__(223)['default'];
      var HierarchicalSpringSolver = __webpack_require__(224)['default'];
      var CentralGravitySolver = __webpack_require__(121)['default'];
      var ForceAtlas2BasedRepulsionSolver = __webpack_require__(225)['default'];
      var ForceAtlas2BasedCentralGravitySolver = __webpack_require__(226)['default'];
      var util = __webpack_require__(2);
      var EndPoints = __webpack_require__(119)['default']; // for debugging with _drawForces()


      /**
       * The physics engine
       */

      var PhysicsEngine = function () {
        /**
         * @param {Object} body
         */
        function PhysicsEngine(body) {
          (0, _classCallCheck3['default'])(this, PhysicsEngine);

          this.body = body;
          this.physicsBody = { physicsNodeIndices: [], physicsEdgeIndices: [], forces: {}, velocities: {} };

          this.physicsEnabled = true;
          this.simulationInterval = 1000 / 60;
          this.requiresTimeout = true;
          this.previousStates = {};
          this.referenceState = {};
          this.freezeCache = {};
          this.renderTimer = undefined;

          // parameters for the adaptive timestep
          this.adaptiveTimestep = false;
          this.adaptiveTimestepEnabled = false;
          this.adaptiveCounter = 0;
          this.adaptiveInterval = 3;

          this.stabilized = false;
          this.startedStabilization = false;
          this.stabilizationIterations = 0;
          this.ready = false; // will be set to true if the stabilize

          // default options
          this.options = {};
          this.defaultOptions = {
            enabled: true,
            barnesHut: {
              theta: 0.5,
              gravitationalConstant: -2000,
              centralGravity: 0.3,
              springLength: 95,
              springConstant: 0.04,
              damping: 0.09,
              avoidOverlap: 0
            },
            forceAtlas2Based: {
              theta: 0.5,
              gravitationalConstant: -50,
              centralGravity: 0.01,
              springConstant: 0.08,
              springLength: 100,
              damping: 0.4,
              avoidOverlap: 0
            },
            repulsion: {
              centralGravity: 0.2,
              springLength: 200,
              springConstant: 0.05,
              nodeDistance: 100,
              damping: 0.09,
              avoidOverlap: 0
            },
            hierarchicalRepulsion: {
              centralGravity: 0.0,
              springLength: 100,
              springConstant: 0.01,
              nodeDistance: 120,
              damping: 0.09
            },
            maxVelocity: 50,
            minVelocity: 0.75, // px/s
            solver: 'barnesHut',
            stabilization: {
              enabled: true,
              iterations: 1000, // maximum number of iteration to stabilize
              updateInterval: 50,
              onlyDynamicEdges: false,
              fit: true
            },
            timestep: 0.5,
            adaptiveTimestep: true
          };
          util.extend(this.options, this.defaultOptions);
          this.timestep = 0.5;
          this.layoutFailed = false;

          this.bindEventListeners();
        }

        /**
         * Binds event listeners
         */

        (0, _createClass3['default'])(PhysicsEngine, [{
          key: 'bindEventListeners',
          value: function bindEventListeners() {
            var _this = this;

            this.body.emitter.on('initPhysics', function () {
              _this.initPhysics();
            });
            this.body.emitter.on('_layoutFailed', function () {
              _this.layoutFailed = true;
            });
            this.body.emitter.on('resetPhysics', function () {
              _this.stopSimulation();_this.ready = false;
            });
            this.body.emitter.on('disablePhysics', function () {
              _this.physicsEnabled = false;_this.stopSimulation();
            });
            this.body.emitter.on('restorePhysics', function () {
              _this.setOptions(_this.options);
              if (_this.ready === true) {
                _this.startSimulation();
              }
            });
            this.body.emitter.on('startSimulation', function () {
              if (_this.ready === true) {
                _this.startSimulation();
              }
            });
            this.body.emitter.on('stopSimulation', function () {
              _this.stopSimulation();
            });
            this.body.emitter.on('destroy', function () {
              _this.stopSimulation(false);
              _this.body.emitter.off();
            });
            this.body.emitter.on("_dataChanged", function () {
              // Nodes and/or edges have been added or removed, update shortcut lists.
              _this.updatePhysicsData();
            });

            // debug: show forces
            // this.body.emitter.on("afterDrawing", (ctx) => {this._drawForces(ctx);});
          }

          /**
           * set the physics options
           * @param {Object} options
           */

        }, {
          key: 'setOptions',
          value: function setOptions(options) {
            if (options !== undefined) {
              if (options === false) {
                this.options.enabled = false;
                this.physicsEnabled = false;
                this.stopSimulation();
              } else if (options === true) {
                this.options.enabled = true;
                this.physicsEnabled = true;
                this.startSimulation();
              } else {
                this.physicsEnabled = true;
                util.selectiveNotDeepExtend(['stabilization'], this.options, options);
                util.mergeOptions(this.options, options, 'stabilization');

                if (options.enabled === undefined) {
                  this.options.enabled = true;
                }

                if (this.options.enabled === false) {
                  this.physicsEnabled = false;
                  this.stopSimulation();
                }

                // set the timestep
                this.timestep = this.options.timestep;
              }
            }
            this.init();
          }

          /**
           * configure the engine.
           */

        }, {
          key: 'init',
          value: function init() {
            var options;
            if (this.options.solver === 'forceAtlas2Based') {
              options = this.options.forceAtlas2Based;
              this.nodesSolver = new ForceAtlas2BasedRepulsionSolver(this.body, this.physicsBody, options);
              this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);
              this.gravitySolver = new ForceAtlas2BasedCentralGravitySolver(this.body, this.physicsBody, options);
            } else if (this.options.solver === 'repulsion') {
              options = this.options.repulsion;
              this.nodesSolver = new Repulsion(this.body, this.physicsBody, options);
              this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);
              this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);
            } else if (this.options.solver === 'hierarchicalRepulsion') {
              options = this.options.hierarchicalRepulsion;
              this.nodesSolver = new HierarchicalRepulsion(this.body, this.physicsBody, options);
              this.edgesSolver = new HierarchicalSpringSolver(this.body, this.physicsBody, options);
              this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);
            } else {
              // barnesHut
              options = this.options.barnesHut;
              this.nodesSolver = new BarnesHutSolver(this.body, this.physicsBody, options);
              this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);
              this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);
            }

            this.modelOptions = options;
          }

          /**
           * initialize the engine
           */

        }, {
          key: 'initPhysics',
          value: function initPhysics() {
            if (this.physicsEnabled === true && this.options.enabled === true) {
              if (this.options.stabilization.enabled === true) {
                this.stabilize();
              } else {
                this.stabilized = false;
                this.ready = true;
                this.body.emitter.emit('fit', {}, this.layoutFailed); // if the layout failed, we use the approximation for the zoom
                this.startSimulation();
              }
            } else {
              this.ready = true;
              this.body.emitter.emit('fit');
            }
          }

          /**
           * Start the simulation
           */

        }, {
          key: 'startSimulation',
          value: function startSimulation() {
            if (this.physicsEnabled === true && this.options.enabled === true) {
              this.stabilized = false;

              // when visible, adaptivity is disabled.
              this.adaptiveTimestep = false;

              // this sets the width of all nodes initially which could be required for the avoidOverlap
              this.body.emitter.emit("_resizeNodes");
              if (this.viewFunction === undefined) {
                this.viewFunction = this.simulationStep.bind(this);
                this.body.emitter.on('initRedraw', this.viewFunction);
                this.body.emitter.emit('_startRendering');
              }
            } else {
              this.body.emitter.emit('_redraw');
            }
          }

          /**
           * Stop the simulation, force stabilization.
           * @param {boolean} [emit=true]
           */

        }, {
          key: 'stopSimulation',
          value: function stopSimulation() {
            var emit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            this.stabilized = true;
            if (emit === true) {
              this._emitStabilized();
            }
            if (this.viewFunction !== undefined) {
              this.body.emitter.off('initRedraw', this.viewFunction);
              this.viewFunction = undefined;
              if (emit === true) {
                this.body.emitter.emit('_stopRendering');
              }
            }
          }

          /**
           * The viewFunction inserts this step into each render loop. It calls the physics tick and handles the cleanup at stabilized.
           *
           */

        }, {
          key: 'simulationStep',
          value: function simulationStep() {
            // check if the physics have settled
            var startTime = Date.now();
            this.physicsTick();
            var physicsTime = Date.now() - startTime;

            // run double speed if it is a little graph
            if ((physicsTime < 0.4 * this.simulationInterval || this.runDoubleSpeed === true) && this.stabilized === false) {
              this.physicsTick();

              // this makes sure there is no jitter. The decision is taken once to run it at double speed.
              this.runDoubleSpeed = true;
            }

            if (this.stabilized === true) {
              this.stopSimulation();
            }
          }

          /**
           * trigger the stabilized event.
           *
           * @param {number} [amountOfIterations=this.stabilizationIterations]
           * @private
           */

        }, {
          key: '_emitStabilized',
          value: function _emitStabilized() {
            var _this2 = this;

            var amountOfIterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.stabilizationIterations;

            if (this.stabilizationIterations > 1 || this.startedStabilization === true) {
              setTimeout(function () {
                _this2.body.emitter.emit('stabilized', { iterations: amountOfIterations });
                _this2.startedStabilization = false;
                _this2.stabilizationIterations = 0;
              }, 0);
            }
          }

          /**
           * Calculate the forces for one physics iteration and move the nodes.
           * @private
           */

        }, {
          key: 'physicsStep',
          value: function physicsStep() {
            this.gravitySolver.solve();
            this.nodesSolver.solve();
            this.edgesSolver.solve();
            this.moveNodes();
          }

          /**
           * Make dynamic adjustments to the timestep, based on current state.
           *
           * Helper function for physicsTick().
           * @private
           */

        }, {
          key: 'adjustTimeStep',
          value: function adjustTimeStep() {
            var factor = 1.2; // Factor for increasing the timestep on success.

            // we compare the two steps. if it is acceptable we double the step.
            if (this._evaluateStepQuality() === true) {
              this.timestep = factor * this.timestep;
            } else {
              // if not, we decrease the step to a minimum of the options timestep.
              // if the decreased timestep is smaller than the options step, we do not reset the counter
              // we assume that the options timestep is stable enough.
              if (this.timestep / factor < this.options.timestep) {
                this.timestep = this.options.timestep;
              } else {
                // if the timestep was larger than 2 times the option one we check the adaptivity again to ensure
                // that large instabilities do not form.
                this.adaptiveCounter = -1; // check again next iteration
                this.timestep = Math.max(this.options.timestep, this.timestep / factor);
              }
            }
          }

          /**
           * A single simulation step (or 'tick') in the physics simulation
           *
           * @private
           */

        }, {
          key: 'physicsTick',
          value: function physicsTick() {
            this._startStabilizing(); // this ensures that there is no start event when the network is already stable.
            if (this.stabilized === true) return;

            // adaptivity means the timestep adapts to the situation, only applicable for stabilization
            if (this.adaptiveTimestep === true && this.adaptiveTimestepEnabled === true) {
              // timestep remains stable for "interval" iterations.
              var doAdaptive = this.adaptiveCounter % this.adaptiveInterval === 0;

              if (doAdaptive) {
                // first the big step and revert.
                this.timestep = 2 * this.timestep;
                this.physicsStep();
                this.revert(); // saves the reference state

                // now the normal step. Since this is the last step, it is the more stable one and we will take this.
                this.timestep = 0.5 * this.timestep;

                // since it's half the step, we do it twice.
                this.physicsStep();
                this.physicsStep();

                this.adjustTimeStep();
              } else {
                this.physicsStep(); // normal step, keeping timestep constant
              }

              this.adaptiveCounter += 1;
            } else {
              // case for the static timestep, we reset it to the one in options and take a normal step.
              this.timestep = this.options.timestep;
              this.physicsStep();
            }

            if (this.stabilized === true) this.revert();
            this.stabilizationIterations++;
          }

          /**
           * Nodes and edges can have the physics toggles on or off. A collection of indices is created here so we can skip the check all the time.
           *
           * @private
           */

        }, {
          key: 'updatePhysicsData',
          value: function updatePhysicsData() {
            this.physicsBody.forces = {};
            this.physicsBody.physicsNodeIndices = [];
            this.physicsBody.physicsEdgeIndices = [];
            var nodes = this.body.nodes;
            var edges = this.body.edges;

            // get node indices for physics
            for (var nodeId in nodes) {
              if (nodes.hasOwnProperty(nodeId)) {
                if (nodes[nodeId].options.physics === true) {
                  this.physicsBody.physicsNodeIndices.push(nodes[nodeId].id);
                }
              }
            }

            // get edge indices for physics
            for (var edgeId in edges) {
              if (edges.hasOwnProperty(edgeId)) {
                if (edges[edgeId].options.physics === true) {
                  this.physicsBody.physicsEdgeIndices.push(edges[edgeId].id);
                }
              }
            }

            // get the velocity and the forces vector
            for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {
              var _nodeId = this.physicsBody.physicsNodeIndices[i];
              this.physicsBody.forces[_nodeId] = { x: 0, y: 0 };

              // forces can be reset because they are recalculated. Velocities have to persist.
              if (this.physicsBody.velocities[_nodeId] === undefined) {
                this.physicsBody.velocities[_nodeId] = { x: 0, y: 0 };
              }
            }

            // clean deleted nodes from the velocity vector
            for (var _nodeId2 in this.physicsBody.velocities) {
              if (nodes[_nodeId2] === undefined) {
                delete this.physicsBody.velocities[_nodeId2];
              }
            }
          }

          /**
           * Revert the simulation one step. This is done so after stabilization, every new start of the simulation will also say stabilized.
           */

        }, {
          key: 'revert',
          value: function revert() {
            var nodeIds = (0, _keys2['default'])(this.previousStates);
            var nodes = this.body.nodes;
            var velocities = this.physicsBody.velocities;
            this.referenceState = {};

            for (var i = 0; i < nodeIds.length; i++) {
              var nodeId = nodeIds[i];
              if (nodes[nodeId] !== undefined) {
                if (nodes[nodeId].options.physics === true) {
                  this.referenceState[nodeId] = {
                    positions: { x: nodes[nodeId].x, y: nodes[nodeId].y }
                  };
                  velocities[nodeId].x = this.previousStates[nodeId].vx;
                  velocities[nodeId].y = this.previousStates[nodeId].vy;
                  nodes[nodeId].x = this.previousStates[nodeId].x;
                  nodes[nodeId].y = this.previousStates[nodeId].y;
                }
              } else {
                delete this.previousStates[nodeId];
              }
            }
          }

          /**
           * This compares the reference state to the current state
           *
           * @returns {boolean}
           * @private
           */

        }, {
          key: '_evaluateStepQuality',
          value: function _evaluateStepQuality() {
            var dx = void 0,
                dy = void 0,
                dpos = void 0;
            var nodes = this.body.nodes;
            var reference = this.referenceState;
            var posThreshold = 0.3;

            for (var nodeId in this.referenceState) {
              if (this.referenceState.hasOwnProperty(nodeId) && nodes[nodeId] !== undefined) {
                dx = nodes[nodeId].x - reference[nodeId].positions.x;
                dy = nodes[nodeId].y - reference[nodeId].positions.y;

                dpos = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));

                if (dpos > posThreshold) {
                  return false;
                }
              }
            }
            return true;
          }

          /**
           * move the nodes one timestep and check if they are stabilized
           */

        }, {
          key: 'moveNodes',
          value: function moveNodes() {
            var nodeIndices = this.physicsBody.physicsNodeIndices;
            var maxNodeVelocity = 0;
            var averageNodeVelocity = 0;

            // the velocity threshold (energy in the system) for the adaptivity toggle
            var velocityAdaptiveThreshold = 5;

            for (var i = 0; i < nodeIndices.length; i++) {
              var nodeId = nodeIndices[i];
              var nodeVelocity = this._performStep(nodeId);
              // stabilized is true if stabilized is true and velocity is smaller than vmin --> all nodes must be stabilized
              maxNodeVelocity = Math.max(maxNodeVelocity, nodeVelocity);
              averageNodeVelocity += nodeVelocity;
            }

            // evaluating the stabilized and adaptiveTimestepEnabled conditions
            this.adaptiveTimestepEnabled = averageNodeVelocity / nodeIndices.length < velocityAdaptiveThreshold;
            this.stabilized = maxNodeVelocity < this.options.minVelocity;
          }

          /**
           * Calculate new velocity for a coordinate direction
           *
           * @param {number} v  velocity for current coordinate
           * @param {number} f  regular force for current coordinate
           * @param {number} m  mass of current node
           * @returns {number} new velocity for current coordinate
           * @private
           */

        }, {
          key: 'calculateComponentVelocity',
          value: function calculateComponentVelocity(v, f, m) {
            var df = this.modelOptions.damping * v; // damping force
            var a = (f - df) / m; // acceleration

            v += a * this.timestep;

            // Put a limit on the velocities if it is really high
            var maxV = this.options.maxVelocity || 1e9;
            if (Math.abs(v) > maxV) {
              v = v > 0 ? maxV : -maxV;
            }

            return v;
          }

          /**
           * Perform the actual step
           *
           * @param {Node.id} nodeId
           * @returns {number} the new velocity of given node
           * @private
           */

        }, {
          key: '_performStep',
          value: function _performStep(nodeId) {
            var node = this.body.nodes[nodeId];
            var force = this.physicsBody.forces[nodeId];
            var velocity = this.physicsBody.velocities[nodeId];

            // store the state so we can revert
            this.previousStates[nodeId] = { x: node.x, y: node.y, vx: velocity.x, vy: velocity.y };

            if (node.options.fixed.x === false) {
              velocity.x = this.calculateComponentVelocity(velocity.x, force.x, node.options.mass);
              node.x += velocity.x * this.timestep;
            } else {
              force.x = 0;
              velocity.x = 0;
            }

            if (node.options.fixed.y === false) {
              velocity.y = this.calculateComponentVelocity(velocity.y, force.y, node.options.mass);
              node.y += velocity.y * this.timestep;
            } else {
              force.y = 0;
              velocity.y = 0;
            }

            var totalVelocity = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2));
            return totalVelocity;
          }

          /**
           * When initializing and stabilizing, we can freeze nodes with a predefined position.
           * This greatly speeds up stabilization because only the supportnodes for the smoothCurves have to settle.
           *
           * @private
           */

        }, {
          key: '_freezeNodes',
          value: function _freezeNodes() {
            var nodes = this.body.nodes;
            for (var id in nodes) {
              if (nodes.hasOwnProperty(id)) {
                if (nodes[id].x && nodes[id].y) {
                  var fixed = nodes[id].options.fixed;
                  this.freezeCache[id] = { x: fixed.x, y: fixed.y };
                  fixed.x = true;
                  fixed.y = true;
                }
              }
            }
          }

          /**
           * Unfreezes the nodes that have been frozen by _freezeDefinedNodes.
           *
           * @private
           */

        }, {
          key: '_restoreFrozenNodes',
          value: function _restoreFrozenNodes() {
            var nodes = this.body.nodes;
            for (var id in nodes) {
              if (nodes.hasOwnProperty(id)) {
                if (this.freezeCache[id] !== undefined) {
                  nodes[id].options.fixed.x = this.freezeCache[id].x;
                  nodes[id].options.fixed.y = this.freezeCache[id].y;
                }
              }
            }
            this.freezeCache = {};
          }

          /**
           * Find a stable position for all nodes
           *
           * @param {number} [iterations=this.options.stabilization.iterations]
           */

        }, {
          key: 'stabilize',
          value: function stabilize() {
            var _this3 = this;

            var iterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.stabilization.iterations;

            if (typeof iterations !== 'number') {
              iterations = this.options.stabilization.iterations;
              console.log('The stabilize method needs a numeric amount of iterations. Switching to default: ', iterations);
            }

            if (this.physicsBody.physicsNodeIndices.length === 0) {
              this.ready = true;
              return;
            }

            // enable adaptive timesteps
            this.adaptiveTimestep = true && this.options.adaptiveTimestep;

            // this sets the width of all nodes initially which could be required for the avoidOverlap
            this.body.emitter.emit("_resizeNodes");

            this.stopSimulation(); // stop the render loop
            this.stabilized = false;

            // block redraw requests
            this.body.emitter.emit('_blockRedraw');
            this.targetIterations = iterations;

            // start the stabilization
            if (this.options.stabilization.onlyDynamicEdges === true) {
              this._freezeNodes();
            }
            this.stabilizationIterations = 0;

            setTimeout(function () {
              return _this3._stabilizationBatch();
            }, 0);
          }

          /**
           * If not already stabilizing, start it and emit a start event.
           *
           * @returns {boolean} true if stabilization started with this call
           * @private
           */

        }, {
          key: '_startStabilizing',
          value: function _startStabilizing() {
            if (this.startedStabilization === true) return false;

            this.body.emitter.emit('startStabilizing');
            this.startedStabilization = true;
            return true;
          }

          /**
           * One batch of stabilization
           * @private
           */

        }, {
          key: '_stabilizationBatch',
          value: function _stabilizationBatch() {
            var _this4 = this;

            var running = function running() {
              return _this4.stabilized === false && _this4.stabilizationIterations < _this4.targetIterations;
            };

            var sendProgress = function sendProgress() {
              _this4.body.emitter.emit('stabilizationProgress', {
                iterations: _this4.stabilizationIterations,
                total: _this4.targetIterations
              });
            };

            if (this._startStabilizing()) {
              sendProgress(); // Ensure that there is at least one start event.
            }

            var count = 0;
            while (running() && count < this.options.stabilization.updateInterval) {
              this.physicsTick();
              count++;
            }

            sendProgress();

            if (running()) {
              setTimeout(this._stabilizationBatch.bind(this), 0);
            } else {
              this._finalizeStabilization();
            }
          }

          /**
           * Wrap up the stabilization, fit and emit the events.
           * @private
           */

        }, {
          key: '_finalizeStabilization',
          value: function _finalizeStabilization() {
            this.body.emitter.emit('_allowRedraw');
            if (this.options.stabilization.fit === true) {
              this.body.emitter.emit('fit');
            }

            if (this.options.stabilization.onlyDynamicEdges === true) {
              this._restoreFrozenNodes();
            }

            this.body.emitter.emit('stabilizationIterationsDone');
            this.body.emitter.emit('_requestRedraw');

            if (this.stabilized === true) {
              this._emitStabilized();
            } else {
              this.startSimulation();
            }

            this.ready = true;
          }

          //---------------------------  DEBUGGING BELOW  ---------------------------//


          /**
           * Debug function that display arrows for the forces currently active in the network.
           *
           * Use this when debugging only.
           *
           * @param {CanvasRenderingContext2D} ctx
           * @private
           */

        }, {
          key: '_drawForces',
          value: function _drawForces(ctx) {
            for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {
              var index = this.physicsBody.physicsNodeIndices[i];
              var node = this.body.nodes[index];
              var force = this.physicsBody.forces[index];
              var factor = 20;
              var colorFactor = 0.03;
              var forceSize = Math.sqrt(Math.pow(force.x, 2) + Math.pow(force.x, 2));

              var size = Math.min(Math.max(5, forceSize), 15);
              var arrowSize = 3 * size;

              var color = util.HSVToHex((180 - Math.min(1, Math.max(0, colorFactor * forceSize)) * 180) / 360, 1, 1);

              var point = {
                x: node.x + factor * force.x,
                y: node.y + factor * force.y
              };

              ctx.lineWidth = size;
              ctx.strokeStyle = color;
              ctx.beginPath();
              ctx.moveTo(node.x, node.y);
              ctx.lineTo(point.x, point.y);
              ctx.stroke();

              var angle = Math.atan2(force.y, force.x);
              ctx.fillStyle = color;
              EndPoints.draw(ctx, { type: 'arrow', point: point, angle: angle, length: arrowSize });
              ctx.fill();
            }
          }
        }]);
        return PhysicsEngine;
      }();

      exports['default'] = PhysicsEngine;

      /***/
    },
    /* 221 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * Repulsion Solver
       */
      var RepulsionSolver = function () {
        /**
         * @param {Object} body
         * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
         * @param {Object} options
         */
        function RepulsionSolver(body, physicsBody, options) {
          (0, _classCallCheck3["default"])(this, RepulsionSolver);

          this.body = body;
          this.physicsBody = physicsBody;
          this.setOptions(options);
        }

        /**
         *
         * @param {Object} options
         */

        (0, _createClass3["default"])(RepulsionSolver, [{
          key: "setOptions",
          value: function setOptions(options) {
            this.options = options;
          }

          /**
           * Calculate the forces the nodes apply on each other based on a repulsion field.
           * This field is linearly approximated.
           *
           * @private
           */

        }, {
          key: "solve",
          value: function solve() {
            var dx, dy, distance, fx, fy, repulsingForce, node1, node2;

            var nodes = this.body.nodes;
            var nodeIndices = this.physicsBody.physicsNodeIndices;
            var forces = this.physicsBody.forces;

            // repulsing forces between nodes
            var nodeDistance = this.options.nodeDistance;

            // approximation constants
            var a = -2 / 3 / nodeDistance;
            var b = 4 / 3;

            // we loop from i over all but the last entree in the array
            // j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j
            for (var i = 0; i < nodeIndices.length - 1; i++) {
              node1 = nodes[nodeIndices[i]];
              for (var j = i + 1; j < nodeIndices.length; j++) {
                node2 = nodes[nodeIndices[j]];

                dx = node2.x - node1.x;
                dy = node2.y - node1.y;
                distance = Math.sqrt(dx * dx + dy * dy);

                // same condition as BarnesHutSolver, making sure nodes are never 100% overlapping.
                if (distance === 0) {
                  distance = 0.1 * Math.random();
                  dx = distance;
                }

                if (distance < 2 * nodeDistance) {
                  if (distance < 0.5 * nodeDistance) {
                    repulsingForce = 1.0;
                  } else {
                    repulsingForce = a * distance + b; // linear approx of  1 / (1 + Math.exp((distance / nodeDistance - 1) * steepness))
                  }
                  repulsingForce = repulsingForce / distance;

                  fx = dx * repulsingForce;
                  fy = dy * repulsingForce;

                  forces[node1.id].x -= fx;
                  forces[node1.id].y -= fy;
                  forces[node2.id].x += fx;
                  forces[node2.id].y += fy;
                }
              }
            }
          }
        }]);
        return RepulsionSolver;
      }();

      exports["default"] = RepulsionSolver;

      /***/
    },
    /* 222 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * Hierarchical Repulsion Solver
       */
      var HierarchicalRepulsionSolver = function () {
        /**
         * @param {Object} body
         * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
         * @param {Object} options
         */
        function HierarchicalRepulsionSolver(body, physicsBody, options) {
          (0, _classCallCheck3["default"])(this, HierarchicalRepulsionSolver);

          this.body = body;
          this.physicsBody = physicsBody;
          this.setOptions(options);
        }

        /**
         *
         * @param {Object} options
         */

        (0, _createClass3["default"])(HierarchicalRepulsionSolver, [{
          key: "setOptions",
          value: function setOptions(options) {
            this.options = options;
          }

          /**
           * Calculate the forces the nodes apply on each other based on a repulsion field.
           * This field is linearly approximated.
           *
           * @private
           */

        }, {
          key: "solve",
          value: function solve() {
            var dx, dy, distance, fx, fy, repulsingForce, node1, node2, i, j;

            var nodes = this.body.nodes;
            var nodeIndices = this.physicsBody.physicsNodeIndices;
            var forces = this.physicsBody.forces;

            // repulsing forces between nodes
            var nodeDistance = this.options.nodeDistance;

            // we loop from i over all but the last entree in the array
            // j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j
            for (i = 0; i < nodeIndices.length - 1; i++) {
              node1 = nodes[nodeIndices[i]];
              for (j = i + 1; j < nodeIndices.length; j++) {
                node2 = nodes[nodeIndices[j]];

                // nodes only affect nodes on their level
                if (node1.level === node2.level) {
                  dx = node2.x - node1.x;
                  dy = node2.y - node1.y;
                  distance = Math.sqrt(dx * dx + dy * dy);

                  var steepness = 0.05;
                  if (distance < nodeDistance) {
                    repulsingForce = -Math.pow(steepness * distance, 2) + Math.pow(steepness * nodeDistance, 2);
                  } else {
                    repulsingForce = 0;
                  }
                  // normalize force with
                  if (distance === 0) {
                    distance = 0.01;
                  } else {
                    repulsingForce = repulsingForce / distance;
                  }
                  fx = dx * repulsingForce;
                  fy = dy * repulsingForce;

                  forces[node1.id].x -= fx;
                  forces[node1.id].y -= fy;
                  forces[node2.id].x += fx;
                  forces[node2.id].y += fy;
                }
              }
            }
          }
        }]);
        return HierarchicalRepulsionSolver;
      }();

      exports["default"] = HierarchicalRepulsionSolver;

      /***/
    },
    /* 223 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * Spring Solver
       */
      var SpringSolver = function () {
        /**
         * @param {Object} body
         * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
         * @param {Object} options
         */
        function SpringSolver(body, physicsBody, options) {
          (0, _classCallCheck3["default"])(this, SpringSolver);

          this.body = body;
          this.physicsBody = physicsBody;
          this.setOptions(options);
        }

        /**
         *
         * @param {Object} options
         */

        (0, _createClass3["default"])(SpringSolver, [{
          key: "setOptions",
          value: function setOptions(options) {
            this.options = options;
          }

          /**
           * This function calculates the springforces on the nodes, accounting for the support nodes.
           *
           * @private
           */

        }, {
          key: "solve",
          value: function solve() {
            var edgeLength = void 0,
                edge = void 0;
            var edgeIndices = this.physicsBody.physicsEdgeIndices;
            var edges = this.body.edges;
            var node1 = void 0,
                node2 = void 0,
                node3 = void 0;

            // forces caused by the edges, modelled as springs
            for (var i = 0; i < edgeIndices.length; i++) {
              edge = edges[edgeIndices[i]];
              if (edge.connected === true && edge.toId !== edge.fromId) {
                // only calculate forces if nodes are in the same sector
                if (this.body.nodes[edge.toId] !== undefined && this.body.nodes[edge.fromId] !== undefined) {
                  if (edge.edgeType.via !== undefined) {
                    edgeLength = edge.options.length === undefined ? this.options.springLength : edge.options.length;
                    node1 = edge.to;
                    node2 = edge.edgeType.via;
                    node3 = edge.from;

                    this._calculateSpringForce(node1, node2, 0.5 * edgeLength);
                    this._calculateSpringForce(node2, node3, 0.5 * edgeLength);
                  } else {
                    // the * 1.5 is here so the edge looks as large as a smooth edge. It does not initially because the smooth edges use
                    // the support nodes which exert a repulsive force on the to and from nodes, making the edge appear larger.
                    edgeLength = edge.options.length === undefined ? this.options.springLength * 1.5 : edge.options.length;
                    this._calculateSpringForce(edge.from, edge.to, edgeLength);
                  }
                }
              }
            }
          }

          /**
           * This is the code actually performing the calculation for the function above.
           *
           * @param {Node} node1
           * @param {Node} node2
           * @param {number} edgeLength
           * @private
           */

        }, {
          key: "_calculateSpringForce",
          value: function _calculateSpringForce(node1, node2, edgeLength) {
            var dx = node1.x - node2.x;
            var dy = node1.y - node2.y;
            var distance = Math.max(Math.sqrt(dx * dx + dy * dy), 0.01);

            // the 1/distance is so the fx and fy can be calculated without sine or cosine.
            var springForce = this.options.springConstant * (edgeLength - distance) / distance;

            var fx = dx * springForce;
            var fy = dy * springForce;

            // handle the case where one node is not part of the physcis
            if (this.physicsBody.forces[node1.id] !== undefined) {
              this.physicsBody.forces[node1.id].x += fx;
              this.physicsBody.forces[node1.id].y += fy;
            }

            if (this.physicsBody.forces[node2.id] !== undefined) {
              this.physicsBody.forces[node2.id].x -= fx;
              this.physicsBody.forces[node2.id].y -= fy;
            }
          }
        }]);
        return SpringSolver;
      }();

      exports["default"] = SpringSolver;

      /***/
    },
    /* 224 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * Hierarchical Spring Solver
       */
      var HierarchicalSpringSolver = function () {
        /**
         * @param {Object} body
         * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
         * @param {Object} options
         */
        function HierarchicalSpringSolver(body, physicsBody, options) {
          (0, _classCallCheck3["default"])(this, HierarchicalSpringSolver);

          this.body = body;
          this.physicsBody = physicsBody;
          this.setOptions(options);
        }

        /**
         *
         * @param {Object} options
         */

        (0, _createClass3["default"])(HierarchicalSpringSolver, [{
          key: "setOptions",
          value: function setOptions(options) {
            this.options = options;
          }

          /**
           * This function calculates the springforces on the nodes, accounting for the support nodes.
           *
           * @private
           */

        }, {
          key: "solve",
          value: function solve() {
            var edgeLength, edge;
            var dx, dy, fx, fy, springForce, distance;
            var edges = this.body.edges;
            var factor = 0.5;

            var edgeIndices = this.physicsBody.physicsEdgeIndices;
            var nodeIndices = this.physicsBody.physicsNodeIndices;
            var forces = this.physicsBody.forces;

            // initialize the spring force counters
            for (var i = 0; i < nodeIndices.length; i++) {
              var nodeId = nodeIndices[i];
              forces[nodeId].springFx = 0;
              forces[nodeId].springFy = 0;
            }

            // forces caused by the edges, modelled as springs
            for (var _i = 0; _i < edgeIndices.length; _i++) {
              edge = edges[edgeIndices[_i]];
              if (edge.connected === true) {
                edgeLength = edge.options.length === undefined ? this.options.springLength : edge.options.length;

                dx = edge.from.x - edge.to.x;
                dy = edge.from.y - edge.to.y;
                distance = Math.sqrt(dx * dx + dy * dy);
                distance = distance === 0 ? 0.01 : distance;

                // the 1/distance is so the fx and fy can be calculated without sine or cosine.
                springForce = this.options.springConstant * (edgeLength - distance) / distance;

                fx = dx * springForce;
                fy = dy * springForce;

                if (edge.to.level != edge.from.level) {
                  if (forces[edge.toId] !== undefined) {
                    forces[edge.toId].springFx -= fx;
                    forces[edge.toId].springFy -= fy;
                  }
                  if (forces[edge.fromId] !== undefined) {
                    forces[edge.fromId].springFx += fx;
                    forces[edge.fromId].springFy += fy;
                  }
                } else {
                  if (forces[edge.toId] !== undefined) {
                    forces[edge.toId].x -= factor * fx;
                    forces[edge.toId].y -= factor * fy;
                  }
                  if (forces[edge.fromId] !== undefined) {
                    forces[edge.fromId].x += factor * fx;
                    forces[edge.fromId].y += factor * fy;
                  }
                }
              }
            }

            // normalize spring forces
            springForce = 1;
            var springFx, springFy;
            for (var _i2 = 0; _i2 < nodeIndices.length; _i2++) {
              var _nodeId = nodeIndices[_i2];
              springFx = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFx));
              springFy = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFy));

              forces[_nodeId].x += springFx;
              forces[_nodeId].y += springFy;
            }

            // retain energy balance
            var totalFx = 0;
            var totalFy = 0;
            for (var _i3 = 0; _i3 < nodeIndices.length; _i3++) {
              var _nodeId2 = nodeIndices[_i3];
              totalFx += forces[_nodeId2].x;
              totalFy += forces[_nodeId2].y;
            }
            var correctionFx = totalFx / nodeIndices.length;
            var correctionFy = totalFy / nodeIndices.length;

            for (var _i4 = 0; _i4 < nodeIndices.length; _i4++) {
              var _nodeId3 = nodeIndices[_i4];
              forces[_nodeId3].x -= correctionFx;
              forces[_nodeId3].y -= correctionFy;
            }
          }
        }]);
        return HierarchicalSpringSolver;
      }();

      exports["default"] = HierarchicalSpringSolver;

      /***/
    },
    /* 225 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _BarnesHutSolver2 = __webpack_require__(120);

      var _BarnesHutSolver3 = _interopRequireDefault(_BarnesHutSolver2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * @extends BarnesHutSolver
       */
      var ForceAtlas2BasedRepulsionSolver = function (_BarnesHutSolver) {
        (0, _inherits3["default"])(ForceAtlas2BasedRepulsionSolver, _BarnesHutSolver);

        /**
         * @param {Object} body
         * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
         * @param {Object} options
         */
        function ForceAtlas2BasedRepulsionSolver(body, physicsBody, options) {
          (0, _classCallCheck3["default"])(this, ForceAtlas2BasedRepulsionSolver);
          return (0, _possibleConstructorReturn3["default"])(this, (ForceAtlas2BasedRepulsionSolver.__proto__ || (0, _getPrototypeOf2["default"])(ForceAtlas2BasedRepulsionSolver)).call(this, body, physicsBody, options));
        }

        /**
         * Calculate the forces based on the distance.
         *
         * @param {number} distance
         * @param {number} dx
         * @param {number} dy
         * @param {Node} node
         * @param {Object} parentBranch
         * @private
         */

        (0, _createClass3["default"])(ForceAtlas2BasedRepulsionSolver, [{
          key: "_calculateForces",
          value: function _calculateForces(distance, dx, dy, node, parentBranch) {
            if (distance === 0) {
              distance = 0.1 * Math.random();
              dx = distance;
            }

            if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {
              distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);
            }

            var degree = node.edges.length + 1;
            // the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines
            // it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce
            var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass * degree / Math.pow(distance, 2);
            var fx = dx * gravityForce;
            var fy = dy * gravityForce;

            this.physicsBody.forces[node.id].x += fx;
            this.physicsBody.forces[node.id].y += fy;
          }
        }]);
        return ForceAtlas2BasedRepulsionSolver;
      }(_BarnesHutSolver3["default"]);

      exports["default"] = ForceAtlas2BasedRepulsionSolver;

      /***/
    },
    /* 226 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _CentralGravitySolver2 = __webpack_require__(121);

      var _CentralGravitySolver3 = _interopRequireDefault(_CentralGravitySolver2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * @extends CentralGravitySolver
       */
      var ForceAtlas2BasedCentralGravitySolver = function (_CentralGravitySolver) {
        (0, _inherits3["default"])(ForceAtlas2BasedCentralGravitySolver, _CentralGravitySolver);

        /**
         * @param {Object} body
         * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
         * @param {Object} options
         */
        function ForceAtlas2BasedCentralGravitySolver(body, physicsBody, options) {
          (0, _classCallCheck3["default"])(this, ForceAtlas2BasedCentralGravitySolver);
          return (0, _possibleConstructorReturn3["default"])(this, (ForceAtlas2BasedCentralGravitySolver.__proto__ || (0, _getPrototypeOf2["default"])(ForceAtlas2BasedCentralGravitySolver)).call(this, body, physicsBody, options));
        }

        /**
         * Calculate the forces based on the distance.
         *
         * @param {number} distance
         * @param {number} dx
         * @param {number} dy
         * @param {Object<Node.id, Node>} forces
         * @param {Node} node
         * @private
         */

        (0, _createClass3["default"])(ForceAtlas2BasedCentralGravitySolver, [{
          key: "_calculateForces",
          value: function _calculateForces(distance, dx, dy, forces, node) {
            if (distance > 0) {
              var degree = node.edges.length + 1;
              var gravityForce = this.options.centralGravity * degree * node.options.mass;
              forces[node.id].x = dx * gravityForce;
              forces[node.id].y = dy * gravityForce;
            }
          }
        }]);
        return ForceAtlas2BasedCentralGravitySolver;
      }(_CentralGravitySolver3["default"]);

      exports["default"] = ForceAtlas2BasedCentralGravitySolver;

      /***/
    },
    /* 227 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /* ===========================================================================
      
      # TODO
      
      - `edgeReplacedById` not cleaned up yet on cluster edge removal
      - allowSingleNodeCluster could be a global option as well; currently needs to always
        be passed to clustering methods
      
      ----------------------------------------------
      
      # State Model for Clustering
      
      The total state for clustering is non-trivial. It is useful to have a model
      available as to how it works. The following documents the relevant state items.
      
      
      ## Network State
      
      The following `network`-members are relevant to clustering:
      
      - `body.nodes`       - all nodes actively participating in the network
      - `body.edges`       - same for edges
      - `body.nodeIndices` - id's of nodes that are visible at a given moment
      - `body.edgeIndices` - same for edges
      
      This includes:
      
      - helper nodes for dragging in `manipulation`
      - helper nodes for edge type `dynamic`
      - cluster nodes and edges
      - there may be more than this.
      
      A node/edge may be missing in the `Indices` member if:
      
      - it is a helper node
      - the node or edge state has option `hidden` set
      - It is not visible due to clustering
      
      
      ## Clustering State
      
      For the hashes, the id's of the nodes/edges are used as key.
      
      Member `network.clustering` contains the following items:
      
      - `clusteredNodes` - hash with values: { clusterId: <id of cluster>, node: <node instance>}
      - `clusteredEdges` - hash with values: restore information for given edge
      
      
      Due to nesting of clusters, these members can contain cluster nodes and edges as well.
      
      The important thing to note here, is that the clustered nodes and edges also
      appear in the members of the cluster nodes. For data update, it is therefore 
      important to scan these lists as well as the cluster nodes.
      
      
      ### Cluster Node
      
      A cluster node has the following extra fields:
      
      - `isCluster : true` - indication that this is a cluster node
      - `containedNodes`   - hash of nodes contained in this cluster
      - `containedEdges`   - same for edges
      - `edges`            - array of cluster edges for this node 
      
      
      **NOTE:**
      
      - `containedEdges` can also contain edges which are not clustered; e.g. an edge
         connecting two nodes in the same cluster.
      
      
      ### Cluster Edge
      
      These are the items in the `edges` member of a clustered node. They have the
      following relevant members:
      
      - 'clusteringEdgeReplacingIds` - array of id's of edges replaced by this edge
      
      Note that it's possible to nest clusters, so that `clusteringEdgeReplacingIds`
      can contain edge id's of other clusters.
      
      
      ### Clustered Edge
      
      This is any edge contained by a cluster edge. It gets the following additional
      member:
      
      - `edgeReplacedById` - id of the cluster edge in which current edge is clustered
      
      
         =========================================================================== */
      var util = __webpack_require__(2);
      var NetworkUtil = __webpack_require__(76)['default'];
      var Cluster = __webpack_require__(228)['default'];
      var Edge = __webpack_require__(74)['default']; // Only needed for check on type!
      var Node = __webpack_require__(47)['default']; // Only needed for check on type!

      /**
       * The clustering engine
       */

      var ClusterEngine = function () {
        /**
         * @param {Object} body
         */
        function ClusterEngine(body) {
          var _this = this;

          (0, _classCallCheck3['default'])(this, ClusterEngine);

          this.body = body;
          this.clusteredNodes = {}; // key: node id, value: { clusterId: <id of cluster>, node: <node instance>}
          this.clusteredEdges = {}; // key: edge id, value: restore information for given edge

          this.options = {};
          this.defaultOptions = {};
          util.extend(this.options, this.defaultOptions);

          this.body.emitter.on('_resetData', function () {
            _this.clusteredNodes = {};_this.clusteredEdges = {};
          });
        }

        /**
        *
        * @param {number} hubsize
        * @param {Object} options
        */

        (0, _createClass3['default'])(ClusterEngine, [{
          key: 'clusterByHubsize',
          value: function clusterByHubsize(hubsize, options) {
            if (hubsize === undefined) {
              hubsize = this._getHubSize();
            } else if ((typeof hubsize === 'undefined' ? 'undefined' : (0, _typeof3['default'])(hubsize)) === "object") {
              options = this._checkOptions(hubsize);
              hubsize = this._getHubSize();
            }

            var nodesToCluster = [];
            for (var i = 0; i < this.body.nodeIndices.length; i++) {
              var node = this.body.nodes[this.body.nodeIndices[i]];
              if (node.edges.length >= hubsize) {
                nodesToCluster.push(node.id);
              }
            }

            for (var _i = 0; _i < nodesToCluster.length; _i++) {
              this.clusterByConnection(nodesToCluster[_i], options, true);
            }

            this.body.emitter.emit('_dataChanged');
          }

          /**
           * loop over all nodes, check if they adhere to the condition and cluster if needed.
           * @param {Object} options
           * @param {boolean} [refreshData=true]
           */

        }, {
          key: 'cluster',
          value: function cluster() {
            var _this2 = this;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (options.joinCondition === undefined) {
              throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");
            }

            // check if the options object is fine, append if needed
            options = this._checkOptions(options);

            var childNodesObj = {};
            var childEdgesObj = {};

            // collect the nodes that will be in the cluster
            util.forEach(this.body.nodes, function (node, nodeId) {
              var clonedOptions = NetworkUtil.cloneOptions(node);
              if (options.joinCondition(clonedOptions) === true) {
                childNodesObj[nodeId] = node;

                // collect the edges that will be in the cluster
                util.forEach(node.edges, function (edge) {
                  if (_this2.clusteredEdges[edge.id] === undefined) {
                    childEdgesObj[edge.id] = edge;
                  }
                });
              }
            });

            this._cluster(childNodesObj, childEdgesObj, options, refreshData);
          }

          /**
           * Cluster all nodes in the network that have only X edges
           * @param {number} edgeCount
           * @param {Object} options
           * @param {boolean} [refreshData=true]
           */

        }, {
          key: 'clusterByEdgeCount',
          value: function clusterByEdgeCount(edgeCount, options) {
            var _this3 = this;

            var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            options = this._checkOptions(options);
            var clusters = [];
            var usedNodes = {};
            var edge = void 0,
                edges = void 0,
                relevantEdgeCount = void 0;
            // collect the nodes that will be in the cluster

            var _loop = function _loop(i) {
              var childNodesObj = {};
              var childEdgesObj = {};
              var nodeId = _this3.body.nodeIndices[i];
              var node = _this3.body.nodes[nodeId];

              // if this node is already used in another cluster this session, we do not have to re-evaluate it.
              if (usedNodes[nodeId] === undefined) {
                relevantEdgeCount = 0;
                edges = [];
                for (var j = 0; j < node.edges.length; j++) {
                  edge = node.edges[j];
                  if (_this3.clusteredEdges[edge.id] === undefined) {
                    if (edge.toId !== edge.fromId) {
                      relevantEdgeCount++;
                    }
                    edges.push(edge);
                  }
                }

                // this node qualifies, we collect its neighbours to start the clustering process.
                if (relevantEdgeCount === edgeCount) {
                  checkJoinCondition = function checkJoinCondition(node) {
                    if (options.joinCondition === undefined || options.joinCondition === null) {
                      return true;
                    }

                    var clonedOptions = NetworkUtil.cloneOptions(node);
                    return options.joinCondition(clonedOptions);
                  };

                  var gatheringSuccessful = true;
                  for (var _j = 0; _j < edges.length; _j++) {
                    edge = edges[_j];
                    var childNodeId = _this3._getConnectedId(edge, nodeId);
                    // add the nodes to the list by the join condition.
                    if (checkJoinCondition(node)) {
                      childEdgesObj[edge.id] = edge;
                      childNodesObj[nodeId] = node;
                      childNodesObj[childNodeId] = _this3.body.nodes[childNodeId];
                      usedNodes[nodeId] = true;
                    } else {
                      // this node does not qualify after all.
                      gatheringSuccessful = false;
                      break;
                    }
                  }

                  // add to the cluster queue
                  if ((0, _keys2['default'])(childNodesObj).length > 0 && (0, _keys2['default'])(childEdgesObj).length > 0 && gatheringSuccessful === true) {
                    /**
                     * Search for cluster data that contains any of the node id's
                     * @returns {Boolean} true if no joinCondition, otherwise return value of joinCondition
                     */
                    findClusterData = function findClusterData() {
                      for (var n = 0; n < clusters.length; ++n) {
                        // Search for a cluster containing any of the node id's
                        for (var m in childNodesObj) {
                          if (clusters[n].nodes[m] !== undefined) {
                            return clusters[n];
                          }
                        }
                      }

                      return undefined;
                    };

                    // If any of the found nodes is part of a cluster found in this method,
                    // add the current values to that cluster


                    foundCluster = findClusterData();

                    if (foundCluster !== undefined) {
                      // Add nodes to found cluster if not present
                      for (var m in childNodesObj) {
                        if (foundCluster.nodes[m] === undefined) {
                          foundCluster.nodes[m] = childNodesObj[m];
                        }
                      }

                      // Add edges to found cluster, if not present
                      for (var _m in childEdgesObj) {
                        if (foundCluster.edges[_m] === undefined) {
                          foundCluster.edges[_m] = childEdgesObj[_m];
                        }
                      }
                    } else {
                      // Create a new cluster group
                      clusters.push({ nodes: childNodesObj, edges: childEdgesObj });
                    }
                  }
                }
              }
            };

            for (var i = 0; i < this.body.nodeIndices.length; i++) {
              var checkJoinCondition;
              var findClusterData;
              var foundCluster;

              _loop(i);
            }

            for (var i = 0; i < clusters.length; i++) {
              this._cluster(clusters[i].nodes, clusters[i].edges, options, false);
            }

            if (refreshData === true) {
              this.body.emitter.emit('_dataChanged');
            }
          }

          /**
           * Cluster all nodes in the network that have only 1 edge
           * @param {Object} options
           * @param {boolean} [refreshData=true]
           */

        }, {
          key: 'clusterOutliers',
          value: function clusterOutliers(options) {
            var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            this.clusterByEdgeCount(1, options, refreshData);
          }

          /**
           * Cluster all nodes in the network that have only 2 edge
           * @param {Object} options
           * @param {boolean} [refreshData=true]
           */

        }, {
          key: 'clusterBridges',
          value: function clusterBridges(options) {
            var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            this.clusterByEdgeCount(2, options, refreshData);
          }

          /**
          * suck all connected nodes of a node into the node.
          * @param {Node.id} nodeId
          * @param {Object} options
          * @param {boolean} [refreshData=true]
          */

        }, {
          key: 'clusterByConnection',
          value: function clusterByConnection(nodeId, options) {
            var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            // kill conditions
            if (nodeId === undefined) {
              throw new Error("No nodeId supplied to clusterByConnection!");
            }
            if (this.body.nodes[nodeId] === undefined) {
              throw new Error("The nodeId given to clusterByConnection does not exist!");
            }

            var node = this.body.nodes[nodeId];
            options = this._checkOptions(options, node);
            if (options.clusterNodeProperties.x === undefined) {
              options.clusterNodeProperties.x = node.x;
            }
            if (options.clusterNodeProperties.y === undefined) {
              options.clusterNodeProperties.y = node.y;
            }
            if (options.clusterNodeProperties.fixed === undefined) {
              options.clusterNodeProperties.fixed = {};
              options.clusterNodeProperties.fixed.x = node.options.fixed.x;
              options.clusterNodeProperties.fixed.y = node.options.fixed.y;
            }

            var childNodesObj = {};
            var childEdgesObj = {};
            var parentNodeId = node.id;
            var parentClonedOptions = NetworkUtil.cloneOptions(node);
            childNodesObj[parentNodeId] = node;

            // collect the nodes that will be in the cluster
            for (var i = 0; i < node.edges.length; i++) {
              var edge = node.edges[i];
              if (this.clusteredEdges[edge.id] === undefined) {
                var childNodeId = this._getConnectedId(edge, parentNodeId);

                // if the child node is not in a cluster
                if (this.clusteredNodes[childNodeId] === undefined) {
                  if (childNodeId !== parentNodeId) {
                    if (options.joinCondition === undefined) {
                      childEdgesObj[edge.id] = edge;
                      childNodesObj[childNodeId] = this.body.nodes[childNodeId];
                    } else {
                      // clone the options and insert some additional parameters that could be interesting.
                      var childClonedOptions = NetworkUtil.cloneOptions(this.body.nodes[childNodeId]);
                      if (options.joinCondition(parentClonedOptions, childClonedOptions) === true) {
                        childEdgesObj[edge.id] = edge;
                        childNodesObj[childNodeId] = this.body.nodes[childNodeId];
                      }
                    }
                  } else {
                    // swallow the edge if it is self-referencing.
                    childEdgesObj[edge.id] = edge;
                  }
                }
              }
            }
            var childNodeIDs = (0, _keys2['default'])(childNodesObj).map(function (childNode) {
              return childNodesObj[childNode].id;
            });

            for (childNode in childNodesObj) {
              if (!childNodesObj.hasOwnProperty(childNode)) continue;

              var childNode = childNodesObj[childNode];
              for (var y = 0; y < childNode.edges.length; y++) {
                var childEdge = childNode.edges[y];
                if (childNodeIDs.indexOf(this._getConnectedId(childEdge, childNode.id)) > -1) {
                  childEdgesObj[childEdge.id] = childEdge;
                }
              }
            }
            this._cluster(childNodesObj, childEdgesObj, options, refreshData);
          }

          /**
          * This function creates the edges that will be attached to the cluster
          * It looks for edges that are connected to the nodes from the "outside' of the cluster.
          *
          * @param {{Node.id: vis.Node}} childNodesObj
          * @param {{vis.Edge.id: vis.Edge}} childEdgesObj
          * @param {Object} clusterNodeProperties
          * @param {Object} clusterEdgeProperties
          * @private
          */

        }, {
          key: '_createClusterEdges',
          value: function _createClusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, clusterEdgeProperties) {
            var edge = void 0,
                childNodeId = void 0,
                childNode = void 0,
                toId = void 0,
                fromId = void 0,
                otherNodeId = void 0;

            // loop over all child nodes and their edges to find edges going out of the cluster
            // these edges will be replaced by clusterEdges.
            var childKeys = (0, _keys2['default'])(childNodesObj);
            var createEdges = [];
            for (var i = 0; i < childKeys.length; i++) {
              childNodeId = childKeys[i];
              childNode = childNodesObj[childNodeId];

              // construct new edges from the cluster to others
              for (var j = 0; j < childNode.edges.length; j++) {
                edge = childNode.edges[j];
                // we only handle edges that are visible to the system, not the disabled ones from the clustering process.
                if (this.clusteredEdges[edge.id] === undefined) {
                  // self-referencing edges will be added to the "hidden" list
                  if (edge.toId == edge.fromId) {
                    childEdgesObj[edge.id] = edge;
                  } else {
                    // set up the from and to.
                    if (edge.toId == childNodeId) {
                      // this is a double equals because ints and strings can be interchanged here.
                      toId = clusterNodeProperties.id;
                      fromId = edge.fromId;
                      otherNodeId = fromId;
                    } else {
                      toId = edge.toId;
                      fromId = clusterNodeProperties.id;
                      otherNodeId = toId;
                    }
                  }

                  // Only edges from the cluster outwards are being replaced.
                  if (childNodesObj[otherNodeId] === undefined) {
                    createEdges.push({ edge: edge, fromId: fromId, toId: toId });
                  }
                }
              }
            }

            //
            // Here we actually create the replacement edges.
            //
            // We could not do this in the loop above as the creation process
            // would add an edge to the edges array we are iterating over.
            //
            // NOTE: a clustered edge can have multiple base edges!
            //
            var newEdges = [];

            /**
             * Find a cluster edge which matches the given created edge.
             * @param {vis.Edge} createdEdge
             * @returns {vis.Edge}
             */
            var getNewEdge = function getNewEdge(createdEdge) {
              for (var _j2 = 0; _j2 < newEdges.length; _j2++) {
                var newEdge = newEdges[_j2];

                // We replace both to and from edges with a single cluster edge
                var matchToDirection = createdEdge.fromId === newEdge.fromId && createdEdge.toId === newEdge.toId;
                var matchFromDirection = createdEdge.fromId === newEdge.toId && createdEdge.toId === newEdge.fromId;

                if (matchToDirection || matchFromDirection) {
                  return newEdge;
                }
              }

              return null;
            };

            for (var _j3 = 0; _j3 < createEdges.length; _j3++) {
              var createdEdge = createEdges[_j3];
              var _edge = createdEdge.edge;
              var newEdge = getNewEdge(createdEdge);

              if (newEdge === null) {
                // Create a clustered edge for this connection
                newEdge = this._createClusteredEdge(createdEdge.fromId, createdEdge.toId, _edge, clusterEdgeProperties);

                newEdges.push(newEdge);
              } else {
                newEdge.clusteringEdgeReplacingIds.push(_edge.id);
              }

              // also reference the new edge in the old edge
              this.body.edges[_edge.id].edgeReplacedById = newEdge.id;

              // hide the replaced edge
              this._backupEdgeOptions(_edge);
              _edge.setOptions({ physics: false });
            }
          }

          /**
          * This function checks the options that can be supplied to the different cluster functions
          * for certain fields and inserts defaults if needed
          * @param {Object} options
          * @returns {*}
          * @private
          */

        }, {
          key: '_checkOptions',
          value: function _checkOptions() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            if (options.clusterEdgeProperties === undefined) {
              options.clusterEdgeProperties = {};
            }
            if (options.clusterNodeProperties === undefined) {
              options.clusterNodeProperties = {};
            }

            return options;
          }

          /**
          *
          * @param {Object}    childNodesObj         | object with node objects, id as keys, same as childNodes except it also contains a source node
          * @param {Object}    childEdgesObj         | object with edge objects, id as keys
          * @param {Array}     options               | object with {clusterNodeProperties, clusterEdgeProperties, processProperties}
          * @param {boolean}   refreshData | when true, do not wrap up
          * @private
          */

        }, {
          key: '_cluster',
          value: function _cluster(childNodesObj, childEdgesObj, options) {
            var refreshData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

            // Remove nodes which are already clustered
            var tmpNodesToRemove = [];
            for (var _nodeId in childNodesObj) {
              if (childNodesObj.hasOwnProperty(_nodeId)) {
                if (this.clusteredNodes[_nodeId] !== undefined) {
                  tmpNodesToRemove.push(_nodeId);
                }
              }
            }

            for (var n = 0; n < tmpNodesToRemove.length; ++n) {
              delete childNodesObj[tmpNodesToRemove[n]];
            }

            // kill condition: no nodes don't bother
            if ((0, _keys2['default'])(childNodesObj).length == 0) {
              return;
            }

            // allow clusters of 1 if options allow
            if ((0, _keys2['default'])(childNodesObj).length == 1 && options.clusterNodeProperties.allowSingleNodeCluster != true) {
              return;
            }

            var clusterNodeProperties = util.deepExtend({}, options.clusterNodeProperties);

            // construct the clusterNodeProperties
            if (options.processProperties !== undefined) {
              // get the childNode options
              var childNodesOptions = [];
              for (var _nodeId2 in childNodesObj) {
                if (childNodesObj.hasOwnProperty(_nodeId2)) {
                  var clonedOptions = NetworkUtil.cloneOptions(childNodesObj[_nodeId2]);
                  childNodesOptions.push(clonedOptions);
                }
              }

              // get cluster properties based on childNodes
              var childEdgesOptions = [];
              for (var edgeId in childEdgesObj) {
                if (childEdgesObj.hasOwnProperty(edgeId)) {
                  // these cluster edges will be removed on creation of the cluster.
                  if (edgeId.substr(0, 12) !== "clusterEdge:") {
                    var _clonedOptions = NetworkUtil.cloneOptions(childEdgesObj[edgeId], 'edge');
                    childEdgesOptions.push(_clonedOptions);
                  }
                }
              }

              clusterNodeProperties = options.processProperties(clusterNodeProperties, childNodesOptions, childEdgesOptions);
              if (!clusterNodeProperties) {
                throw new Error("The processProperties function does not return properties!");
              }
            }

            // check if we have an unique id;
            if (clusterNodeProperties.id === undefined) {
              clusterNodeProperties.id = 'cluster:' + util.randomUUID();
            }
            var clusterId = clusterNodeProperties.id;

            if (clusterNodeProperties.label === undefined) {
              clusterNodeProperties.label = 'cluster';
            }

            // give the clusterNode a position if it does not have one.
            var pos = undefined;
            if (clusterNodeProperties.x === undefined) {
              pos = this._getClusterPosition(childNodesObj);
              clusterNodeProperties.x = pos.x;
            }
            if (clusterNodeProperties.y === undefined) {
              if (pos === undefined) {
                pos = this._getClusterPosition(childNodesObj);
              }
              clusterNodeProperties.y = pos.y;
            }

            // force the ID to remain the same
            clusterNodeProperties.id = clusterId;

            // create the cluster Node
            // Note that allowSingleNodeCluster, if present, is stored in the options as well
            var clusterNode = this.body.functions.createNode(clusterNodeProperties, Cluster);
            clusterNode.containedNodes = childNodesObj;
            clusterNode.containedEdges = childEdgesObj;
            // cache a copy from the cluster edge properties if we have to reconnect others later on
            clusterNode.clusterEdgeProperties = options.clusterEdgeProperties;

            // finally put the cluster node into global
            this.body.nodes[clusterNodeProperties.id] = clusterNode;

            this._clusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, options.clusterEdgeProperties);

            // set ID to undefined so no duplicates arise
            clusterNodeProperties.id = undefined;

            // wrap up
            if (refreshData === true) {
              this.body.emitter.emit('_dataChanged');
            }
          }

          /**
           *
           * @param {Edge} edge
           * @private
           */

        }, {
          key: '_backupEdgeOptions',
          value: function _backupEdgeOptions(edge) {
            if (this.clusteredEdges[edge.id] === undefined) {
              this.clusteredEdges[edge.id] = { physics: edge.options.physics };
            }
          }

          /**
           *
           * @param {Edge} edge
           * @private
           */

        }, {
          key: '_restoreEdge',
          value: function _restoreEdge(edge) {
            var originalOptions = this.clusteredEdges[edge.id];
            if (originalOptions !== undefined) {
              edge.setOptions({ physics: originalOptions.physics });
              delete this.clusteredEdges[edge.id];
            }
          }

          /**
          * Check if a node is a cluster.
          * @param {Node.id} nodeId
          * @returns {*}
          */

        }, {
          key: 'isCluster',
          value: function isCluster(nodeId) {
            if (this.body.nodes[nodeId] !== undefined) {
              return this.body.nodes[nodeId].isCluster === true;
            } else {
              console.log("Node does not exist.");
              return false;
            }
          }

          /**
          * get the position of the cluster node based on what's inside
          * @param {object} childNodesObj    | object with node objects, id as keys
          * @returns {{x: number, y: number}}
          * @private
          */

        }, {
          key: '_getClusterPosition',
          value: function _getClusterPosition(childNodesObj) {
            var childKeys = (0, _keys2['default'])(childNodesObj);
            var minX = childNodesObj[childKeys[0]].x;
            var maxX = childNodesObj[childKeys[0]].x;
            var minY = childNodesObj[childKeys[0]].y;
            var maxY = childNodesObj[childKeys[0]].y;
            var node = void 0;
            for (var i = 1; i < childKeys.length; i++) {
              node = childNodesObj[childKeys[i]];
              minX = node.x < minX ? node.x : minX;
              maxX = node.x > maxX ? node.x : maxX;
              minY = node.y < minY ? node.y : minY;
              maxY = node.y > maxY ? node.y : maxY;
            }

            return { x: 0.5 * (minX + maxX), y: 0.5 * (minY + maxY) };
          }

          /**
           * Open a cluster by calling this function.
           * @param {vis.Edge.id}  clusterNodeId | the ID of the cluster node
           * @param {Object} options
           * @param {boolean} refreshData | wrap up afterwards if not true
           */

        }, {
          key: 'openCluster',
          value: function openCluster(clusterNodeId, options) {
            var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            // kill conditions
            if (clusterNodeId === undefined) {
              throw new Error("No clusterNodeId supplied to openCluster.");
            }

            var clusterNode = this.body.nodes[clusterNodeId];

            if (clusterNode === undefined) {
              throw new Error("The clusterNodeId supplied to openCluster does not exist.");
            }
            if (clusterNode.isCluster !== true || clusterNode.containedNodes === undefined || clusterNode.containedEdges === undefined) {
              throw new Error("The node:" + clusterNodeId + " is not a valid cluster.");
            }

            // Check if current cluster is clustered itself
            var stack = this.findNode(clusterNodeId);
            var parentIndex = stack.indexOf(clusterNodeId) - 1;
            if (parentIndex >= 0) {
              // Current cluster is clustered; transfer contained nodes and edges to parent
              var parentClusterNodeId = stack[parentIndex];
              var parentClusterNode = this.body.nodes[parentClusterNodeId];

              // clustering.clusteredNodes and clustering.clusteredEdges remain unchanged
              parentClusterNode._openChildCluster(clusterNodeId);

              // All components of child cluster node have been transferred. It can die now.
              delete this.body.nodes[clusterNodeId];
              if (refreshData === true) {
                this.body.emitter.emit('_dataChanged');
              }

              return;
            }

            // main body 
            var containedNodes = clusterNode.containedNodes;
            var containedEdges = clusterNode.containedEdges;

            // allow the user to position the nodes after release.
            if (options !== undefined && options.releaseFunction !== undefined && typeof options.releaseFunction === 'function') {
              var positions = {};
              var clusterPosition = { x: clusterNode.x, y: clusterNode.y };
              for (var _nodeId3 in containedNodes) {
                if (containedNodes.hasOwnProperty(_nodeId3)) {
                  var containedNode = this.body.nodes[_nodeId3];
                  positions[_nodeId3] = { x: containedNode.x, y: containedNode.y };
                }
              }
              var newPositions = options.releaseFunction(clusterPosition, positions);

              for (var _nodeId4 in containedNodes) {
                if (containedNodes.hasOwnProperty(_nodeId4)) {
                  var _containedNode = this.body.nodes[_nodeId4];
                  if (newPositions[_nodeId4] !== undefined) {
                    _containedNode.x = newPositions[_nodeId4].x === undefined ? clusterNode.x : newPositions[_nodeId4].x;
                    _containedNode.y = newPositions[_nodeId4].y === undefined ? clusterNode.y : newPositions[_nodeId4].y;
                  }
                }
              }
            } else {
              // copy the position from the cluster
              util.forEach(containedNodes, function (containedNode) {
                // inherit position
                if (containedNode.options.fixed.x === false) {
                  containedNode.x = clusterNode.x;
                }
                if (containedNode.options.fixed.y === false) {
                  containedNode.y = clusterNode.y;
                }
              });
            }

            // release nodes
            for (var _nodeId5 in containedNodes) {
              if (containedNodes.hasOwnProperty(_nodeId5)) {
                var _containedNode2 = this.body.nodes[_nodeId5];

                // inherit speed
                _containedNode2.vx = clusterNode.vx;
                _containedNode2.vy = clusterNode.vy;

                _containedNode2.setOptions({ physics: true });

                delete this.clusteredNodes[_nodeId5];
              }
            }

            // copy the clusterNode edges because we cannot iterate over an object that we add or remove from.
            var edgesToBeDeleted = [];
            for (var i = 0; i < clusterNode.edges.length; i++) {
              edgesToBeDeleted.push(clusterNode.edges[i]);
            }

            // actually handling the deleting.
            for (var _i2 = 0; _i2 < edgesToBeDeleted.length; _i2++) {
              var edge = edgesToBeDeleted[_i2];
              var otherNodeId = this._getConnectedId(edge, clusterNodeId);
              var otherNode = this.clusteredNodes[otherNodeId];

              for (var j = 0; j < edge.clusteringEdgeReplacingIds.length; j++) {
                var transferId = edge.clusteringEdgeReplacingIds[j];
                var transferEdge = this.body.edges[transferId];
                if (transferEdge === undefined) continue;

                // if the other node is in another cluster, we transfer ownership of this edge to the other cluster
                if (otherNode !== undefined) {
                  // transfer ownership:
                  var otherCluster = this.body.nodes[otherNode.clusterId];
                  otherCluster.containedEdges[transferEdge.id] = transferEdge;

                  // delete local reference
                  delete containedEdges[transferEdge.id];

                  // get to and from
                  var fromId = transferEdge.fromId;
                  var toId = transferEdge.toId;
                  if (transferEdge.toId == otherNodeId) {
                    toId = otherNode.clusterId;
                  } else {
                    fromId = otherNode.clusterId;
                  }

                  // create new cluster edge from the otherCluster
                  this._createClusteredEdge(fromId, toId, transferEdge, otherCluster.clusterEdgeProperties, { hidden: false, physics: true });
                } else {
                  this._restoreEdge(transferEdge);
                }
              }

              edge.remove();
            }

            // handle the releasing of the edges
            for (var edgeId in containedEdges) {
              if (containedEdges.hasOwnProperty(edgeId)) {
                this._restoreEdge(containedEdges[edgeId]);
              }
            }

            // remove clusterNode
            delete this.body.nodes[clusterNodeId];

            if (refreshData === true) {
              this.body.emitter.emit('_dataChanged');
            }
          }

          /**
           *
           * @param {Cluster.id} clusterId
           * @returns {Array.<Node.id>}
           */

        }, {
          key: 'getNodesInCluster',
          value: function getNodesInCluster(clusterId) {
            var nodesArray = [];
            if (this.isCluster(clusterId) === true) {
              var containedNodes = this.body.nodes[clusterId].containedNodes;
              for (var _nodeId6 in containedNodes) {
                if (containedNodes.hasOwnProperty(_nodeId6)) {
                  nodesArray.push(this.body.nodes[_nodeId6].id);
                }
              }
            }

            return nodesArray;
          }

          /**
          * Get the stack clusterId's that a certain node resides in. cluster A -> cluster B -> cluster C -> node
          *
          * If a node can't be found in the chain, return an empty array.
          *
          * @param {string|number} nodeId
          * @returns {Array}
          */

        }, {
          key: 'findNode',
          value: function findNode(nodeId) {
            var stack = [];
            var max = 100;
            var counter = 0;
            var node = void 0;

            while (this.clusteredNodes[nodeId] !== undefined && counter < max) {
              node = this.body.nodes[nodeId];
              if (node === undefined) return [];
              stack.push(node.id);

              nodeId = this.clusteredNodes[nodeId].clusterId;
              counter++;
            }

            node = this.body.nodes[nodeId];
            if (node === undefined) return [];
            stack.push(node.id);

            stack.reverse();
            return stack;
          }

          /**
          * Using a clustered nodeId, update with the new options
          * @param {vis.Edge.id} clusteredNodeId
          * @param {object} newOptions
          */

        }, {
          key: 'updateClusteredNode',
          value: function updateClusteredNode(clusteredNodeId, newOptions) {
            if (clusteredNodeId === undefined) {
              throw new Error("No clusteredNodeId supplied to updateClusteredNode.");
            }
            if (newOptions === undefined) {
              throw new Error("No newOptions supplied to updateClusteredNode.");
            }
            if (this.body.nodes[clusteredNodeId] === undefined) {
              throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");
            }

            this.body.nodes[clusteredNodeId].setOptions(newOptions);
            this.body.emitter.emit('_dataChanged');
          }

          /**
          * Using a base edgeId, update all related clustered edges with the new options
          * @param {vis.Edge.id} startEdgeId
          * @param {object} newOptions
          */

        }, {
          key: 'updateEdge',
          value: function updateEdge(startEdgeId, newOptions) {
            if (startEdgeId === undefined) {
              throw new Error("No startEdgeId supplied to updateEdge.");
            }
            if (newOptions === undefined) {
              throw new Error("No newOptions supplied to updateEdge.");
            }
            if (this.body.edges[startEdgeId] === undefined) {
              throw new Error("The startEdgeId supplied to updateEdge does not exist.");
            }

            var allEdgeIds = this.getClusteredEdges(startEdgeId);
            for (var i = 0; i < allEdgeIds.length; i++) {
              var edge = this.body.edges[allEdgeIds[i]];
              edge.setOptions(newOptions);
            }
            this.body.emitter.emit('_dataChanged');
          }

          /**
          * Get a stack of clusterEdgeId's (+base edgeid) that a base edge is the same as. cluster edge C -> cluster edge B -> cluster edge A -> base edge(edgeId)
          * @param {vis.Edge.id} edgeId
          * @returns {Array.<vis.Edge.id>}
          */

        }, {
          key: 'getClusteredEdges',
          value: function getClusteredEdges(edgeId) {
            var stack = [];
            var max = 100;
            var counter = 0;

            while (edgeId !== undefined && this.body.edges[edgeId] !== undefined && counter < max) {
              stack.push(this.body.edges[edgeId].id);
              edgeId = this.body.edges[edgeId].edgeReplacedById;
              counter++;
            }
            stack.reverse();
            return stack;
          }

          /**
          * Get the base edge id of clusterEdgeId. cluster edge (clusteredEdgeId) -> cluster edge B -> cluster edge C -> base edge
          * @param {vis.Edge.id} clusteredEdgeId
          * @returns {vis.Edge.id} baseEdgeId
          *
          * TODO: deprecate in 5.0.0. Method getBaseEdges() is the correct one to use.
          */

        }, {
          key: 'getBaseEdge',
          value: function getBaseEdge(clusteredEdgeId) {
            // Just kludge this by returning the first base edge id found
            return this.getBaseEdges(clusteredEdgeId)[0];
          }

          /**
           * Get all regular edges for this clustered edge id.
           *
           * @param {vis.Edge.id} clusteredEdgeId
           * @returns {Array.<vis.Edge.id>} all baseEdgeId's under this clustered edge
           */

        }, {
          key: 'getBaseEdges',
          value: function getBaseEdges(clusteredEdgeId) {
            var IdsToHandle = [clusteredEdgeId];
            var doneIds = [];
            var foundIds = [];
            var max = 100;
            var counter = 0;

            while (IdsToHandle.length > 0 && counter < max) {
              var nextId = IdsToHandle.pop();
              if (nextId === undefined) continue; // Paranoia here and onwards
              var nextEdge = this.body.edges[nextId];
              if (nextEdge === undefined) continue;
              counter++;

              var replacingIds = nextEdge.clusteringEdgeReplacingIds;
              if (replacingIds === undefined) {
                // nextId is a base id
                foundIds.push(nextId);
              } else {
                // Another cluster edge, unravel this one as well
                for (var i = 0; i < replacingIds.length; ++i) {
                  var replacingId = replacingIds[i];

                  // Don't add if already handled
                  // TODO: never triggers; find a test-case which does
                  if (IdsToHandle.indexOf(replacingIds) !== -1 || doneIds.indexOf(replacingIds) !== -1) {
                    continue;
                  }

                  IdsToHandle.push(replacingId);
                }
              }

              doneIds.push(nextId);
            }

            return foundIds;
          }

          /**
          * Get the Id the node is connected to
          * @param {vis.Edge} edge
          * @param {Node.id} nodeId
          * @returns {*}
          * @private
          */

        }, {
          key: '_getConnectedId',
          value: function _getConnectedId(edge, nodeId) {
            if (edge.toId != nodeId) {
              return edge.toId;
            } else if (edge.fromId != nodeId) {
              return edge.fromId;
            } else {
              return edge.fromId;
            }
          }

          /**
          * We determine how many connections denote an important hub.
          * We take the mean + 2*std as the important hub size. (Assuming a normal distribution of data, ~2.2%)
          *
          * @returns {number}
          * @private
          */

        }, {
          key: '_getHubSize',
          value: function _getHubSize() {
            var average = 0;
            var averageSquared = 0;
            var hubCounter = 0;
            var largestHub = 0;

            for (var i = 0; i < this.body.nodeIndices.length; i++) {
              var _node = this.body.nodes[this.body.nodeIndices[i]];
              if (_node.edges.length > largestHub) {
                largestHub = _node.edges.length;
              }
              average += _node.edges.length;
              averageSquared += Math.pow(_node.edges.length, 2);
              hubCounter += 1;
            }
            average = average / hubCounter;
            averageSquared = averageSquared / hubCounter;

            var variance = averageSquared - Math.pow(average, 2);
            var standardDeviation = Math.sqrt(variance);

            var hubThreshold = Math.floor(average + 2 * standardDeviation);

            // always have at least one to cluster
            if (hubThreshold > largestHub) {
              hubThreshold = largestHub;
            }

            return hubThreshold;
          }

          /**
           * Create an edge for the cluster representation.
           *
           * @param {Node.id} fromId
           * @param {Node.id} toId
           * @param {vis.Edge} baseEdge
           * @param {Object} clusterEdgeProperties
           * @param {Object} extraOptions
           * @returns {Edge} newly created clustered edge
           * @private
           */

        }, {
          key: '_createClusteredEdge',
          value: function _createClusteredEdge(fromId, toId, baseEdge, clusterEdgeProperties, extraOptions) {
            // copy the options of the edge we will replace
            var clonedOptions = NetworkUtil.cloneOptions(baseEdge, 'edge');
            // make sure the properties of clusterEdges are superimposed on it
            util.deepExtend(clonedOptions, clusterEdgeProperties);

            // set up the edge
            clonedOptions.from = fromId;
            clonedOptions.to = toId;
            clonedOptions.id = 'clusterEdge:' + util.randomUUID();

            // apply the edge specific options to it if specified
            if (extraOptions !== undefined) {
              util.deepExtend(clonedOptions, extraOptions);
            }

            var newEdge = this.body.functions.createEdge(clonedOptions);
            newEdge.clusteringEdgeReplacingIds = [baseEdge.id];
            newEdge.connect();

            // Register the new edge
            this.body.edges[newEdge.id] = newEdge;

            return newEdge;
          }

          /**
           * Add the passed child nodes and edges to the given cluster node.
           *
           * @param {Object|Node} childNodes  hash of nodes or single node to add in cluster
           * @param {Object|Edge} childEdges  hash of edges or single edge to take into account when clustering
           * @param {Node} clusterNode  cluster node to add nodes and edges to
           * @param {Object} [clusterEdgeProperties]
           * @private
           */

        }, {
          key: '_clusterEdges',
          value: function _clusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties) {
            if (childEdges instanceof Edge) {
              var edge = childEdges;
              var obj = {};
              obj[edge.id] = edge;
              childEdges = obj;
            }

            if (childNodes instanceof Node) {
              var _node2 = childNodes;
              var _obj = {};
              _obj[_node2.id] = _node2;
              childNodes = _obj;
            }

            if (clusterNode === undefined || clusterNode === null) {
              throw new Error("_clusterEdges: parameter clusterNode required");
            }

            if (clusterEdgeProperties === undefined) {
              // Take the required properties from the cluster node
              clusterEdgeProperties = clusterNode.clusterEdgeProperties;
            }

            // create the new edges that will connect to the cluster.
            // All self-referencing edges will be added to childEdges here.
            this._createClusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties);

            // disable the childEdges
            for (var edgeId in childEdges) {
              if (childEdges.hasOwnProperty(edgeId)) {
                if (this.body.edges[edgeId] !== undefined) {
                  var _edge2 = this.body.edges[edgeId];
                  // cache the options before changing
                  this._backupEdgeOptions(_edge2);
                  // disable physics and hide the edge
                  _edge2.setOptions({ physics: false });
                }
              }
            }

            // disable the childNodes
            for (var _nodeId7 in childNodes) {
              if (childNodes.hasOwnProperty(_nodeId7)) {
                this.clusteredNodes[_nodeId7] = { clusterId: clusterNode.id, node: this.body.nodes[_nodeId7] };
                this.body.nodes[_nodeId7].setOptions({ physics: false });
              }
            }
          }

          /**
           * Determine in which cluster given nodeId resides.
           *
           * If not in cluster, return undefined.
           *
           * NOTE: If you know a cleaner way to do this, please enlighten me (wimrijnders).
           *
           * @param {Node.id} nodeId
           * @returns {Node|undefined} Node instance for cluster, if present
           * @private
           */

        }, {
          key: '_getClusterNodeForNode',
          value: function _getClusterNodeForNode(nodeId) {
            if (nodeId === undefined) return undefined;
            var clusteredNode = this.clusteredNodes[nodeId];

            // NOTE: If no cluster info found, it should actually be an error
            if (clusteredNode === undefined) return undefined;
            var clusterId = clusteredNode.clusterId;
            if (clusterId === undefined) return undefined;

            return this.body.nodes[clusterId];
          }

          /**
           * Internal helper function for conditionally removing items in array
           *
           * Done like this because Array.filter() is not fully supported by all IE's.
           *
           * @param {Array} arr
           * @param {function} callback
           * @returns {Array}
           * @private
           */

        }, {
          key: '_filter',
          value: function _filter(arr, callback) {
            var ret = [];

            util.forEach(arr, function (item) {
              if (callback(item)) {
                ret.push(item);
              }
            });

            return ret;
          }

          /**
           * Scan all edges for changes in clustering and adjust this if necessary.
           *
           * Call this (internally) after there has been a change in node or edge data.
           *
           * Pre: States of this.body.nodes and this.body.edges consistent
           * Pre: this.clusteredNodes and this.clusteredEdge consistent with containedNodes and containedEdges
           *      of cluster nodes.
           */

        }, {
          key: '_updateState',
          value: function _updateState() {
            var _this4 = this;

            var nodeId = void 0;
            var deletedNodeIds = [];
            var deletedEdgeIds = [];

            /**
             * Utility function to iterate over clustering nodes only
             *
             * @param {Function} callback  function to call for each cluster node
             */
            var eachClusterNode = function eachClusterNode(callback) {
              util.forEach(_this4.body.nodes, function (node) {
                if (node.isCluster === true) {
                  callback(node);
                }
              });
            };

            //
            // Remove deleted regular nodes from clustering
            //

            // Determine the deleted nodes
            for (nodeId in this.clusteredNodes) {
              if (!this.clusteredNodes.hasOwnProperty(nodeId)) continue;
              var _node3 = this.body.nodes[nodeId];

              if (_node3 === undefined) {
                deletedNodeIds.push(nodeId);
              }
            }

            // Remove nodes from cluster nodes
            eachClusterNode(function (clusterNode) {
              for (var n = 0; n < deletedNodeIds.length; n++) {
                delete clusterNode.containedNodes[deletedNodeIds[n]];
              }
            });

            // Remove nodes from cluster list
            for (var n = 0; n < deletedNodeIds.length; n++) {
              delete this.clusteredNodes[deletedNodeIds[n]];
            }

            //
            // Remove deleted edges from clustering
            //

            // Add the deleted clustered edges to the list
            util.forEach(this.clusteredEdges, function (edgeId) {
              var edge = _this4.body.edges[edgeId];
              if (edge === undefined || !edge.endPointsValid()) {
                deletedEdgeIds.push(edgeId);
              }
            });

            // Cluster nodes can also contain edges which are not clustered, 
            // i.e. nodes 1-2 within cluster with an edge in between.
            // So the cluster nodes also need to be scanned for invalid edges
            eachClusterNode(function (clusterNode) {
              util.forEach(clusterNode.containedEdges, function (edge, edgeId) {
                if (!edge.endPointsValid() && deletedEdgeIds.indexOf(edgeId) === -1) {
                  deletedEdgeIds.push(edgeId);
                }
              });
            });

            // Also scan for cluster edges which need to be removed in the active list.
            // Regular edges have been removed beforehand, so this only picks up the cluster edges.
            util.forEach(this.body.edges, function (edge, edgeId) {
              // Explicitly scan the contained edges for validity
              var isValid = true;
              var replacedIds = edge.clusteringEdgeReplacingIds;
              if (replacedIds !== undefined) {
                var numValid = 0;

                util.forEach(replacedIds, function (containedEdgeId) {
                  var containedEdge = _this4.body.edges[containedEdgeId];

                  if (containedEdge !== undefined && containedEdge.endPointsValid()) {
                    numValid += 1;
                  }
                });

                isValid = numValid > 0;
              }

              if (!edge.endPointsValid() || !isValid) {
                deletedEdgeIds.push(edgeId);
              }
            });

            // Remove edges from cluster nodes
            eachClusterNode(function (clusterNode) {
              util.forEach(deletedEdgeIds, function (deletedEdgeId) {
                delete clusterNode.containedEdges[deletedEdgeId];

                util.forEach(clusterNode.edges, function (edge, m) {
                  if (edge.id === deletedEdgeId) {
                    clusterNode.edges[m] = null; // Don't want to directly delete here, because in the loop
                    return;
                  }

                  edge.clusteringEdgeReplacingIds = _this4._filter(edge.clusteringEdgeReplacingIds, function (id) {
                    return deletedEdgeIds.indexOf(id) === -1;
                  });
                });

                // Clean up the nulls
                clusterNode.edges = _this4._filter(clusterNode.edges, function (item) {
                  return item !== null;
                });
              });
            });

            // Remove from cluster list
            util.forEach(deletedEdgeIds, function (edgeId) {
              delete _this4.clusteredEdges[edgeId];
            });

            // Remove cluster edges from active list (this.body.edges).
            // deletedEdgeIds still contains id of regular edges, but these should all
            // be gone when you reach here.
            util.forEach(deletedEdgeIds, function (edgeId) {
              delete _this4.body.edges[edgeId];
            });

            //
            // Check changed cluster state of edges
            //

            // Iterating over keys here, because edges may be removed in the loop
            var ids = (0, _keys2['default'])(this.body.edges);
            util.forEach(ids, function (edgeId) {
              var edge = _this4.body.edges[edgeId];

              var shouldBeClustered = _this4._isClusteredNode(edge.fromId) || _this4._isClusteredNode(edge.toId);
              if (shouldBeClustered === _this4._isClusteredEdge(edge.id)) {
                return; // all is well
              }

              if (shouldBeClustered) {
                // add edge to clustering
                var clusterFrom = _this4._getClusterNodeForNode(edge.fromId);
                if (clusterFrom !== undefined) {
                  _this4._clusterEdges(_this4.body.nodes[edge.fromId], edge, clusterFrom);
                }

                var clusterTo = _this4._getClusterNodeForNode(edge.toId);
                if (clusterTo !== undefined) {
                  _this4._clusterEdges(_this4.body.nodes[edge.toId], edge, clusterTo);
                }

                // TODO: check that it works for both edges clustered
                //       (This might be paranoia)
              } else {
                // This should not be happening, the state should
                // be properly updated at this point.
                // 
                // If it *is* reached during normal operation, then we have to implement
                // undo clustering for this edge here.
                throw new Error('remove edge from clustering not implemented!');
              }
            });

            // Clusters may be nested to any level. Keep on opening until nothing to open
            var changed = false;
            var continueLoop = true;

            var _loop2 = function _loop2() {
              var clustersToOpen = [];

              // Determine the id's of clusters that need opening
              eachClusterNode(function (clusterNode) {
                var numNodes = (0, _keys2['default'])(clusterNode.containedNodes).length;
                var allowSingle = clusterNode.options.allowSingleNodeCluster === true;
                if (allowSingle && numNodes < 1 || !allowSingle && numNodes < 2) {
                  clustersToOpen.push(clusterNode.id);
                }
              });

              // Open them
              for (var _n = 0; _n < clustersToOpen.length; ++_n) {
                _this4.openCluster(clustersToOpen[_n], {}, false /* Don't refresh, we're in an refresh/update already */);
              }

              continueLoop = clustersToOpen.length > 0;
              changed = changed || continueLoop;
            };

            while (continueLoop) {
              _loop2();
            }

            if (changed) {
              this._updateState(); // Redo this method (recursion possible! should be safe)
            }
          }

          /**
           * Determine if node with given id is part of a cluster.
           *
           * @param {Node.id} nodeId
           * @return {boolean} true if part of a cluster.
           */

        }, {
          key: '_isClusteredNode',
          value: function _isClusteredNode(nodeId) {
            return this.clusteredNodes[nodeId] !== undefined;
          }

          /**
           * Determine if edge with given id is not visible due to clustering.
           *
           * An edge is considered clustered if:
           * - it is directly replaced by a clustering edge
           * - any of its connecting nodes is in a cluster
           *
           * @param {vis.Edge.id} edgeId
           * @return {boolean} true if part of a cluster.
           */

        }, {
          key: '_isClusteredEdge',
          value: function _isClusteredEdge(edgeId) {
            return this.clusteredEdges[edgeId] !== undefined;
          }
        }]);
        return ClusterEngine;
      }();

      exports['default'] = ClusterEngine;

      /***/
    },
    /* 228 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      var util = __webpack_require__(2);
      var Node = __webpack_require__(47)["default"];

      /**
       * A Cluster is a special Node that allows a group of Nodes positioned closely together
       * to be represented by a single Cluster Node.
       *
       * @extends Node
       */

      var Cluster = function (_Node) {
        (0, _inherits3["default"])(Cluster, _Node);

        /**
         * @param {Object} options
         * @param {Object} body
         * @param {Array.<HTMLImageElement>}imagelist
         * @param {Array} grouplist
         * @param {Object} globalOptions
         * @param {Object} defaultOptions     Global default options for nodes
         */
        function Cluster(options, body, imagelist, grouplist, globalOptions, defaultOptions) {
          (0, _classCallCheck3["default"])(this, Cluster);

          var _this = (0, _possibleConstructorReturn3["default"])(this, (Cluster.__proto__ || (0, _getPrototypeOf2["default"])(Cluster)).call(this, options, body, imagelist, grouplist, globalOptions, defaultOptions));

          _this.isCluster = true;
          _this.containedNodes = {};
          _this.containedEdges = {};
          return _this;
        }

        /**
         * Transfer child cluster data to current and disconnect the child cluster.
         *
         * Please consult the header comment in 'Clustering.js' for the fields set here.
         *
         * @param {string|number} childClusterId  id of child cluster to open
         */

        (0, _createClass3["default"])(Cluster, [{
          key: "_openChildCluster",
          value: function _openChildCluster(childClusterId) {
            var _this2 = this;

            var childCluster = this.body.nodes[childClusterId];
            if (this.containedNodes[childClusterId] === undefined) {
              throw new Error('node with id: ' + childClusterId + ' not in current cluster');
            }
            if (!childCluster.isCluster) {
              throw new Error('node with id: ' + childClusterId + ' is not a cluster');
            }

            // Disconnect child cluster from current cluster
            delete this.containedNodes[childClusterId];
            util.forEach(childCluster.edges, function (edge) {
              delete _this2.containedEdges[edge.id];
            });

            // Transfer nodes and edges
            util.forEach(childCluster.containedNodes, function (node, nodeId) {
              _this2.containedNodes[nodeId] = node;
            });
            childCluster.containedNodes = {};

            util.forEach(childCluster.containedEdges, function (edge, edgeId) {
              _this2.containedEdges[edgeId] = edge;
            });
            childCluster.containedEdges = {};

            // Transfer edges within cluster edges which are clustered
            util.forEach(childCluster.edges, function (clusterEdge) {
              util.forEach(_this2.edges, function (parentClusterEdge) {
                // Assumption: a clustered edge can only be present in a single clustering edge
                // Not tested here
                var index = parentClusterEdge.clusteringEdgeReplacingIds.indexOf(clusterEdge.id);
                if (index === -1) return;

                util.forEach(clusterEdge.clusteringEdgeReplacingIds, function (srcId) {
                  parentClusterEdge.clusteringEdgeReplacingIds.push(srcId);

                  // Maintain correct bookkeeping for transferred edge
                  _this2.body.edges[srcId].edgeReplacedById = parentClusterEdge.id;
                });

                // Remove cluster edge from parent cluster edge
                parentClusterEdge.clusteringEdgeReplacingIds.splice(index, 1);
              });
            });
            childCluster.edges = [];
          }
        }]);
        return Cluster;
      }(Node);

      exports["default"] = Cluster;

      /***/
    },
    /* 229 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * Initializes window.requestAnimationFrame() to a usable form.
       *
       * Specifically, set up this method for the case of running on node.js with jsdom enabled.
       *
       * NOTES:
       *
       * * On node.js, when calling this directly outside of this class, `window` is not defined.
       *   This happens even if jsdom is used.
       * * For node.js + jsdom, `window` is available at the moment the constructor is called.
       *   For this reason, the called is placed within the constructor.
       * * Even then, `window.requestAnimationFrame()` is not defined, so it still needs to be added.
       * * During unit testing, it happens that the window object is reset during execution, causing
       *   a runtime error due to missing `requestAnimationFrame()`. This needs to be compensated for,
       *   see `_requestNextFrame()`.
       * * Since this is a global object, it may affect other modules besides `Network`. With normal
       *   usage, this does not cause any problems. During unit testing, errors may occur. These have
       *   been compensated for, see comment block in _requestNextFrame().
       *
       * @private
       */
      function _initRequestAnimationFrame() {
        var func;

        if (window !== undefined) {
          func = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
        }

        if (func === undefined) {
          // window or method not present, setting mock requestAnimationFrame
          window.requestAnimationFrame = function (callback) {
            //console.log("Called mock requestAnimationFrame");
            callback();
          };
        } else {
          window.requestAnimationFrame = func;
        }
      }

      var util = __webpack_require__(2);

      /**
       * The canvas renderer
       */

      var CanvasRenderer = function () {
        /**
         * @param {Object} body
         * @param {Canvas} canvas
         */
        function CanvasRenderer(body, canvas) {
          (0, _classCallCheck3["default"])(this, CanvasRenderer);

          _initRequestAnimationFrame();
          this.body = body;
          this.canvas = canvas;

          this.redrawRequested = false;
          this.renderTimer = undefined;
          this.requiresTimeout = true;
          this.renderingActive = false;
          this.renderRequests = 0;
          this.allowRedraw = true;

          this.dragging = false;
          this.options = {};
          this.defaultOptions = {
            hideEdgesOnDrag: false,
            hideNodesOnDrag: false
          };
          util.extend(this.options, this.defaultOptions);

          this._determineBrowserMethod();
          this.bindEventListeners();
        }

        /**
         * Binds event listeners
         */

        (0, _createClass3["default"])(CanvasRenderer, [{
          key: "bindEventListeners",
          value: function bindEventListeners() {
            var _this = this;

            this.body.emitter.on("dragStart", function () {
              _this.dragging = true;
            });
            this.body.emitter.on("dragEnd", function () {
              _this.dragging = false;
            });
            this.body.emitter.on("_resizeNodes", function () {
              _this._resizeNodes();
            });
            this.body.emitter.on("_redraw", function () {
              if (_this.renderingActive === false) {
                _this._redraw();
              }
            });
            this.body.emitter.on("_blockRedraw", function () {
              _this.allowRedraw = false;
            });
            this.body.emitter.on("_allowRedraw", function () {
              _this.allowRedraw = true;_this.redrawRequested = false;
            });
            this.body.emitter.on("_requestRedraw", this._requestRedraw.bind(this));
            this.body.emitter.on("_startRendering", function () {
              _this.renderRequests += 1;
              _this.renderingActive = true;
              _this._startRendering();
            });
            this.body.emitter.on("_stopRendering", function () {
              _this.renderRequests -= 1;
              _this.renderingActive = _this.renderRequests > 0;
              _this.renderTimer = undefined;
            });
            this.body.emitter.on('destroy', function () {
              _this.renderRequests = 0;
              _this.allowRedraw = false;
              _this.renderingActive = false;
              if (_this.requiresTimeout === true) {
                clearTimeout(_this.renderTimer);
              } else {
                window.cancelAnimationFrame(_this.renderTimer);
              }
              _this.body.emitter.off();
            });
          }

          /**
           *
           * @param {Object} options
           */

        }, {
          key: "setOptions",
          value: function setOptions(options) {
            if (options !== undefined) {
              var fields = ['hideEdgesOnDrag', 'hideNodesOnDrag'];
              util.selectiveDeepExtend(fields, this.options, options);
            }
          }

          /**
           * Prepare the drawing of the next frame.
           *
           * Calls the callback when the next frame can or will be drawn.
           *
           * @param {function} callback
           * @param {number} delay - timeout case only, wait this number of milliseconds
           * @returns {function|undefined}
           * @private
           */

        }, {
          key: "_requestNextFrame",
          value: function _requestNextFrame(callback, delay) {
            // During unit testing, it happens that the mock window object is reset while
            // the next frame is still pending. Then, either 'window' is not present, or
            // 'requestAnimationFrame()' is not present because it is not defined on the
            // mock window object.
            //
            // As a consequence, unrelated unit tests may appear to fail, even if the problem
            // described happens in the current unit test.
            //
            // This is not something that will happen in normal operation, but we still need
            // to take it into account.
            //
            if (typeof window === 'undefined') return; // Doing `if (window === undefined)` does not work here!

            var timer = void 0;

            var myWindow = window; // Grab a reference to reduce the possibility that 'window' is reset
            // while running this method.

            if (this.requiresTimeout === true) {
              // wait given number of milliseconds and perform the animation step function
              timer = myWindow.setTimeout(callback, delay);
            } else {
              if (myWindow.requestAnimationFrame) {
                timer = myWindow.requestAnimationFrame(callback);
              }
            }

            return timer;
          }

          /**
           *
           * @private
           */

        }, {
          key: "_startRendering",
          value: function _startRendering() {
            if (this.renderingActive === true) {
              if (this.renderTimer === undefined) {
                this.renderTimer = this._requestNextFrame(this._renderStep.bind(this), this.simulationInterval);
              }
            }
          }

          /**
           *
           * @private
           */

        }, {
          key: "_renderStep",
          value: function _renderStep() {
            if (this.renderingActive === true) {
              // reset the renderTimer so a new scheduled animation step can be set
              this.renderTimer = undefined;

              if (this.requiresTimeout === true) {
                // this schedules a new simulation step
                this._startRendering();
              }

              this._redraw();

              if (this.requiresTimeout === false) {
                // this schedules a new simulation step
                this._startRendering();
              }
            }
          }

          /**
           * Redraw the network with the current data
           * chart will be resized too.
           */

        }, {
          key: "redraw",
          value: function redraw() {
            this.body.emitter.emit('setSize');
            this._redraw();
          }

          /**
           * Redraw the network with the current data
           * @private
           */

        }, {
          key: "_requestRedraw",
          value: function _requestRedraw() {
            var _this2 = this;

            if (this.redrawRequested !== true && this.renderingActive === false && this.allowRedraw === true) {
              this.redrawRequested = true;
              this._requestNextFrame(function () {
                _this2._redraw(false);
              }, 0);
            }
          }

          /**
           * Redraw the network with the current data
           * @param {boolean} [hidden=false] | Used to get the first estimate of the node sizes.
           *                                   Only the nodes are drawn after which they are quickly drawn over.
           * @private
           */

        }, {
          key: "_redraw",
          value: function _redraw() {
            var hidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (this.allowRedraw === true) {
              this.body.emitter.emit("initRedraw");

              this.redrawRequested = false;

              // when the container div was hidden, this fixes it back up!
              if (this.canvas.frame.canvas.width === 0 || this.canvas.frame.canvas.height === 0) {
                this.canvas.setSize();
              }

              this.canvas.setTransform();

              var ctx = this.canvas.getContext();

              // clear the canvas
              var w = this.canvas.frame.canvas.clientWidth;
              var h = this.canvas.frame.canvas.clientHeight;
              ctx.clearRect(0, 0, w, h);

              // if the div is hidden, we stop the redraw here for performance.
              if (this.canvas.frame.clientWidth === 0) {
                return;
              }

              // set scaling and translation
              ctx.save();
              ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
              ctx.scale(this.body.view.scale, this.body.view.scale);

              ctx.beginPath();
              this.body.emitter.emit("beforeDrawing", ctx);
              ctx.closePath();

              if (hidden === false) {
                if (this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) {
                  this._drawEdges(ctx);
                }
              }

              if (this.dragging === false || this.dragging === true && this.options.hideNodesOnDrag === false) {
                this._drawNodes(ctx, hidden);
              }

              ctx.beginPath();
              this.body.emitter.emit("afterDrawing", ctx);
              ctx.closePath();

              // restore original scaling and translation
              ctx.restore();
              if (hidden === true) {
                ctx.clearRect(0, 0, w, h);
              }
            }
          }

          /**
           * Redraw all nodes
           *
           * @param {CanvasRenderingContext2D}   ctx
           * @param {boolean} [alwaysShow]
           * @private
           */

        }, {
          key: "_resizeNodes",
          value: function _resizeNodes() {
            this.canvas.setTransform();
            var ctx = this.canvas.getContext();
            ctx.save();
            ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
            ctx.scale(this.body.view.scale, this.body.view.scale);

            var nodes = this.body.nodes;
            var node = void 0;

            // resize all nodes
            for (var nodeId in nodes) {
              if (nodes.hasOwnProperty(nodeId)) {
                node = nodes[nodeId];
                node.resize(ctx);
                node.updateBoundingBox(ctx, node.selected);
              }
            }

            // restore original scaling and translation
            ctx.restore();
          }

          /**
           * Redraw all nodes
           *
           * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas
           * @param {boolean} [alwaysShow]
           * @private
           */

        }, {
          key: "_drawNodes",
          value: function _drawNodes(ctx) {
            var alwaysShow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var nodes = this.body.nodes;
            var nodeIndices = this.body.nodeIndices;
            var node = void 0;
            var selected = [];
            var margin = 20;
            var topLeft = this.canvas.DOMtoCanvas({ x: -margin, y: -margin });
            var bottomRight = this.canvas.DOMtoCanvas({
              x: this.canvas.frame.canvas.clientWidth + margin,
              y: this.canvas.frame.canvas.clientHeight + margin
            });
            var viewableArea = { top: topLeft.y, left: topLeft.x, bottom: bottomRight.y, right: bottomRight.x };

            // draw unselected nodes;
            for (var i = 0; i < nodeIndices.length; i++) {
              node = nodes[nodeIndices[i]];
              // set selected nodes aside
              if (node.isSelected()) {
                selected.push(nodeIndices[i]);
              } else {
                if (alwaysShow === true) {
                  node.draw(ctx);
                } else if (node.isBoundingBoxOverlappingWith(viewableArea) === true) {
                  node.draw(ctx);
                } else {
                  node.updateBoundingBox(ctx, node.selected);
                }
              }
            }

            // draw the selected nodes on top
            for (var _i = 0; _i < selected.length; _i++) {
              node = nodes[selected[_i]];
              node.draw(ctx);
            }
          }

          /**
           * Redraw all edges
           * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas
           * @private
           */

        }, {
          key: "_drawEdges",
          value: function _drawEdges(ctx) {
            var edges = this.body.edges;
            var edgeIndices = this.body.edgeIndices;
            var edge = void 0;

            for (var i = 0; i < edgeIndices.length; i++) {
              edge = edges[edgeIndices[i]];
              if (edge.connected === true) {
                edge.draw(ctx);
              }
            }
          }

          /**
           * Determine if the browser requires a setTimeout or a requestAnimationFrame. This was required because
           * some implementations (safari and IE9) did not support requestAnimationFrame
           * @private
           */

        }, {
          key: "_determineBrowserMethod",
          value: function _determineBrowserMethod() {
            if (typeof window !== 'undefined') {
              var browserType = navigator.userAgent.toLowerCase();
              this.requiresTimeout = false;
              if (browserType.indexOf('msie 9.0') != -1) {
                // IE 9
                this.requiresTimeout = true;
              } else if (browserType.indexOf('safari') != -1) {
                // safari
                if (browserType.indexOf('chrome') <= -1) {
                  this.requiresTimeout = true;
                }
              }
            } else {
              this.requiresTimeout = true;
            }
          }
        }]);
        return CanvasRenderer;
      }();

      exports["default"] = CanvasRenderer;

      /***/
    },
    /* 230 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var Hammer = __webpack_require__(10);
      var hammerUtil = __webpack_require__(37);

      var util = __webpack_require__(2);

      /**
       * Create the main frame for the Network.
       * This function is executed once when a Network object is created. The frame
       * contains a canvas, and this canvas contains all objects like the axis and
       * nodes.
       */

      var Canvas = function () {
        /**
         * @param {Object} body
         */
        function Canvas(body) {
          (0, _classCallCheck3['default'])(this, Canvas);

          this.body = body;
          this.pixelRatio = 1;
          this.resizeTimer = undefined;
          this.resizeFunction = this._onResize.bind(this);
          this.cameraState = {};
          this.initialized = false;
          this.canvasViewCenter = {};

          this.options = {};
          this.defaultOptions = {
            autoResize: true,
            height: '100%',
            width: '100%'
          };
          util.extend(this.options, this.defaultOptions);

          this.bindEventListeners();
        }

        /**
         * Binds event listeners
         */

        (0, _createClass3['default'])(Canvas, [{
          key: 'bindEventListeners',
          value: function bindEventListeners() {
            var _this = this;

            // bind the events
            this.body.emitter.once("resize", function (obj) {
              if (obj.width !== 0) {
                _this.body.view.translation.x = obj.width * 0.5;
              }
              if (obj.height !== 0) {
                _this.body.view.translation.y = obj.height * 0.5;
              }
            });
            this.body.emitter.on("setSize", this.setSize.bind(this));
            this.body.emitter.on("destroy", function () {
              _this.hammerFrame.destroy();
              _this.hammer.destroy();
              _this._cleanUp();
            });
          }

          /**
           * @param {Object} options
           */

        }, {
          key: 'setOptions',
          value: function setOptions(options) {
            var _this2 = this;

            if (options !== undefined) {
              var fields = ['width', 'height', 'autoResize'];
              util.selectiveDeepExtend(fields, this.options, options);
            }

            if (this.options.autoResize === true) {
              // automatically adapt to a changing size of the browser.
              this._cleanUp();
              this.resizeTimer = setInterval(function () {
                var changed = _this2.setSize();
                if (changed === true) {
                  _this2.body.emitter.emit("_requestRedraw");
                }
              }, 1000);
              this.resizeFunction = this._onResize.bind(this);
              util.addEventListener(window, 'resize', this.resizeFunction);
            }
          }

          /**
           * @private
           */

        }, {
          key: '_cleanUp',
          value: function _cleanUp() {
            // automatically adapt to a changing size of the browser.
            if (this.resizeTimer !== undefined) {
              clearInterval(this.resizeTimer);
            }
            util.removeEventListener(window, 'resize', this.resizeFunction);
            this.resizeFunction = undefined;
          }

          /**
           * @private
           */

        }, {
          key: '_onResize',
          value: function _onResize() {
            this.setSize();
            this.body.emitter.emit("_redraw");
          }

          /**
           * Get and store the cameraState
           *
           * @param {number} [pixelRatio=this.pixelRatio]
           * @private
           */

        }, {
          key: '_getCameraState',
          value: function _getCameraState() {
            var pixelRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.pixelRatio;

            if (this.initialized === true) {
              this.cameraState.previousWidth = this.frame.canvas.width / pixelRatio;
              this.cameraState.previousHeight = this.frame.canvas.height / pixelRatio;
              this.cameraState.scale = this.body.view.scale;
              this.cameraState.position = this.DOMtoCanvas({
                x: 0.5 * this.frame.canvas.width / pixelRatio,
                y: 0.5 * this.frame.canvas.height / pixelRatio
              });
            }
          }

          /**
           * Set the cameraState
           * @private
           */

        }, {
          key: '_setCameraState',
          value: function _setCameraState() {
            if (this.cameraState.scale !== undefined && this.frame.canvas.clientWidth !== 0 && this.frame.canvas.clientHeight !== 0 && this.pixelRatio !== 0 && this.cameraState.previousWidth > 0) {

              var widthRatio = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth;
              var heightRatio = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight;
              var newScale = this.cameraState.scale;

              if (widthRatio != 1 && heightRatio != 1) {
                newScale = this.cameraState.scale * 0.5 * (widthRatio + heightRatio);
              } else if (widthRatio != 1) {
                newScale = this.cameraState.scale * widthRatio;
              } else if (heightRatio != 1) {
                newScale = this.cameraState.scale * heightRatio;
              }

              this.body.view.scale = newScale;
              // this comes from the view module.
              var currentViewCenter = this.DOMtoCanvas({
                x: 0.5 * this.frame.canvas.clientWidth,
                y: 0.5 * this.frame.canvas.clientHeight
              });

              var distanceFromCenter = { // offset from view, distance view has to change by these x and y to center the node
                x: currentViewCenter.x - this.cameraState.position.x,
                y: currentViewCenter.y - this.cameraState.position.y
              };
              this.body.view.translation.x += distanceFromCenter.x * this.body.view.scale;
              this.body.view.translation.y += distanceFromCenter.y * this.body.view.scale;
            }
          }

          /**
           *
           * @param {number|string} value
           * @returns {string}
           * @private
           */

        }, {
          key: '_prepareValue',
          value: function _prepareValue(value) {
            if (typeof value === 'number') {
              return value + 'px';
            } else if (typeof value === 'string') {
              if (value.indexOf('%') !== -1 || value.indexOf('px') !== -1) {
                return value;
              } else if (value.indexOf('%') === -1) {
                return value + 'px';
              }
            }
            throw new Error('Could not use the value supplied for width or height:' + value);
          }

          /**
           * Create the HTML
           */

        }, {
          key: '_create',
          value: function _create() {
            // remove all elements from the container element.
            while (this.body.container.hasChildNodes()) {
              this.body.container.removeChild(this.body.container.firstChild);
            }

            this.frame = document.createElement('div');
            this.frame.className = 'vis-network';
            this.frame.style.position = 'relative';
            this.frame.style.overflow = 'hidden';
            this.frame.tabIndex = 900; // tab index is required for keycharm to bind keystrokes to the div instead of the window

            //////////////////////////////////////////////////////////////////

            this.frame.canvas = document.createElement("canvas");
            this.frame.canvas.style.position = 'relative';
            this.frame.appendChild(this.frame.canvas);

            if (!this.frame.canvas.getContext) {
              var noCanvas = document.createElement('DIV');
              noCanvas.style.color = 'red';
              noCanvas.style.fontWeight = 'bold';
              noCanvas.style.padding = '10px';
              noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
              this.frame.canvas.appendChild(noCanvas);
            } else {
              this._setPixelRatio();
              this.setTransform();
            }

            // add the frame to the container element
            this.body.container.appendChild(this.frame);

            this.body.view.scale = 1;
            this.body.view.translation = { x: 0.5 * this.frame.canvas.clientWidth, y: 0.5 * this.frame.canvas.clientHeight };

            this._bindHammer();
          }

          /**
           * This function binds hammer, it can be repeated over and over due to the uniqueness check.
           * @private
           */

        }, {
          key: '_bindHammer',
          value: function _bindHammer() {
            var _this3 = this;

            if (this.hammer !== undefined) {
              this.hammer.destroy();
            }
            this.drag = {};
            this.pinch = {};

            // init hammer
            this.hammer = new Hammer(this.frame.canvas);
            this.hammer.get('pinch').set({ enable: true });
            // enable to get better response, todo: test on mobile.
            this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_ALL });

            hammerUtil.onTouch(this.hammer, function (event) {
              _this3.body.eventListeners.onTouch(event);
            });
            this.hammer.on('tap', function (event) {
              _this3.body.eventListeners.onTap(event);
            });
            this.hammer.on('doubletap', function (event) {
              _this3.body.eventListeners.onDoubleTap(event);
            });
            this.hammer.on('press', function (event) {
              _this3.body.eventListeners.onHold(event);
            });
            this.hammer.on('panstart', function (event) {
              _this3.body.eventListeners.onDragStart(event);
            });
            this.hammer.on('panmove', function (event) {
              _this3.body.eventListeners.onDrag(event);
            });
            this.hammer.on('panend', function (event) {
              _this3.body.eventListeners.onDragEnd(event);
            });
            this.hammer.on('pinch', function (event) {
              _this3.body.eventListeners.onPinch(event);
            });

            // TODO: neatly cleanup these handlers when re-creating the Canvas, IF these are done with hammer, event.stopPropagation will not work?
            this.frame.canvas.addEventListener('mousewheel', function (event) {
              _this3.body.eventListeners.onMouseWheel(event);
            });
            this.frame.canvas.addEventListener('DOMMouseScroll', function (event) {
              _this3.body.eventListeners.onMouseWheel(event);
            });

            this.frame.canvas.addEventListener('mousemove', function (event) {
              _this3.body.eventListeners.onMouseMove(event);
            });
            this.frame.canvas.addEventListener('contextmenu', function (event) {
              _this3.body.eventListeners.onContext(event);
            });

            this.hammerFrame = new Hammer(this.frame);
            hammerUtil.onRelease(this.hammerFrame, function (event) {
              _this3.body.eventListeners.onRelease(event);
            });
          }

          /**
           * Set a new size for the network
           * @param {string} width   Width in pixels or percentage (for example '800px'
           *                         or '50%')
           * @param {string} height  Height in pixels or percentage  (for example '400px'
           *                         or '30%')
           * @returns {boolean}
           */

        }, {
          key: 'setSize',
          value: function setSize() {
            var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.width;
            var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.height;

            width = this._prepareValue(width);
            height = this._prepareValue(height);

            var emitEvent = false;
            var oldWidth = this.frame.canvas.width;
            var oldHeight = this.frame.canvas.height;

            // update the pixel ratio
            //
            // NOTE: Comment in following is rather inconsistent; this is the ONLY place in the code
            //       where it is assumed that the pixel ratio could change at runtime.
            //       The only way I can think of this happening is a rotating screen or tablet; but then
            //       there should be a mechanism for reloading the data (TODO: check if this is present).
            //
            //       If the assumption is true (i.e. pixel ratio can change at runtime), then *all* usage
            //       of pixel ratio must be overhauled for this.
            //
            //       For the time being, I will humor the assumption here, and in the rest of the code assume it is
            //       constant.
            var previousRatio = this.pixelRatio; // we cache this because the camera state storage needs the old value
            this._setPixelRatio();

            if (width != this.options.width || height != this.options.height || this.frame.style.width != width || this.frame.style.height != height) {
              this._getCameraState(previousRatio);

              this.frame.style.width = width;
              this.frame.style.height = height;

              this.frame.canvas.style.width = '100%';
              this.frame.canvas.style.height = '100%';

              this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
              this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);

              this.options.width = width;
              this.options.height = height;

              this.canvasViewCenter = {
                x: 0.5 * this.frame.clientWidth,
                y: 0.5 * this.frame.clientHeight
              };

              emitEvent = true;
            } else {
              // this would adapt the width of the canvas to the width from 100% if and only if
              // there is a change.

              var newWidth = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
              var newHeight = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);

              // store the camera if there is a change in size.
              if (this.frame.canvas.width !== newWidth || this.frame.canvas.height !== newHeight) {
                this._getCameraState(previousRatio);
              }

              if (this.frame.canvas.width !== newWidth) {
                this.frame.canvas.width = newWidth;
                emitEvent = true;
              }
              if (this.frame.canvas.height !== newHeight) {
                this.frame.canvas.height = newHeight;
                emitEvent = true;
              }
            }

            if (emitEvent === true) {
              this.body.emitter.emit('resize', {
                width: Math.round(this.frame.canvas.width / this.pixelRatio),
                height: Math.round(this.frame.canvas.height / this.pixelRatio),
                oldWidth: Math.round(oldWidth / this.pixelRatio),
                oldHeight: Math.round(oldHeight / this.pixelRatio)
              });

              // restore the camera on change.
              this._setCameraState();
            }

            // set initialized so the get and set camera will work from now on.
            this.initialized = true;
            return emitEvent;
          }

          /**
           *
           * @returns {CanvasRenderingContext2D}
           */

        }, {
          key: 'getContext',
          value: function getContext() {
            return this.frame.canvas.getContext("2d");
          }

          /**
           * Determine the pixel ratio for various browsers.
           *
           * @returns {number}
           * @private
           */

        }, {
          key: '_determinePixelRatio',
          value: function _determinePixelRatio() {
            var ctx = this.getContext();
            if (ctx === undefined) {
              throw new Error("Could not get canvax context");
            }

            var numerator = 1;
            if (typeof window !== 'undefined') {
              // (window !== undefined) doesn't work here!
              // Protection during unit tests, where 'window' can be missing
              numerator = window.devicePixelRatio || 1;
            }

            var denominator = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;

            return numerator / denominator;
          }

          /**
           * Lazy determination of pixel ratio.
           *
           * @private
           */

        }, {
          key: '_setPixelRatio',
          value: function _setPixelRatio() {
            this.pixelRatio = this._determinePixelRatio();
          }

          /**
           * Set the transform in the contained context, based on its pixelRatio
           */

        }, {
          key: 'setTransform',
          value: function setTransform() {
            var ctx = this.getContext();
            if (ctx === undefined) {
              throw new Error("Could not get canvax context");
            }

            ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
          }

          /**
           * Convert the X coordinate in DOM-space (coordinate point in browser relative to the container div) to
           * the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
           * @param {number} x
           * @returns {number}
           * @private
           */

        }, {
          key: '_XconvertDOMtoCanvas',
          value: function _XconvertDOMtoCanvas(x) {
            return (x - this.body.view.translation.x) / this.body.view.scale;
          }

          /**
           * Convert the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
           * the X coordinate in DOM-space (coordinate point in browser relative to the container div)
           * @param {number} x
           * @returns {number}
           * @private
           */

        }, {
          key: '_XconvertCanvasToDOM',
          value: function _XconvertCanvasToDOM(x) {
            return x * this.body.view.scale + this.body.view.translation.x;
          }

          /**
           * Convert the Y coordinate in DOM-space (coordinate point in browser relative to the container div) to
           * the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
           * @param {number} y
           * @returns {number}
           * @private
           */

        }, {
          key: '_YconvertDOMtoCanvas',
          value: function _YconvertDOMtoCanvas(y) {
            return (y - this.body.view.translation.y) / this.body.view.scale;
          }

          /**
           * Convert the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
           * the Y coordinate in DOM-space (coordinate point in browser relative to the container div)
           * @param {number} y
           * @returns {number}
           * @private
           */

        }, {
          key: '_YconvertCanvasToDOM',
          value: function _YconvertCanvasToDOM(y) {
            return y * this.body.view.scale + this.body.view.translation.y;
          }

          /**
           * @param {point} pos
           * @returns {point}
           */

        }, {
          key: 'canvasToDOM',
          value: function canvasToDOM(pos) {
            return { x: this._XconvertCanvasToDOM(pos.x), y: this._YconvertCanvasToDOM(pos.y) };
          }

          /**
           *
           * @param {point} pos
           * @returns {point}
           */

        }, {
          key: 'DOMtoCanvas',
          value: function DOMtoCanvas(pos) {
            return { x: this._XconvertDOMtoCanvas(pos.x), y: this._YconvertDOMtoCanvas(pos.y) };
          }
        }]);
        return Canvas;
      }();

      exports['default'] = Canvas;

      /***/
    },
    /* 231 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);

      var NetworkUtil = __webpack_require__(76)['default'];

      /**
       * The view
       */

      var View = function () {
        /**
         * @param {Object} body
         * @param {Canvas} canvas
         */
        function View(body, canvas) {
          var _this = this;

          (0, _classCallCheck3['default'])(this, View);

          this.body = body;
          this.canvas = canvas;

          this.animationSpeed = 1 / this.renderRefreshRate;
          this.animationEasingFunction = "easeInOutQuint";
          this.easingTime = 0;
          this.sourceScale = 0;
          this.targetScale = 0;
          this.sourceTranslation = 0;
          this.targetTranslation = 0;
          this.lockedOnNodeId = undefined;
          this.lockedOnNodeOffset = undefined;
          this.touchTime = 0;

          this.viewFunction = undefined;

          this.body.emitter.on("fit", this.fit.bind(this));
          this.body.emitter.on("animationFinished", function () {
            _this.body.emitter.emit("_stopRendering");
          });
          this.body.emitter.on("unlockNode", this.releaseNode.bind(this));
        }

        /**
         *
         * @param {Object} [options={}]
         */

        (0, _createClass3['default'])(View, [{
          key: 'setOptions',
          value: function setOptions() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            this.options = options;
          }

          /**
           * This function zooms out to fit all data on screen based on amount of nodes
           * @param {Object} [options={{nodes=Array}}]
           * @param {boolean} [initialZoom=false]  | zoom based on fitted formula or range, true = fitted, default = false;
           */

        }, {
          key: 'fit',
          value: function fit() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { nodes: [] };
            var initialZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var range = void 0;
            var zoomLevel = void 0;
            if (options.nodes === undefined || options.nodes.length === 0) {
              options.nodes = this.body.nodeIndices;
            }

            if (initialZoom === true) {
              // check if more than half of the nodes have a predefined position. If so, we use the range, not the approximation.
              var positionDefined = 0;
              for (var nodeId in this.body.nodes) {
                if (this.body.nodes.hasOwnProperty(nodeId)) {
                  var node = this.body.nodes[nodeId];
                  if (node.predefinedPosition === true) {
                    positionDefined += 1;
                  }
                }
              }
              if (positionDefined > 0.5 * this.body.nodeIndices.length) {
                this.fit(options, false);
                return;
              }

              range = NetworkUtil.getRange(this.body.nodes, options.nodes);

              var numberOfNodes = this.body.nodeIndices.length;
              zoomLevel = 12.662 / (numberOfNodes + 7.4147) + 0.0964822; // this is obtained from fitting a dataset from 5 points with scale levels that looked good.

              // correct for larger canvasses.
              var factor = Math.min(this.canvas.frame.canvas.clientWidth / 600, this.canvas.frame.canvas.clientHeight / 600);
              zoomLevel *= factor;
            } else {
              this.body.emitter.emit("_resizeNodes");
              range = NetworkUtil.getRange(this.body.nodes, options.nodes);

              var xDistance = Math.abs(range.maxX - range.minX) * 1.1;
              var yDistance = Math.abs(range.maxY - range.minY) * 1.1;

              var xZoomLevel = this.canvas.frame.canvas.clientWidth / xDistance;
              var yZoomLevel = this.canvas.frame.canvas.clientHeight / yDistance;

              zoomLevel = xZoomLevel <= yZoomLevel ? xZoomLevel : yZoomLevel;
            }

            if (zoomLevel > 1.0) {
              zoomLevel = 1.0;
            } else if (zoomLevel === 0) {
              zoomLevel = 1.0;
            }

            var center = NetworkUtil.findCenter(range);
            var animationOptions = { position: center, scale: zoomLevel, animation: options.animation };
            this.moveTo(animationOptions);
          }

          // animation

          /**
           * Center a node in view.
           *
           * @param {number} nodeId
           * @param {number} [options]
           */

        }, {
          key: 'focus',
          value: function focus(nodeId) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (this.body.nodes[nodeId] !== undefined) {
              var nodePosition = { x: this.body.nodes[nodeId].x, y: this.body.nodes[nodeId].y };
              options.position = nodePosition;
              options.lockedOnNode = nodeId;

              this.moveTo(options);
            } else {
              console.log("Node: " + nodeId + " cannot be found.");
            }
          }

          /**
           *
           * @param {Object} options  |  options.offset   = {x:number, y:number}   // offset from the center in DOM pixels
           *                          |  options.scale    = number                 // scale to move to
           *                          |  options.position = {x:number, y:number}   // position to move to
           *                          |  options.animation = {duration:number, easingFunction:String} || Boolean   // position to move to
           */

        }, {
          key: 'moveTo',
          value: function moveTo(options) {
            if (options === undefined) {
              options = {};
              return;
            }
            if (options.offset === undefined) {
              options.offset = { x: 0, y: 0 };
            }
            if (options.offset.x === undefined) {
              options.offset.x = 0;
            }
            if (options.offset.y === undefined) {
              options.offset.y = 0;
            }
            if (options.scale === undefined) {
              options.scale = this.body.view.scale;
            }
            if (options.position === undefined) {
              options.position = this.getViewPosition();
            }
            if (options.animation === undefined) {
              options.animation = { duration: 0 };
            }
            if (options.animation === false) {
              options.animation = { duration: 0 };
            }
            if (options.animation === true) {
              options.animation = {};
            }
            if (options.animation.duration === undefined) {
              options.animation.duration = 1000;
            } // default duration
            if (options.animation.easingFunction === undefined) {
              options.animation.easingFunction = "easeInOutQuad";
            } // default easing function

            this.animateView(options);
          }

          /**
           *
           * @param {Object} options  |  options.offset   = {x:number, y:number}   // offset from the center in DOM pixels
           *                          |  options.time     = number                 // animation time in milliseconds
           *                          |  options.scale    = number                 // scale to animate to
           *                          |  options.position = {x:number, y:number}   // position to animate to
           *                          |  options.easingFunction = String           // linear, easeInQuad, easeOutQuad, easeInOutQuad,
           *                                                                       // easeInCubic, easeOutCubic, easeInOutCubic,
           *                                                                       // easeInQuart, easeOutQuart, easeInOutQuart,
           *                                                                       // easeInQuint, easeOutQuint, easeInOutQuint
           */

        }, {
          key: 'animateView',
          value: function animateView(options) {
            if (options === undefined) {
              return;
            }
            this.animationEasingFunction = options.animation.easingFunction;
            // release if something focussed on the node
            this.releaseNode();
            if (options.locked === true) {
              this.lockedOnNodeId = options.lockedOnNode;
              this.lockedOnNodeOffset = options.offset;
            }

            // forcefully complete the old animation if it was still running
            if (this.easingTime != 0) {
              this._transitionRedraw(true); // by setting easingtime to 1, we finish the animation.
            }

            this.sourceScale = this.body.view.scale;
            this.sourceTranslation = this.body.view.translation;
            this.targetScale = options.scale;

            // set the scale so the viewCenter is based on the correct zoom level. This is overridden in the transitionRedraw
            // but at least then we'll have the target transition
            this.body.view.scale = this.targetScale;
            var viewCenter = this.canvas.DOMtoCanvas({ x: 0.5 * this.canvas.frame.canvas.clientWidth, y: 0.5 * this.canvas.frame.canvas.clientHeight });

            var distanceFromCenter = { // offset from view, distance view has to change by these x and y to center the node
              x: viewCenter.x - options.position.x,
              y: viewCenter.y - options.position.y
            };
            this.targetTranslation = {
              x: this.sourceTranslation.x + distanceFromCenter.x * this.targetScale + options.offset.x,
              y: this.sourceTranslation.y + distanceFromCenter.y * this.targetScale + options.offset.y
            };

            // if the time is set to 0, don't do an animation
            if (options.animation.duration === 0) {
              if (this.lockedOnNodeId != undefined) {
                this.viewFunction = this._lockedRedraw.bind(this);
                this.body.emitter.on("initRedraw", this.viewFunction);
              } else {
                this.body.view.scale = this.targetScale;
                this.body.view.translation = this.targetTranslation;
                this.body.emitter.emit("_requestRedraw");
              }
            } else {
              this.animationSpeed = 1 / (60 * options.animation.duration * 0.001) || 1 / 60; // 60 for 60 seconds, 0.001 for milli's
              this.animationEasingFunction = options.animation.easingFunction;

              this.viewFunction = this._transitionRedraw.bind(this);
              this.body.emitter.on("initRedraw", this.viewFunction);
              this.body.emitter.emit("_startRendering");
            }
          }

          /**
           * used to animate smoothly by hijacking the redraw function.
           * @private
           */

        }, {
          key: '_lockedRedraw',
          value: function _lockedRedraw() {
            var nodePosition = { x: this.body.nodes[this.lockedOnNodeId].x, y: this.body.nodes[this.lockedOnNodeId].y };
            var viewCenter = this.canvas.DOMtoCanvas({ x: 0.5 * this.canvas.frame.canvas.clientWidth, y: 0.5 * this.canvas.frame.canvas.clientHeight });
            var distanceFromCenter = { // offset from view, distance view has to change by these x and y to center the node
              x: viewCenter.x - nodePosition.x,
              y: viewCenter.y - nodePosition.y
            };
            var sourceTranslation = this.body.view.translation;
            var targetTranslation = {
              x: sourceTranslation.x + distanceFromCenter.x * this.body.view.scale + this.lockedOnNodeOffset.x,
              y: sourceTranslation.y + distanceFromCenter.y * this.body.view.scale + this.lockedOnNodeOffset.y
            };

            this.body.view.translation = targetTranslation;
          }

          /**
           * Resets state of a locked on Node
           */

        }, {
          key: 'releaseNode',
          value: function releaseNode() {
            if (this.lockedOnNodeId !== undefined && this.viewFunction !== undefined) {
              this.body.emitter.off("initRedraw", this.viewFunction);
              this.lockedOnNodeId = undefined;
              this.lockedOnNodeOffset = undefined;
            }
          }

          /**
           * @param {boolean} [finished=false]
           * @private
           */

        }, {
          key: '_transitionRedraw',
          value: function _transitionRedraw() {
            var finished = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            this.easingTime += this.animationSpeed;
            this.easingTime = finished === true ? 1.0 : this.easingTime;

            var progress = util.easingFunctions[this.animationEasingFunction](this.easingTime);

            this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * progress;
            this.body.view.translation = {
              x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * progress,
              y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * progress
            };

            // cleanup
            if (this.easingTime >= 1.0) {
              this.body.emitter.off("initRedraw", this.viewFunction);
              this.easingTime = 0;
              if (this.lockedOnNodeId != undefined) {
                this.viewFunction = this._lockedRedraw.bind(this);
                this.body.emitter.on("initRedraw", this.viewFunction);
              }
              this.body.emitter.emit("animationFinished");
            }
          }

          /**
           *
           * @returns {number}
           */

        }, {
          key: 'getScale',
          value: function getScale() {
            return this.body.view.scale;
          }

          /**
           *
           * @returns {{x: number, y: number}}
           */

        }, {
          key: 'getViewPosition',
          value: function getViewPosition() {
            return this.canvas.DOMtoCanvas({ x: 0.5 * this.canvas.frame.canvas.clientWidth, y: 0.5 * this.canvas.frame.canvas.clientHeight });
          }
        }]);
        return View;
      }();

      exports['default'] = View;

      /***/
    },
    /* 232 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var NavigationHandler = __webpack_require__(233)['default'];
      var Popup = __webpack_require__(104)['default'];

      /**
       * Handler for interactions
       */

      var InteractionHandler = function () {
        /**
         * @param {Object} body
         * @param {Canvas} canvas
         * @param {SelectionHandler} selectionHandler
         */
        function InteractionHandler(body, canvas, selectionHandler) {
          (0, _classCallCheck3['default'])(this, InteractionHandler);

          this.body = body;
          this.canvas = canvas;
          this.selectionHandler = selectionHandler;
          this.navigationHandler = new NavigationHandler(body, canvas);

          // bind the events from hammer to functions in this object
          this.body.eventListeners.onTap = this.onTap.bind(this);
          this.body.eventListeners.onTouch = this.onTouch.bind(this);
          this.body.eventListeners.onDoubleTap = this.onDoubleTap.bind(this);
          this.body.eventListeners.onHold = this.onHold.bind(this);
          this.body.eventListeners.onDragStart = this.onDragStart.bind(this);
          this.body.eventListeners.onDrag = this.onDrag.bind(this);
          this.body.eventListeners.onDragEnd = this.onDragEnd.bind(this);
          this.body.eventListeners.onMouseWheel = this.onMouseWheel.bind(this);
          this.body.eventListeners.onPinch = this.onPinch.bind(this);
          this.body.eventListeners.onMouseMove = this.onMouseMove.bind(this);
          this.body.eventListeners.onRelease = this.onRelease.bind(this);
          this.body.eventListeners.onContext = this.onContext.bind(this);

          this.touchTime = 0;
          this.drag = {};
          this.pinch = {};
          this.popup = undefined;
          this.popupObj = undefined;
          this.popupTimer = undefined;

          this.body.functions.getPointer = this.getPointer.bind(this);

          this.options = {};
          this.defaultOptions = {
            dragNodes: true,
            dragView: true,
            hover: false,
            keyboard: {
              enabled: false,
              speed: { x: 10, y: 10, zoom: 0.02 },
              bindToWindow: true
            },
            navigationButtons: false,
            tooltipDelay: 300,
            zoomView: true
          };
          util.extend(this.options, this.defaultOptions);

          this.bindEventListeners();
        }

        /**
         * Binds event listeners
         */

        (0, _createClass3['default'])(InteractionHandler, [{
          key: 'bindEventListeners',
          value: function bindEventListeners() {
            var _this = this;

            this.body.emitter.on('destroy', function () {
              clearTimeout(_this.popupTimer);
              delete _this.body.functions.getPointer;
            });
          }

          /**
           *
           * @param {Object} options
           */

        }, {
          key: 'setOptions',
          value: function setOptions(options) {
            if (options !== undefined) {
              // extend all but the values in fields
              var fields = ['hideEdgesOnDrag', 'hideNodesOnDrag', 'keyboard', 'multiselect', 'selectable', 'selectConnectedEdges'];
              util.selectiveNotDeepExtend(fields, this.options, options);

              // merge the keyboard options in.
              util.mergeOptions(this.options, options, 'keyboard');

              if (options.tooltip) {
                util.extend(this.options.tooltip, options.tooltip);
                if (options.tooltip.color) {
                  this.options.tooltip.color = util.parseColor(options.tooltip.color);
                }
              }
            }

            this.navigationHandler.setOptions(this.options);
          }

          /**
           * Get the pointer location from a touch location
           * @param {{x: number, y: number}} touch
           * @return {{x: number, y: number}} pointer
           * @private
           */

        }, {
          key: 'getPointer',
          value: function getPointer(touch) {
            return {
              x: touch.x - util.getAbsoluteLeft(this.canvas.frame.canvas),
              y: touch.y - util.getAbsoluteTop(this.canvas.frame.canvas)
            };
          }

          /**
           * On start of a touch gesture, store the pointer
           * @param {Event}  event   The event
           * @private
           */

        }, {
          key: 'onTouch',
          value: function onTouch(event) {
            if (new Date().valueOf() - this.touchTime > 50) {
              this.drag.pointer = this.getPointer(event.center);
              this.drag.pinched = false;
              this.pinch.scale = this.body.view.scale;
              // to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)
              this.touchTime = new Date().valueOf();
            }
          }

          /**
           * handle tap/click event: select/unselect a node
           * @param {Event} event
           * @private
           */

        }, {
          key: 'onTap',
          value: function onTap(event) {
            var pointer = this.getPointer(event.center);
            var multiselect = this.selectionHandler.options.multiselect && (event.changedPointers[0].ctrlKey || event.changedPointers[0].metaKey);

            this.checkSelectionChanges(pointer, event, multiselect);
            this.selectionHandler._generateClickEvent('click', event, pointer);
          }

          /**
           * handle doubletap event
           * @param {Event} event
           * @private
           */

        }, {
          key: 'onDoubleTap',
          value: function onDoubleTap(event) {
            var pointer = this.getPointer(event.center);
            this.selectionHandler._generateClickEvent('doubleClick', event, pointer);
          }

          /**
           * handle long tap event: multi select nodes
           * @param {Event} event
           * @private
           */

        }, {
          key: 'onHold',
          value: function onHold(event) {
            var pointer = this.getPointer(event.center);
            var multiselect = this.selectionHandler.options.multiselect;

            this.checkSelectionChanges(pointer, event, multiselect);

            this.selectionHandler._generateClickEvent('click', event, pointer);
            this.selectionHandler._generateClickEvent('hold', event, pointer);
          }

          /**
           * handle the release of the screen
           *
           * @param {Event} event
           * @private
           */

        }, {
          key: 'onRelease',
          value: function onRelease(event) {
            if (new Date().valueOf() - this.touchTime > 10) {
              var pointer = this.getPointer(event.center);
              this.selectionHandler._generateClickEvent('release', event, pointer);
              // to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)
              this.touchTime = new Date().valueOf();
            }
          }

          /**
           *
           * @param {Event} event
           */

        }, {
          key: 'onContext',
          value: function onContext(event) {
            var pointer = this.getPointer({ x: event.clientX, y: event.clientY });
            this.selectionHandler._generateClickEvent('oncontext', event, pointer);
          }

          /**
           * Select and deselect nodes depending current selection change.
           *
           * For changing nodes, select/deselect events are fired.
           *
           * NOTE: For a given edge, if one connecting node is deselected and with the same
           *       click the other node is selected, no events for the edge will fire.
           *       It was selected and it will remain selected.
           *
           * TODO: This is all SelectionHandler calls; the method should be moved to there.
           *
           * @param {{x: number, y: number}} pointer
           * @param {Event} event
           * @param {boolean} [add=false]
           */

        }, {
          key: 'checkSelectionChanges',
          value: function checkSelectionChanges(pointer, event) {
            var add = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var previousSelection = this.selectionHandler.getSelection();
            var selected = false;
            if (add === true) {
              selected = this.selectionHandler.selectAdditionalOnPoint(pointer);
            } else {
              selected = this.selectionHandler.selectOnPoint(pointer);
            }
            var currentSelection = this.selectionHandler.getSelection();

            // See NOTE in method comment for the reason to do it like this
            var deselectedItems = this._determineDifference(previousSelection, currentSelection);
            var selectedItems = this._determineDifference(currentSelection, previousSelection);

            if (deselectedItems.edges.length > 0) {
              this.selectionHandler._generateClickEvent('deselectEdge', event, pointer, previousSelection);
              selected = true;
            }

            if (deselectedItems.nodes.length > 0) {
              this.selectionHandler._generateClickEvent('deselectNode', event, pointer, previousSelection);
              selected = true;
            }

            if (selectedItems.nodes.length > 0) {
              this.selectionHandler._generateClickEvent('selectNode', event, pointer);
              selected = true;
            }

            if (selectedItems.edges.length > 0) {
              this.selectionHandler._generateClickEvent('selectEdge', event, pointer);
              selected = true;
            }

            // fire the select event if anything has been selected or deselected
            if (selected === true) {
              // select or unselect
              this.selectionHandler._generateClickEvent('select', event, pointer);
            }
          }

          /**
           * Remove all node and edge id's from the first set that are present in the second one.
           *
           * @param {{nodes: Array.<Node>, edges: Array.<vis.Edge>}} firstSet
           * @param {{nodes: Array.<Node>, edges: Array.<vis.Edge>}} secondSet
           * @returns {{nodes: Array.<Node>, edges: Array.<vis.Edge>}}
           * @private
           */

        }, {
          key: '_determineDifference',
          value: function _determineDifference(firstSet, secondSet) {
            var arrayDiff = function arrayDiff(firstArr, secondArr) {
              var result = [];

              for (var i = 0; i < firstArr.length; i++) {
                var value = firstArr[i];
                if (secondArr.indexOf(value) === -1) {
                  result.push(value);
                }
              }

              return result;
            };

            return {
              nodes: arrayDiff(firstSet.nodes, secondSet.nodes),
              edges: arrayDiff(firstSet.edges, secondSet.edges)
            };
          }

          /**
           * This function is called by onDragStart.
           * It is separated out because we can then overload it for the datamanipulation system.
           *
           * @param {Event} event
           * @private
           */

        }, {
          key: 'onDragStart',
          value: function onDragStart(event) {
            //in case the touch event was triggered on an external div, do the initial touch now.
            if (this.drag.pointer === undefined) {
              this.onTouch(event);
            }

            // note: drag.pointer is set in onTouch to get the initial touch location
            var node = this.selectionHandler.getNodeAt(this.drag.pointer);

            this.drag.dragging = true;
            this.drag.selection = [];
            this.drag.translation = util.extend({}, this.body.view.translation); // copy the object
            this.drag.nodeId = undefined;

            if (node !== undefined && this.options.dragNodes === true) {
              this.drag.nodeId = node.id;
              // select the clicked node if not yet selected
              if (node.isSelected() === false) {
                this.selectionHandler.unselectAll();
                this.selectionHandler.selectObject(node);
              }

              // after select to contain the node
              this.selectionHandler._generateClickEvent('dragStart', event, this.drag.pointer);

              var selection = this.selectionHandler.selectionObj.nodes;
              // create an array with the selected nodes and their original location and status
              for (var nodeId in selection) {
                if (selection.hasOwnProperty(nodeId)) {
                  var object = selection[nodeId];
                  var s = {
                    id: object.id,
                    node: object,

                    // store original x, y, xFixed and yFixed, make the node temporarily Fixed
                    x: object.x,
                    y: object.y,
                    xFixed: object.options.fixed.x,
                    yFixed: object.options.fixed.y
                  };

                  object.options.fixed.x = true;
                  object.options.fixed.y = true;

                  this.drag.selection.push(s);
                }
              }
            } else {
              // fallback if no node is selected and thus the view is dragged.
              this.selectionHandler._generateClickEvent('dragStart', event, this.drag.pointer, undefined, true);
            }
          }

          /**
           * handle drag event
           * @param {Event} event
           * @private
           */

        }, {
          key: 'onDrag',
          value: function onDrag(event) {
            var _this2 = this;

            if (this.drag.pinched === true) {
              return;
            }

            // remove the focus on node if it is focussed on by the focusOnNode
            this.body.emitter.emit('unlockNode');

            var pointer = this.getPointer(event.center);

            var selection = this.drag.selection;
            if (selection && selection.length && this.options.dragNodes === true) {
              this.selectionHandler._generateClickEvent('dragging', event, pointer);

              // calculate delta's and new location
              var deltaX = pointer.x - this.drag.pointer.x;
              var deltaY = pointer.y - this.drag.pointer.y;

              // update position of all selected nodes
              selection.forEach(function (selection) {
                var node = selection.node;
                // only move the node if it was not fixed initially
                if (selection.xFixed === false) {
                  node.x = _this2.canvas._XconvertDOMtoCanvas(_this2.canvas._XconvertCanvasToDOM(selection.x) + deltaX);
                }
                // only move the node if it was not fixed initially
                if (selection.yFixed === false) {
                  node.y = _this2.canvas._YconvertDOMtoCanvas(_this2.canvas._YconvertCanvasToDOM(selection.y) + deltaY);
                }
              });

              // start the simulation of the physics
              this.body.emitter.emit('startSimulation');
            } else {
              // move the network
              if (this.options.dragView === true) {
                this.selectionHandler._generateClickEvent('dragging', event, pointer, undefined, true);

                // if the drag was not started properly because the click started outside the network div, start it now.
                if (this.drag.pointer === undefined) {
                  this.onDragStart(event);
                  return;
                }
                var diffX = pointer.x - this.drag.pointer.x;
                var diffY = pointer.y - this.drag.pointer.y;

                this.body.view.translation = { x: this.drag.translation.x + diffX, y: this.drag.translation.y + diffY };
                this.body.emitter.emit('_requestRedraw');
              }
            }
          }

          /**
           * handle drag start event
           * @param {Event} event
           * @private
           */

        }, {
          key: 'onDragEnd',
          value: function onDragEnd(event) {
            this.drag.dragging = false;
            var selection = this.drag.selection;
            if (selection && selection.length) {
              selection.forEach(function (s) {
                // restore original xFixed and yFixed
                s.node.options.fixed.x = s.xFixed;
                s.node.options.fixed.y = s.yFixed;
              });
              this.selectionHandler._generateClickEvent('dragEnd', event, this.getPointer(event.center));
              this.body.emitter.emit('startSimulation');
            } else {
              this.selectionHandler._generateClickEvent('dragEnd', event, this.getPointer(event.center), undefined, true);
              this.body.emitter.emit('_requestRedraw');
            }
          }

          /**
           * Handle pinch event
           * @param {Event}  event   The event
           * @private
           */

        }, {
          key: 'onPinch',
          value: function onPinch(event) {
            var pointer = this.getPointer(event.center);

            this.drag.pinched = true;
            if (this.pinch['scale'] === undefined) {
              this.pinch.scale = 1;
            }

            // TODO: enabled moving while pinching?
            var scale = this.pinch.scale * event.scale;
            this.zoom(scale, pointer);
          }

          /**
           * Zoom the network in or out
           * @param {number} scale a number around 1, and between 0.01 and 10
           * @param {{x: number, y: number}} pointer    Position on screen
           * @private
           */

        }, {
          key: 'zoom',
          value: function zoom(scale, pointer) {
            if (this.options.zoomView === true) {
              var scaleOld = this.body.view.scale;
              if (scale < 0.00001) {
                scale = 0.00001;
              }
              if (scale > 10) {
                scale = 10;
              }

              var preScaleDragPointer = undefined;
              if (this.drag !== undefined) {
                if (this.drag.dragging === true) {
                  preScaleDragPointer = this.canvas.DOMtoCanvas(this.drag.pointer);
                }
              }
              // + this.canvas.frame.canvas.clientHeight / 2
              var translation = this.body.view.translation;

              var scaleFrac = scale / scaleOld;
              var tx = (1 - scaleFrac) * pointer.x + translation.x * scaleFrac;
              var ty = (1 - scaleFrac) * pointer.y + translation.y * scaleFrac;

              this.body.view.scale = scale;
              this.body.view.translation = { x: tx, y: ty };

              if (preScaleDragPointer != undefined) {
                var postScaleDragPointer = this.canvas.canvasToDOM(preScaleDragPointer);
                this.drag.pointer.x = postScaleDragPointer.x;
                this.drag.pointer.y = postScaleDragPointer.y;
              }

              this.body.emitter.emit('_requestRedraw');

              if (scaleOld < scale) {
                this.body.emitter.emit('zoom', { direction: '+', scale: this.body.view.scale, pointer: pointer });
              } else {
                this.body.emitter.emit('zoom', { direction: '-', scale: this.body.view.scale, pointer: pointer });
              }
            }
          }

          /**
           * Event handler for mouse wheel event, used to zoom the timeline
           * See http://adomas.org/javascript-mouse-wheel/
           *     https://github.com/EightMedia/hammer.js/issues/256
           * @param {MouseEvent}  event
           * @private
           */

        }, {
          key: 'onMouseWheel',
          value: function onMouseWheel(event) {
            if (this.options.zoomView === true) {
              // retrieve delta
              var delta = 0;
              if (event.wheelDelta) {
                /* IE/Opera. */
                delta = event.wheelDelta / 120;
              } else if (event.detail) {
                /* Mozilla case. */
                // In Mozilla, sign of delta is different than in IE.
                // Also, delta is multiple of 3.
                delta = -event.detail / 3;
              }

              // If delta is nonzero, handle it.
              // Basically, delta is now positive if wheel was scrolled up,
              // and negative, if wheel was scrolled down.
              if (delta !== 0) {

                // calculate the new scale
                var scale = this.body.view.scale;
                var zoom = delta / 10;
                if (delta < 0) {
                  zoom = zoom / (1 - zoom);
                }
                scale *= 1 + zoom;

                // calculate the pointer location
                var pointer = this.getPointer({ x: event.clientX, y: event.clientY });

                // apply the new scale
                this.zoom(scale, pointer);
              }

              // Prevent default actions caused by mouse wheel.
              event.preventDefault();
            }
          }

          /**
           * Mouse move handler for checking whether the title moves over a node with a title.
           * @param  {Event} event
           * @private
           */

        }, {
          key: 'onMouseMove',
          value: function onMouseMove(event) {
            var _this3 = this;

            var pointer = this.getPointer({ x: event.clientX, y: event.clientY });
            var popupVisible = false;

            // check if the previously selected node is still selected
            if (this.popup !== undefined) {
              if (this.popup.hidden === false) {
                this._checkHidePopup(pointer);
              }

              // if the popup was not hidden above
              if (this.popup.hidden === false) {
                popupVisible = true;
                this.popup.setPosition(pointer.x + 3, pointer.y - 5);
                this.popup.show();
              }
            }

            // if we bind the keyboard to the div, we have to highlight it to use it. This highlights it on mouse over.
            if (this.options.keyboard.bindToWindow === false && this.options.keyboard.enabled === true) {
              this.canvas.frame.focus();
            }

            // start a timeout that will check if the mouse is positioned above an element
            if (popupVisible === false) {
              if (this.popupTimer !== undefined) {
                clearInterval(this.popupTimer); // stop any running calculationTimer
                this.popupTimer = undefined;
              }
              if (!this.drag.dragging) {
                this.popupTimer = setTimeout(function () {
                  return _this3._checkShowPopup(pointer);
                }, this.options.tooltipDelay);
              }
            }

            // adding hover highlights
            if (this.options.hover === true) {
              this.selectionHandler.hoverObject(event, pointer);
            }
          }

          /**
           * Check if there is an element on the given position in the network
           * (a node or edge). If so, and if this element has a title,
           * show a popup window with its title.
           *
           * @param {{x:number, y:number}} pointer
           * @private
           */

        }, {
          key: '_checkShowPopup',
          value: function _checkShowPopup(pointer) {
            var x = this.canvas._XconvertDOMtoCanvas(pointer.x);
            var y = this.canvas._YconvertDOMtoCanvas(pointer.y);
            var pointerObj = {
              left: x,
              top: y,
              right: x,
              bottom: y
            };

            var previousPopupObjId = this.popupObj === undefined ? undefined : this.popupObj.id;
            var nodeUnderCursor = false;
            var popupType = 'node';

            // check if a node is under the cursor.
            if (this.popupObj === undefined) {
              // search the nodes for overlap, select the top one in case of multiple nodes
              var nodeIndices = this.body.nodeIndices;
              var nodes = this.body.nodes;
              var node = void 0;
              var overlappingNodes = [];
              for (var i = 0; i < nodeIndices.length; i++) {
                node = nodes[nodeIndices[i]];
                if (node.isOverlappingWith(pointerObj) === true) {
                  if (node.getTitle() !== undefined) {
                    overlappingNodes.push(nodeIndices[i]);
                  }
                }
              }

              if (overlappingNodes.length > 0) {
                // if there are overlapping nodes, select the last one, this is the one which is drawn on top of the others
                this.popupObj = nodes[overlappingNodes[overlappingNodes.length - 1]];
                // if you hover over a node, the title of the edge is not supposed to be shown.
                nodeUnderCursor = true;
              }
            }

            if (this.popupObj === undefined && nodeUnderCursor === false) {
              // search the edges for overlap
              var edgeIndices = this.body.edgeIndices;
              var edges = this.body.edges;
              var edge = void 0;
              var overlappingEdges = [];
              for (var _i = 0; _i < edgeIndices.length; _i++) {
                edge = edges[edgeIndices[_i]];
                if (edge.isOverlappingWith(pointerObj) === true) {
                  if (edge.connected === true && edge.getTitle() !== undefined) {
                    overlappingEdges.push(edgeIndices[_i]);
                  }
                }
              }

              if (overlappingEdges.length > 0) {
                this.popupObj = edges[overlappingEdges[overlappingEdges.length - 1]];
                popupType = 'edge';
              }
            }

            if (this.popupObj !== undefined) {
              // show popup message window
              if (this.popupObj.id !== previousPopupObjId) {
                if (this.popup === undefined) {
                  this.popup = new Popup(this.canvas.frame);
                }

                this.popup.popupTargetType = popupType;
                this.popup.popupTargetId = this.popupObj.id;

                // adjust a small offset such that the mouse cursor is located in the
                // bottom left location of the popup, and you can easily move over the
                // popup area
                this.popup.setPosition(pointer.x + 3, pointer.y - 5);
                this.popup.setText(this.popupObj.getTitle());
                this.popup.show();
                this.body.emitter.emit('showPopup', this.popupObj.id);
              }
            } else {
              if (this.popup !== undefined) {
                this.popup.hide();
                this.body.emitter.emit('hidePopup');
              }
            }
          }

          /**
           * Check if the popup must be hidden, which is the case when the mouse is no
           * longer hovering on the object
           * @param {{x:number, y:number}} pointer
           * @private
           */

        }, {
          key: '_checkHidePopup',
          value: function _checkHidePopup(pointer) {
            var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);

            var stillOnObj = false;
            if (this.popup.popupTargetType === 'node') {
              if (this.body.nodes[this.popup.popupTargetId] !== undefined) {
                stillOnObj = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(pointerObj);

                // if the mouse is still one the node, we have to check if it is not also on one that is drawn on top of it.
                // we initially only check stillOnObj because this is much faster.
                if (stillOnObj === true) {
                  var overNode = this.selectionHandler.getNodeAt(pointer);
                  stillOnObj = overNode === undefined ? false : overNode.id === this.popup.popupTargetId;
                }
              }
            } else {
              if (this.selectionHandler.getNodeAt(pointer) === undefined) {
                if (this.body.edges[this.popup.popupTargetId] !== undefined) {
                  stillOnObj = this.body.edges[this.popup.popupTargetId].isOverlappingWith(pointerObj);
                }
              }
            }

            if (stillOnObj === false) {
              this.popupObj = undefined;
              this.popup.hide();
              this.body.emitter.emit('hidePopup');
            }
          }
        }]);
        return InteractionHandler;
      }();

      exports['default'] = InteractionHandler;

      /***/
    },
    /* 233 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var Hammer = __webpack_require__(10);
      var hammerUtil = __webpack_require__(37);
      var keycharm = __webpack_require__(35);

      /**
       * Navigation Handler
       */

      var NavigationHandler = function () {
        /**
         * @param {Object} body
         * @param {Canvas} canvas
         */
        function NavigationHandler(body, canvas) {
          var _this = this;

          (0, _classCallCheck3['default'])(this, NavigationHandler);

          this.body = body;
          this.canvas = canvas;

          this.iconsCreated = false;
          this.navigationHammers = [];
          this.boundFunctions = {};
          this.touchTime = 0;
          this.activated = false;

          this.body.emitter.on("activate", function () {
            _this.activated = true;_this.configureKeyboardBindings();
          });
          this.body.emitter.on("deactivate", function () {
            _this.activated = false;_this.configureKeyboardBindings();
          });
          this.body.emitter.on("destroy", function () {
            if (_this.keycharm !== undefined) {
              _this.keycharm.destroy();
            }
          });

          this.options = {};
        }

        /**
         *
         * @param {Object} options
         */

        (0, _createClass3['default'])(NavigationHandler, [{
          key: 'setOptions',
          value: function setOptions(options) {
            if (options !== undefined) {
              this.options = options;
              this.create();
            }
          }

          /**
           * Creates or refreshes navigation and sets key bindings
           */

        }, {
          key: 'create',
          value: function create() {
            if (this.options.navigationButtons === true) {
              if (this.iconsCreated === false) {
                this.loadNavigationElements();
              }
            } else if (this.iconsCreated === true) {
              this.cleanNavigation();
            }

            this.configureKeyboardBindings();
          }

          /**
           * Cleans up previous navigation items
           */

        }, {
          key: 'cleanNavigation',
          value: function cleanNavigation() {
            // clean hammer bindings
            if (this.navigationHammers.length != 0) {
              for (var i = 0; i < this.navigationHammers.length; i++) {
                this.navigationHammers[i].destroy();
              }
              this.navigationHammers = [];
            }

            // clean up previous navigation items
            if (this.navigationDOM && this.navigationDOM['wrapper'] && this.navigationDOM['wrapper'].parentNode) {
              this.navigationDOM['wrapper'].parentNode.removeChild(this.navigationDOM['wrapper']);
            }

            this.iconsCreated = false;
          }

          /**
           * Creation of the navigation controls nodes. They are drawn over the rest of the nodes and are not affected by scale and translation
           * they have a triggerFunction which is called on click. If the position of the navigation controls is dependent
           * on this.frame.canvas.clientWidth or this.frame.canvas.clientHeight, we flag horizontalAlignLeft and verticalAlignTop false.
           * This means that the location will be corrected by the _relocateNavigation function on a size change of the canvas.
           *
           * @private
           */

        }, {
          key: 'loadNavigationElements',
          value: function loadNavigationElements() {
            var _this2 = this;

            this.cleanNavigation();

            this.navigationDOM = {};
            var navigationDivs = ['up', 'down', 'left', 'right', 'zoomIn', 'zoomOut', 'zoomExtends'];
            var navigationDivActions = ['_moveUp', '_moveDown', '_moveLeft', '_moveRight', '_zoomIn', '_zoomOut', '_fit'];

            this.navigationDOM['wrapper'] = document.createElement('div');
            this.navigationDOM['wrapper'].className = 'vis-navigation';
            this.canvas.frame.appendChild(this.navigationDOM['wrapper']);

            for (var i = 0; i < navigationDivs.length; i++) {
              this.navigationDOM[navigationDivs[i]] = document.createElement('div');
              this.navigationDOM[navigationDivs[i]].className = 'vis-button vis-' + navigationDivs[i];
              this.navigationDOM['wrapper'].appendChild(this.navigationDOM[navigationDivs[i]]);

              var hammer = new Hammer(this.navigationDOM[navigationDivs[i]]);
              if (navigationDivActions[i] === "_fit") {
                hammerUtil.onTouch(hammer, this._fit.bind(this));
              } else {
                hammerUtil.onTouch(hammer, this.bindToRedraw.bind(this, navigationDivActions[i]));
              }

              this.navigationHammers.push(hammer);
            }

            // use a hammer for the release so we do not require the one used in the rest of the network
            // the one the rest uses can be overloaded by the manipulation system.
            var hammerFrame = new Hammer(this.canvas.frame);
            hammerUtil.onRelease(hammerFrame, function () {
              _this2._stopMovement();
            });
            this.navigationHammers.push(hammerFrame);

            this.iconsCreated = true;
          }

          /**
           *
           * @param {string} action
           */

        }, {
          key: 'bindToRedraw',
          value: function bindToRedraw(action) {
            if (this.boundFunctions[action] === undefined) {
              this.boundFunctions[action] = this[action].bind(this);
              this.body.emitter.on("initRedraw", this.boundFunctions[action]);
              this.body.emitter.emit("_startRendering");
            }
          }

          /**
           *
           * @param {string} action
           */

        }, {
          key: 'unbindFromRedraw',
          value: function unbindFromRedraw(action) {
            if (this.boundFunctions[action] !== undefined) {
              this.body.emitter.off("initRedraw", this.boundFunctions[action]);
              this.body.emitter.emit("_stopRendering");
              delete this.boundFunctions[action];
            }
          }

          /**
           * this stops all movement induced by the navigation buttons
           *
           * @private
           */

        }, {
          key: '_fit',
          value: function _fit() {
            if (new Date().valueOf() - this.touchTime > 700) {
              // TODO: fix ugly hack to avoid hammer's double fireing of event (because we use release?)
              this.body.emitter.emit("fit", { duration: 700 });
              this.touchTime = new Date().valueOf();
            }
          }

          /**
           * this stops all movement induced by the navigation buttons
           *
           * @private
           */

        }, {
          key: '_stopMovement',
          value: function _stopMovement() {
            for (var boundAction in this.boundFunctions) {
              if (this.boundFunctions.hasOwnProperty(boundAction)) {
                this.body.emitter.off("initRedraw", this.boundFunctions[boundAction]);
                this.body.emitter.emit("_stopRendering");
              }
            }
            this.boundFunctions = {};
          }
          /**
           *
           * @private
           */

        }, {
          key: '_moveUp',
          value: function _moveUp() {
            this.body.view.translation.y += this.options.keyboard.speed.y;
          }
          /**
           *
           * @private
           */

        }, {
          key: '_moveDown',
          value: function _moveDown() {
            this.body.view.translation.y -= this.options.keyboard.speed.y;
          }
          /**
           *
           * @private
           */

        }, {
          key: '_moveLeft',
          value: function _moveLeft() {
            this.body.view.translation.x += this.options.keyboard.speed.x;
          }
          /**
           *
           * @private
           */

        }, {
          key: '_moveRight',
          value: function _moveRight() {
            this.body.view.translation.x -= this.options.keyboard.speed.x;
          }
          /**
           *
           * @private
           */

        }, {
          key: '_zoomIn',
          value: function _zoomIn() {
            var scaleOld = this.body.view.scale;
            var scale = this.body.view.scale * (1 + this.options.keyboard.speed.zoom);
            var translation = this.body.view.translation;
            var scaleFrac = scale / scaleOld;
            var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
            var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;

            this.body.view.scale = scale;
            this.body.view.translation = { x: tx, y: ty };
            this.body.emitter.emit('zoom', { direction: '+', scale: this.body.view.scale, pointer: null });
          }

          /**
           *
           * @private
           */

        }, {
          key: '_zoomOut',
          value: function _zoomOut() {
            var scaleOld = this.body.view.scale;
            var scale = this.body.view.scale / (1 + this.options.keyboard.speed.zoom);
            var translation = this.body.view.translation;
            var scaleFrac = scale / scaleOld;
            var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
            var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;

            this.body.view.scale = scale;
            this.body.view.translation = { x: tx, y: ty };
            this.body.emitter.emit('zoom', { direction: '-', scale: this.body.view.scale, pointer: null });
          }

          /**
           * bind all keys using keycharm.
           */

        }, {
          key: 'configureKeyboardBindings',
          value: function configureKeyboardBindings() {
            var _this3 = this;

            if (this.keycharm !== undefined) {
              this.keycharm.destroy();
            }

            if (this.options.keyboard.enabled === true) {
              if (this.options.keyboard.bindToWindow === true) {
                this.keycharm = keycharm({ container: window, preventDefault: true });
              } else {
                this.keycharm = keycharm({ container: this.canvas.frame, preventDefault: true });
              }

              this.keycharm.reset();

              if (this.activated === true) {
                this.keycharm.bind("up", function () {
                  _this3.bindToRedraw("_moveUp");
                }, "keydown");
                this.keycharm.bind("down", function () {
                  _this3.bindToRedraw("_moveDown");
                }, "keydown");
                this.keycharm.bind("left", function () {
                  _this3.bindToRedraw("_moveLeft");
                }, "keydown");
                this.keycharm.bind("right", function () {
                  _this3.bindToRedraw("_moveRight");
                }, "keydown");
                this.keycharm.bind("=", function () {
                  _this3.bindToRedraw("_zoomIn");
                }, "keydown");
                this.keycharm.bind("num+", function () {
                  _this3.bindToRedraw("_zoomIn");
                }, "keydown");
                this.keycharm.bind("num-", function () {
                  _this3.bindToRedraw("_zoomOut");
                }, "keydown");
                this.keycharm.bind("-", function () {
                  _this3.bindToRedraw("_zoomOut");
                }, "keydown");
                this.keycharm.bind("[", function () {
                  _this3.bindToRedraw("_zoomOut");
                }, "keydown");
                this.keycharm.bind("]", function () {
                  _this3.bindToRedraw("_zoomIn");
                }, "keydown");
                this.keycharm.bind("pageup", function () {
                  _this3.bindToRedraw("_zoomIn");
                }, "keydown");
                this.keycharm.bind("pagedown", function () {
                  _this3.bindToRedraw("_zoomOut");
                }, "keydown");

                this.keycharm.bind("up", function () {
                  _this3.unbindFromRedraw("_moveUp");
                }, "keyup");
                this.keycharm.bind("down", function () {
                  _this3.unbindFromRedraw("_moveDown");
                }, "keyup");
                this.keycharm.bind("left", function () {
                  _this3.unbindFromRedraw("_moveLeft");
                }, "keyup");
                this.keycharm.bind("right", function () {
                  _this3.unbindFromRedraw("_moveRight");
                }, "keyup");
                this.keycharm.bind("=", function () {
                  _this3.unbindFromRedraw("_zoomIn");
                }, "keyup");
                this.keycharm.bind("num+", function () {
                  _this3.unbindFromRedraw("_zoomIn");
                }, "keyup");
                this.keycharm.bind("num-", function () {
                  _this3.unbindFromRedraw("_zoomOut");
                }, "keyup");
                this.keycharm.bind("-", function () {
                  _this3.unbindFromRedraw("_zoomOut");
                }, "keyup");
                this.keycharm.bind("[", function () {
                  _this3.unbindFromRedraw("_zoomOut");
                }, "keyup");
                this.keycharm.bind("]", function () {
                  _this3.unbindFromRedraw("_zoomIn");
                }, "keyup");
                this.keycharm.bind("pageup", function () {
                  _this3.unbindFromRedraw("_zoomIn");
                }, "keyup");
                this.keycharm.bind("pagedown", function () {
                  _this3.unbindFromRedraw("_zoomOut");
                }, "keyup");
              }
            }
          }
        }]);
        return NavigationHandler;
      }();

      exports['default'] = NavigationHandler;

      /***/
    },
    /* 234 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var Node = __webpack_require__(47)['default'];
      var Edge = __webpack_require__(74)['default'];

      var util = __webpack_require__(2);

      /**
       * The handler for selections
       */

      var SelectionHandler = function () {
        /**
         * @param {Object} body
         * @param {Canvas} canvas
         */
        function SelectionHandler(body, canvas) {
          var _this = this;

          (0, _classCallCheck3['default'])(this, SelectionHandler);

          this.body = body;
          this.canvas = canvas;
          this.selectionObj = { nodes: [], edges: [] };
          this.hoverObj = { nodes: {}, edges: {} };

          this.options = {};
          this.defaultOptions = {
            multiselect: false,
            selectable: true,
            selectConnectedEdges: true,
            hoverConnectedEdges: true
          };
          util.extend(this.options, this.defaultOptions);

          this.body.emitter.on("_dataChanged", function () {
            _this.updateSelection();
          });
        }

        /**
         *
         * @param {Object} [options]
         */

        (0, _createClass3['default'])(SelectionHandler, [{
          key: 'setOptions',
          value: function setOptions(options) {
            if (options !== undefined) {
              var fields = ['multiselect', 'hoverConnectedEdges', 'selectable', 'selectConnectedEdges'];
              util.selectiveDeepExtend(fields, this.options, options);
            }
          }

          /**
           * handles the selection part of the tap;
           *
           * @param {{x: number, y: number}} pointer
           * @returns {boolean}
           */

        }, {
          key: 'selectOnPoint',
          value: function selectOnPoint(pointer) {
            var selected = false;
            if (this.options.selectable === true) {
              var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);

              // unselect after getting the objects in order to restore width and height.
              this.unselectAll();

              if (obj !== undefined) {
                selected = this.selectObject(obj);
              }
              this.body.emitter.emit("_requestRedraw");
            }
            return selected;
          }

          /**
           *
           * @param {{x: number, y: number}} pointer
           * @returns {boolean}
           */

        }, {
          key: 'selectAdditionalOnPoint',
          value: function selectAdditionalOnPoint(pointer) {
            var selectionChanged = false;
            if (this.options.selectable === true) {
              var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);

              if (obj !== undefined) {
                selectionChanged = true;
                if (obj.isSelected() === true) {
                  this.deselectObject(obj);
                } else {
                  this.selectObject(obj);
                }

                this.body.emitter.emit("_requestRedraw");
              }
            }
            return selectionChanged;
          }

          /**
           * Create an object containing the standard fields for an event.
           *
           * @param {Event} event
           * @param {{x: number, y: number}} pointer Object with the x and y screen coordinates of the mouse
           * @returns {{}}
           * @private
           */

        }, {
          key: '_initBaseEvent',
          value: function _initBaseEvent(event, pointer) {
            var properties = {};

            properties['pointer'] = {
              DOM: { x: pointer.x, y: pointer.y },
              canvas: this.canvas.DOMtoCanvas(pointer)
            };
            properties['event'] = event;

            return properties;
          }

          /**
           * Generate an event which the user can catch.
           *
           * This adds some extra data to the event with respect to cursor position and
           * selected nodes and edges.
           *
           * @param {string} eventType                          Name of event to send
           * @param {Event}  event
           * @param {{x: number, y: number}} pointer            Object with the x and y screen coordinates of the mouse
           * @param {Object|undefined} oldSelection             If present, selection state before event occured
           * @param {boolean|undefined} [emptySelection=false]  Indicate if selection data should be passed
           */

        }, {
          key: '_generateClickEvent',
          value: function _generateClickEvent(eventType, event, pointer, oldSelection) {
            var emptySelection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

            var properties = this._initBaseEvent(event, pointer);

            if (emptySelection === true) {
              properties.nodes = [];
              properties.edges = [];
            } else {
              var tmp = this.getSelection();
              properties.nodes = tmp.nodes;
              properties.edges = tmp.edges;
            }

            if (oldSelection !== undefined) {
              properties['previousSelection'] = oldSelection;
            }

            if (eventType == 'click') {
              // For the time being, restrict this functionality to
              // just the click event.
              properties.items = this.getClickedItems(pointer);
            }

            this.body.emitter.emit(eventType, properties);
          }

          /**
           *
           * @param {Object} obj
           * @param {boolean} [highlightEdges=this.options.selectConnectedEdges]
           * @returns {boolean}
           */

        }, {
          key: 'selectObject',
          value: function selectObject(obj) {
            var highlightEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.selectConnectedEdges;

            if (obj !== undefined) {
              if (obj instanceof Node) {
                if (highlightEdges === true) {
                  this._selectConnectedEdges(obj);
                }
              }
              obj.select();
              this._addToSelection(obj);
              return true;
            }
            return false;
          }

          /**
           *
           * @param {Object} obj
           */

        }, {
          key: 'deselectObject',
          value: function deselectObject(obj) {
            if (obj.isSelected() === true) {
              obj.selected = false;
              this._removeFromSelection(obj);
            }
          }

          /**
           * retrieve all nodes overlapping with given object
           * @param {Object} object  An object with parameters left, top, right, bottom
           * @return {number[]}   An array with id's of the overlapping nodes
           * @private
           */

        }, {
          key: '_getAllNodesOverlappingWith',
          value: function _getAllNodesOverlappingWith(object) {
            var overlappingNodes = [];
            var nodes = this.body.nodes;
            for (var i = 0; i < this.body.nodeIndices.length; i++) {
              var nodeId = this.body.nodeIndices[i];
              if (nodes[nodeId].isOverlappingWith(object)) {
                overlappingNodes.push(nodeId);
              }
            }
            return overlappingNodes;
          }

          /**
           * Return a position object in canvasspace from a single point in screenspace
           *
           * @param {{x: number, y: number}} pointer
           * @returns {{left: number, top: number, right: number, bottom: number}}
           * @private
           */

        }, {
          key: '_pointerToPositionObject',
          value: function _pointerToPositionObject(pointer) {
            var canvasPos = this.canvas.DOMtoCanvas(pointer);
            return {
              left: canvasPos.x - 1,
              top: canvasPos.y + 1,
              right: canvasPos.x + 1,
              bottom: canvasPos.y - 1
            };
          }

          /**
           * Get the top node at the passed point (like a click)
           *
           * @param {{x: number, y: number}} pointer
           * @param {boolean} [returnNode=true]
           * @return {Node | undefined} node
           */

        }, {
          key: 'getNodeAt',
          value: function getNodeAt(pointer) {
            var returnNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            // we first check if this is an navigation controls element
            var positionObject = this._pointerToPositionObject(pointer);
            var overlappingNodes = this._getAllNodesOverlappingWith(positionObject);
            // if there are overlapping nodes, select the last one, this is the
            // one which is drawn on top of the others
            if (overlappingNodes.length > 0) {
              if (returnNode === true) {
                return this.body.nodes[overlappingNodes[overlappingNodes.length - 1]];
              } else {
                return overlappingNodes[overlappingNodes.length - 1];
              }
            } else {
              return undefined;
            }
          }

          /**
           * retrieve all edges overlapping with given object, selector is around center
           * @param {Object} object  An object with parameters left, top, right, bottom
           * @param {number[]} overlappingEdges An array with id's of the overlapping nodes
           * @private
           */

        }, {
          key: '_getEdgesOverlappingWith',
          value: function _getEdgesOverlappingWith(object, overlappingEdges) {
            var edges = this.body.edges;
            for (var i = 0; i < this.body.edgeIndices.length; i++) {
              var edgeId = this.body.edgeIndices[i];
              if (edges[edgeId].isOverlappingWith(object)) {
                overlappingEdges.push(edgeId);
              }
            }
          }

          /**
           * retrieve all nodes overlapping with given object
           * @param {Object} object  An object with parameters left, top, right, bottom
           * @return {number[]}   An array with id's of the overlapping nodes
           * @private
           */

        }, {
          key: '_getAllEdgesOverlappingWith',
          value: function _getAllEdgesOverlappingWith(object) {
            var overlappingEdges = [];
            this._getEdgesOverlappingWith(object, overlappingEdges);
            return overlappingEdges;
          }

          /**
           * Get the edges nearest to the passed point (like a click)
           *
           * @param {{x: number, y: number}} pointer
           * @param {boolean} [returnEdge=true]
           * @return {Edge | undefined} node
           */

        }, {
          key: 'getEdgeAt',
          value: function getEdgeAt(pointer) {
            var returnEdge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            // Iterate over edges, pick closest within 10
            var canvasPos = this.canvas.DOMtoCanvas(pointer);
            var mindist = 10;
            var overlappingEdge = null;
            var edges = this.body.edges;
            for (var i = 0; i < this.body.edgeIndices.length; i++) {
              var edgeId = this.body.edgeIndices[i];
              var edge = edges[edgeId];
              if (edge.connected) {
                var xFrom = edge.from.x;
                var yFrom = edge.from.y;
                var xTo = edge.to.x;
                var yTo = edge.to.y;
                var dist = edge.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, canvasPos.x, canvasPos.y);
                if (dist < mindist) {
                  overlappingEdge = edgeId;
                  mindist = dist;
                }
              }
            }
            if (overlappingEdge !== null) {
              if (returnEdge === true) {
                return this.body.edges[overlappingEdge];
              } else {
                return overlappingEdge;
              }
            } else {
              return undefined;
            }
          }

          /**
           * Add object to the selection array.
           *
           * @param {Object} obj
           * @private
           */

        }, {
          key: '_addToSelection',
          value: function _addToSelection(obj) {
            if (obj instanceof Node) {
              this.selectionObj.nodes[obj.id] = obj;
            } else {
              this.selectionObj.edges[obj.id] = obj;
            }
          }

          /**
           * Add object to the selection array.
           *
           * @param {Object} obj
           * @private
           */

        }, {
          key: '_addToHover',
          value: function _addToHover(obj) {
            if (obj instanceof Node) {
              this.hoverObj.nodes[obj.id] = obj;
            } else {
              this.hoverObj.edges[obj.id] = obj;
            }
          }

          /**
           * Remove a single option from selection.
           *
           * @param {Object} obj
           * @private
           */

        }, {
          key: '_removeFromSelection',
          value: function _removeFromSelection(obj) {
            if (obj instanceof Node) {
              delete this.selectionObj.nodes[obj.id];
              this._unselectConnectedEdges(obj);
            } else {
              delete this.selectionObj.edges[obj.id];
            }
          }

          /**
           * Unselect all. The selectionObj is useful for this.
           */

        }, {
          key: 'unselectAll',
          value: function unselectAll() {
            for (var nodeId in this.selectionObj.nodes) {
              if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                this.selectionObj.nodes[nodeId].unselect();
              }
            }
            for (var edgeId in this.selectionObj.edges) {
              if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                this.selectionObj.edges[edgeId].unselect();
              }
            }

            this.selectionObj = { nodes: {}, edges: {} };
          }

          /**
           * return the number of selected nodes
           *
           * @returns {number}
           * @private
           */

        }, {
          key: '_getSelectedNodeCount',
          value: function _getSelectedNodeCount() {
            var count = 0;
            for (var nodeId in this.selectionObj.nodes) {
              if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                count += 1;
              }
            }
            return count;
          }

          /**
           * return the selected node
           *
           * @returns {number}
           * @private
           */

        }, {
          key: '_getSelectedNode',
          value: function _getSelectedNode() {
            for (var nodeId in this.selectionObj.nodes) {
              if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                return this.selectionObj.nodes[nodeId];
              }
            }
            return undefined;
          }

          /**
           * return the selected edge
           *
           * @returns {number}
           * @private
           */

        }, {
          key: '_getSelectedEdge',
          value: function _getSelectedEdge() {
            for (var edgeId in this.selectionObj.edges) {
              if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                return this.selectionObj.edges[edgeId];
              }
            }
            return undefined;
          }

          /**
           * return the number of selected edges
           *
           * @returns {number}
           * @private
           */

        }, {
          key: '_getSelectedEdgeCount',
          value: function _getSelectedEdgeCount() {
            var count = 0;
            for (var edgeId in this.selectionObj.edges) {
              if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                count += 1;
              }
            }
            return count;
          }

          /**
           * return the number of selected objects.
           *
           * @returns {number}
           * @private
           */

        }, {
          key: '_getSelectedObjectCount',
          value: function _getSelectedObjectCount() {
            var count = 0;
            for (var nodeId in this.selectionObj.nodes) {
              if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                count += 1;
              }
            }
            for (var edgeId in this.selectionObj.edges) {
              if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                count += 1;
              }
            }
            return count;
          }

          /**
           * Check if anything is selected
           *
           * @returns {boolean}
           * @private
           */

        }, {
          key: '_selectionIsEmpty',
          value: function _selectionIsEmpty() {
            for (var nodeId in this.selectionObj.nodes) {
              if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                return false;
              }
            }
            for (var edgeId in this.selectionObj.edges) {
              if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                return false;
              }
            }
            return true;
          }

          /**
           * check if one of the selected nodes is a cluster.
           *
           * @returns {boolean}
           * @private
           */

        }, {
          key: '_clusterInSelection',
          value: function _clusterInSelection() {
            for (var nodeId in this.selectionObj.nodes) {
              if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                if (this.selectionObj.nodes[nodeId].clusterSize > 1) {
                  return true;
                }
              }
            }
            return false;
          }

          /**
           * select the edges connected to the node that is being selected
           *
           * @param {Node} node
           * @private
           */

        }, {
          key: '_selectConnectedEdges',
          value: function _selectConnectedEdges(node) {
            for (var i = 0; i < node.edges.length; i++) {
              var edge = node.edges[i];
              edge.select();
              this._addToSelection(edge);
            }
          }

          /**
           * select the edges connected to the node that is being selected
           *
           * @param {Node} node
           * @private
           */

        }, {
          key: '_hoverConnectedEdges',
          value: function _hoverConnectedEdges(node) {
            for (var i = 0; i < node.edges.length; i++) {
              var edge = node.edges[i];
              edge.hover = true;
              this._addToHover(edge);
            }
          }

          /**
           * unselect the edges connected to the node that is being selected
           *
           * @param {Node} node
           * @private
           */

        }, {
          key: '_unselectConnectedEdges',
          value: function _unselectConnectedEdges(node) {
            for (var i = 0; i < node.edges.length; i++) {
              var edge = node.edges[i];
              edge.unselect();
              this._removeFromSelection(edge);
            }
          }

          /**
           * Remove the highlight from a node or edge, in response to mouse movement
           *
           * @param {Event}  event
           * @param {{x: number, y: number}} pointer object with the x and y screen coordinates of the mouse
           * @param {Node|vis.Edge} object
           * @private
           */

        }, {
          key: 'emitBlurEvent',
          value: function emitBlurEvent(event, pointer, object) {
            var properties = this._initBaseEvent(event, pointer);

            if (object.hover === true) {
              object.hover = false;
              if (object instanceof Node) {
                properties.node = object.id;
                this.body.emitter.emit("blurNode", properties);
              } else {
                properties.edge = object.id;
                this.body.emitter.emit("blurEdge", properties);
              }
            }
          }

          /**
           * Create the highlight for a node or edge, in response to mouse movement
           *
           * @param {Event}  event
           * @param {{x: number, y: number}} pointer object with the x and y screen coordinates of the mouse
           * @param {Node|vis.Edge} object
           * @returns {boolean} hoverChanged
           * @private
           */

        }, {
          key: 'emitHoverEvent',
          value: function emitHoverEvent(event, pointer, object) {
            var properties = this._initBaseEvent(event, pointer);
            var hoverChanged = false;

            if (object.hover === false) {
              object.hover = true;
              this._addToHover(object);
              hoverChanged = true;
              if (object instanceof Node) {
                properties.node = object.id;
                this.body.emitter.emit("hoverNode", properties);
              } else {
                properties.edge = object.id;
                this.body.emitter.emit("hoverEdge", properties);
              }
            }

            return hoverChanged;
          }

          /**
           * Perform actions in response to a mouse movement.
           *
           * @param {Event}  event
           * @param {{x: number, y: number}} pointer | object with the x and y screen coordinates of the mouse
           */

        }, {
          key: 'hoverObject',
          value: function hoverObject(event, pointer) {
            var object = this.getNodeAt(pointer);
            if (object === undefined) {
              object = this.getEdgeAt(pointer);
            }

            var hoverChanged = false;
            // remove all node hover highlights
            for (var nodeId in this.hoverObj.nodes) {
              if (this.hoverObj.nodes.hasOwnProperty(nodeId)) {
                if (object === undefined || object instanceof Node && object.id != nodeId || object instanceof Edge) {
                  this.emitBlurEvent(event, pointer, this.hoverObj.nodes[nodeId]);
                  delete this.hoverObj.nodes[nodeId];
                  hoverChanged = true;
                }
              }
            }

            // removing all edge hover highlights
            for (var edgeId in this.hoverObj.edges) {
              if (this.hoverObj.edges.hasOwnProperty(edgeId)) {
                // if the hover has been changed here it means that the node has been hovered over or off
                // we then do not use the emitBlurEvent method here.
                if (hoverChanged === true) {
                  this.hoverObj.edges[edgeId].hover = false;
                  delete this.hoverObj.edges[edgeId];
                }
                // if the blur remains the same and the object is undefined (mouse off) or another
                // edge has been hovered, or another node has been hovered we blur the edge.
                else if (object === undefined || object instanceof Edge && object.id != edgeId || object instanceof Node && !object.hover) {
                    this.emitBlurEvent(event, pointer, this.hoverObj.edges[edgeId]);
                    delete this.hoverObj.edges[edgeId];
                    hoverChanged = true;
                  }
              }
            }

            if (object !== undefined) {
              hoverChanged = hoverChanged || this.emitHoverEvent(event, pointer, object);
              if (object instanceof Node && this.options.hoverConnectedEdges === true) {
                this._hoverConnectedEdges(object);
              }
            }

            if (hoverChanged === true) {
              this.body.emitter.emit('_requestRedraw');
            }
          }

          /**
           *
           * retrieve the currently selected objects
           * @return {{nodes: Array.<string>, edges: Array.<string>}} selection
           */

        }, {
          key: 'getSelection',
          value: function getSelection() {
            var nodeIds = this.getSelectedNodes();
            var edgeIds = this.getSelectedEdges();
            return { nodes: nodeIds, edges: edgeIds };
          }

          /**
           *
           * retrieve the currently selected nodes
           * @return {string[]} selection    An array with the ids of the
           *                                            selected nodes.
           */

        }, {
          key: 'getSelectedNodes',
          value: function getSelectedNodes() {
            var idArray = [];
            if (this.options.selectable === true) {
              for (var nodeId in this.selectionObj.nodes) {
                if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                  idArray.push(this.selectionObj.nodes[nodeId].id);
                }
              }
            }
            return idArray;
          }

          /**
           *
           * retrieve the currently selected edges
           * @return {Array} selection    An array with the ids of the
           *                                            selected nodes.
           */

        }, {
          key: 'getSelectedEdges',
          value: function getSelectedEdges() {
            var idArray = [];
            if (this.options.selectable === true) {
              for (var edgeId in this.selectionObj.edges) {
                if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                  idArray.push(this.selectionObj.edges[edgeId].id);
                }
              }
            }
            return idArray;
          }

          /**
           * Updates the current selection
           * @param {{nodes: Array.<string>, edges: Array.<string>}} selection
           * @param {Object} options                                 Options
           */

        }, {
          key: 'setSelection',
          value: function setSelection(selection) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var i = void 0,
                id = void 0;

            if (!selection || !selection.nodes && !selection.edges) throw 'Selection must be an object with nodes and/or edges properties';
            // first unselect any selected node, if option is true or undefined
            if (options.unselectAll || options.unselectAll === undefined) {
              this.unselectAll();
            }
            if (selection.nodes) {
              for (i = 0; i < selection.nodes.length; i++) {
                id = selection.nodes[i];

                var node = this.body.nodes[id];
                if (!node) {
                  throw new RangeError('Node with id "' + id + '" not found');
                }
                // don't select edges with it
                this.selectObject(node, options.highlightEdges);
              }
            }

            if (selection.edges) {
              for (i = 0; i < selection.edges.length; i++) {
                id = selection.edges[i];

                var edge = this.body.edges[id];
                if (!edge) {
                  throw new RangeError('Edge with id "' + id + '" not found');
                }
                this.selectObject(edge);
              }
            }
            this.body.emitter.emit('_requestRedraw');
          }

          /**
           * select zero or more nodes with the option to highlight edges
           * @param {number[] | string[]} selection     An array with the ids of the
           *                                            selected nodes.
           * @param {boolean} [highlightEdges]
           */

        }, {
          key: 'selectNodes',
          value: function selectNodes(selection) {
            var highlightEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (!selection || selection.length === undefined) throw 'Selection must be an array with ids';

            this.setSelection({ nodes: selection }, { highlightEdges: highlightEdges });
          }

          /**
           * select zero or more edges
           * @param {number[] | string[]} selection     An array with the ids of the
           *                                            selected nodes.
           */

        }, {
          key: 'selectEdges',
          value: function selectEdges(selection) {
            if (!selection || selection.length === undefined) throw 'Selection must be an array with ids';

            this.setSelection({ edges: selection });
          }

          /**
           * Validate the selection: remove ids of nodes which no longer exist
           * @private
           */

        }, {
          key: 'updateSelection',
          value: function updateSelection() {
            for (var nodeId in this.selectionObj.nodes) {
              if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
                if (!this.body.nodes.hasOwnProperty(nodeId)) {
                  delete this.selectionObj.nodes[nodeId];
                }
              }
            }
            for (var edgeId in this.selectionObj.edges) {
              if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
                if (!this.body.edges.hasOwnProperty(edgeId)) {
                  delete this.selectionObj.edges[edgeId];
                }
              }
            }
          }

          /**
           * Determine all the visual elements clicked which are on the given point.
           *
           * All elements are returned; this includes nodes, edges and their labels.
           * The order returned is from highest to lowest, i.e. element 0 of the return
           * value is the topmost item clicked on.
           *
           * The return value consists of an array of the following possible elements:
           *
           * - `{nodeId:number}`             - node with given id clicked on
           * - `{nodeId:number, labelId:0}`  - label of node with given id clicked on
           * - `{edgeId:number}`             - edge with given id clicked on
           * - `{edge:number, labelId:0}`    - label of edge with given id clicked on
           *
           * ## NOTES
           *
           * - Currently, there is only one label associated with a node or an edge,
           *   but this is expected to change somewhere in the future.
           * - Since there is no z-indexing yet, it is not really possible to set the nodes and
           *   edges in the correct order. For the time being, nodes come first.
           *
           * @param {point} pointer  mouse position in screen coordinates
           * @returns {Array.<nodeClickItem|nodeLabelClickItem|edgeClickItem|edgeLabelClickItem>}
           * @private
           */

        }, {
          key: 'getClickedItems',
          value: function getClickedItems(pointer) {
            var point = this.canvas.DOMtoCanvas(pointer);
            var items = [];

            // Note reverse order; we want the topmost clicked items to be first in the array
            // Also note that selected nodes are disregarded here; these normally display on top
            var nodeIndices = this.body.nodeIndices;
            var nodes = this.body.nodes;
            for (var i = nodeIndices.length - 1; i >= 0; i--) {
              var node = nodes[nodeIndices[i]];
              var ret = node.getItemsOnPoint(point);
              items.push.apply(items, ret); // Append the return value to the running list.
            }

            var edgeIndices = this.body.edgeIndices;
            var edges = this.body.edges;
            for (var _i = edgeIndices.length - 1; _i >= 0; _i--) {
              var edge = edges[edgeIndices[_i]];
              var _ret = edge.getItemsOnPoint(point);
              items.push.apply(items, _ret); // Append the return value to the running list.
            }

            return items;
          }
        }]);
        return SelectionHandler;
      }();

      exports['default'] = SelectionHandler;

      /***/
    },
    /* 235 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       * There's a mix-up with terms in the code. Following are the formal definitions:
       *
       *   tree   - a strict hierarchical network, i.e. every node has at most one parent
       *   forest - a collection of trees. These distinct trees are thus not connected.
       *
       * So:
       * - in a network that is not a tree, there exist nodes with multiple parents.
       * - a network consisting of unconnected sub-networks, of which at least one
       *   is not a tree, is not a forest.
       *
       * In the code, the definitions are:
       *
       *   tree   - any disconnected sub-network, strict hierarchical or not.
       *   forest - a bunch of these sub-networks
       *
       * The difference between tree and not-tree is important in the code, notably within
       * to the block-shifting algorithm. The algorithm assumes formal trees and fails
       * for not-trees, often in a spectacular manner (search for 'exploding network' in the issues).
       *
       * In order to distinguish the definitions in the following code, the adjective 'formal' is
       * used. If 'formal' is absent, you must assume the non-formal definition.
       *
       * ----------------------------------------------------------------------------------
       * NOTES
       * =====
       *
       * A hierarchical layout is a different thing from a hierarchical network.
       * The layout is a way to arrange the nodes in the view; this can be done
       * on non-hierarchical networks as well. The converse is also possible.
       */

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _slicedToArray2 = __webpack_require__(30);

      var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var NetworkUtil = __webpack_require__(76)['default'];

      var _require = __webpack_require__(236),
          HorizontalStrategy = _require.HorizontalStrategy,
          VerticalStrategy = _require.VerticalStrategy;

      /**
       * Container for derived data on current network, relating to hierarchy.
       *
       * @private
       */

      var HierarchicalStatus = function () {
        /**
         * @ignore
         */
        function HierarchicalStatus() {
          (0, _classCallCheck3['default'])(this, HierarchicalStatus);

          this.childrenReference = {}; // child id's per node id
          this.parentReference = {}; // parent id's per node id
          this.trees = {}; // tree id per node id; i.e. to which tree does given node id belong

          this.distributionOrdering = {}; // The nodes per level, in the display order
          this.levels = {}; // hierarchy level per node id
          this.distributionIndex = {}; // The position of the node in the level sorting order, per node id.

          this.isTree = false; // True if current network is a formal tree 
          this.treeIndex = -1; // Highest tree id in current network.
        }

        /**
         * Add the relation between given nodes to the current state.
         *
         * @param {Node.id} parentNodeId
         * @param {Node.id} childNodeId
         */

        (0, _createClass3['default'])(HierarchicalStatus, [{
          key: 'addRelation',
          value: function addRelation(parentNodeId, childNodeId) {
            if (this.childrenReference[parentNodeId] === undefined) {
              this.childrenReference[parentNodeId] = [];
            }
            this.childrenReference[parentNodeId].push(childNodeId);

            if (this.parentReference[childNodeId] === undefined) {
              this.parentReference[childNodeId] = [];
            }
            this.parentReference[childNodeId].push(parentNodeId);
          }

          /**
           * Check if the current state is for a formal tree or formal forest.
           *
           * This is the case if every node has at most one parent.
           *
           * Pre: parentReference init'ed properly for current network
           */

        }, {
          key: 'checkIfTree',
          value: function checkIfTree() {
            for (var i in this.parentReference) {
              if (this.parentReference[i].length > 1) {
                this.isTree = false;
                return;
              }
            }

            this.isTree = true;
          }

          /**
           * Return the number of separate trees in the current network.
           * @returns {number}
           */

        }, {
          key: 'numTrees',
          value: function numTrees() {
            return this.treeIndex + 1; // This assumes the indexes are assigned consecitively
          }

          /**
           * Assign a tree id to a node
           * @param {Node} node
           * @param {string|number} treeId
           */

        }, {
          key: 'setTreeIndex',
          value: function setTreeIndex(node, treeId) {
            if (treeId === undefined) return; // Don't bother

            if (this.trees[node.id] === undefined) {
              this.trees[node.id] = treeId;
              this.treeIndex = Math.max(treeId, this.treeIndex);
            }
          }

          /**
           * Ensure level for given id is defined.
           *
           * Sets level to zero for given node id if not already present
           *
           * @param {Node.id} nodeId
           */

        }, {
          key: 'ensureLevel',
          value: function ensureLevel(nodeId) {
            if (this.levels[nodeId] === undefined) {
              this.levels[nodeId] = 0;
            }
          }

          /**
           * get the maximum level of a branch.
           *
           * TODO: Never entered; find a test case to test this!
           * @param {Node.id} nodeId
           * @returns {number}
           */

        }, {
          key: 'getMaxLevel',
          value: function getMaxLevel(nodeId) {
            var _this = this;

            var accumulator = {};

            var _getMaxLevel = function _getMaxLevel(nodeId) {
              if (accumulator[nodeId] !== undefined) {
                return accumulator[nodeId];
              }
              var level = _this.levels[nodeId];
              if (_this.childrenReference[nodeId]) {
                var children = _this.childrenReference[nodeId];
                if (children.length > 0) {
                  for (var i = 0; i < children.length; i++) {
                    level = Math.max(level, _getMaxLevel(children[i]));
                  }
                }
              }
              accumulator[nodeId] = level;
              return level;
            };

            return _getMaxLevel(nodeId);
          }

          /**
           *
           * @param {Node} nodeA
           * @param {Node} nodeB
           */

        }, {
          key: 'levelDownstream',
          value: function levelDownstream(nodeA, nodeB) {
            if (this.levels[nodeB.id] === undefined) {
              // set initial level
              if (this.levels[nodeA.id] === undefined) {
                this.levels[nodeA.id] = 0;
              }
              // set level
              this.levels[nodeB.id] = this.levels[nodeA.id] + 1;
            }
          }

          /**
           * Small util method to set the minimum levels of the nodes to zero.
           *
           * @param {Array.<Node>} nodes
           */

        }, {
          key: 'setMinLevelToZero',
          value: function setMinLevelToZero(nodes) {
            var minLevel = 1e9;
            // get the minimum level
            for (var nodeId in nodes) {
              if (nodes.hasOwnProperty(nodeId)) {
                if (this.levels[nodeId] !== undefined) {
                  minLevel = Math.min(this.levels[nodeId], minLevel);
                }
              }
            }

            // subtract the minimum from the set so we have a range starting from 0
            for (var _nodeId in nodes) {
              if (nodes.hasOwnProperty(_nodeId)) {
                if (this.levels[_nodeId] !== undefined) {
                  this.levels[_nodeId] -= minLevel;
                }
              }
            }
          }

          /**
           * Get the min and max xy-coordinates of a given tree
           *
           * @param {Array.<Node>} nodes
           * @param {number} index
           * @returns {{min_x: number, max_x: number, min_y: number, max_y: number}}
           */

        }, {
          key: 'getTreeSize',
          value: function getTreeSize(nodes, index) {
            var min_x = 1e9;
            var max_x = -1e9;
            var min_y = 1e9;
            var max_y = -1e9;

            for (var nodeId in this.trees) {
              if (this.trees.hasOwnProperty(nodeId)) {
                if (this.trees[nodeId] === index) {
                  var node = nodes[nodeId];
                  min_x = Math.min(node.x, min_x);
                  max_x = Math.max(node.x, max_x);
                  min_y = Math.min(node.y, min_y);
                  max_y = Math.max(node.y, max_y);
                }
              }
            }

            return {
              min_x: min_x,
              max_x: max_x,
              min_y: min_y,
              max_y: max_y
            };
          }

          /**
           * Check if two nodes have the same parent(s)
           *
           * @param {Node} node1
           * @param {Node} node2
           * @return {boolean} true if the two nodes have a same ancestor node, false otherwise
           */

        }, {
          key: 'hasSameParent',
          value: function hasSameParent(node1, node2) {
            var parents1 = this.parentReference[node1.id];
            var parents2 = this.parentReference[node2.id];
            if (parents1 === undefined || parents2 === undefined) {
              return false;
            }

            for (var i = 0; i < parents1.length; i++) {
              for (var j = 0; j < parents2.length; j++) {
                if (parents1[i] == parents2[j]) {
                  return true;
                }
              }
            }
            return false;
          }

          /**
           * Check if two nodes are in the same tree.
           *
           * @param {Node} node1
           * @param {Node} node2
           * @return {Boolean} true if this is so, false otherwise
           */

        }, {
          key: 'inSameSubNetwork',
          value: function inSameSubNetwork(node1, node2) {
            return this.trees[node1.id] === this.trees[node2.id];
          }

          /**
           * Get a list of the distinct levels in the current network
           *
           * @returns {Array}
           */

        }, {
          key: 'getLevels',
          value: function getLevels() {
            return (0, _keys2['default'])(this.distributionOrdering);
          }

          /**
           * Add a node to the ordering per level
           *
           * @param {Node} node
           * @param {number} level
           */

        }, {
          key: 'addToOrdering',
          value: function addToOrdering(node, level) {
            if (this.distributionOrdering[level] === undefined) {
              this.distributionOrdering[level] = [];
            }

            var isPresent = false;
            var curLevel = this.distributionOrdering[level];
            for (var n in curLevel) {
              //if (curLevel[n].id === node.id) {
              if (curLevel[n] === node) {
                isPresent = true;
                break;
              }
            }

            if (!isPresent) {
              this.distributionOrdering[level].push(node);
              this.distributionIndex[node.id] = this.distributionOrdering[level].length - 1;
            }
          }
        }]);
        return HierarchicalStatus;
      }();

      /**
       * The Layout Engine
       */

      var LayoutEngine = function () {
        /**
         * @param {Object} body
         */
        function LayoutEngine(body) {
          (0, _classCallCheck3['default'])(this, LayoutEngine);

          this.body = body;

          this.initialRandomSeed = Math.round(Math.random() * 1000000);
          this.randomSeed = this.initialRandomSeed;
          this.setPhysics = false;
          this.options = {};
          this.optionsBackup = { physics: {} };

          this.defaultOptions = {
            randomSeed: undefined,
            improvedLayout: true,
            hierarchical: {
              enabled: false,
              levelSeparation: 150,
              nodeSpacing: 100,
              treeSpacing: 200,
              blockShifting: true,
              edgeMinimization: true,
              parentCentralization: true,
              direction: 'UD', // UD, DU, LR, RL
              sortMethod: 'hubsize' // hubsize, directed
            }
          };
          util.extend(this.options, this.defaultOptions);
          this.bindEventListeners();
        }

        /**
         * Binds event listeners
         */

        (0, _createClass3['default'])(LayoutEngine, [{
          key: 'bindEventListeners',
          value: function bindEventListeners() {
            var _this2 = this;

            this.body.emitter.on('_dataChanged', function () {
              _this2.setupHierarchicalLayout();
            });
            this.body.emitter.on('_dataLoaded', function () {
              _this2.layoutNetwork();
            });
            this.body.emitter.on('_resetHierarchicalLayout', function () {
              _this2.setupHierarchicalLayout();
            });
            this.body.emitter.on('_adjustEdgesForHierarchicalLayout', function () {
              if (_this2.options.hierarchical.enabled !== true) {
                return;
              }
              // get the type of static smooth curve in case it is required
              var type = _this2.direction.curveType();

              // force all edges into static smooth curves.
              _this2.body.emitter.emit('_forceDisableDynamicCurves', type, false);
            });
          }

          /**
           *
           * @param {Object} options
           * @param {Object} allOptions
           * @returns {Object}
           */

        }, {
          key: 'setOptions',
          value: function setOptions(options, allOptions) {
            if (options !== undefined) {
              var hierarchical = this.options.hierarchical;
              var prevHierarchicalState = hierarchical.enabled;
              util.selectiveDeepExtend(["randomSeed", "improvedLayout"], this.options, options);
              util.mergeOptions(this.options, options, 'hierarchical');
              if (options.randomSeed !== undefined) {
                this.initialRandomSeed = options.randomSeed;
              }

              if (hierarchical.enabled === true) {
                if (prevHierarchicalState === true) {
                  // refresh the overridden options for nodes and edges.
                  this.body.emitter.emit('refresh', true);
                }

                // make sure the level separation is the right way up
                if (hierarchical.direction === 'RL' || hierarchical.direction === 'DU') {
                  if (hierarchical.levelSeparation > 0) {
                    hierarchical.levelSeparation *= -1;
                  }
                } else {
                  if (hierarchical.levelSeparation < 0) {
                    hierarchical.levelSeparation *= -1;
                  }
                }

                this.setDirectionStrategy();

                this.body.emitter.emit('_resetHierarchicalLayout');
                // because the hierarchical system needs it's own physics and smooth curve settings,
                // we adapt the other options if needed.
                return this.adaptAllOptionsForHierarchicalLayout(allOptions);
              } else {
                if (prevHierarchicalState === true) {
                  // refresh the overridden options for nodes and edges.
                  this.body.emitter.emit('refresh');
                  return util.deepExtend(allOptions, this.optionsBackup);
                }
              }
            }
            return allOptions;
          }

          /**
           *
           * @param {Object} allOptions
           * @returns {Object}
           */

        }, {
          key: 'adaptAllOptionsForHierarchicalLayout',
          value: function adaptAllOptionsForHierarchicalLayout(allOptions) {
            if (this.options.hierarchical.enabled === true) {
              var backupPhysics = this.optionsBackup.physics;

              // set the physics
              if (allOptions.physics === undefined || allOptions.physics === true) {
                allOptions.physics = {
                  enabled: backupPhysics.enabled === undefined ? true : backupPhysics.enabled,
                  solver: 'hierarchicalRepulsion'
                };
                backupPhysics.enabled = backupPhysics.enabled === undefined ? true : backupPhysics.enabled;
                backupPhysics.solver = backupPhysics.solver || 'barnesHut';
              } else if ((0, _typeof3['default'])(allOptions.physics) === 'object') {
                backupPhysics.enabled = allOptions.physics.enabled === undefined ? true : allOptions.physics.enabled;
                backupPhysics.solver = allOptions.physics.solver || 'barnesHut';
                allOptions.physics.solver = 'hierarchicalRepulsion';
              } else if (allOptions.physics !== false) {
                backupPhysics.solver = 'barnesHut';
                allOptions.physics = { solver: 'hierarchicalRepulsion' };
              }

              // get the type of static smooth curve in case it is required
              var type = this.direction.curveType();

              // disable smooth curves if nothing is defined. If smooth curves have been turned on,
              // turn them into static smooth curves.
              if (allOptions.edges === undefined) {
                this.optionsBackup.edges = { smooth: { enabled: true, type: 'dynamic' } };
                allOptions.edges = { smooth: false };
              } else if (allOptions.edges.smooth === undefined) {
                this.optionsBackup.edges = { smooth: { enabled: true, type: 'dynamic' } };
                allOptions.edges.smooth = false;
              } else {
                if (typeof allOptions.edges.smooth === 'boolean') {
                  this.optionsBackup.edges = { smooth: allOptions.edges.smooth };
                  allOptions.edges.smooth = { enabled: allOptions.edges.smooth, type: type };
                } else {
                  var smooth = allOptions.edges.smooth;

                  // allow custom types except for dynamic
                  if (smooth.type !== undefined && smooth.type !== 'dynamic') {
                    type = smooth.type;
                  }

                  // TODO: this is options merging; see if the standard routines can be used here.
                  this.optionsBackup.edges = {
                    smooth: smooth.enabled === undefined ? true : smooth.enabled,
                    type: smooth.type === undefined ? 'dynamic' : smooth.type,
                    roundness: smooth.roundness === undefined ? 0.5 : smooth.roundness,
                    forceDirection: smooth.forceDirection === undefined ? false : smooth.forceDirection
                  };

                  // NOTE: Copying an object to self; this is basically setting defaults for undefined variables
                  allOptions.edges.smooth = {
                    enabled: smooth.enabled === undefined ? true : smooth.enabled,
                    type: type,
                    roundness: smooth.roundness === undefined ? 0.5 : smooth.roundness,
                    forceDirection: smooth.forceDirection === undefined ? false : smooth.forceDirection
                  };
                }
              }

              // Force all edges into static smooth curves.
              // Only applies to edges that do not use the global options for smooth.
              this.body.emitter.emit('_forceDisableDynamicCurves', type);
            }

            return allOptions;
          }

          /**
           *
           * @returns {number}
           */

        }, {
          key: 'seededRandom',
          value: function seededRandom() {
            var x = Math.sin(this.randomSeed++) * 10000;
            return x - Math.floor(x);
          }

          /**
           *
           * @param {Array.<Node>} nodesArray
           */

        }, {
          key: 'positionInitially',
          value: function positionInitially(nodesArray) {
            if (this.options.hierarchical.enabled !== true) {
              this.randomSeed = this.initialRandomSeed;
              var radius = nodesArray.length + 50;
              for (var i = 0; i < nodesArray.length; i++) {
                var node = nodesArray[i];
                var angle = 2 * Math.PI * this.seededRandom();
                if (node.x === undefined) {
                  node.x = radius * Math.cos(angle);
                }
                if (node.y === undefined) {
                  node.y = radius * Math.sin(angle);
                }
              }
            }
          }

          /**
           * Use Kamada Kawai to position nodes. This is quite a heavy algorithm so if there are a lot of nodes we
           * cluster them first to reduce the amount.
           */

        }, {
          key: 'layoutNetwork',
          value: function layoutNetwork() {
            if (this.options.hierarchical.enabled !== true && this.options.improvedLayout === true) {
              var indices = this.body.nodeIndices;

              // first check if we should Kamada Kawai to layout. The threshold is if less than half of the visible
              // nodes have predefined positions we use this.
              var positionDefined = 0;
              for (var i = 0; i < indices.length; i++) {
                var node = this.body.nodes[indices[i]];
                if (node.predefinedPosition === true) {
                  positionDefined += 1;
                }
              }

              // if less than half of the nodes have a predefined position we continue
              if (positionDefined < 0.5 * indices.length) {
                var MAX_LEVELS = 10;
                var level = 0;
                var clusterThreshold = 150; // TODO add this to options

                //
                // Define the options for the hidden cluster nodes
                // These options don't propagate outside the clustering phase.
                //
                // Some options are explicitly disabled, because they may be set in group or default node options.
                // The clusters are never displayed, so most explicit settings here serve as performance optimizations.
                //
                // The explicit setting of 'shape' is to avoid `shape: 'image'`; images are not passed to the hidden
                // cluster nodes, leading to an exception on creation.
                //
                // All settings here are performance related, except when noted otherwise.
                //
                var clusterOptions = {
                  clusterNodeProperties: {
                    shape: 'ellipse', // Bugfix: avoid type 'image', no images supplied
                    label: '', // avoid label handling
                    group: '', // avoid group handling
                    font: { multi: false // avoid font propagation
                    } },
                  clusterEdgeProperties: {
                    label: '', // avoid label handling
                    font: { multi: false }, // avoid font propagation
                    smooth: {
                      enabled: false // avoid drawing penalty for complex edges
                    }
                  }
                };

                // if there are a lot of nodes, we cluster before we run the algorithm.
                // NOTE: this part fails to find clusters for large scale-free networks, which should
                //       be easily clusterable.
                // TODO: examine why this is so
                if (indices.length > clusterThreshold) {
                  var startLength = indices.length;
                  while (indices.length > clusterThreshold && level <= MAX_LEVELS) {
                    //console.time("clustering")
                    level += 1;
                    var before = indices.length;
                    // if there are many nodes we do a hubsize cluster
                    if (level % 3 === 0) {
                      this.body.modules.clustering.clusterBridges(clusterOptions);
                    } else {
                      this.body.modules.clustering.clusterOutliers(clusterOptions);
                    }
                    var after = indices.length;
                    if (before == after && level % 3 !== 0) {
                      this._declusterAll();
                      this.body.emitter.emit("_layoutFailed");
                      console.info("This network could not be positioned by this version of the improved layout algorithm." + " Please disable improvedLayout for better performance.");
                      return;
                    }
                    //console.timeEnd("clustering")
                    //console.log(before,level,after);
                  }
                  // increase the size of the edges
                  this.body.modules.kamadaKawai.setOptions({ springLength: Math.max(150, 2 * startLength) });
                }
                if (level > MAX_LEVELS) {
                  console.info("The clustering didn't succeed within the amount of interations allowed," + " progressing with partial result.");
                }

                // position the system for these nodes and edges
                this.body.modules.kamadaKawai.solve(indices, this.body.edgeIndices, true);

                // shift to center point
                this._shiftToCenter();

                // perturb the nodes a little bit to force the physics to kick in
                var offset = 70;
                for (var _i = 0; _i < indices.length; _i++) {
                  // Only perturb the nodes that aren't fixed
                  var _node = this.body.nodes[indices[_i]];
                  if (_node.predefinedPosition === false) {
                    _node.x += (0.5 - this.seededRandom()) * offset;
                    _node.y += (0.5 - this.seededRandom()) * offset;
                  }
                }

                // uncluster all clusters
                this._declusterAll();

                // reposition all bezier nodes.
                this.body.emitter.emit("_repositionBezierNodes");
              }
            }
          }

          /**
           * Move all the nodes towards to the center so gravitational pull wil not move the nodes away from view
           * @private
           */

        }, {
          key: '_shiftToCenter',
          value: function _shiftToCenter() {
            var range = NetworkUtil.getRangeCore(this.body.nodes, this.body.nodeIndices);
            var center = NetworkUtil.findCenter(range);
            for (var i = 0; i < this.body.nodeIndices.length; i++) {
              var node = this.body.nodes[this.body.nodeIndices[i]];
              node.x -= center.x;
              node.y -= center.y;
            }
          }

          /**
           * Expands all clusters
           * @private
           */

        }, {
          key: '_declusterAll',
          value: function _declusterAll() {
            var clustersPresent = true;
            while (clustersPresent === true) {
              clustersPresent = false;
              for (var i = 0; i < this.body.nodeIndices.length; i++) {
                if (this.body.nodes[this.body.nodeIndices[i]].isCluster === true) {
                  clustersPresent = true;
                  this.body.modules.clustering.openCluster(this.body.nodeIndices[i], {}, false);
                }
              }
              if (clustersPresent === true) {
                this.body.emitter.emit('_dataChanged');
              }
            }
          }

          /**
           *
           * @returns {number|*}
           */

        }, {
          key: 'getSeed',
          value: function getSeed() {
            return this.initialRandomSeed;
          }

          /**
           * This is the main function to layout the nodes in a hierarchical way.
           * It checks if the node details are supplied correctly
           *
           * @private
           */

        }, {
          key: 'setupHierarchicalLayout',
          value: function setupHierarchicalLayout() {
            if (this.options.hierarchical.enabled === true && this.body.nodeIndices.length > 0) {
              // get the size of the largest hubs and check if the user has defined a level for a node.
              var node = void 0,
                  nodeId = void 0;
              var definedLevel = false;
              var undefinedLevel = false;
              this.lastNodeOnLevel = {};
              this.hierarchical = new HierarchicalStatus();

              for (nodeId in this.body.nodes) {
                if (this.body.nodes.hasOwnProperty(nodeId)) {
                  node = this.body.nodes[nodeId];
                  if (node.options.level !== undefined) {
                    definedLevel = true;
                    this.hierarchical.levels[nodeId] = node.options.level;
                  } else {
                    undefinedLevel = true;
                  }
                }
              }

              // if the user defined some levels but not all, alert and run without hierarchical layout
              if (undefinedLevel === true && definedLevel === true) {
                throw new Error('To use the hierarchical layout, nodes require either no predefined levels' + ' or levels have to be defined for all nodes.');
              } else {
                // define levels if undefined by the users. Based on hubsize.
                if (undefinedLevel === true) {
                  var sortMethod = this.options.hierarchical.sortMethod;
                  if (sortMethod === 'hubsize') {
                    this._determineLevelsByHubsize();
                  } else if (sortMethod === 'directed') {
                    this._determineLevelsDirected();
                  } else if (sortMethod === 'custom') {
                    this._determineLevelsCustomCallback();
                  }
                }

                // fallback for cases where there are nodes but no edges
                for (var _nodeId2 in this.body.nodes) {
                  if (this.body.nodes.hasOwnProperty(_nodeId2)) {
                    this.hierarchical.ensureLevel(_nodeId2);
                  }
                }
                // check the distribution of the nodes per level.
                var distribution = this._getDistribution();

                // get the parent children relations.
                this._generateMap();

                // place the nodes on the canvas.
                this._placeNodesByHierarchy(distribution);

                // condense the whitespace.
                this._condenseHierarchy();

                // shift to center so gravity does not have to do much
                this._shiftToCenter();
              }
            }
          }

          /**
           * @private
           */

        }, {
          key: '_condenseHierarchy',
          value: function _condenseHierarchy() {
            var _this3 = this;

            // Global var in this scope to define when the movement has stopped.
            var stillShifting = false;
            var branches = {};
            // first we have some methods to help shifting trees around.
            // the main method to shift the trees
            var shiftTrees = function shiftTrees() {
              var treeSizes = getTreeSizes();
              var shiftBy = 0;
              for (var i = 0; i < treeSizes.length - 1; i++) {
                var diff = treeSizes[i].max - treeSizes[i + 1].min;
                shiftBy += diff + _this3.options.hierarchical.treeSpacing;
                shiftTree(i + 1, shiftBy);
              }
            };

            // shift a single tree by an offset
            var shiftTree = function shiftTree(index, offset) {
              var trees = _this3.hierarchical.trees;

              for (var nodeId in trees) {
                if (trees.hasOwnProperty(nodeId)) {
                  if (trees[nodeId] === index) {
                    _this3.direction.shift(nodeId, offset);
                  }
                }
              }
            };

            // get the width of all trees
            var getTreeSizes = function getTreeSizes() {
              var treeWidths = [];
              for (var i = 0; i < _this3.hierarchical.numTrees(); i++) {
                treeWidths.push(_this3.direction.getTreeSize(i));
              }
              return treeWidths;
            };

            // get a map of all nodes in this branch
            var getBranchNodes = function getBranchNodes(source, map) {
              if (map[source.id]) {
                return;
              }
              map[source.id] = true;
              if (_this3.hierarchical.childrenReference[source.id]) {
                var children = _this3.hierarchical.childrenReference[source.id];
                if (children.length > 0) {
                  for (var i = 0; i < children.length; i++) {
                    getBranchNodes(_this3.body.nodes[children[i]], map);
                  }
                }
              }
            };

            // get a min max width as well as the maximum movement space it has on either sides
            // we use min max terminology because width and height can interchange depending on the direction of the layout
            var getBranchBoundary = function getBranchBoundary(branchMap) {
              var maxLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e9;

              var minSpace = 1e9;
              var maxSpace = 1e9;
              var min = 1e9;
              var max = -1e9;
              for (var branchNode in branchMap) {
                if (branchMap.hasOwnProperty(branchNode)) {
                  var node = _this3.body.nodes[branchNode];
                  var level = _this3.hierarchical.levels[node.id];
                  var position = _this3.direction.getPosition(node);

                  // get the space around the node.

                  var _getSpaceAroundNode2 = _this3._getSpaceAroundNode(node, branchMap),
                      _getSpaceAroundNode3 = (0, _slicedToArray3['default'])(_getSpaceAroundNode2, 2),
                      minSpaceNode = _getSpaceAroundNode3[0],
                      maxSpaceNode = _getSpaceAroundNode3[1];

                  minSpace = Math.min(minSpaceNode, minSpace);
                  maxSpace = Math.min(maxSpaceNode, maxSpace);

                  // the width is only relevant for the levels two nodes have in common. This is why we filter on this.
                  if (level <= maxLevel) {
                    min = Math.min(position, min);
                    max = Math.max(position, max);
                  }
                }
              }

              return [min, max, minSpace, maxSpace];
            };

            // check what the maximum level is these nodes have in common.
            var getCollisionLevel = function getCollisionLevel(node1, node2) {
              var maxLevel1 = _this3.hierarchical.getMaxLevel(node1.id);
              var maxLevel2 = _this3.hierarchical.getMaxLevel(node2.id);
              return Math.min(maxLevel1, maxLevel2);
            };

            /**
             * Condense elements. These can be nodes or branches depending on the callback.
             *
             * @param {function} callback
             * @param {Array.<number>} levels
             * @param {*} centerParents
             */
            var shiftElementsCloser = function shiftElementsCloser(callback, levels, centerParents) {
              var hier = _this3.hierarchical;

              for (var i = 0; i < levels.length; i++) {
                var level = levels[i];
                var levelNodes = hier.distributionOrdering[level];
                if (levelNodes.length > 1) {
                  for (var j = 0; j < levelNodes.length - 1; j++) {
                    var node1 = levelNodes[j];
                    var node2 = levelNodes[j + 1];

                    // NOTE: logic maintained as it was; if nodes have same ancestor,
                    //       then of course they are in the same sub-network.
                    if (hier.hasSameParent(node1, node2) && hier.inSameSubNetwork(node1, node2)) {
                      callback(node1, node2, centerParents);
                    }
                  }
                }
              }
            };

            // callback for shifting branches
            var branchShiftCallback = function branchShiftCallback(node1, node2) {
              var centerParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

              //window.CALLBACKS.push(() => {
              var pos1 = _this3.direction.getPosition(node1);
              var pos2 = _this3.direction.getPosition(node2);
              var diffAbs = Math.abs(pos2 - pos1);
              var nodeSpacing = _this3.options.hierarchical.nodeSpacing;
              //console.log("NOW CHECKING:", node1.id, node2.id, diffAbs);
              if (diffAbs > nodeSpacing) {
                var branchNodes1 = {};
                var branchNodes2 = {};

                getBranchNodes(node1, branchNodes1);
                getBranchNodes(node2, branchNodes2);

                // check the largest distance between the branches
                var maxLevel = getCollisionLevel(node1, node2);
                var branchNodeBoundary1 = getBranchBoundary(branchNodes1, maxLevel);
                var branchNodeBoundary2 = getBranchBoundary(branchNodes2, maxLevel);
                var max1 = branchNodeBoundary1[1];
                var min2 = branchNodeBoundary2[0];
                var minSpace2 = branchNodeBoundary2[2];

                //console.log(node1.id, getBranchBoundary(branchNodes1, maxLevel), node2.id,
                //            getBranchBoundary(branchNodes2, maxLevel), maxLevel);
                var diffBranch = Math.abs(max1 - min2);
                if (diffBranch > nodeSpacing) {
                  var offset = max1 - min2 + nodeSpacing;
                  if (offset < -minSpace2 + nodeSpacing) {
                    offset = -minSpace2 + nodeSpacing;
                    //console.log("RESETTING OFFSET", max1 - min2 + this.options.hierarchical.nodeSpacing, -minSpace2, offset);
                  }
                  if (offset < 0) {
                    //console.log("SHIFTING", node2.id, offset);
                    _this3._shiftBlock(node2.id, offset);
                    stillShifting = true;

                    if (centerParent === true) _this3._centerParent(node2);
                  }
                }
              }
              //this.body.emitter.emit("_redraw");})
            };

            var minimizeEdgeLength = function minimizeEdgeLength(iterations, node) {
              //window.CALLBACKS.push(() => {
              //  console.log("ts",node.id);
              var nodeId = node.id;
              var allEdges = node.edges;
              var nodeLevel = _this3.hierarchical.levels[node.id];

              // gather constants
              var C2 = _this3.options.hierarchical.levelSeparation * _this3.options.hierarchical.levelSeparation;
              var referenceNodes = {};
              var aboveEdges = [];
              for (var i = 0; i < allEdges.length; i++) {
                var edge = allEdges[i];
                if (edge.toId != edge.fromId) {
                  var otherNode = edge.toId == nodeId ? edge.from : edge.to;
                  referenceNodes[allEdges[i].id] = otherNode;
                  if (_this3.hierarchical.levels[otherNode.id] < nodeLevel) {
                    aboveEdges.push(edge);
                  }
                }
              }

              // differentiated sum of lengths based on only moving one node over one axis
              var getFx = function getFx(point, edges) {
                var sum = 0;
                for (var _i2 = 0; _i2 < edges.length; _i2++) {
                  if (referenceNodes[edges[_i2].id] !== undefined) {
                    var a = _this3.direction.getPosition(referenceNodes[edges[_i2].id]) - point;
                    sum += a / Math.sqrt(a * a + C2);
                  }
                }
                return sum;
              };

              // doubly differentiated sum of lengths based on only moving one node over one axis
              var getDFx = function getDFx(point, edges) {
                var sum = 0;
                for (var _i3 = 0; _i3 < edges.length; _i3++) {
                  if (referenceNodes[edges[_i3].id] !== undefined) {
                    var a = _this3.direction.getPosition(referenceNodes[edges[_i3].id]) - point;
                    sum -= C2 * Math.pow(a * a + C2, -1.5);
                  }
                }
                return sum;
              };

              var getGuess = function getGuess(iterations, edges) {
                var guess = _this3.direction.getPosition(node);
                // Newton's method for optimization
                var guessMap = {};
                for (var _i4 = 0; _i4 < iterations; _i4++) {
                  var fx = getFx(guess, edges);
                  var dfx = getDFx(guess, edges);

                  // we limit the movement to avoid instability.
                  var limit = 40;
                  var ratio = Math.max(-limit, Math.min(limit, Math.round(fx / dfx)));
                  guess = guess - ratio;
                  // reduce duplicates
                  if (guessMap[guess] !== undefined) {
                    break;
                  }
                  guessMap[guess] = _i4;
                }
                return guess;
              };

              var moveBranch = function moveBranch(guess) {
                // position node if there is space
                var nodePosition = _this3.direction.getPosition(node);

                // check movable area of the branch
                if (branches[node.id] === undefined) {
                  var branchNodes = {};
                  getBranchNodes(node, branchNodes);
                  branches[node.id] = branchNodes;
                }
                var branchBoundary = getBranchBoundary(branches[node.id]);
                var minSpaceBranch = branchBoundary[2];
                var maxSpaceBranch = branchBoundary[3];

                var diff = guess - nodePosition;

                // check if we are allowed to move the node:
                var branchOffset = 0;
                if (diff > 0) {
                  branchOffset = Math.min(diff, maxSpaceBranch - _this3.options.hierarchical.nodeSpacing);
                } else if (diff < 0) {
                  branchOffset = -Math.min(-diff, minSpaceBranch - _this3.options.hierarchical.nodeSpacing);
                }

                if (branchOffset != 0) {
                  //console.log("moving branch:",branchOffset, maxSpaceBranch, minSpaceBranch)
                  _this3._shiftBlock(node.id, branchOffset);
                  //this.body.emitter.emit("_redraw");
                  stillShifting = true;
                }
              };

              var moveNode = function moveNode(guess) {
                var nodePosition = _this3.direction.getPosition(node);

                // position node if there is space

                var _getSpaceAroundNode4 = _this3._getSpaceAroundNode(node),
                    _getSpaceAroundNode5 = (0, _slicedToArray3['default'])(_getSpaceAroundNode4, 2),
                    minSpace = _getSpaceAroundNode5[0],
                    maxSpace = _getSpaceAroundNode5[1];

                var diff = guess - nodePosition;
                // check if we are allowed to move the node:
                var newPosition = nodePosition;
                if (diff > 0) {
                  newPosition = Math.min(nodePosition + (maxSpace - _this3.options.hierarchical.nodeSpacing), guess);
                } else if (diff < 0) {
                  newPosition = Math.max(nodePosition - (minSpace - _this3.options.hierarchical.nodeSpacing), guess);
                }

                if (newPosition !== nodePosition) {
                  //console.log("moving Node:",diff, minSpace, maxSpace);
                  _this3.direction.setPosition(node, newPosition);
                  //this.body.emitter.emit("_redraw");
                  stillShifting = true;
                }
              };

              var guess = getGuess(iterations, aboveEdges);
              moveBranch(guess);
              guess = getGuess(iterations, allEdges);
              moveNode(guess);
              //})
            };

            // method to remove whitespace between branches. Because we do bottom up, we can center the parents.
            var minimizeEdgeLengthBottomUp = function minimizeEdgeLengthBottomUp(iterations) {
              var levels = _this3.hierarchical.getLevels();
              levels = levels.reverse();
              for (var i = 0; i < iterations; i++) {
                stillShifting = false;
                for (var j = 0; j < levels.length; j++) {
                  var level = levels[j];
                  var levelNodes = _this3.hierarchical.distributionOrdering[level];
                  for (var k = 0; k < levelNodes.length; k++) {
                    minimizeEdgeLength(1000, levelNodes[k]);
                  }
                }
                if (stillShifting !== true) {
                  //console.log("FINISHED minimizeEdgeLengthBottomUp IN " + i);
                  break;
                }
              }
            };

            // method to remove whitespace between branches. Because we do bottom up, we can center the parents.
            var shiftBranchesCloserBottomUp = function shiftBranchesCloserBottomUp(iterations) {
              var levels = _this3.hierarchical.getLevels();
              levels = levels.reverse();
              for (var i = 0; i < iterations; i++) {
                stillShifting = false;
                shiftElementsCloser(branchShiftCallback, levels, true);
                if (stillShifting !== true) {
                  //console.log("FINISHED shiftBranchesCloserBottomUp IN " + (i+1));
                  break;
                }
              }
            };

            // center all parents
            var centerAllParents = function centerAllParents() {
              for (var nodeId in _this3.body.nodes) {
                if (_this3.body.nodes.hasOwnProperty(nodeId)) _this3._centerParent(_this3.body.nodes[nodeId]);
              }
            };

            // center all parents
            var centerAllParentsBottomUp = function centerAllParentsBottomUp() {
              var levels = _this3.hierarchical.getLevels();
              levels = levels.reverse();
              for (var i = 0; i < levels.length; i++) {
                var level = levels[i];
                var levelNodes = _this3.hierarchical.distributionOrdering[level];
                for (var j = 0; j < levelNodes.length; j++) {
                  _this3._centerParent(levelNodes[j]);
                }
              }
            };

            // the actual work is done here.
            if (this.options.hierarchical.blockShifting === true) {
              shiftBranchesCloserBottomUp(5);
              centerAllParents();
            }

            // minimize edge length
            if (this.options.hierarchical.edgeMinimization === true) {
              minimizeEdgeLengthBottomUp(20);
            }

            if (this.options.hierarchical.parentCentralization === true) {
              centerAllParentsBottomUp();
            }

            shiftTrees();
          }

          /**
           * This gives the space around the node. IF a map is supplied, it will only check against nodes NOT in the map.
           * This is used to only get the distances to nodes outside of a branch.
           * @param {Node} node
           * @param {{Node.id: vis.Node}} map
           * @returns {number[]}
           * @private
           */

        }, {
          key: '_getSpaceAroundNode',
          value: function _getSpaceAroundNode(node, map) {
            var useMap = true;
            if (map === undefined) {
              useMap = false;
            }
            var level = this.hierarchical.levels[node.id];
            if (level !== undefined) {
              var index = this.hierarchical.distributionIndex[node.id];
              var position = this.direction.getPosition(node);
              var ordering = this.hierarchical.distributionOrdering[level];
              var minSpace = 1e9;
              var maxSpace = 1e9;
              if (index !== 0) {
                var prevNode = ordering[index - 1];
                if (useMap === true && map[prevNode.id] === undefined || useMap === false) {
                  var prevPos = this.direction.getPosition(prevNode);
                  minSpace = position - prevPos;
                }
              }

              if (index != ordering.length - 1) {
                var nextNode = ordering[index + 1];
                if (useMap === true && map[nextNode.id] === undefined || useMap === false) {
                  var nextPos = this.direction.getPosition(nextNode);
                  maxSpace = Math.min(maxSpace, nextPos - position);
                }
              }

              return [minSpace, maxSpace];
            } else {
              return [0, 0];
            }
          }

          /**
           * We use this method to center a parent node and check if it does not cross other nodes when it does.
           * @param {Node} node
           * @private
           */

        }, {
          key: '_centerParent',
          value: function _centerParent(node) {
            if (this.hierarchical.parentReference[node.id]) {
              var parents = this.hierarchical.parentReference[node.id];
              for (var i = 0; i < parents.length; i++) {
                var parentId = parents[i];
                var parentNode = this.body.nodes[parentId];
                var children = this.hierarchical.childrenReference[parentId];

                if (children !== undefined) {
                  // get the range of the children
                  var newPosition = this._getCenterPosition(children);

                  var position = this.direction.getPosition(parentNode);

                  var _getSpaceAroundNode6 = this._getSpaceAroundNode(parentNode),
                      _getSpaceAroundNode7 = (0, _slicedToArray3['default'])(_getSpaceAroundNode6, 2),
                      minSpace = _getSpaceAroundNode7[0],
                      maxSpace = _getSpaceAroundNode7[1];

                  var diff = position - newPosition;
                  if (diff < 0 && Math.abs(diff) < maxSpace - this.options.hierarchical.nodeSpacing || diff > 0 && Math.abs(diff) < minSpace - this.options.hierarchical.nodeSpacing) {
                    this.direction.setPosition(parentNode, newPosition);
                  }
                }
              }
            }
          }

          /**
           * This function places the nodes on the canvas based on the hierarchial distribution.
           *
           * @param {Object} distribution | obtained by the function this._getDistribution()
           * @private
           */

        }, {
          key: '_placeNodesByHierarchy',
          value: function _placeNodesByHierarchy(distribution) {
            this.positionedNodes = {};
            // start placing all the level 0 nodes first. Then recursively position their branches.
            for (var level in distribution) {
              if (distribution.hasOwnProperty(level)) {
                // sort nodes in level by position:
                var nodeArray = (0, _keys2['default'])(distribution[level]);
                nodeArray = this._indexArrayToNodes(nodeArray);
                this.direction.sort(nodeArray);
                var handledNodeCount = 0;

                for (var i = 0; i < nodeArray.length; i++) {
                  var node = nodeArray[i];
                  if (this.positionedNodes[node.id] === undefined) {
                    var spacing = this.options.hierarchical.nodeSpacing;
                    var pos = spacing * handledNodeCount;
                    // We get the X or Y values we need and store them in pos and previousPos.
                    // The get and set make sure we get X or Y
                    if (handledNodeCount > 0) {
                      pos = this.direction.getPosition(nodeArray[i - 1]) + spacing;
                    }
                    this.direction.setPosition(node, pos, level);
                    this._validatePositionAndContinue(node, level, pos);

                    handledNodeCount++;
                  }
                }
              }
            }
          }

          /**
           * This is a recursively called function to enumerate the branches from the largest hubs and place the nodes
           * on a X position that ensures there will be no overlap.
           *
           * @param {Node.id} parentId
           * @param {number} parentLevel
           * @private
           */

        }, {
          key: '_placeBranchNodes',
          value: function _placeBranchNodes(parentId, parentLevel) {
            var childRef = this.hierarchical.childrenReference[parentId];

            // if this is not a parent, cancel the placing. This can happen with multiple parents to one child.
            if (childRef === undefined) {
              return;
            }

            // get a list of childNodes
            var childNodes = [];
            for (var i = 0; i < childRef.length; i++) {
              childNodes.push(this.body.nodes[childRef[i]]);
            }

            // use the positions to order the nodes.
            this.direction.sort(childNodes);

            // position the childNodes
            for (var _i5 = 0; _i5 < childNodes.length; _i5++) {
              var childNode = childNodes[_i5];
              var childNodeLevel = this.hierarchical.levels[childNode.id];
              // check if the child node is below the parent node and if it has already been positioned.
              if (childNodeLevel > parentLevel && this.positionedNodes[childNode.id] === undefined) {
                // get the amount of space required for this node. If parent the width is based on the amount of children.
                var spacing = this.options.hierarchical.nodeSpacing;
                var pos = void 0;

                // we get the X or Y values we need and store them in pos and previousPos.
                // The get and set make sure we get X or Y
                if (_i5 === 0) {
                  pos = this.direction.getPosition(this.body.nodes[parentId]);
                } else {
                  pos = this.direction.getPosition(childNodes[_i5 - 1]) + spacing;
                }
                this.direction.setPosition(childNode, pos, childNodeLevel);
                this._validatePositionAndContinue(childNode, childNodeLevel, pos);
              } else {
                return;
              }
            }

            // center the parent nodes.
            var center = this._getCenterPosition(childNodes);
            this.direction.setPosition(this.body.nodes[parentId], center, parentLevel);
          }

          /**
           * This method checks for overlap and if required shifts the branch. It also keeps records of positioned nodes.
           * Finally it will call _placeBranchNodes to place the branch nodes.
           * @param {Node} node
           * @param {number} level
           * @param {number} pos
           * @private
           */

        }, {
          key: '_validatePositionAndContinue',
          value: function _validatePositionAndContinue(node, level, pos) {
            // This method only works for formal trees and formal forests
            // Early exit if this is not the case
            if (!this.hierarchical.isTree) return;

            // if overlap has been detected, we shift the branch
            if (this.lastNodeOnLevel[level] !== undefined) {
              var previousPos = this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[level]]);
              if (pos - previousPos < this.options.hierarchical.nodeSpacing) {
                var diff = previousPos + this.options.hierarchical.nodeSpacing - pos;
                var sharedParent = this._findCommonParent(this.lastNodeOnLevel[level], node.id);
                this._shiftBlock(sharedParent.withChild, diff);
              }
            }

            this.lastNodeOnLevel[level] = node.id; // store change in position.
            this.positionedNodes[node.id] = true;
            this._placeBranchNodes(node.id, level);
          }

          /**
           * Receives an array with node indices and returns an array with the actual node references.
           * Used for sorting based on node properties.
           * @param {Array.<Node.id>} idArray
           * @returns {Array.<Node>}
           */

        }, {
          key: '_indexArrayToNodes',
          value: function _indexArrayToNodes(idArray) {
            var array = [];
            for (var i = 0; i < idArray.length; i++) {
              array.push(this.body.nodes[idArray[i]]);
            }
            return array;
          }

          /**
           * This function get the distribution of levels based on hubsize
           *
           * @returns {Object}
           * @private
           */

        }, {
          key: '_getDistribution',
          value: function _getDistribution() {
            var distribution = {};
            var nodeId = void 0,
                node = void 0;

            // we fix Y because the hierarchy is vertical,
            // we fix X so we do not give a node an x position for a second time.
            // the fix of X is removed after the x value has been set.
            for (nodeId in this.body.nodes) {
              if (this.body.nodes.hasOwnProperty(nodeId)) {
                node = this.body.nodes[nodeId];
                var level = this.hierarchical.levels[nodeId] === undefined ? 0 : this.hierarchical.levels[nodeId];
                this.direction.fix(node, level);
                if (distribution[level] === undefined) {
                  distribution[level] = {};
                }
                distribution[level][nodeId] = node;
              }
            }
            return distribution;
          }

          /**
           * Return the active (i.e. visible) edges for this node
           *
           * @param {Node} node
           * @returns {Array.<vis.Edge>} Array of edge instances
           * @private
           */

        }, {
          key: '_getActiveEdges',
          value: function _getActiveEdges(node) {
            var _this4 = this;

            var result = [];

            util.forEach(node.edges, function (edge) {
              if (_this4.body.edgeIndices.indexOf(edge.id) !== -1) {
                result.push(edge);
              }
            });

            return result;
          }

          /**
           * Get the hubsizes for all active nodes.
           *
           * @returns {number}
           * @private
           */

        }, {
          key: '_getHubSizes',
          value: function _getHubSizes() {
            var _this5 = this;

            var hubSizes = {};
            var nodeIds = this.body.nodeIndices;

            util.forEach(nodeIds, function (nodeId) {
              var node = _this5.body.nodes[nodeId];
              var hubSize = _this5._getActiveEdges(node).length;
              hubSizes[hubSize] = true;
            });

            // Make an array of the size sorted descending
            var result = [];
            util.forEach(hubSizes, function (size) {
              result.push(Number(size));
            });

            result.sort(function (a, b) {
              return b - a;
            });

            return result;
          }

          /**
           * this function allocates nodes in levels based on the recursive branching from the largest hubs.
           *
           * @private
           */

        }, {
          key: '_determineLevelsByHubsize',
          value: function _determineLevelsByHubsize() {
            var _this6 = this;

            var levelDownstream = function levelDownstream(nodeA, nodeB) {
              _this6.hierarchical.levelDownstream(nodeA, nodeB);
            };

            var hubSizes = this._getHubSizes();

            var _loop = function _loop(i) {
              var hubSize = hubSizes[i];
              if (hubSize === 0) return 'break';

              util.forEach(_this6.body.nodeIndices, function (nodeId) {
                var node = _this6.body.nodes[nodeId];

                if (hubSize === _this6._getActiveEdges(node).length) {
                  _this6._crawlNetwork(levelDownstream, nodeId);
                }
              });
            };

            for (var i = 0; i < hubSizes.length; ++i) {
              var _ret = _loop(i);

              if (_ret === 'break') break;
            }
          }

          /**
           * TODO: release feature
           * TODO: Determine if this feature is needed at all
           *
           * @private
           */

        }, {
          key: '_determineLevelsCustomCallback',
          value: function _determineLevelsCustomCallback() {
            var _this7 = this;

            var minLevel = 100000;

            // TODO: this should come from options.
            var customCallback = function customCallback(nodeA, nodeB, edge) {// eslint-disable-line no-unused-vars

            };

            // TODO: perhaps move to HierarchicalStatus.
            //       But I currently don't see the point, this method is not used.
            var levelByDirection = function levelByDirection(nodeA, nodeB, edge) {
              var levelA = _this7.hierarchical.levels[nodeA.id];
              // set initial level
              if (levelA === undefined) {
                levelA = _this7.hierarchical.levels[nodeA.id] = minLevel;
              }

              var diff = customCallback(NetworkUtil.cloneOptions(nodeA, 'node'), NetworkUtil.cloneOptions(nodeB, 'node'), NetworkUtil.cloneOptions(edge, 'edge'));

              _this7.hierarchical.levels[nodeB.id] = levelA + diff;
            };

            this._crawlNetwork(levelByDirection);
            this.hierarchical.setMinLevelToZero(this.body.nodes);
          }

          /**
           * Allocate nodes in levels based on the direction of the edges.
           *
           * @private
           */

        }, {
          key: '_determineLevelsDirected',
          value: function _determineLevelsDirected() {
            var _this8 = this;

            var minLevel = 10000;

            /**
             * Check if there is an edge going the opposite direction for given edge
             *
             * @param {Edge} edge  edge to check
             * @returns {boolean} true if there's another edge going into the opposite direction
             */
            var isBidirectional = function isBidirectional(edge) {
              util.forEach(_this8.body.edges, function (otherEdge) {
                if (otherEdge.toId === edge.fromId && otherEdge.fromId === edge.toId) {
                  return true;
                }
              });

              return false;
            };

            var levelByDirection = function levelByDirection(nodeA, nodeB, edge) {
              var levelA = _this8.hierarchical.levels[nodeA.id];
              var levelB = _this8.hierarchical.levels[nodeB.id];

              if (isBidirectional(edge) && levelA !== undefined && levelB !== undefined) {
                // Don't redo the level determination if already done in this case.
                return;
              }

              // set initial level
              if (levelA === undefined) {
                levelA = _this8.hierarchical.levels[nodeA.id] = minLevel;
              }
              if (edge.toId == nodeB.id) {
                _this8.hierarchical.levels[nodeB.id] = levelA + 1;
              } else {
                _this8.hierarchical.levels[nodeB.id] = levelA - 1;
              }
            };

            this._crawlNetwork(levelByDirection);
            this.hierarchical.setMinLevelToZero(this.body.nodes);
          }

          /**
           * Update the bookkeeping of parent and child.
           * @private
           */

        }, {
          key: '_generateMap',
          value: function _generateMap() {
            var _this9 = this;

            var fillInRelations = function fillInRelations(parentNode, childNode) {
              if (_this9.hierarchical.levels[childNode.id] > _this9.hierarchical.levels[parentNode.id]) {
                _this9.hierarchical.addRelation(parentNode.id, childNode.id);
              }
            };

            this._crawlNetwork(fillInRelations);
            this.hierarchical.checkIfTree();
          }

          /**
           * Crawl over the entire network and use a callback on each node couple that is connected to each other.
           * @param {function} [callback=function(){}]          | will receive nodeA, nodeB and the connecting edge. A and B are distinct.
           * @param {Node.id} startingNodeId
           * @private
           */

        }, {
          key: '_crawlNetwork',
          value: function _crawlNetwork() {
            var _this10 = this;

            var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
            var startingNodeId = arguments[1];

            var progress = {};

            var crawler = function crawler(node, tree) {
              if (progress[node.id] === undefined) {
                _this10.hierarchical.setTreeIndex(node, tree);

                progress[node.id] = true;
                var childNode = void 0;
                var edges = _this10._getActiveEdges(node);
                for (var i = 0; i < edges.length; i++) {
                  var edge = edges[i];
                  if (edge.connected === true) {
                    if (edge.toId == node.id) {
                      // Not '===' because id's can be string and numeric
                      childNode = edge.from;
                    } else {
                      childNode = edge.to;
                    }

                    if (node.id != childNode.id) {
                      // Not '!==' because id's can be string and numeric
                      callback(node, childNode, edge);
                      crawler(childNode, tree);
                    }
                  }
                }
              }
            };

            if (startingNodeId === undefined) {
              // Crawl over all nodes
              var treeIndex = 0; // Serves to pass a unique id for the current distinct tree

              for (var i = 0; i < this.body.nodeIndices.length; i++) {
                var nodeId = this.body.nodeIndices[i];

                if (progress[nodeId] === undefined) {
                  var node = this.body.nodes[nodeId];
                  crawler(node, treeIndex);
                  treeIndex += 1;
                }
              }
            } else {
              // Crawl from the given starting node
              var _node2 = this.body.nodes[startingNodeId];
              if (_node2 === undefined) {
                console.error("Node not found:", startingNodeId);
                return;
              }
              crawler(_node2);
            }
          }

          /**
           * Shift a branch a certain distance
           * @param {Node.id} parentId
           * @param {number} diff
           * @private
           */

        }, {
          key: '_shiftBlock',
          value: function _shiftBlock(parentId, diff) {
            var _this11 = this;

            var progress = {};
            var shifter = function shifter(parentId) {
              if (progress[parentId]) {
                return;
              }
              progress[parentId] = true;
              _this11.direction.shift(parentId, diff);

              var childRef = _this11.hierarchical.childrenReference[parentId];
              if (childRef !== undefined) {
                for (var i = 0; i < childRef.length; i++) {
                  shifter(childRef[i]);
                }
              }
            };
            shifter(parentId);
          }

          /**
           * Find a common parent between branches.
           * @param {Node.id} childA
           * @param {Node.id} childB
           * @returns {{foundParent, withChild}}
           * @private
           */

        }, {
          key: '_findCommonParent',
          value: function _findCommonParent(childA, childB) {
            var _this12 = this;

            var parents = {};
            var iterateParents = function iterateParents(parents, child) {
              var parentRef = _this12.hierarchical.parentReference[child];
              if (parentRef !== undefined) {
                for (var i = 0; i < parentRef.length; i++) {
                  var parent = parentRef[i];
                  parents[parent] = true;
                  iterateParents(parents, parent);
                }
              }
            };
            var findParent = function findParent(parents, child) {
              var parentRef = _this12.hierarchical.parentReference[child];
              if (parentRef !== undefined) {
                for (var i = 0; i < parentRef.length; i++) {
                  var parent = parentRef[i];
                  if (parents[parent] !== undefined) {
                    return { foundParent: parent, withChild: child };
                  }
                  var branch = findParent(parents, parent);
                  if (branch.foundParent !== null) {
                    return branch;
                  }
                }
              }
              return { foundParent: null, withChild: child };
            };

            iterateParents(parents, childA);
            return findParent(parents, childB);
          }

          /**
           * Set the strategy pattern for handling the coordinates given the current direction.
           *
           * The individual instances contain all the operations and data specific to a layout direction.
           *
           * @param {Node} node
           * @param {{x: number, y: number}} position
           * @param {number} level
           * @param {boolean} [doNotUpdate=false]
           * @private
           */

        }, {
          key: 'setDirectionStrategy',
          value: function setDirectionStrategy() {
            var isVertical = this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU';

            if (isVertical) {
              this.direction = new VerticalStrategy(this);
            } else {
              this.direction = new HorizontalStrategy(this);
            }
          }

          /**
           * Determine the center position of a branch from the passed list of child nodes
           *
           * This takes into account the positions of all the child nodes.
           * @param {Array.<Node|vis.Node.id>} childNodes  Array of either child nodes or node id's
           * @return {number}
           * @private
           */

        }, {
          key: '_getCenterPosition',
          value: function _getCenterPosition(childNodes) {
            var minPos = 1e9;
            var maxPos = -1e9;

            for (var i = 0; i < childNodes.length; i++) {
              var childNode = void 0;
              if (childNodes[i].id !== undefined) {
                childNode = childNodes[i];
              } else {
                var childNodeId = childNodes[i];
                childNode = this.body.nodes[childNodeId];
              }

              var position = this.direction.getPosition(childNode);
              minPos = Math.min(minPos, position);
              maxPos = Math.max(maxPos, position);
            }

            return 0.5 * (minPos + maxPos);
          }
        }]);
        return LayoutEngine;
      }();

      exports['default'] = LayoutEngine;

      /***/
    },
    /* 236 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.VerticalStrategy = exports.HorizontalStrategy = undefined;

      var _getPrototypeOf = __webpack_require__(3);

      var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

      var _possibleConstructorReturn2 = __webpack_require__(4);

      var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

      var _inherits2 = __webpack_require__(5);

      var _inherits3 = _interopRequireDefault(_inherits2);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      /**
       * Helper classes for LayoutEngine.
       *
       * Strategy pattern for usage of direction methods for hierarchical layouts.
       */

      /**
       * Interface definition for direction strategy classes.
       *
       * This class describes the interface for the Strategy
       * pattern classes used to differentiate horizontal and vertical
       * direction of hierarchical results.
       *
       * For a given direction, one coordinate will be 'fixed', meaning that it is
       * determined by level.
       * The other coordinate is 'unfixed', meaning that the nodes on a given level
       * can still move along that coordinate. So:
       *
       * - `vertical` layout: `x` unfixed, `y` fixed per level
       * - `horizontal` layout: `x` fixed per level, `y` unfixed
       *
       * The local methods are stubs and should be regarded as abstract.
       * Derived classes **must** implement all the methods themselves.
       *
       * @private
       */
      var DirectionInterface = function () {
        function DirectionInterface() {
          (0, _classCallCheck3['default'])(this, DirectionInterface);
        }

        (0, _createClass3['default'])(DirectionInterface, [{
          key: 'abstract',

          /** @ignore **/
          value: function abstract() {
            throw new Error("Can't instantiate abstract class!");
          }

          /**
           * This is a dummy call which is used to suppress the jsdoc errors of type:
           *
           *   "'param' is assigned a value but never used"
           *
           * @ignore
           **/

        }, {
          key: 'fake_use',
          value: function fake_use() {}
          // Do nothing special


          /**
           * Type to use to translate dynamic curves to, in the case of hierarchical layout.
           * Dynamic curves do not work for these.
           *
           * The value should be perpendicular to the actual direction of the layout.
           *
           * @return {string} Direction, either 'vertical' or 'horizontal'
           */

        }, {
          key: 'curveType',
          value: function curveType() {
            return this.abstract();
          }

          /**
           * Return the value of the coordinate that is not fixed for this direction.
           *
           * @param {Node} node The node to read
           * @return {number} Value of the unfixed coordinate
           */

        }, {
          key: 'getPosition',
          value: function getPosition(node) {
            this.fake_use(node);return this.abstract();
          }

          /**
           * Set the value of the coordinate that is not fixed for this direction.
           *
           * @param {Node} node The node to adjust
           * @param {number} position
           * @param {number} [level] if specified, the hierarchy level that this node should be fixed to
           */

        }, {
          key: 'setPosition',
          value: function setPosition(node, position) {
            var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            this.fake_use(node, position, level);this.abstract();
          }

          /**
           * Get the width of a tree.
           *
           * A `tree` here is a subset of nodes within the network which are not connected to other nodes,
           * only among themselves. In essence, it is a sub-network.
           *
           * @param {number} index The index number of a tree
           * @return {number} the width of a tree in the view coordinates
           */

        }, {
          key: 'getTreeSize',
          value: function getTreeSize(index) {
            this.fake_use(index);return this.abstract();
          }

          /**
           * Sort array of nodes on the unfixed coordinates.
           *
           * @param {Array.<Node>} nodeArray array of nodes to sort
           */

        }, {
          key: 'sort',
          value: function sort(nodeArray) {
            this.fake_use(nodeArray);this.abstract();
          }

          /**
           * Assign the fixed coordinate of the node to the given level
           *
           * @param {Node} node The node to adjust
           * @param {number} level The level to fix to
           */

        }, {
          key: 'fix',
          value: function fix(node, level) {
            this.fake_use(node, level);this.abstract();
          }

          /**
           * Add an offset to the unfixed coordinate of the given node. 
           *
           * @param {NodeId} nodeId Id of the node to adjust
           * @param {number} diff Offset to add to the unfixed coordinate
           */

        }, {
          key: 'shift',
          value: function shift(nodeId, diff) {
            this.fake_use(nodeId, diff);this.abstract();
          }
        }]);
        return DirectionInterface;
      }();

      /**
       * Vertical Strategy
       *
       * Coordinate `y` is fixed on levels, coordinate `x` is unfixed.
       *
       * @extends DirectionInterface
       * @private
       */

      var VerticalStrategy = function (_DirectionInterface) {
        (0, _inherits3['default'])(VerticalStrategy, _DirectionInterface);

        /**
         * Constructor
         *
         * @param {Object} layout reference to the parent LayoutEngine instance.
         */
        function VerticalStrategy(layout) {
          (0, _classCallCheck3['default'])(this, VerticalStrategy);

          var _this = (0, _possibleConstructorReturn3['default'])(this, (VerticalStrategy.__proto__ || (0, _getPrototypeOf2['default'])(VerticalStrategy)).call(this));

          _this.layout = layout;
          return _this;
        }

        /** @inheritdoc */

        (0, _createClass3['default'])(VerticalStrategy, [{
          key: 'curveType',
          value: function curveType() {
            return 'horizontal';
          }

          /** @inheritdoc */

        }, {
          key: 'getPosition',
          value: function getPosition(node) {
            return node.x;
          }

          /** @inheritdoc */

        }, {
          key: 'setPosition',
          value: function setPosition(node, position) {
            var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

            if (level !== undefined) {
              this.layout.hierarchical.addToOrdering(node, level);
            }
            node.x = position;
          }

          /** @inheritdoc */

        }, {
          key: 'getTreeSize',
          value: function getTreeSize(index) {
            var res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index);
            return { min: res.min_x, max: res.max_x };
          }

          /** @inheritdoc */

        }, {
          key: 'sort',
          value: function sort(nodeArray) {
            nodeArray.sort(function (a, b) {
              // Test on 'undefined' takes care of divergent behaviour in chrome
              if (a.x === undefined || b.x === undefined) return 0; // THIS HAPPENS
              return a.x - b.x;
            });
          }

          /** @inheritdoc */

        }, {
          key: 'fix',
          value: function fix(node, level) {
            node.y = this.layout.options.hierarchical.levelSeparation * level;
            node.options.fixed.y = true;
          }

          /** @inheritdoc */

        }, {
          key: 'shift',
          value: function shift(nodeId, diff) {
            this.layout.body.nodes[nodeId].x += diff;
          }
        }]);
        return VerticalStrategy;
      }(DirectionInterface);

      /**
       * Horizontal Strategy
       *
       * Coordinate `x` is fixed on levels, coordinate `y` is unfixed.
       *
       * @extends DirectionInterface
       * @private
       */

      var HorizontalStrategy = function (_DirectionInterface2) {
        (0, _inherits3['default'])(HorizontalStrategy, _DirectionInterface2);

        /**
         * Constructor
         *
         * @param {Object} layout reference to the parent LayoutEngine instance.
         */
        function HorizontalStrategy(layout) {
          (0, _classCallCheck3['default'])(this, HorizontalStrategy);

          var _this2 = (0, _possibleConstructorReturn3['default'])(this, (HorizontalStrategy.__proto__ || (0, _getPrototypeOf2['default'])(HorizontalStrategy)).call(this));

          _this2.layout = layout;
          return _this2;
        }

        /** @inheritdoc */

        (0, _createClass3['default'])(HorizontalStrategy, [{
          key: 'curveType',
          value: function curveType() {
            return 'vertical';
          }

          /** @inheritdoc */

        }, {
          key: 'getPosition',
          value: function getPosition(node) {
            return node.y;
          }

          /** @inheritdoc */

        }, {
          key: 'setPosition',
          value: function setPosition(node, position) {
            var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

            if (level !== undefined) {
              this.layout.hierarchical.addToOrdering(node, level);
            }
            node.y = position;
          }

          /** @inheritdoc */

        }, {
          key: 'getTreeSize',
          value: function getTreeSize(index) {
            var res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index);
            return { min: res.min_y, max: res.max_y };
          }

          /** @inheritdoc */

        }, {
          key: 'sort',
          value: function sort(nodeArray) {
            nodeArray.sort(function (a, b) {
              // Test on 'undefined' takes care of divergent behaviour in chrome
              if (a.y === undefined || b.y === undefined) return 0; // THIS HAPPENS
              return a.y - b.y;
            });
          }

          /** @inheritdoc */

        }, {
          key: 'fix',
          value: function fix(node, level) {
            node.x = this.layout.options.hierarchical.levelSeparation * level;
            node.options.fixed.x = true;
          }

          /** @inheritdoc */

        }, {
          key: 'shift',
          value: function shift(nodeId, diff) {
            this.layout.body.nodes[nodeId].y += diff;
          }
        }]);
        return HorizontalStrategy;
      }(DirectionInterface);

      exports.HorizontalStrategy = HorizontalStrategy;
      exports.VerticalStrategy = VerticalStrategy;

      /***/
    },
    /* 237 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _keys = __webpack_require__(8);

      var _keys2 = _interopRequireDefault(_keys);

      var _stringify = __webpack_require__(19);

      var _stringify2 = _interopRequireDefault(_stringify);

      var _typeof2 = __webpack_require__(6);

      var _typeof3 = _interopRequireDefault(_typeof2);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { 'default': obj };
      }

      var util = __webpack_require__(2);
      var Hammer = __webpack_require__(10);
      var hammerUtil = __webpack_require__(37);

      /**
       * Clears the toolbar div element of children
       *
       * @private
       */

      var ManipulationSystem = function () {
        /**
         * @param {Object} body
         * @param {Canvas} canvas
         * @param {SelectionHandler} selectionHandler
         */
        function ManipulationSystem(body, canvas, selectionHandler) {
          var _this = this;

          (0, _classCallCheck3['default'])(this, ManipulationSystem);

          this.body = body;
          this.canvas = canvas;
          this.selectionHandler = selectionHandler;

          this.editMode = false;
          this.manipulationDiv = undefined;
          this.editModeDiv = undefined;
          this.closeDiv = undefined;

          this.manipulationHammers = [];
          this.temporaryUIFunctions = {};
          this.temporaryEventFunctions = [];

          this.touchTime = 0;
          this.temporaryIds = { nodes: [], edges: [] };
          this.guiEnabled = false;
          this.inMode = false;
          this.selectedControlNode = undefined;

          this.options = {};
          this.defaultOptions = {
            enabled: false,
            initiallyActive: false,
            addNode: true,
            addEdge: true,
            editNode: undefined,
            editEdge: true,
            deleteNode: true,
            deleteEdge: true,
            controlNodeStyle: {
              shape: 'dot',
              size: 6,
              color: { background: '#ff0000', border: '#3c3c3c', highlight: { background: '#07f968', border: '#3c3c3c' } },
              borderWidth: 2,
              borderWidthSelected: 2
            }
          };
          util.extend(this.options, this.defaultOptions);

          this.body.emitter.on('destroy', function () {
            _this._clean();
          });
          this.body.emitter.on('_dataChanged', this._restore.bind(this));
          this.body.emitter.on('_resetData', this._restore.bind(this));
        }

        /**
         * If something changes in the data during editing, switch back to the initial datamanipulation state and close all edit modes.
         * @private
         */

        (0, _createClass3['default'])(ManipulationSystem, [{
          key: '_restore',
          value: function _restore() {
            if (this.inMode !== false) {
              if (this.options.initiallyActive === true) {
                this.enableEditMode();
              } else {
                this.disableEditMode();
              }
            }
          }

          /**
           * Set the Options
           *
           * @param {Object} options
           * @param {Object} allOptions
           * @param {Object} globalOptions
           */

        }, {
          key: 'setOptions',
          value: function setOptions(options, allOptions, globalOptions) {
            if (allOptions !== undefined) {
              if (allOptions.locale !== undefined) {
                this.options.locale = allOptions.locale;
              } else {
                this.options.locale = globalOptions.locale;
              }
              if (allOptions.locales !== undefined) {
                this.options.locales = allOptions.locales;
              } else {
                this.options.locales = globalOptions.locales;
              }
            }

            if (options !== undefined) {
              if (typeof options === 'boolean') {
                this.options.enabled = options;
              } else {
                this.options.enabled = true;
                util.deepExtend(this.options, options);
              }
              if (this.options.initiallyActive === true) {
                this.editMode = true;
              }
              this._setup();
            }
          }

          /**
           * Enable or disable edit-mode. Draws the DOM required and cleans up after itself.
           *
           * @private
           */

        }, {
          key: 'toggleEditMode',
          value: function toggleEditMode() {
            if (this.editMode === true) {
              this.disableEditMode();
            } else {
              this.enableEditMode();
            }
          }

          /**
           * Enables Edit Mode
           */

        }, {
          key: 'enableEditMode',
          value: function enableEditMode() {
            this.editMode = true;

            this._clean();
            if (this.guiEnabled === true) {
              this.manipulationDiv.style.display = 'block';
              this.closeDiv.style.display = 'block';
              this.editModeDiv.style.display = 'none';
              this.showManipulatorToolbar();
            }
          }

          /**
           * Disables Edit Mode
           */

        }, {
          key: 'disableEditMode',
          value: function disableEditMode() {
            this.editMode = false;

            this._clean();
            if (this.guiEnabled === true) {
              this.manipulationDiv.style.display = 'none';
              this.closeDiv.style.display = 'none';
              this.editModeDiv.style.display = 'block';
              this._createEditButton();
            }
          }

          /**
           * Creates the main toolbar. Removes functions bound to the select event. Binds all the buttons of the toolbar.
           *
           * @private
           */

        }, {
          key: 'showManipulatorToolbar',
          value: function showManipulatorToolbar() {
            // restore the state of any bound functions or events, remove control nodes, restore physics
            this._clean();

            // reset global variables
            this.manipulationDOM = {};

            // if the gui is enabled, draw all elements.
            if (this.guiEnabled === true) {
              // a _restore will hide these menus
              this.editMode = true;
              this.manipulationDiv.style.display = 'block';
              this.closeDiv.style.display = 'block';

              var selectedNodeCount = this.selectionHandler._getSelectedNodeCount();
              var selectedEdgeCount = this.selectionHandler._getSelectedEdgeCount();
              var selectedTotalCount = selectedNodeCount + selectedEdgeCount;
              var locale = this.options.locales[this.options.locale];
              var needSeperator = false;

              if (this.options.addNode !== false) {
                this._createAddNodeButton(locale);
                needSeperator = true;
              }
              if (this.options.addEdge !== false) {
                if (needSeperator === true) {
                  this._createSeperator(1);
                } else {
                  needSeperator = true;
                }
                this._createAddEdgeButton(locale);
              }

              if (selectedNodeCount === 1 && typeof this.options.editNode === 'function') {
                if (needSeperator === true) {
                  this._createSeperator(2);
                } else {
                  needSeperator = true;
                }
                this._createEditNodeButton(locale);
              } else if (selectedEdgeCount === 1 && selectedNodeCount === 0 && this.options.editEdge !== false) {
                if (needSeperator === true) {
                  this._createSeperator(3);
                } else {
                  needSeperator = true;
                }
                this._createEditEdgeButton(locale);
              }

              // remove buttons
              if (selectedTotalCount !== 0) {
                if (selectedNodeCount > 0 && this.options.deleteNode !== false) {
                  if (needSeperator === true) {
                    this._createSeperator(4);
                  }
                  this._createDeleteButton(locale);
                } else if (selectedNodeCount === 0 && this.options.deleteEdge !== false) {
                  if (needSeperator === true) {
                    this._createSeperator(4);
                  }
                  this._createDeleteButton(locale);
                }
              }

              // bind the close button
              this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));

              // refresh this bar based on what has been selected
              this._temporaryBindEvent('select', this.showManipulatorToolbar.bind(this));
            }

            // redraw to show any possible changes
            this.body.emitter.emit('_redraw');
          }

          /**
           * Create the toolbar for adding Nodes
           */

        }, {
          key: 'addNodeMode',
          value: function addNodeMode() {
            // when using the gui, enable edit mode if it wasnt already.
            if (this.editMode !== true) {
              this.enableEditMode();
            }

            // restore the state of any bound functions or events, remove control nodes, restore physics
            this._clean();

            this.inMode = 'addNode';
            if (this.guiEnabled === true) {
              var locale = this.options.locales[this.options.locale];
              this.manipulationDOM = {};
              this._createBackButton(locale);
              this._createSeperator();
              this._createDescription(locale['addDescription'] || this.options.locales['en']['addDescription']);

              // bind the close button
              this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
            }

            this._temporaryBindEvent('click', this._performAddNode.bind(this));
          }

          /**
           * call the bound function to handle the editing of the node. The node has to be selected.
           */

        }, {
          key: 'editNode',
          value: function editNode() {
            var _this2 = this;

            // when using the gui, enable edit mode if it wasnt already.
            if (this.editMode !== true) {
              this.enableEditMode();
            }

            // restore the state of any bound functions or events, remove control nodes, restore physics
            this._clean();
            var node = this.selectionHandler._getSelectedNode();
            if (node !== undefined) {
              this.inMode = 'editNode';
              if (typeof this.options.editNode === 'function') {
                if (node.isCluster !== true) {
                  var data = util.deepExtend({}, node.options, false);
                  data.x = node.x;
                  data.y = node.y;

                  if (this.options.editNode.length === 2) {
                    this.options.editNode(data, function (finalizedData) {
                      if (finalizedData !== null && finalizedData !== undefined && _this2.inMode === 'editNode') {
                        // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
                        _this2.body.data.nodes.getDataSet().update(finalizedData);
                      }
                      _this2.showManipulatorToolbar();
                    });
                  } else {
                    throw new Error('The function for edit does not support two arguments (data, callback)');
                  }
                } else {
                  alert(this.options.locales[this.options.locale]['editClusterError'] || this.options.locales['en']['editClusterError']);
                }
              } else {
                throw new Error('No function has been configured to handle the editing of nodes.');
              }
            } else {
              this.showManipulatorToolbar();
            }
          }

          /**
           * create the toolbar to connect nodes
           */

        }, {
          key: 'addEdgeMode',
          value: function addEdgeMode() {
            // when using the gui, enable edit mode if it wasnt already.
            if (this.editMode !== true) {
              this.enableEditMode();
            }

            // restore the state of any bound functions or events, remove control nodes, restore physics
            this._clean();

            this.inMode = 'addEdge';
            if (this.guiEnabled === true) {
              var locale = this.options.locales[this.options.locale];
              this.manipulationDOM = {};
              this._createBackButton(locale);
              this._createSeperator();
              this._createDescription(locale['edgeDescription'] || this.options.locales['en']['edgeDescription']);

              // bind the close button
              this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
            }

            // temporarily overload functions
            this._temporaryBindUI('onTouch', this._handleConnect.bind(this));
            this._temporaryBindUI('onDragEnd', this._finishConnect.bind(this));
            this._temporaryBindUI('onDrag', this._dragControlNode.bind(this));
            this._temporaryBindUI('onRelease', this._finishConnect.bind(this));
            this._temporaryBindUI('onDragStart', this._dragStartEdge.bind(this));
            this._temporaryBindUI('onHold', function () {});
          }

          /**
           * create the toolbar to edit edges
           */

        }, {
          key: 'editEdgeMode',
          value: function editEdgeMode() {
            // when using the gui, enable edit mode if it wasn't already.
            if (this.editMode !== true) {
              this.enableEditMode();
            }

            // restore the state of any bound functions or events, remove control nodes, restore physics
            this._clean();

            this.inMode = 'editEdge';
            if ((0, _typeof3['default'])(this.options.editEdge) === 'object' && typeof this.options.editEdge.editWithoutDrag === "function") {
              this.edgeBeingEditedId = this.selectionHandler.getSelectedEdges()[0];
              if (this.edgeBeingEditedId !== undefined) {
                var edge = this.body.edges[this.edgeBeingEditedId];
                this._performEditEdge(edge.from, edge.to);
                return;
              }
            }
            if (this.guiEnabled === true) {
              var locale = this.options.locales[this.options.locale];
              this.manipulationDOM = {};
              this._createBackButton(locale);
              this._createSeperator();
              this._createDescription(locale['editEdgeDescription'] || this.options.locales['en']['editEdgeDescription']);

              // bind the close button
              this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
            }

            this.edgeBeingEditedId = this.selectionHandler.getSelectedEdges()[0];
            if (this.edgeBeingEditedId !== undefined) {
              var _edge = this.body.edges[this.edgeBeingEditedId];

              // create control nodes
              var controlNodeFrom = this._getNewTargetNode(_edge.from.x, _edge.from.y);
              var controlNodeTo = this._getNewTargetNode(_edge.to.x, _edge.to.y);

              this.temporaryIds.nodes.push(controlNodeFrom.id);
              this.temporaryIds.nodes.push(controlNodeTo.id);

              this.body.nodes[controlNodeFrom.id] = controlNodeFrom;
              this.body.nodeIndices.push(controlNodeFrom.id);
              this.body.nodes[controlNodeTo.id] = controlNodeTo;
              this.body.nodeIndices.push(controlNodeTo.id);

              // temporarily overload UI functions, cleaned up automatically because of _temporaryBindUI
              this._temporaryBindUI('onTouch', this._controlNodeTouch.bind(this)); // used to get the position
              this._temporaryBindUI('onTap', function () {}); // disabled
              this._temporaryBindUI('onHold', function () {}); // disabled
              this._temporaryBindUI('onDragStart', this._controlNodeDragStart.bind(this)); // used to select control node
              this._temporaryBindUI('onDrag', this._controlNodeDrag.bind(this)); // used to drag control node
              this._temporaryBindUI('onDragEnd', this._controlNodeDragEnd.bind(this)); // used to connect or revert control nodes
              this._temporaryBindUI('onMouseMove', function () {}); // disabled

              // create function to position control nodes correctly on movement
              // automatically cleaned up because we use the temporary bind
              this._temporaryBindEvent('beforeDrawing', function (ctx) {
                var positions = _edge.edgeType.findBorderPositions(ctx);
                if (controlNodeFrom.selected === false) {
                  controlNodeFrom.x = positions.from.x;
                  controlNodeFrom.y = positions.from.y;
                }
                if (controlNodeTo.selected === false) {
                  controlNodeTo.x = positions.to.x;
                  controlNodeTo.y = positions.to.y;
                }
              });

              this.body.emitter.emit('_redraw');
            } else {
              this.showManipulatorToolbar();
            }
          }

          /**
           * delete everything in the selection
           */

        }, {
          key: 'deleteSelected',
          value: function deleteSelected() {
            var _this3 = this;

            // when using the gui, enable edit mode if it wasnt already.
            if (this.editMode !== true) {
              this.enableEditMode();
            }

            // restore the state of any bound functions or events, remove control nodes, restore physics
            this._clean();

            this.inMode = 'delete';
            var selectedNodes = this.selectionHandler.getSelectedNodes();
            var selectedEdges = this.selectionHandler.getSelectedEdges();
            var deleteFunction = undefined;
            if (selectedNodes.length > 0) {
              for (var i = 0; i < selectedNodes.length; i++) {
                if (this.body.nodes[selectedNodes[i]].isCluster === true) {
                  alert(this.options.locales[this.options.locale]['deleteClusterError'] || this.options.locales['en']['deleteClusterError']);
                  return;
                }
              }

              if (typeof this.options.deleteNode === 'function') {
                deleteFunction = this.options.deleteNode;
              }
            } else if (selectedEdges.length > 0) {
              if (typeof this.options.deleteEdge === 'function') {
                deleteFunction = this.options.deleteEdge;
              }
            }

            if (typeof deleteFunction === 'function') {
              var data = { nodes: selectedNodes, edges: selectedEdges };
              if (deleteFunction.length === 2) {
                deleteFunction(data, function (finalizedData) {
                  if (finalizedData !== null && finalizedData !== undefined && _this3.inMode === 'delete') {
                    // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
                    _this3.body.data.edges.getDataSet().remove(finalizedData.edges);
                    _this3.body.data.nodes.getDataSet().remove(finalizedData.nodes);
                    _this3.body.emitter.emit('startSimulation');
                    _this3.showManipulatorToolbar();
                  } else {
                    _this3.body.emitter.emit('startSimulation');
                    _this3.showManipulatorToolbar();
                  }
                });
              } else {
                throw new Error('The function for delete does not support two arguments (data, callback)');
              }
            } else {
              this.body.data.edges.getDataSet().remove(selectedEdges);
              this.body.data.nodes.getDataSet().remove(selectedNodes);
              this.body.emitter.emit('startSimulation');
              this.showManipulatorToolbar();
            }
          }

          //********************************************** PRIVATE ***************************************//

          /**
           * draw or remove the DOM
           * @private
           */

        }, {
          key: '_setup',
          value: function _setup() {
            if (this.options.enabled === true) {
              // Enable the GUI
              this.guiEnabled = true;

              this._createWrappers();
              if (this.editMode === false) {
                this._createEditButton();
              } else {
                this.showManipulatorToolbar();
              }
            } else {
              this._removeManipulationDOM();

              // disable the gui
              this.guiEnabled = false;
            }
          }

          /**
           * create the div overlays that contain the DOM
           * @private
           */

        }, {
          key: '_createWrappers',
          value: function _createWrappers() {
            // load the manipulator HTML elements. All styling done in css.
            if (this.manipulationDiv === undefined) {
              this.manipulationDiv = document.createElement('div');
              this.manipulationDiv.className = 'vis-manipulation';
              if (this.editMode === true) {
                this.manipulationDiv.style.display = 'block';
              } else {
                this.manipulationDiv.style.display = 'none';
              }
              this.canvas.frame.appendChild(this.manipulationDiv);
            }

            // container for the edit button.
            if (this.editModeDiv === undefined) {
              this.editModeDiv = document.createElement('div');
              this.editModeDiv.className = 'vis-edit-mode';
              if (this.editMode === true) {
                this.editModeDiv.style.display = 'none';
              } else {
                this.editModeDiv.style.display = 'block';
              }
              this.canvas.frame.appendChild(this.editModeDiv);
            }

            // container for the close div button
            if (this.closeDiv === undefined) {
              this.closeDiv = document.createElement('div');
              this.closeDiv.className = 'vis-close';
              this.closeDiv.style.display = this.manipulationDiv.style.display;
              this.canvas.frame.appendChild(this.closeDiv);
            }
          }

          /**
           * generate a new target node. Used for creating new edges and editing edges
           *
           * @param {number} x
           * @param {number} y
           * @returns {Node}
           * @private
           */

        }, {
          key: '_getNewTargetNode',
          value: function _getNewTargetNode(x, y) {
            var controlNodeStyle = util.deepExtend({}, this.options.controlNodeStyle);

            controlNodeStyle.id = 'targetNode' + util.randomUUID();
            controlNodeStyle.hidden = false;
            controlNodeStyle.physics = false;
            controlNodeStyle.x = x;
            controlNodeStyle.y = y;

            // we have to define the bounding box in order for the nodes to be drawn immediately
            var node = this.body.functions.createNode(controlNodeStyle);
            node.shape.boundingBox = { left: x, right: x, top: y, bottom: y };

            return node;
          }

          /**
           * Create the edit button
           */

        }, {
          key: '_createEditButton',
          value: function _createEditButton() {
            // restore everything to it's original state (if applicable)
            this._clean();

            // reset the manipulationDOM
            this.manipulationDOM = {};

            // empty the editModeDiv
            util.recursiveDOMDelete(this.editModeDiv);

            // create the contents for the editMode button
            var locale = this.options.locales[this.options.locale];
            var button = this._createButton('editMode', 'vis-button vis-edit vis-edit-mode', locale['edit'] || this.options.locales['en']['edit']);
            this.editModeDiv.appendChild(button);

            // bind a hammer listener to the button, calling the function toggleEditMode.
            this._bindHammerToDiv(button, this.toggleEditMode.bind(this));
          }

          /**
           * this function cleans up after everything this module does. Temporary elements, functions and events are removed, physics restored, hammers removed.
           * @private
           */

        }, {
          key: '_clean',
          value: function _clean() {
            // not in mode
            this.inMode = false;

            // _clean the divs
            if (this.guiEnabled === true) {
              util.recursiveDOMDelete(this.editModeDiv);
              util.recursiveDOMDelete(this.manipulationDiv);

              // removes all the bindings and overloads
              this._cleanManipulatorHammers();
            }

            // remove temporary nodes and edges
            this._cleanupTemporaryNodesAndEdges();

            // restore overloaded UI functions
            this._unbindTemporaryUIs();

            // remove the temporaryEventFunctions
            this._unbindTemporaryEvents();

            // restore the physics if required
            this.body.emitter.emit('restorePhysics');
          }

          /**
           * Each dom element has it's own hammer. They are stored in this.manipulationHammers. This cleans them up.
           * @private
           */

        }, {
          key: '_cleanManipulatorHammers',
          value: function _cleanManipulatorHammers() {
            // _clean hammer bindings
            if (this.manipulationHammers.length != 0) {
              for (var i = 0; i < this.manipulationHammers.length; i++) {
                this.manipulationHammers[i].destroy();
              }
              this.manipulationHammers = [];
            }
          }

          /**
           * Remove all DOM elements created by this module.
           * @private
           */

        }, {
          key: '_removeManipulationDOM',
          value: function _removeManipulationDOM() {
            // removes all the bindings and overloads
            this._clean();

            // empty the manipulation divs
            util.recursiveDOMDelete(this.manipulationDiv);
            util.recursiveDOMDelete(this.editModeDiv);
            util.recursiveDOMDelete(this.closeDiv);

            // remove the manipulation divs
            if (this.manipulationDiv) {
              this.canvas.frame.removeChild(this.manipulationDiv);
            }
            if (this.editModeDiv) {
              this.canvas.frame.removeChild(this.editModeDiv);
            }
            if (this.closeDiv) {
              this.canvas.frame.removeChild(this.closeDiv);
            }

            // set the references to undefined
            this.manipulationDiv = undefined;
            this.editModeDiv = undefined;
            this.closeDiv = undefined;
          }

          /**
           * create a seperator line. the index is to differentiate in the manipulation dom
           * @param {number} [index=1]
           * @private
           */

        }, {
          key: '_createSeperator',
          value: function _createSeperator() {
            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            this.manipulationDOM['seperatorLineDiv' + index] = document.createElement('div');
            this.manipulationDOM['seperatorLineDiv' + index].className = 'vis-separator-line';
            this.manipulationDiv.appendChild(this.manipulationDOM['seperatorLineDiv' + index]);
          }

          // ----------------------    DOM functions for buttons    --------------------------//

          /**
           *
           * @param {Locale} locale
           * @private
           */

        }, {
          key: '_createAddNodeButton',
          value: function _createAddNodeButton(locale) {
            var button = this._createButton('addNode', 'vis-button vis-add', locale['addNode'] || this.options.locales['en']['addNode']);
            this.manipulationDiv.appendChild(button);
            this._bindHammerToDiv(button, this.addNodeMode.bind(this));
          }

          /**
           *
           * @param {Locale} locale
           * @private
           */

        }, {
          key: '_createAddEdgeButton',
          value: function _createAddEdgeButton(locale) {
            var button = this._createButton('addEdge', 'vis-button vis-connect', locale['addEdge'] || this.options.locales['en']['addEdge']);
            this.manipulationDiv.appendChild(button);
            this._bindHammerToDiv(button, this.addEdgeMode.bind(this));
          }

          /**
           *
           * @param {Locale} locale
           * @private
           */

        }, {
          key: '_createEditNodeButton',
          value: function _createEditNodeButton(locale) {
            var button = this._createButton('editNode', 'vis-button vis-edit', locale['editNode'] || this.options.locales['en']['editNode']);
            this.manipulationDiv.appendChild(button);
            this._bindHammerToDiv(button, this.editNode.bind(this));
          }

          /**
           *
           * @param {Locale} locale
           * @private
           */

        }, {
          key: '_createEditEdgeButton',
          value: function _createEditEdgeButton(locale) {
            var button = this._createButton('editEdge', 'vis-button vis-edit', locale['editEdge'] || this.options.locales['en']['editEdge']);
            this.manipulationDiv.appendChild(button);
            this._bindHammerToDiv(button, this.editEdgeMode.bind(this));
          }

          /**
           *
           * @param {Locale} locale
           * @private
           */

        }, {
          key: '_createDeleteButton',
          value: function _createDeleteButton(locale) {
            var deleteBtnClass;
            if (this.options.rtl) {
              deleteBtnClass = 'vis-button vis-delete-rtl';
            } else {
              deleteBtnClass = 'vis-button vis-delete';
            }
            var button = this._createButton('delete', deleteBtnClass, locale['del'] || this.options.locales['en']['del']);
            this.manipulationDiv.appendChild(button);
            this._bindHammerToDiv(button, this.deleteSelected.bind(this));
          }

          /**
           *
           * @param {Locale} locale
           * @private
           */

        }, {
          key: '_createBackButton',
          value: function _createBackButton(locale) {
            var button = this._createButton('back', 'vis-button vis-back', locale['back'] || this.options.locales['en']['back']);
            this.manipulationDiv.appendChild(button);
            this._bindHammerToDiv(button, this.showManipulatorToolbar.bind(this));
          }

          /**
           *
           * @param {number|string} id
           * @param {string} className
           * @param {label} label
           * @param {string} labelClassName
           * @returns {HTMLElement}
           * @private
           */

        }, {
          key: '_createButton',
          value: function _createButton(id, className, label) {
            var labelClassName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'vis-label';

            this.manipulationDOM[id + 'Div'] = document.createElement('div');
            this.manipulationDOM[id + 'Div'].className = className;
            this.manipulationDOM[id + 'Label'] = document.createElement('div');
            this.manipulationDOM[id + 'Label'].className = labelClassName;
            this.manipulationDOM[id + 'Label'].innerHTML = label;
            this.manipulationDOM[id + 'Div'].appendChild(this.manipulationDOM[id + 'Label']);
            return this.manipulationDOM[id + 'Div'];
          }

          /**
           *
           * @param {Label} label
           * @private
           */

        }, {
          key: '_createDescription',
          value: function _createDescription(label) {
            this.manipulationDiv.appendChild(this._createButton('description', 'vis-button vis-none', label));
          }

          // -------------------------- End of DOM functions for buttons ------------------------------//

          /**
           * this binds an event until cleanup by the clean functions.
           * @param {Event}  event   The event
           * @param {function} newFunction
           * @private
           */

        }, {
          key: '_temporaryBindEvent',
          value: function _temporaryBindEvent(event, newFunction) {
            this.temporaryEventFunctions.push({ event: event, boundFunction: newFunction });
            this.body.emitter.on(event, newFunction);
          }

          /**
           * this overrides an UI function until cleanup by the clean function
           * @param {string} UIfunctionName
           * @param {function} newFunction
           * @private
           */

        }, {
          key: '_temporaryBindUI',
          value: function _temporaryBindUI(UIfunctionName, newFunction) {
            if (this.body.eventListeners[UIfunctionName] !== undefined) {
              this.temporaryUIFunctions[UIfunctionName] = this.body.eventListeners[UIfunctionName];
              this.body.eventListeners[UIfunctionName] = newFunction;
            } else {
              throw new Error('This UI function does not exist. Typo? You tried: ' + UIfunctionName + ' possible are: ' + (0, _stringify2['default'])((0, _keys2['default'])(this.body.eventListeners)));
            }
          }

          /**
           * Restore the overridden UI functions to their original state.
           *
           * @private
           */

        }, {
          key: '_unbindTemporaryUIs',
          value: function _unbindTemporaryUIs() {
            for (var functionName in this.temporaryUIFunctions) {
              if (this.temporaryUIFunctions.hasOwnProperty(functionName)) {
                this.body.eventListeners[functionName] = this.temporaryUIFunctions[functionName];
                delete this.temporaryUIFunctions[functionName];
              }
            }
            this.temporaryUIFunctions = {};
          }

          /**
           * Unbind the events created by _temporaryBindEvent
           * @private
           */

        }, {
          key: '_unbindTemporaryEvents',
          value: function _unbindTemporaryEvents() {
            for (var i = 0; i < this.temporaryEventFunctions.length; i++) {
              var eventName = this.temporaryEventFunctions[i].event;
              var boundFunction = this.temporaryEventFunctions[i].boundFunction;
              this.body.emitter.off(eventName, boundFunction);
            }
            this.temporaryEventFunctions = [];
          }

          /**
           * Bind an hammer instance to a DOM element.
           *
           * @param {Element} domElement
           * @param {function} boundFunction
           */

        }, {
          key: '_bindHammerToDiv',
          value: function _bindHammerToDiv(domElement, boundFunction) {
            var hammer = new Hammer(domElement, {});
            hammerUtil.onTouch(hammer, boundFunction);
            this.manipulationHammers.push(hammer);
          }

          /**
           * Neatly clean up temporary edges and nodes
           * @private
           */

        }, {
          key: '_cleanupTemporaryNodesAndEdges',
          value: function _cleanupTemporaryNodesAndEdges() {
            // _clean temporary edges
            for (var i = 0; i < this.temporaryIds.edges.length; i++) {
              this.body.edges[this.temporaryIds.edges[i]].disconnect();
              delete this.body.edges[this.temporaryIds.edges[i]];
              var indexTempEdge = this.body.edgeIndices.indexOf(this.temporaryIds.edges[i]);
              if (indexTempEdge !== -1) {
                this.body.edgeIndices.splice(indexTempEdge, 1);
              }
            }

            // _clean temporary nodes
            for (var _i = 0; _i < this.temporaryIds.nodes.length; _i++) {
              delete this.body.nodes[this.temporaryIds.nodes[_i]];
              var indexTempNode = this.body.nodeIndices.indexOf(this.temporaryIds.nodes[_i]);
              if (indexTempNode !== -1) {
                this.body.nodeIndices.splice(indexTempNode, 1);
              }
            }

            this.temporaryIds = { nodes: [], edges: [] };
          }

          // ------------------------------------------ EDIT EDGE FUNCTIONS -----------------------------------------//

          /**
           * the touch is used to get the position of the initial click
           * @param {Event}  event   The event
           * @private
           */

        }, {
          key: '_controlNodeTouch',
          value: function _controlNodeTouch(event) {
            this.selectionHandler.unselectAll();
            this.lastTouch = this.body.functions.getPointer(event.center);
            this.lastTouch.translation = util.extend({}, this.body.view.translation); // copy the object
          }

          /**
           * the drag start is used to mark one of the control nodes as selected.
           * @param {Event}  event   The event
           * @private
           */

        }, {
          key: '_controlNodeDragStart',
          value: function _controlNodeDragStart(event) {
            // eslint-disable-line no-unused-vars
            var pointer = this.lastTouch;
            var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
            var from = this.body.nodes[this.temporaryIds.nodes[0]];
            var to = this.body.nodes[this.temporaryIds.nodes[1]];
            var edge = this.body.edges[this.edgeBeingEditedId];
            this.selectedControlNode = undefined;

            var fromSelect = from.isOverlappingWith(pointerObj);
            var toSelect = to.isOverlappingWith(pointerObj);

            if (fromSelect === true) {
              this.selectedControlNode = from;
              edge.edgeType.from = from;
            } else if (toSelect === true) {
              this.selectedControlNode = to;
              edge.edgeType.to = to;
            }

            // we use the selection to find the node that is being dragged. We explicitly select it here.
            if (this.selectedControlNode !== undefined) {
              this.selectionHandler.selectObject(this.selectedControlNode);
            }

            this.body.emitter.emit('_redraw');
          }

          /**
           * dragging the control nodes or the canvas
           * @param {Event}  event   The event
           * @private
           */

        }, {
          key: '_controlNodeDrag',
          value: function _controlNodeDrag(event) {
            this.body.emitter.emit('disablePhysics');
            var pointer = this.body.functions.getPointer(event.center);
            var pos = this.canvas.DOMtoCanvas(pointer);
            if (this.selectedControlNode !== undefined) {
              this.selectedControlNode.x = pos.x;
              this.selectedControlNode.y = pos.y;
            } else {
              // if the drag was not started properly because the click started outside the network div, start it now.
              var diffX = pointer.x - this.lastTouch.x;
              var diffY = pointer.y - this.lastTouch.y;
              this.body.view.translation = { x: this.lastTouch.translation.x + diffX, y: this.lastTouch.translation.y + diffY };
            }
            this.body.emitter.emit('_redraw');
          }

          /**
           * connecting or restoring the control nodes.
           * @param {Event}  event   The event
           * @private
           */

        }, {
          key: '_controlNodeDragEnd',
          value: function _controlNodeDragEnd(event) {
            var pointer = this.body.functions.getPointer(event.center);
            var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
            var edge = this.body.edges[this.edgeBeingEditedId];
            // if the node that was dragged is not a control node, return
            if (this.selectedControlNode === undefined) {
              return;
            }

            // we use the selection to find the node that is being dragged. We explicitly DEselect the control node here.
            this.selectionHandler.unselectAll();
            var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
            var node = undefined;
            for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {
              if (overlappingNodeIds[i] !== this.selectedControlNode.id) {
                node = this.body.nodes[overlappingNodeIds[i]];
                break;
              }
            }
            // perform the connection
            if (node !== undefined && this.selectedControlNode !== undefined) {
              if (node.isCluster === true) {
                alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);
              } else {
                var from = this.body.nodes[this.temporaryIds.nodes[0]];
                if (this.selectedControlNode.id === from.id) {
                  this._performEditEdge(node.id, edge.to.id);
                } else {
                  this._performEditEdge(edge.from.id, node.id);
                }
              }
            } else {
              edge.updateEdgeType();
              this.body.emitter.emit('restorePhysics');
            }

            this.body.emitter.emit('_redraw');
          }

          // ------------------------------------ END OF EDIT EDGE FUNCTIONS -----------------------------------------//


          // ------------------------------------------- ADD EDGE FUNCTIONS -----------------------------------------//
          /**
           * the function bound to the selection event. It checks if you want to connect a cluster and changes the description
           * to walk the user through the process.
           *
           * @param {Event} event
           * @private
           */

        }, {
          key: '_handleConnect',
          value: function _handleConnect(event) {
            // check to avoid double fireing of this function.
            if (new Date().valueOf() - this.touchTime > 100) {
              this.lastTouch = this.body.functions.getPointer(event.center);
              this.lastTouch.translation = util.extend({}, this.body.view.translation); // copy the object

              var pointer = this.lastTouch;
              var node = this.selectionHandler.getNodeAt(pointer);

              if (node !== undefined) {
                if (node.isCluster === true) {
                  alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);
                } else {
                  // create a node the temporary line can look at
                  var targetNode = this._getNewTargetNode(node.x, node.y);
                  this.body.nodes[targetNode.id] = targetNode;
                  this.body.nodeIndices.push(targetNode.id);

                  // create a temporary edge
                  var connectionEdge = this.body.functions.createEdge({
                    id: 'connectionEdge' + util.randomUUID(),
                    from: node.id,
                    to: targetNode.id,
                    physics: false,
                    smooth: {
                      enabled: true,
                      type: 'continuous',
                      roundness: 0.5
                    }
                  });
                  this.body.edges[connectionEdge.id] = connectionEdge;
                  this.body.edgeIndices.push(connectionEdge.id);

                  this.temporaryIds.nodes.push(targetNode.id);
                  this.temporaryIds.edges.push(connectionEdge.id);
                }
              }
              this.touchTime = new Date().valueOf();
            }
          }

          /**
           *
           * @param {Event} event
           * @private
           */

        }, {
          key: '_dragControlNode',
          value: function _dragControlNode(event) {
            var pointer = this.body.functions.getPointer(event.center);
            if (this.temporaryIds.nodes[0] !== undefined) {
              var targetNode = this.body.nodes[this.temporaryIds.nodes[0]]; // there is only one temp node in the add edge mode.
              targetNode.x = this.canvas._XconvertDOMtoCanvas(pointer.x);
              targetNode.y = this.canvas._YconvertDOMtoCanvas(pointer.y);
              this.body.emitter.emit('_redraw');
            } else {
              var diffX = pointer.x - this.lastTouch.x;
              var diffY = pointer.y - this.lastTouch.y;
              this.body.view.translation = { x: this.lastTouch.translation.x + diffX, y: this.lastTouch.translation.y + diffY };
            }
          }

          /**
           * Connect the new edge to the target if one exists, otherwise remove temp line
           * @param {Event}  event   The event
           * @private
           */

        }, {
          key: '_finishConnect',
          value: function _finishConnect(event) {
            var pointer = this.body.functions.getPointer(event.center);
            var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);

            // remember the edge id
            var connectFromId = undefined;
            if (this.temporaryIds.edges[0] !== undefined) {
              connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;
            }

            // get the overlapping node but NOT the temporary node;
            var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
            var node = undefined;
            for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {
              // if the node id is NOT a temporary node, accept the node.
              if (this.temporaryIds.nodes.indexOf(overlappingNodeIds[i]) === -1) {
                node = this.body.nodes[overlappingNodeIds[i]];
                break;
              }
            }

            // clean temporary nodes and edges.
            this._cleanupTemporaryNodesAndEdges();

            // perform the connection
            if (node !== undefined) {
              if (node.isCluster === true) {
                alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);
              } else {
                if (this.body.nodes[connectFromId] !== undefined && this.body.nodes[node.id] !== undefined) {
                  this._performAddEdge(connectFromId, node.id);
                }
              }
            }

            // No need to do _generateclickevent('dragEnd') here, the regular dragEnd event fires.
            this.body.emitter.emit('_redraw');
          }

          /**
           *
           * @param {Event} event
           * @private
           */

        }, {
          key: '_dragStartEdge',
          value: function _dragStartEdge(event) {
            var pointer = this.lastTouch;
            this.selectionHandler._generateClickEvent('dragStart', event, pointer, undefined, true);
          }

          // --------------------------------------- END OF ADD EDGE FUNCTIONS -------------------------------------//


          // ------------------------------ Performing all the actual data manipulation ------------------------//

          /**
           * Adds a node on the specified location
           *
           * @param {Object} clickData
           * @private
           */

        }, {
          key: '_performAddNode',
          value: function _performAddNode(clickData) {
            var _this4 = this;

            var defaultData = {
              id: util.randomUUID(),
              x: clickData.pointer.canvas.x,
              y: clickData.pointer.canvas.y,
              label: 'new'
            };

            if (typeof this.options.addNode === 'function') {
              if (this.options.addNode.length === 2) {
                this.options.addNode(defaultData, function (finalizedData) {
                  if (finalizedData !== null && finalizedData !== undefined && _this4.inMode === 'addNode') {
                    // if for whatever reason the mode has changes (due to dataset change) disregard the callback
                    _this4.body.data.nodes.getDataSet().add(finalizedData);
                    _this4.showManipulatorToolbar();
                  }
                });
              } else {
                this.showManipulatorToolbar();
                throw new Error('The function for add does not support two arguments (data,callback)');
              }
            } else {
              this.body.data.nodes.getDataSet().add(defaultData);
              this.showManipulatorToolbar();
            }
          }

          /**
           * connect two nodes with a new edge.
           *
           * @param {Node.id} sourceNodeId
           * @param {Node.id} targetNodeId
           * @private
           */

        }, {
          key: '_performAddEdge',
          value: function _performAddEdge(sourceNodeId, targetNodeId) {
            var _this5 = this;

            var defaultData = { from: sourceNodeId, to: targetNodeId };
            if (typeof this.options.addEdge === 'function') {
              if (this.options.addEdge.length === 2) {
                this.options.addEdge(defaultData, function (finalizedData) {
                  if (finalizedData !== null && finalizedData !== undefined && _this5.inMode === 'addEdge') {
                    // if for whatever reason the mode has changes (due to dataset change) disregard the callback
                    _this5.body.data.edges.getDataSet().add(finalizedData);
                    _this5.selectionHandler.unselectAll();
                    _this5.showManipulatorToolbar();
                  }
                });
              } else {
                throw new Error('The function for connect does not support two arguments (data,callback)');
              }
            } else {
              this.body.data.edges.getDataSet().add(defaultData);
              this.selectionHandler.unselectAll();
              this.showManipulatorToolbar();
            }
          }

          /**
           * connect two nodes with a new edge.
           *
           * @param {Node.id} sourceNodeId
           * @param {Node.id} targetNodeId
           * @private
           */

        }, {
          key: '_performEditEdge',
          value: function _performEditEdge(sourceNodeId, targetNodeId) {
            var _this6 = this;

            var defaultData = { id: this.edgeBeingEditedId, from: sourceNodeId, to: targetNodeId, label: this.body.data.edges._data[this.edgeBeingEditedId].label };
            var eeFunct = this.options.editEdge;
            if ((typeof eeFunct === 'undefined' ? 'undefined' : (0, _typeof3['default'])(eeFunct)) === 'object') {
              eeFunct = eeFunct.editWithoutDrag;
            }
            if (typeof eeFunct === 'function') {
              if (eeFunct.length === 2) {
                eeFunct(defaultData, function (finalizedData) {
                  if (finalizedData === null || finalizedData === undefined || _this6.inMode !== 'editEdge') {
                    // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
                    _this6.body.edges[defaultData.id].updateEdgeType();
                    _this6.body.emitter.emit('_redraw');
                    _this6.showManipulatorToolbar();
                  } else {
                    _this6.body.data.edges.getDataSet().update(finalizedData);
                    _this6.selectionHandler.unselectAll();
                    _this6.showManipulatorToolbar();
                  }
                });
              } else {
                throw new Error('The function for edit does not support two arguments (data, callback)');
              }
            } else {
              this.body.data.edges.getDataSet().update(defaultData);
              this.selectionHandler.unselectAll();
              this.showManipulatorToolbar();
            }
          }
        }]);
        return ManipulationSystem;
      }();

      exports['default'] = ManipulationSystem;

      /***/
    },
    /* 238 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _slicedToArray2 = __webpack_require__(30);

      var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      var _FloydWarshall = __webpack_require__(239);

      var _FloydWarshall2 = _interopRequireDefault(_FloydWarshall);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       * KamadaKawai positions the nodes initially based on
       *
       * "AN ALGORITHM FOR DRAWING GENERAL UNDIRECTED GRAPHS"
       * -- Tomihisa KAMADA and Satoru KAWAI in 1989
       *
       * Possible optimizations in the distance calculation can be implemented.
       */
      var KamadaKawai = function () {
        /**
         * @param {Object} body
         * @param {number} edgeLength
         * @param {number} edgeStrength
         */
        function KamadaKawai(body, edgeLength, edgeStrength) {
          (0, _classCallCheck3["default"])(this, KamadaKawai);

          this.body = body;
          this.springLength = edgeLength;
          this.springConstant = edgeStrength;
          this.distanceSolver = new _FloydWarshall2["default"]();
        }

        /**
         * Not sure if needed but can be used to update the spring length and spring constant
         * @param {Object} options
         */

        (0, _createClass3["default"])(KamadaKawai, [{
          key: "setOptions",
          value: function setOptions(options) {
            if (options) {
              if (options.springLength) {
                this.springLength = options.springLength;
              }
              if (options.springConstant) {
                this.springConstant = options.springConstant;
              }
            }
          }

          /**
           * Position the system
           * @param {Array.<Node>} nodesArray
           * @param {Array.<vis.Edge>} edgesArray
           * @param {boolean} [ignoreClusters=false]
           */

        }, {
          key: "solve",
          value: function solve(nodesArray, edgesArray) {
            var ignoreClusters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            // get distance matrix
            var D_matrix = this.distanceSolver.getDistances(this.body, nodesArray, edgesArray); // distance matrix

            // get the L Matrix
            this._createL_matrix(D_matrix);

            // get the K Matrix
            this._createK_matrix(D_matrix);

            // initial E Matrix
            this._createE_matrix();

            // calculate positions
            var threshold = 0.01;
            var innerThreshold = 1;
            var iterations = 0;
            var maxIterations = Math.max(1000, Math.min(10 * this.body.nodeIndices.length, 6000));
            var maxInnerIterations = 5;

            var maxEnergy = 1e9;
            var highE_nodeId = 0,
                dE_dx = 0,
                dE_dy = 0,
                delta_m = 0,
                subIterations = 0;

            while (maxEnergy > threshold && iterations < maxIterations) {
              iterations += 1;

              var _getHighestEnergyNode2 = this._getHighestEnergyNode(ignoreClusters);

              var _getHighestEnergyNode3 = (0, _slicedToArray3["default"])(_getHighestEnergyNode2, 4);

              highE_nodeId = _getHighestEnergyNode3[0];
              maxEnergy = _getHighestEnergyNode3[1];
              dE_dx = _getHighestEnergyNode3[2];
              dE_dy = _getHighestEnergyNode3[3];

              delta_m = maxEnergy;
              subIterations = 0;
              while (delta_m > innerThreshold && subIterations < maxInnerIterations) {
                subIterations += 1;
                this._moveNode(highE_nodeId, dE_dx, dE_dy);

                var _getEnergy2 = this._getEnergy(highE_nodeId);

                var _getEnergy3 = (0, _slicedToArray3["default"])(_getEnergy2, 3);

                delta_m = _getEnergy3[0];
                dE_dx = _getEnergy3[1];
                dE_dy = _getEnergy3[2];
              }
            }
          }

          /**
           * get the node with the highest energy
           * @param {boolean} ignoreClusters
           * @returns {number[]}
           * @private
           */

        }, {
          key: "_getHighestEnergyNode",
          value: function _getHighestEnergyNode(ignoreClusters) {
            var nodesArray = this.body.nodeIndices;
            var nodes = this.body.nodes;
            var maxEnergy = 0;
            var maxEnergyNodeId = nodesArray[0];
            var dE_dx_max = 0,
                dE_dy_max = 0;

            for (var nodeIdx = 0; nodeIdx < nodesArray.length; nodeIdx++) {
              var m = nodesArray[nodeIdx];
              // by not evaluating nodes with predefined positions we should only move nodes that have no positions.
              if (nodes[m].predefinedPosition === false || nodes[m].isCluster === true && ignoreClusters === true || nodes[m].options.fixed.x === true || nodes[m].options.fixed.y === true) {
                var _getEnergy4 = this._getEnergy(m),
                    _getEnergy5 = (0, _slicedToArray3["default"])(_getEnergy4, 3),
                    delta_m = _getEnergy5[0],
                    dE_dx = _getEnergy5[1],
                    dE_dy = _getEnergy5[2];

                if (maxEnergy < delta_m) {
                  maxEnergy = delta_m;
                  maxEnergyNodeId = m;
                  dE_dx_max = dE_dx;
                  dE_dy_max = dE_dy;
                }
              }
            }

            return [maxEnergyNodeId, maxEnergy, dE_dx_max, dE_dy_max];
          }

          /**
           * calculate the energy of a single node
           * @param {Node.id} m
           * @returns {number[]}
           * @private
           */

        }, {
          key: "_getEnergy",
          value: function _getEnergy(m) {
            var _E_sums$m = (0, _slicedToArray3["default"])(this.E_sums[m], 2),
                dE_dx = _E_sums$m[0],
                dE_dy = _E_sums$m[1];

            var delta_m = Math.sqrt(Math.pow(dE_dx, 2) + Math.pow(dE_dy, 2));
            return [delta_m, dE_dx, dE_dy];
          }

          /**
           * move the node based on it's energy
           * the dx and dy are calculated from the linear system proposed by Kamada and Kawai
           * @param {number} m
           * @param {number} dE_dx
           * @param {number} dE_dy
           * @private
           */

        }, {
          key: "_moveNode",
          value: function _moveNode(m, dE_dx, dE_dy) {
            var nodesArray = this.body.nodeIndices;
            var nodes = this.body.nodes;
            var d2E_dx2 = 0;
            var d2E_dxdy = 0;
            var d2E_dy2 = 0;

            var x_m = nodes[m].x;
            var y_m = nodes[m].y;
            var km = this.K_matrix[m];
            var lm = this.L_matrix[m];

            for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {
              var i = nodesArray[iIdx];
              if (i !== m) {
                var x_i = nodes[i].x;
                var y_i = nodes[i].y;
                var kmat = km[i];
                var lmat = lm[i];
                var denominator = 1.0 / Math.pow(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2), 1.5);
                d2E_dx2 += kmat * (1 - lmat * Math.pow(y_m - y_i, 2) * denominator);
                d2E_dxdy += kmat * (lmat * (x_m - x_i) * (y_m - y_i) * denominator);
                d2E_dy2 += kmat * (1 - lmat * Math.pow(x_m - x_i, 2) * denominator);
              }
            }
            // make the variable names easier to make the solving of the linear system easier to read
            var A = d2E_dx2,
                B = d2E_dxdy,
                C = dE_dx,
                D = d2E_dy2,
                E = dE_dy;

            // solve the linear system for dx and dy
            var dy = (C / A + E / B) / (B / A - D / B);
            var dx = -(B * dy + C) / A;

            // move the node
            nodes[m].x += dx;
            nodes[m].y += dy;

            // Recalculate E_matrix (should be incremental)
            this._updateE_matrix(m);
          }

          /**
           * Create the L matrix: edge length times shortest path
           * @param {Object} D_matrix
           * @private
           */

        }, {
          key: "_createL_matrix",
          value: function _createL_matrix(D_matrix) {
            var nodesArray = this.body.nodeIndices;
            var edgeLength = this.springLength;

            this.L_matrix = [];
            for (var i = 0; i < nodesArray.length; i++) {
              this.L_matrix[nodesArray[i]] = {};
              for (var j = 0; j < nodesArray.length; j++) {
                this.L_matrix[nodesArray[i]][nodesArray[j]] = edgeLength * D_matrix[nodesArray[i]][nodesArray[j]];
              }
            }
          }

          /**
           * Create the K matrix: spring constants times shortest path
           * @param {Object} D_matrix
           * @private
           */

        }, {
          key: "_createK_matrix",
          value: function _createK_matrix(D_matrix) {
            var nodesArray = this.body.nodeIndices;
            var edgeStrength = this.springConstant;

            this.K_matrix = [];
            for (var i = 0; i < nodesArray.length; i++) {
              this.K_matrix[nodesArray[i]] = {};
              for (var j = 0; j < nodesArray.length; j++) {
                this.K_matrix[nodesArray[i]][nodesArray[j]] = edgeStrength * Math.pow(D_matrix[nodesArray[i]][nodesArray[j]], -2);
              }
            }
          }

          /**
           *  Create matrix with all energies between nodes
           *  @private
           */

        }, {
          key: "_createE_matrix",
          value: function _createE_matrix() {
            var nodesArray = this.body.nodeIndices;
            var nodes = this.body.nodes;
            this.E_matrix = {};
            this.E_sums = {};
            for (var mIdx = 0; mIdx < nodesArray.length; mIdx++) {
              this.E_matrix[nodesArray[mIdx]] = [];
            }
            for (var _mIdx = 0; _mIdx < nodesArray.length; _mIdx++) {
              var m = nodesArray[_mIdx];
              var x_m = nodes[m].x;
              var y_m = nodes[m].y;
              var dE_dx = 0;
              var dE_dy = 0;
              for (var iIdx = _mIdx; iIdx < nodesArray.length; iIdx++) {
                var i = nodesArray[iIdx];
                if (i !== m) {
                  var x_i = nodes[i].x;
                  var y_i = nodes[i].y;
                  var denominator = 1.0 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));
                  this.E_matrix[m][iIdx] = [this.K_matrix[m][i] * (x_m - x_i - this.L_matrix[m][i] * (x_m - x_i) * denominator), this.K_matrix[m][i] * (y_m - y_i - this.L_matrix[m][i] * (y_m - y_i) * denominator)];
                  this.E_matrix[i][_mIdx] = this.E_matrix[m][iIdx];
                  dE_dx += this.E_matrix[m][iIdx][0];
                  dE_dy += this.E_matrix[m][iIdx][1];
                }
              }
              //Store sum
              this.E_sums[m] = [dE_dx, dE_dy];
            }
          }

          /**
           * Update method, just doing single column (rows are auto-updated) (update all sums)
           *
           * @param {number} m
           * @private
           */

        }, {
          key: "_updateE_matrix",
          value: function _updateE_matrix(m) {
            var nodesArray = this.body.nodeIndices;
            var nodes = this.body.nodes;
            var colm = this.E_matrix[m];
            var kcolm = this.K_matrix[m];
            var lcolm = this.L_matrix[m];
            var x_m = nodes[m].x;
            var y_m = nodes[m].y;
            var dE_dx = 0;
            var dE_dy = 0;
            for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {
              var i = nodesArray[iIdx];
              if (i !== m) {
                //Keep old energy value for sum modification below
                var cell = colm[iIdx];
                var oldDx = cell[0];
                var oldDy = cell[1];

                //Calc new energy:
                var x_i = nodes[i].x;
                var y_i = nodes[i].y;
                var denominator = 1.0 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));
                var dx = kcolm[i] * (x_m - x_i - lcolm[i] * (x_m - x_i) * denominator);
                var dy = kcolm[i] * (y_m - y_i - lcolm[i] * (y_m - y_i) * denominator);
                colm[iIdx] = [dx, dy];
                dE_dx += dx;
                dE_dy += dy;

                //add new energy to sum of each column
                var sum = this.E_sums[i];
                sum[0] += dx - oldDx;
                sum[1] += dy - oldDy;
              }
            }
            //Store sum at -1 index
            this.E_sums[m] = [dE_dx, dE_dy];
          }
        }]);
        return KamadaKawai;
      }(); // distance finding algorithm


      exports["default"] = KamadaKawai;

      /***/
    },
    /* 239 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _classCallCheck2 = __webpack_require__(0);

      var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

      var _createClass2 = __webpack_require__(1);

      var _createClass3 = _interopRequireDefault(_createClass2);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }

      /**
       *  The Floyd–Warshall algorithm is an algorithm for finding shortest paths in
       *  a weighted graph with positive or negative edge weights (but with no negative
       *  cycles). - https://en.wikipedia.org/wiki/Floyd–Warshall_algorithm
       */
      var FloydWarshall = function () {
        /**
         * @ignore
         */
        function FloydWarshall() {
          (0, _classCallCheck3["default"])(this, FloydWarshall);
        }

        /**
         *
         * @param {Object} body
         * @param {Array.<Node>} nodesArray
         * @param {Array.<Edge>} edgesArray
         * @returns {{}}
         */

        (0, _createClass3["default"])(FloydWarshall, [{
          key: "getDistances",
          value: function getDistances(body, nodesArray, edgesArray) {
            var D_matrix = {};
            var edges = body.edges;

            // prepare matrix with large numbers
            for (var i = 0; i < nodesArray.length; i++) {
              var node = nodesArray[i];
              var cell = {};
              D_matrix[node] = cell;
              for (var j = 0; j < nodesArray.length; j++) {
                cell[nodesArray[j]] = i == j ? 0 : 1e9;
              }
            }

            // put the weights for the edges in. This assumes unidirectionality.
            for (var _i = 0; _i < edgesArray.length; _i++) {
              var edge = edges[edgesArray[_i]];
              // edge has to be connected if it counts to the distances. If it is connected to inner clusters it will crash so we also check if it is in the D_matrix
              if (edge.connected === true && D_matrix[edge.fromId] !== undefined && D_matrix[edge.toId] !== undefined) {
                D_matrix[edge.fromId][edge.toId] = 1;
                D_matrix[edge.toId][edge.fromId] = 1;
              }
            }

            var nodeCount = nodesArray.length;

            // Adapted FloydWarshall based on unidirectionality to greatly reduce complexity.
            for (var k = 0; k < nodeCount; k++) {
              var knode = nodesArray[k];
              var kcolm = D_matrix[knode];
              for (var _i2 = 0; _i2 < nodeCount - 1; _i2++) {
                var inode = nodesArray[_i2];
                var icolm = D_matrix[inode];
                for (var _j = _i2 + 1; _j < nodeCount; _j++) {
                  var jnode = nodesArray[_j];
                  var jcolm = D_matrix[jnode];

                  var val = Math.min(icolm[jnode], icolm[knode] + kcolm[jnode]);
                  icolm[jnode] = val;
                  jcolm[inode] = val;
                }
              }
            }

            return D_matrix;
          }
        }]);
        return FloydWarshall;
      }();

      exports["default"] = FloydWarshall;

      /***/
    }]
    /******/)
  );
});
},{"babel-runtime/core-js/object/set-prototype-of":421,"babel-runtime/core-js/math/sign":420,"babel-runtime/core-js/symbol":415,"babel-runtime/core-js/object/assign":422,"babel-runtime/core-js/json/stringify":423,"babel-runtime/core-js/object/is-frozen":419,"babel-runtime/core-js/object/prevent-extensions":424,"babel-runtime/core-js/object/is-extensible":425,"babel-runtime/core-js/object/define-properties":426,"babel-runtime/core-js/object/get-own-property-descriptor":429,"babel-runtime/core-js/object/get-own-property-names":427,"babel-runtime/core-js/object/get-prototype-of":428,"babel-runtime/core-js/object/get-own-property-symbols":430,"babel-runtime/core-js/object/create":431,"babel-runtime/core-js/object/keys":433,"babel-runtime/core-js/object/define-property":432,"babel-runtime/helpers/typeof":414}],413:[function(require,module,exports) {
var global = (1,eval)("this");
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

exports.default = freeGlobal;
},{}],412:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _freeGlobal = require('./_freeGlobal.js');

var _freeGlobal2 = _interopRequireDefault(_freeGlobal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = _freeGlobal2.default || freeSelf || Function('return this')();

exports.default = root;
},{"./_freeGlobal.js":413}],400:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _root = require('./_root.js');

var _root2 = _interopRequireDefault(_root);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Built-in value references. */
var Symbol = _root2.default.Symbol;

exports.default = Symbol;
},{"./_root.js":412}],399:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Symbol = require('./_Symbol.js');

var _Symbol2 = _interopRequireDefault(_Symbol);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = _Symbol2.default ? _Symbol2.default.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

exports.default = getRawTag;
},{"./_Symbol.js":400}],401:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

exports.default = objectToString;
},{}],282:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Symbol = require('./_Symbol.js');

var _Symbol2 = _interopRequireDefault(_Symbol);

var _getRawTag = require('./_getRawTag.js');

var _getRawTag2 = _interopRequireDefault(_getRawTag);

var _objectToString = require('./_objectToString.js');

var _objectToString2 = _interopRequireDefault(_objectToString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol2.default ? _Symbol2.default.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? (0, _getRawTag2.default)(value) : (0, _objectToString2.default)(value);
}

exports.default = baseGetTag;
},{"./_Symbol.js":400,"./_getRawTag.js":399,"./_objectToString.js":401}],402:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

exports.default = overArg;
},{}],283:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _overArg = require('./_overArg.js');

var _overArg2 = _interopRequireDefault(_overArg);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Built-in value references. */
var getPrototype = (0, _overArg2.default)(Object.getPrototypeOf, Object);

exports.default = getPrototype;
},{"./_overArg.js":402}],284:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

exports.default = isObjectLike;
},{}],116:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _baseGetTag = require('./_baseGetTag.js');

var _baseGetTag2 = _interopRequireDefault(_baseGetTag);

var _getPrototype = require('./_getPrototype.js');

var _getPrototype2 = _interopRequireDefault(_getPrototype);

var _isObjectLike = require('./isObjectLike.js');

var _isObjectLike2 = _interopRequireDefault(_isObjectLike);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!(0, _isObjectLike2.default)(value) || (0, _baseGetTag2.default)(value) != objectTag) {
    return false;
  }
  var proto = (0, _getPrototype2.default)(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

exports.default = isPlainObject;
},{"./_baseGetTag.js":282,"./_getPrototype.js":283,"./isObjectLike.js":284}],82:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
	var result;
	var Symbol = root.Symbol;

	if (typeof Symbol === 'function') {
		if (Symbol.observable) {
			result = Symbol.observable;
		} else {
			result = Symbol('observable');
			Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
};
},{}],81:[function(require,module,exports) {
var global = (1,eval)("this");
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ponyfill = require('./ponyfill.js');

var _ponyfill2 = _interopRequireDefault(_ponyfill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var root; /* global window */


if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (typeof module !== 'undefined') {
  root = module;
} else {
  root = Function('return this')();
}

var result = (0, _ponyfill2.default)(root);
exports.default = result;
},{"./ponyfill.js":82}],61:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionTypes = undefined;
exports.default = createStore;

var _isPlainObject = require('lodash-es/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _symbolObservable = require('symbol-observable');

var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */
var ActionTypes = exports.ActionTypes = {
  INIT: '@@redux/INIT'

  /**
   * Creates a Redux store that holds the state tree.
   * The only way to change the data in the store is to call `dispatch()` on it.
   *
   * There should only be a single store in your app. To specify how different
   * parts of the state tree respond to actions, you may combine several reducers
   * into a single reducer function by using `combineReducers`.
   *
   * @param {Function} reducer A function that returns the next state tree, given
   * the current state tree and the action to handle.
   *
   * @param {any} [preloadedState] The initial state. You may optionally specify it
   * to hydrate the state from the server in universal apps, or to restore a
   * previously serialized user session.
   * If you use `combineReducers` to produce the root reducer function, this must be
   * an object with the same shape as `combineReducers` keys.
   *
   * @param {Function} [enhancer] The store enhancer. You may optionally specify it
   * to enhance the store with third-party capabilities such as middleware,
   * time travel, persistence, etc. The only store enhancer that ships with Redux
   * is `applyMiddleware()`.
   *
   * @returns {Store} A Redux store that lets you read the state, dispatch actions
   * and subscribe to changes.
   */
};function createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }

  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */
  function getState() {
    return currentState;
  }

  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */
  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected listener to be a function.');
    }

    var isSubscribed = true;

    ensureCanMutateNextListeners();
    nextListeners.push(listener);

    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      isSubscribed = false;

      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
    };
  }

  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */
  function dispatch(action) {
    if (!(0, _isPlainObject2.default)(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }

  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer;
    dispatch({ type: ActionTypes.INIT });
  }

  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */
  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object') {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return { unsubscribe: unsubscribe };
      }
    }, _ref[_symbolObservable2.default] = function () {
      return this;
    }, _ref;
  }

  // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.
  dispatch({ type: ActionTypes.INIT });

  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[_symbolObservable2.default] = observable, _ref2;
}
},{"lodash-es/isPlainObject":116,"symbol-observable":81}],66:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = warning;
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */
  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */
}
},{}],62:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = combineReducers;

var _createStore = require('./createStore');

var _isPlainObject = require('lodash-es/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _warning = require('./utils/warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getUndefinedStateErrorMessage(key, action) {
  var actionType = action && action.type;
  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!(0, _isPlainObject2.default)(inputState)) {
    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });

  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });

  if (unexpectedKeys.length > 0) {
    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
  }
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });

    if (typeof initialState === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
    }

    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
    if (typeof reducer(undefined, { type: type }) === 'undefined') {
      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
    }
  });
}

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */
function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};
  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if ('development' !== 'production') {
      if (typeof reducers[key] === 'undefined') {
        (0, _warning2.default)('No reducer provided for key "' + key + '"');
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }
  var finalReducerKeys = Object.keys(finalReducers);

  var unexpectedKeyCache = void 0;
  if ('development' !== 'production') {
    unexpectedKeyCache = {};
  }

  var shapeAssertionError = void 0;
  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if ('development' !== 'production') {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
      if (warningMessage) {
        (0, _warning2.default)(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};
    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);
      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(_key, action);
        throw new Error(errorMessage);
      }
      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    return hasChanged ? nextState : state;
  };
}
},{"./createStore":61,"lodash-es/isPlainObject":116,"./utils/warning":66}],63:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = bindActionCreators;
function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(undefined, arguments));
  };
}

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass a single function as the first argument,
 * and get a function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */
function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
  }

  var keys = Object.keys(actionCreators);
  var boundActionCreators = {};
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var actionCreator = actionCreators[key];
    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }
  return boundActionCreators;
}
},{}],65:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = compose;
/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

function compose() {
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(undefined, arguments));
    };
  });
}
},{}],64:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = applyMiddleware;

var _compose = require('./compose');

var _compose2 = _interopRequireDefault(_compose);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */
function applyMiddleware() {
  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function (reducer, preloadedState, enhancer) {
      var store = createStore(reducer, preloadedState, enhancer);
      var _dispatch = store.dispatch;
      var chain = [];

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch(action) {
          return _dispatch(action);
        }
      };
      chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = _compose2.default.apply(undefined, chain)(store.dispatch);

      return _extends({}, store, {
        dispatch: _dispatch
      });
    };
  };
}
},{"./compose":65}],60:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

var _createStore = require('./createStore');

var _createStore2 = _interopRequireDefault(_createStore);

var _combineReducers = require('./combineReducers');

var _combineReducers2 = _interopRequireDefault(_combineReducers);

var _bindActionCreators = require('./bindActionCreators');

var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

var _applyMiddleware = require('./applyMiddleware');

var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

var _compose = require('./compose');

var _compose2 = _interopRequireDefault(_compose);

var _warning = require('./utils/warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
* This is a dummy function to check if the function name has been altered by minification.
* If the function has been minified and NODE_ENV !== 'production', warn the user.
*/
function isCrushed() {}

if ('development' !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
  (0, _warning2.default)('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
}

exports.createStore = _createStore2.default;
exports.combineReducers = _combineReducers2.default;
exports.bindActionCreators = _bindActionCreators2.default;
exports.applyMiddleware = _applyMiddleware2.default;
exports.compose = _compose2.default;
},{"./createStore":61,"./combineReducers":62,"./bindActionCreators":63,"./applyMiddleware":64,"./compose":65,"./utils/warning":66}],25:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.absoluteScale = absoluteScale;
exports.topLeftPos = topLeftPos;
exports.genericChildrenFunc = genericChildrenFunc;
exports.setOpacity = setOpacity;
function absoluteScale(projection, offset) {
    return [projection.scale.x * offset.sx, projection.scale.y * offset.sy];
}

function topLeftPos(projection, offset) {
    var relW = projection.scale.x * projection.size.w;
    var relH = projection.scale.y * projection.size.h;
    var relX = projection.pos.x - projection.anchor.x * relW;
    var relY = projection.pos.y - projection.anchor.y * relH;
    return {
        x: offset.x + projection.offset.x + relX * offset.sx,
        y: offset.y + projection.offset.y + relY * offset.sy
    };
}

function genericChildrenFunc(childrenFunc) {
    return (/*#__PURE__*/regeneratorRuntime.mark(function _callee(exprId, state) {
            var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, childId, subexprId, _childId, _childId2;

            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _iteratorNormalCompletion = true;
                            _didIteratorError = false;
                            _iteratorError = undefined;
                            _context.prev = 3;
                            _iterator = childrenFunc(exprId, state)[Symbol.iterator]();

                        case 5:
                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                _context.next = 14;
                                break;
                            }

                            childId = _step.value;

                            // Allow childrenFunc to return [ subprojectionId,
                            // subexprId ] - this allows "transparent" layouts where
                            // children can project a parent expression

                            subexprId = childId;

                            if (Array.isArray(childId)) {
                                _childId = childId;
                                _childId2 = _slicedToArray(_childId, 2);
                                childId = _childId2[0];
                                subexprId = _childId2[1];
                            }
                            _context.next = 11;
                            return [childId, subexprId];

                        case 11:
                            _iteratorNormalCompletion = true;
                            _context.next = 5;
                            break;

                        case 14:
                            _context.next = 20;
                            break;

                        case 16:
                            _context.prev = 16;
                            _context.t0 = _context["catch"](3);
                            _didIteratorError = true;
                            _iteratorError = _context.t0;

                        case 20:
                            _context.prev = 20;
                            _context.prev = 21;

                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }

                        case 23:
                            _context.prev = 23;

                            if (!_didIteratorError) {
                                _context.next = 26;
                                break;
                            }

                            throw _iteratorError;

                        case 26:
                            return _context.finish(23);

                        case 27:
                            return _context.finish(20);

                        case 28:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, this, [[3, 16, 20, 28], [21,, 23, 27]]);
        })
    );
}

function setOpacity(ctx, opacity, offset, opacity2) {
    var selfOpacity = typeof opacity === "undefined" ? 1.0 : opacity;
    var offsetOpacity = typeof offset.opacity === "undefined" ? 1.0 : offset.opacity;
    var extraOpacity = typeof opacity2 === "undefined" ? 1.0 : opacity2;
    ctx.globalAlpha = selfOpacity * offsetOpacity * extraOpacity;
}
},{}],20:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = decal;

var _util = require("./util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function decal(projection) {
    var origPrepare = projection.prepare;
    var origDraw = projection.draw;

    projection.prepare = function (id, exprId, state, stage) {
        origPrepare.call(this, id, exprId, state, stage);
    };

    projection.draw = function (id, exprId, state, stage, offset) {
        origDraw.call(this, id, exprId, state, stage, offset);

        var nodes = state.get("nodes");
        var parent = nodes.get(exprId);
        var nestedCount = 1;
        while (parent && parent.get("parent")) {
            parent = nodes.get(parent.get("parent"));
            if (parent.get("type") === "apply") {
                nestedCount += 1;
            }
        }

        if (nestedCount > 2) {
            return;
        }

        var firstChild = { x: 0, y: 0 };
        var lastChild = { x: 0, y: 0 };
        var first = true;

        var firstFilled = false;
        var lastFilled = false;

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = this.children(exprId, state)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _ref = _step.value;

                var _ref2 = _slicedToArray(_ref, 2);

                var childId = _ref2[0];
                var subexprId = _ref2[1];

                var view = stage.views[childId];
                var subexpr = nodes.get(subexprId);
                if (first) {
                    first = false;
                    firstFilled = subexpr.get("type") !== "missing";
                    firstChild.x = view.pos.x;
                    firstChild.y = view.pos.y;
                    if (subexpr.get("type") === "lambda") {
                        var _stage$views$childId$ = _slicedToArray(stage.views[childId].children(subexprId, state).next().value, 1),
                            argChildId = _stage$views$childId$[0];

                        var argView = stage.views[argChildId];
                        firstChild.x += argView.pos.x + argView.scale.x * argView.size.w / 2;
                        firstChild.y += argView.pos.y + argView.scale.y * argView.size.h * 0.2;
                    } else {
                        firstChild.x += view.scale.x * view.size.w * 0.2;
                    }
                }

                if (subexpr && subexpr.get("parentField") === "argument") {
                    lastFilled = subexpr.get("type") !== "missing";
                    lastChild.x = view.pos.x + view.size.w / 2;
                    lastChild.y = view.pos.y;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        var ctx = stage.ctx;

        ctx.save();
        ctx.lineWidth = 2;
        ctx.strokeStyle = "#971a1e";
        ctx.beginPath();

        var _util$topLeftPos = util.topLeftPos(this, offset),
            x = _util$topLeftPos.x,
            y = _util$topLeftPos.y;

        var _util$absoluteScale = util.absoluteScale(this, offset),
            _util$absoluteScale2 = _slicedToArray(_util$absoluteScale, 2),
            sx = _util$absoluteScale2[0],
            sy = _util$absoluteScale2[1];

        var gradient = ctx.createLinearGradient(x + sx * lastChild.x, y + sy * lastChild.y, x + sx * firstChild.x, y + sy * firstChild.y);
        gradient.addColorStop(0, lastFilled ? "#14818b" : "gray");
        gradient.addColorStop(0.7, firstFilled && lastFilled ? "#c500ff" : "gray");
        gradient.addColorStop(1, firstFilled ? "#ff004b" : "gray");
        ctx.fillStyle = gradient;

        if (typeof this.arrowOpacity !== "undefined") ctx.globalAlpha = this.arrowOpacity * offset.opacity;else if (typeof this.opacity !== "undefined") ctx.globalAlpha = this.opacity * 0.7 * offset.opacity;else if (state.get("nodes").get(exprId).has("parent")) ctx.globalAlpha = 0.5 * offset.opacity;
        ctx.globalAlpha /= this.nestedCount;

        var cx = x + sx * ((lastChild.x - firstChild.x) / 2);
        var arrowBase = 3;
        var arrowWidth = arrowBase + 3;
        firstChild.x += 2 * arrowWidth;
        firstChild.y -= 2 * arrowWidth;
        ctx.moveTo(x + sx * lastChild.x, y + sy * lastChild.y);
        ctx.quadraticCurveTo(cx - 10, y - 30, x + sx * (firstChild.x + arrowBase), y + sy * (firstChild.y + arrowBase));
        ctx.lineTo(x + sx * (firstChild.x + arrowWidth), y + sy * (firstChild.y + arrowWidth));

        ctx.lineTo(x + sx * (firstChild.x - 2 * arrowWidth), y + sy * (firstChild.y + 2 * arrowWidth));

        ctx.lineTo(x + sx * (firstChild.x - arrowWidth), y + sy * (firstChild.y - arrowWidth));
        ctx.lineTo(x + sx * (firstChild.x - arrowBase), y + sy * (firstChild.y - arrowBase));
        ctx.quadraticCurveTo(cx + 10, y - 40, x + sx * lastChild.x, y + sy * lastChild.y);

        ctx.fill();
        ctx.stroke();
        ctx.restore();
    };

    return projection;
}
},{"./util":25}],24:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.roundRect = roundRect;
exports.drawStar = drawStar;
exports.strokeWithOpacity = strokeWithOpacity;
exports.hexaRect = hexaRect;
exports.setStroke = setStroke;
/**
 * THANKS TO Juan Mendes @ SO: http://stackoverflow.com/a/3368118
 * Draws a rounded rectangle using the current state of the canvas.
 * If you omit the last three params, it will draw a rectangle
 * outline with a 5 pixel border radius
 * @param {CanvasRenderingContext2D} ctx
 * @param {Number} x The top left x coordinate
 * @param {Number} y The top left y coordinate
 * @param {Number} width The width of the rectangle
 * @param {Number} height The height of the rectangle
 * @param {Number} [radius = 5] The corner radius; It can also be an object
 *                 to specify different radii for corners
 * @param {Number} [radius.tl = 0] Top left
 * @param {Number} [radius.tr = 0] Top right
 * @param {Number} [radius.br = 0] Bottom right
 * @param {Number} [radius.bl = 0] Bottom left
 * @param {Boolean} [fill = false] Whether to fill the rectangle.
 * @param {Boolean} [stroke = true] Whether to stroke the rectangle.
 */
function roundRect(ctx, x, y, width, height, radius, fill, stroke, strokeOpacity) {
    var notches = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;

    if (typeof stroke === "undefined") stroke = true;
    if (typeof radius === "undefined") radius = 5;
    if (typeof radius === "undefined") radius = 5;
    if (typeof radius === "number") {
        radius = {
            tl: radius,
            tr: radius,
            br: radius,
            bl: radius
        };
    } else {
        var defaultRadius = { tl: 0, tr: 0, br: 0, bl: 0 };
        for (var side in defaultRadius) {
            radius[side] = radius[side] || defaultRadius[side];
        }
    }

    ctx.beginPath();
    if (!notches) {
        ctx.moveTo(x + radius.tl, y);
        ctx.lineTo(x + width - radius.tr, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
        ctx.lineTo(x + width, y + height - radius.br);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
        ctx.lineTo(x + radius.bl, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
        ctx.lineTo(x, y + radius.tl);
        ctx.quadraticCurveTo(x, y, x + radius.tl, y);
    } else {
        ctx.moveTo(x + radius.tl, y);
        // Top
        notches.drawSequence(ctx, "top", x + radius.tl, y, width - radius.tr);
        ctx.lineTo(x + width - radius.tr, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
        // Right
        notches.drawSequence(ctx, "right", x + width, y + radius.tr, height - radius.br - radius.tr);
        ctx.lineTo(x + width, y + height - radius.br);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
        // Bottom
        notches.drawSequence(ctx, "bottom", x + width, y, width - radius.bl);
        ctx.lineTo(x + radius.bl, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
        // Left
        notches.drawSequence(ctx, "left", x, y + height, height - radius.tl);
        ctx.lineTo(x, y + radius.tl);
        ctx.quadraticCurveTo(x, y, x + radius.tl, y);
    }
    ctx.closePath();
    if (fill) ctx.fill();
    // Don't shadow a stroke
    ctx.shadowColor = "rgba(0,0,0,0)";
    if (stroke) strokeWithOpacity(ctx, strokeOpacity);
}

/** Thanks to markE @ SO: http://stackoverflow.com/a/25840319 */
function drawStar(ctx, cx, cy, spikes, outerRadius, innerRadius, fill, stroke, strokeOpacity) {
    var rot = Math.PI / 2 * 3;
    var x = cx;
    var y = cy;
    var step = Math.PI / spikes;
    ctx.beginPath();
    ctx.moveTo(cx, cy - outerRadius);
    for (var i = 0; i < spikes; i++) {
        x = cx + Math.cos(rot) * outerRadius;
        y = cy + Math.sin(rot) * outerRadius;
        ctx.lineTo(x, y);
        rot += step;

        x = cx + Math.cos(rot) * innerRadius;
        y = cy + Math.sin(rot) * innerRadius;
        ctx.lineTo(x, y);
        rot += step;
    }
    ctx.lineTo(cx, cy - outerRadius);
    ctx.closePath();
    if (stroke) {
        strokeWithOpacity(ctx, strokeOpacity);
    }
    if (fill) {
        ctx.fill();
    }
}

function strokeWithOpacity(ctx, opacity) {
    if (!opacity || opacity >= 1.0) ctx.stroke();else {
        var a = ctx.globalAlpha;
        ctx.globalAlpha = a * opacity;
        ctx.stroke();
        ctx.globalAlpha = a;
    }
}

function hexaRect(ctx, x, y, width, height, w2, h2, fill, stroke, strokeOpacity) {
    ctx.beginPath();
    ctx.moveTo(x + w2, y);
    ctx.lineTo(x + width - w2, y);
    ctx.lineTo(x + width, y + h2);
    ctx.lineTo(x + width - w2, y + height);
    ctx.lineTo(x + w2, y + height);
    ctx.lineTo(x, y + h2);
    ctx.closePath();
    if (fill) ctx.fill();
    if (stroke) strokeWithOpacity(ctx, strokeOpacity);
}

function setStroke(ctx, stroke) {
    if (!stroke) {
        ctx.strokeStyle = null;
        return;
    }

    stroke = stroke.stroke || stroke;

    ctx.lineWidth = stroke.lineWidth;
    ctx.strokeStyle = stroke.color;
    if (stroke.lineDash) {
        ctx.setLineDash(stroke.lineDash);
    } else {
        ctx.setLineDash([]);
    }

    ctx.lineDashOffset = stroke.lineDashOffset || 0;
}
},{}],21:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.sprite = sprite;
exports.exprify = exprify;
exports.patch3 = patch3;

var _core = require("./core");

var _primitive = require("./primitive");

var primitive = _interopRequireWildcard(_primitive);

var _util = require("./util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function sprite() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var projection = (0, _core.baseProjection)(options);
    projection.type = "sprite";
    projection.size.w = options.size && options.size.w ? options.size.w : 50;
    projection.size.h = options.size && options.size.h ? options.size.h : 50;

    projection.prepare = function (id, exprId, state, stage) {};
    projection.draw = function (id, exprId, state, stage, offset) {
        var ctx = stage.ctx;
        ctx.save();

        var _util$absoluteScale = util.absoluteScale(this, offset),
            _util$absoluteScale2 = _slicedToArray(_util$absoluteScale, 2),
            sx = _util$absoluteScale2[0],
            sy = _util$absoluteScale2[1];

        util.setOpacity(ctx, this.opacity, offset);
        var width = sx * this.size.w;
        var height = sy * this.size.h;
        options.image.draw(ctx, offset.x + (this.pos.x * offset.sx - this.anchor.x * width), offset.y + (this.pos.y * offset.sy - this.anchor.y * height), width, height);

        (0, _core.debugDraw)(ctx, this, offset);

        ctx.restore();
    };
    return projection;
}

function exprify(projection) {
    var draw = projection.draw;


    projection.draw = function (id, exprId, state, stage, offset) {
        var glowColor = null;
        var glowBreak = 0.7;

        var ctx = stage.ctx;

        ctx.save();

        var node = state.getIn(["nodes", exprId]);
        var hasParent = node && Number.isInteger(node.get("parent"));
        var locked = !node || node.get("locked");

        var _util$topLeftPos = util.topLeftPos(this, offset),
            x = _util$topLeftPos.x,
            y = _util$topLeftPos.y;

        var w = offset.sx * this.scale.x * this.size.w;
        var h = offset.sy * this.scale.y * this.size.h;

        if (this.stroke) {
            glowColor = this.stroke.color;
            primitive.setStroke(ctx, this);
            glowBreak = Math.min(0.7 + 0.2 * (this.stroke.lineWidth / 4), 1.0);
        } else if (hasParent && !locked) {
            var _util$absoluteScale3 = util.absoluteScale(this, offset),
                _util$absoluteScale4 = _slicedToArray(_util$absoluteScale3, 2),
                sx = _util$absoluteScale4[0],
                sy = _util$absoluteScale4[1];

            ctx.fillStyle = "#000";
            primitive.setStroke(ctx, {
                lineWidth: 2,
                color: this.highlightColor || "yellow"
            });
            primitive.roundRect(ctx,
            // Draw slightly bigger to make sure we're distinct
            x, y - 2, w, h + 8, sx * 22, true, stage.isHovered(exprId), null);
            ctx.fillStyle = "#555";
            primitive.roundRect(ctx, x, y - 4, w, h + 8, sx * 22, true, stage.isHovered(exprId), null);
        } else if ((!hasParent || !locked) && stage.isHovered(exprId)) {
            glowColor = this.highlightColor || "yellow";
            primitive.setStroke(ctx, {
                lineWidth: 0.5,
                color: glowColor
            });
        }

        if (glowColor) {
            var cx = x + w / 2;
            var cy = y + h / 2;

            var tw = 1.1 * w;
            var th = 1.1 * h;

            var gradient = ctx.createRadialGradient(cx, cy, 0, cx, cy, Math.max(tw, th) / 2);
            gradient.addColorStop(0, glowColor);
            gradient.addColorStop(glowBreak, "rgba(255, 255, 255, 0.7)");
            gradient.addColorStop(1, "rgba(255, 255, 255, 0)");
            ctx.fillStyle = gradient;

            ctx.globalAlpha = offset.opacity * this.opacity;

            ctx.beginPath();
            ctx.arc(cx, cy, Math.max(tw, th) / 2, 0, 2 * Math.PI, false);
            ctx.fill();
            ctx.stroke();
        }

        ctx.restore();

        draw.call(this, id, exprId, state, stage, offset);
    };

    return projection;
}

function patch3(childFunc) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var projection = (0, _core.baseProjection)();
    projection.type = "3patch";

    projection.prepare = function (id, exprId, state, stage) {
        var childId = childFunc(id, state);
        var childProjection = stage.views[childId];

        childProjection.prepare(childId, exprId, state, stage);

        this.imageScale = 1.4 * (childProjection.size.h / options.middle.naturalHeight);
        this.middleSegments = Math.ceil(childProjection.size.w / (options.middle.naturalWidth * this.imageScale));
        var middleWidth = this.middleSegments * this.imageScale * options.middle.naturalWidth;
        childProjection.pos.x = options.left.naturalWidth * this.imageScale + (middleWidth - childProjection.size.w) / 2;
        childProjection.pos.y = (options.middle.naturalHeight * this.imageScale - childProjection.size.h) / 2;
        childProjection.parent = this;

        this.size.w = middleWidth + (options.left.naturalWidth + options.right.naturalWidth) * this.imageScale;
    };

    projection.draw = function (id, exprId, state, stage, offset) {
        var ctx = stage.ctx;

        ctx.save();

        var _util$absoluteScale5 = util.absoluteScale(this, offset),
            _util$absoluteScale6 = _slicedToArray(_util$absoluteScale5, 2),
            sx = _util$absoluteScale6[0],
            sy = _util$absoluteScale6[1];

        sx *= this.imageScale;
        sy *= this.imageScale;

        util.setOpacity(ctx, this.opacity, offset);

        var topY = offset.y + this.pos.y * offset.sy;

        options.left.draw(ctx, offset.x + this.pos.x * offset.sx, topY, sx * options.left.naturalWidth, sy * options.left.naturalHeight);

        var x = offset.x + this.pos.x * offset.sx + sx * options.left.naturalWidth;

        for (var i = 0; i < this.middleSegments; i++) {
            var w = sx * options.middle.naturalWidth;
            options.middle.draw(ctx, x, topY, w, sy * options.middle.naturalHeight);
            x += w;
        }

        options.right.draw(ctx, x, topY, sx * options.right.naturalWidth, sy * options.right.naturalHeight);

        var childId = childFunc(id, state);
        var subOffset = Object.assign({}, offset, {
            x: offset.x + this.pos.x * offset.sx,
            y: offset.y + this.pos.y * offset.sy,
            sx: offset.sx * this.scale.x,
            sy: offset.sy * this.scale.y,
            opacity: this.opacity
        });
        stage.views[childId].draw(childId, exprId, state, stage, subOffset);

        (0, _core.debugDraw)(ctx, this, offset);

        ctx.restore();
    };

    projection.children = function (exprId, state) {
        return childFunc(exprId, state);
    };

    return projection;
}
},{"./core":4,"./primitive":24,"./util":25}],22:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageAtlas = exports.ImageAtlas = function ImageAtlas(alias, atlas, image) {
    _classCallCheck(this, ImageAtlas);

    this.alias = alias;
    this.img = image;
    // Parse the atlas and add all the images
    var result = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = Object.keys(atlas.frames)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var frameName = _step.value;

            var frame = atlas.frames[frameName];
            // Convert resource-name.png to resource-name
            var resourceName = frameName.split(".")[0];
            var resource = new ImageAtlasProxy(resourceName, this, frame.frame);
            result.push({ name: resourceName, image: resource });
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    this.sprites = result;
};

var ImageProxy = exports.ImageProxy = function () {
    function ImageProxy(alias, src) {
        _classCallCheck(this, ImageProxy);

        this.img = new Image();
        this.img.src = src;
        this.img.alt = alias;
    }

    _createClass(ImageProxy, [{
        key: "draw",
        value: function draw(ctx, x, y) {
            var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            var h = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

            if (w === null) {
                w = this.naturalWidth;
            }
            if (h === null) {
                h = this.naturalHeight;
            }

            ctx.drawImage(this.img, x, y, w, h);
        }
    }, {
        key: "onload",
        set: function set(callback) {
            this.img.onload = callback;
        }
    }, {
        key: "naturalWidth",
        get: function get() {
            return this.img.naturalWidth;
        }
    }, {
        key: "naturalHeight",
        get: function get() {
            return this.img.naturalHeight;
        }
    }, {
        key: "backingImage",
        get: function get() {
            // This should raise an error for the AtlasProxy - you
            // shouldn't be able to manipulate the backing image
            return this.img;
        }
    }]);

    return ImageProxy;
}();

var ImageAtlasProxy = exports.ImageAtlasProxy = function () {
    function ImageAtlasProxy(alias, atlas, frame) {
        _classCallCheck(this, ImageAtlasProxy);

        this.alias = alias;
        this.atlas = atlas;
        this.frame = frame;
    }

    _createClass(ImageAtlasProxy, [{
        key: "draw",
        value: function draw(ctx, x, y) {
            var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            var h = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

            if (w === null) {
                w = this.naturalWidth;
            }
            if (h === null) {
                h = this.naturalHeight;
            }

            ctx.drawImage(this.atlas.img, this.frame.x, this.frame.y, this.frame.w, this.frame.h, x, y, w, h);
        }
    }, {
        key: "naturalWidth",
        get: function get() {
            return this.frame.w;
        }
    }, {
        key: "naturalHeight",
        get: function get() {
            return this.frame.h;
        }
    }, {
        key: "backingImage",
        get: function get() {
            throw {
                "error": "Can't get the backing image of an image in an image atlas"
            };
        }
    }]);

    return ImageAtlasProxy;
}();
},{}],23:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.parseDescription = parseDescription;
exports.parseDescriptions = parseDescriptions;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NotchSet = exports.NotchSet = function () {
    function NotchSet(notches) {
        _classCallCheck(this, NotchSet);

        this.notches = notches;
    }

    _createClass(NotchSet, [{
        key: "get",
        value: function get(idx) {
            return this.notches[idx];
        }
    }, {
        key: "drawSequence",
        value: function drawSequence(ctx, side, x, y, len) {
            var notches = this.notches.filter(function (n) {
                return n.side === side;
            }).sort(function (a, b) {
                return a.relpos - b.relpos;
            });
            if (side === "left" || side === "right") {
                notches.forEach(function (n) {
                    return n.drawVertical(ctx, x, y, len);
                });
            } else {
                notches.forEach(function (n) {
                    return n.drawHorizontal(ctx, x, y, len);
                });
            }
        }
    }]);

    return NotchSet;
}();

var Notch = exports.Notch = function () {
    function Notch(side, shape, width, depth, relpos, inner) {
        _classCallCheck(this, Notch);

        this.side = side;
        this.shape = shape;
        this.width = width;
        this.depth = depth;
        this.inner = inner;
        this.relpos = relpos;
    }

    _createClass(Notch, [{
        key: "drawVertical",
        value: function drawVertical(ctx, x, y, h) {
            var dir = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

            if (!dir) dir = this.direction;
            var relpos = this.relpos;
            var facing = this.inner ? 1 : -1;
            ctx.lineTo(x, y + dir * (h * relpos - this.width));
            ctx.lineTo(x - facing * dir * this.depth, y + dir * h * relpos);
            ctx.lineTo(x, y + dir * (h * relpos + this.width));
        }
    }, {
        key: "drawHorizontal",
        value: function drawHorizontal(ctx, x, y, w) {
            var dir = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

            if (!dir) dir = this.direction;
            var relpos = this.relpos;
            var facing = this.inner ? 1 : -1;
            ctx.lineTo(x + dir * (w * relpos - this.width), y);
            ctx.lineTo(x + dir * (w * relpos), y + facing * dir * this.depth);
            ctx.lineTo(x + dir * (w * relpos + this.width), y);
        }
    }, {
        key: "direction",
        get: function get() {
            if (this.side === "left" || this.side === "bottom") {
                return -1;
            }
            return 1;
        }
    }]);

    return Notch;
}();

function parseDescription(description) {
    var relpos = 0.5;
    if (typeof description.relpos !== "undefined") {
        relpos = description.relpos;
    }
    return new Notch(description.side, description.shape, 10, 10, relpos, description.type === "inset");
}

function parseDescriptions(descriptions) {
    return new NotchSet(descriptions.map(parseDescription));
}
},{}],71:[function(require,module,exports) {

/**
 * @license
 *
 * chroma.js - JavaScript library for color conversions
 * 
 * Copyright (c) 2011-2017, Gregor Aisch
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

(function() {
  var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,
    slice = [].slice;

  type = (function() {

    /*
    for browser-safe type checking+
    ported from jQuery's $.type
     */
    var classToType, len, name, o, ref;
    classToType = {};
    ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
    for (o = 0, len = ref.length; o < len; o++) {
      name = ref[o];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    return function(obj) {
      var strType;
      strType = Object.prototype.toString.call(obj);
      return classToType[strType] || "object";
    };
  })();

  limit = function(x, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    if (x < min) {
      x = min;
    }
    if (x > max) {
      x = max;
    }
    return x;
  };

  unpack = function(args) {
    if (args.length >= 3) {
      return [].slice.call(args);
    } else {
      return args[0];
    }
  };

  clip_rgb = function(rgb) {
    var i, o;
    rgb._clipped = false;
    rgb._unclipped = rgb.slice(0);
    for (i = o = 0; o < 3; i = ++o) {
      if (i < 3) {
        if (rgb[i] < 0 || rgb[i] > 255) {
          rgb._clipped = true;
        }
        if (rgb[i] < 0) {
          rgb[i] = 0;
        }
        if (rgb[i] > 255) {
          rgb[i] = 255;
        }
      } else if (i === 3) {
        if (rgb[i] < 0) {
          rgb[i] = 0;
        }
        if (rgb[i] > 1) {
          rgb[i] = 1;
        }
      }
    }
    if (!rgb._clipped) {
      delete rgb._unclipped;
    }
    return rgb;
  };

  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;

  TWOPI = PI * 2;

  PITHIRD = PI / 3;

  DEG2RAD = PI / 180;

  RAD2DEG = 180 / PI;

  chroma = function() {
    if (arguments[0] instanceof Color) {
      return arguments[0];
    }
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, arguments, function(){});
  };

  chroma["default"] = chroma;

  _interpolators = [];

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports = chroma;
  }

  if (typeof define === 'function' && define.amd) {
    define([], function() {
      return chroma;
    });
  } else {
    root = typeof exports !== "undefined" && exports !== null ? exports : this;
    root.chroma = chroma;
  }

  chroma.version = '1.3.5';

  _input = {};

  _guess_formats = [];

  _guess_formats_sorted = false;

  Color = (function() {
    function Color() {
      var arg, args, chk, len, len1, me, mode, o, w;
      me = this;
      args = [];
      for (o = 0, len = arguments.length; o < len; o++) {
        arg = arguments[o];
        if (arg != null) {
          args.push(arg);
        }
      }
      if (args.length > 1) {
        mode = args[args.length - 1];
      }
      if (_input[mode] != null) {
        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));
      } else {
        if (!_guess_formats_sorted) {
          _guess_formats = _guess_formats.sort(function(a, b) {
            return b.p - a.p;
          });
          _guess_formats_sorted = true;
        }
        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {
          chk = _guess_formats[w];
          mode = chk.test.apply(chk, args);
          if (mode) {
            break;
          }
        }
        if (mode) {
          me._rgb = clip_rgb(_input[mode].apply(_input, args));
        }
      }
      if (me._rgb == null) {
        console.warn('unknown format: ' + args);
      }
      if (me._rgb == null) {
        me._rgb = [0, 0, 0];
      }
      if (me._rgb.length === 3) {
        me._rgb.push(1);
      }
    }

    Color.prototype.toString = function() {
      return this.hex();
    };

    Color.prototype.clone = function() {
      return chroma(me._rgb);
    };

    return Color;

  })();

  chroma._input = _input;


  /**
  	ColorBrewer colors for chroma.js
  
  	Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The 
  	Pennsylvania State University.
  
  	Licensed under the Apache License, Version 2.0 (the "License"); 
  	you may not use this file except in compliance with the License.
  	You may obtain a copy of the License at	
  	http://www.apache.org/licenses/LICENSE-2.0
  
  	Unless required by applicable law or agreed to in writing, software distributed
  	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
  	CONDITIONS OF ANY KIND, either express or implied. See the License for the
  	specific language governing permissions and limitations under the License.
  
      @preserve
   */

  chroma.brewer = brewer = {
    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],
    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],
    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']
  };

  (function() {
    var key, results;
    results = [];
    for (key in brewer) {
      results.push(brewer[key.toLowerCase()] = brewer[key]);
    }
    return results;
  })();


  /**
  	X11 color names
  
  	http://www.w3.org/TR/css3-color/#svg-color
   */

  w3cx11 = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflower: '#6495ed',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkgrey: '#a9a9a9',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    grey: '#808080',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    laserlemon: '#ffff54',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrod: '#fafad2',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgreen: '#90ee90',
    lightgrey: '#d3d3d3',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    maroon2: '#7f0000',
    maroon3: '#b03060',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370db',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#db7093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    purple2: '#7f007f',
    purple3: '#a020f0',
    rebeccapurple: '#663399',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32'
  };

  chroma.colors = colors = w3cx11;

  lab2rgb = function() {
    var a, args, b, g, l, r, x, y, z;
    args = unpack(arguments);
    l = args[0], a = args[1], b = args[2];
    y = (l + 16) / 116;
    x = isNaN(a) ? y : y + a / 500;
    z = isNaN(b) ? y : y - b / 200;
    y = LAB_CONSTANTS.Yn * lab_xyz(y);
    x = LAB_CONSTANTS.Xn * lab_xyz(x);
    z = LAB_CONSTANTS.Zn * lab_xyz(z);
    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);
    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  xyz_rgb = function(r) {
    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);
  };

  lab_xyz = function(t) {
    if (t > LAB_CONSTANTS.t1) {
      return t * t * t;
    } else {
      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);
    }
  };

  LAB_CONSTANTS = {
    Kn: 18,
    Xn: 0.950470,
    Yn: 1,
    Zn: 1.088830,
    t0: 0.137931034,
    t1: 0.206896552,
    t2: 0.12841855,
    t3: 0.008856452
  };

  rgb2lab = function() {
    var b, g, r, ref, ref1, x, y, z;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];
    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];
  };

  rgb_xyz = function(r) {
    if ((r /= 255) <= 0.04045) {
      return r / 12.92;
    } else {
      return pow((r + 0.055) / 1.055, 2.4);
    }
  };

  xyz_lab = function(t) {
    if (t > LAB_CONSTANTS.t3) {
      return pow(t, 1 / 3);
    } else {
      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;
    }
  };

  rgb2xyz = function() {
    var b, g, r, ref, x, y, z;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = rgb_xyz(r);
    g = rgb_xyz(g);
    b = rgb_xyz(b);
    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);
    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);
    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);
    return [x, y, z];
  };

  chroma.lab = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['lab']), function(){});
  };

  _input.lab = lab2rgb;

  Color.prototype.lab = function() {
    return rgb2lab(this._rgb);
  };

  bezier = function(colors) {
    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;
    colors = (function() {
      var len, o, results;
      results = [];
      for (o = 0, len = colors.length; o < len; o++) {
        c = colors[o];
        results.push(chroma(c));
      }
      return results;
    })();
    if (colors.length === 2) {
      ref = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref[0], lab1 = ref[1];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push(lab0[i] + t * (lab1[i] - lab0[i]));
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 3) {
      ref1 = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 4) {
      ref2 = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 5) {
      I0 = bezier(colors.slice(0, 3));
      I1 = bezier(colors.slice(2, 5));
      I = function(t) {
        if (t < 0.5) {
          return I0(t * 2);
        } else {
          return I1((t - 0.5) * 2);
        }
      };
    }
    return I;
  };

  chroma.bezier = function(colors) {
    var f;
    f = bezier(colors);
    f.scale = function() {
      return chroma.scale(f);
    };
    return f;
  };


  /*
      chroma.js
  
      Copyright (c) 2011-2013, Gregor Aisch
      All rights reserved.
  
      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:
  
      * Redistributions of source code must retain the above copyright notice, this
        list of conditions and the following disclaimer.
  
      * Redistributions in binary form must reproduce the above copyright notice,
        this list of conditions and the following disclaimer in the documentation
        and/or other materials provided with the distribution.
  
      * The name Gregor Aisch may not be used to endorse or promote products
        derived from this software without specific prior written permission.
  
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
      INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
      OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  
      @source: https://github.com/gka/chroma.js
   */

  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {
    var dh, dl, f;
    if (start == null) {
      start = 300;
    }
    if (rotations == null) {
      rotations = -1.5;
    }
    if (hue == null) {
      hue = 1;
    }
    if (gamma == null) {
      gamma = 1;
    }
    if (lightness == null) {
      lightness = [0, 1];
    }
    dh = 0;
    if (type(lightness) === 'array') {
      dl = lightness[1] - lightness[0];
    } else {
      dl = 0;
      lightness = [lightness, lightness];
    }
    f = function(fract) {
      var a, amp, b, cos_a, g, h, l, r, sin_a;
      a = TWOPI * ((start + 120) / 360 + rotations * fract);
      l = pow(lightness[0] + dl * fract, gamma);
      h = dh !== 0 ? hue[0] + fract * dh : hue;
      amp = h * l * (1 - l) / 2;
      cos_a = cos(a);
      sin_a = sin(a);
      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
      b = l + amp * (+1.97294 * cos_a);
      return chroma(clip_rgb([r * 255, g * 255, b * 255]));
    };
    f.start = function(s) {
      if (s == null) {
        return start;
      }
      start = s;
      return f;
    };
    f.rotations = function(r) {
      if (r == null) {
        return rotations;
      }
      rotations = r;
      return f;
    };
    f.gamma = function(g) {
      if (g == null) {
        return gamma;
      }
      gamma = g;
      return f;
    };
    f.hue = function(h) {
      if (h == null) {
        return hue;
      }
      hue = h;
      if (type(hue) === 'array') {
        dh = hue[1] - hue[0];
        if (dh === 0) {
          hue = hue[1];
        }
      } else {
        dh = 0;
      }
      return f;
    };
    f.lightness = function(h) {
      if (h == null) {
        return lightness;
      }
      if (type(h) === 'array') {
        lightness = h;
        dl = h[1] - h[0];
      } else {
        lightness = [h, h];
        dl = 0;
      }
      return f;
    };
    f.scale = function() {
      return chroma.scale(f);
    };
    f.hue(hue);
    return f;
  };

  chroma.random = function() {
    var code, digits, i, o;
    digits = '0123456789abcdef';
    code = '#';
    for (i = o = 0; o < 6; i = ++o) {
      code += digits.charAt(floor(Math.random() * 16));
    }
    return new Color(code);
  };

  _interpolators = [];

  interpolate = function(col1, col2, f, m) {
    var interpol, len, o, res;
    if (f == null) {
      f = 0.5;
    }
    if (m == null) {
      m = 'rgb';
    }

    /*
    interpolates between colors
    f = 0 --> me
    f = 1 --> col
     */
    if (type(col1) !== 'object') {
      col1 = chroma(col1);
    }
    if (type(col2) !== 'object') {
      col2 = chroma(col2);
    }
    for (o = 0, len = _interpolators.length; o < len; o++) {
      interpol = _interpolators[o];
      if (m === interpol[0]) {
        res = interpol[1](col1, col2, f, m);
        break;
      }
    }
    if (res == null) {
      throw "color mode " + m + " is not supported";
    }
    return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
  };

  chroma.interpolate = interpolate;

  Color.prototype.interpolate = function(col2, f, m) {
    return interpolate(this, col2, f, m);
  };

  chroma.mix = interpolate;

  Color.prototype.mix = Color.prototype.interpolate;

  _input.rgb = function() {
    var k, ref, results, v;
    ref = unpack(arguments);
    results = [];
    for (k in ref) {
      v = ref[k];
      results.push(v);
    }
    return results;
  };

  chroma.rgb = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['rgb']), function(){});
  };

  Color.prototype.rgb = function(round) {
    if (round == null) {
      round = true;
    }
    if (round) {
      return this._rgb.map(Math.round).slice(0, 3);
    } else {
      return this._rgb.slice(0, 3);
    }
  };

  Color.prototype.rgba = function(round) {
    if (round == null) {
      round = true;
    }
    if (!round) {
      return this._rgb.slice(0);
    }
    return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];
  };

  _guess_formats.push({
    p: 3,
    test: function(n) {
      var a;
      a = unpack(arguments);
      if (type(a) === 'array' && a.length === 3) {
        return 'rgb';
      }
      if (a.length === 4 && type(a[3]) === "number" && a[3] >= 0 && a[3] <= 1) {
        return 'rgb';
      }
    }
  });

  _input.lrgb = _input.rgb;

  interpolate_lrgb = function(col1, col2, f, m) {
    var xyz0, xyz1;
    xyz0 = col1._rgb;
    xyz1 = col2._rgb;
    return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m);
  };

  _average_lrgb = function(colors) {
    var col, f, len, o, rgb, xyz;
    f = 1 / colors.length;
    xyz = [0, 0, 0, 0];
    for (o = 0, len = colors.length; o < len; o++) {
      col = colors[o];
      rgb = col._rgb;
      xyz[0] += pow(rgb[0], 2) * f;
      xyz[1] += pow(rgb[1], 2) * f;
      xyz[2] += pow(rgb[2], 2) * f;
      xyz[3] += rgb[3] * f;
    }
    xyz[0] = sqrt(xyz[0]);
    xyz[1] = sqrt(xyz[1]);
    xyz[2] = sqrt(xyz[2]);
    return new Color(xyz);
  };

  _interpolators.push(['lrgb', interpolate_lrgb]);

  chroma.average = function(colors, mode) {
    var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;
    if (mode == null) {
      mode = 'rgb';
    }
    l = colors.length;
    colors = colors.map(function(c) {
      return chroma(c);
    });
    first = colors.splice(0, 1)[0];
    if (mode === 'lrgb') {
      return _average_lrgb(colors);
    }
    xyz = first.get(mode);
    cnt = [];
    dx = 0;
    dy = 0;
    for (i in xyz) {
      xyz[i] = xyz[i] || 0;
      cnt.push(!isNaN(xyz[i]) ? 1 : 0);
      if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {
        A = xyz[i] / 180 * PI;
        dx += cos(A);
        dy += sin(A);
      }
    }
    alpha = first.alpha();
    for (o = 0, len = colors.length; o < len; o++) {
      c = colors[o];
      xyz2 = c.get(mode);
      alpha += c.alpha();
      for (i in xyz) {
        if (!isNaN(xyz2[i])) {
          xyz[i] += xyz2[i];
          cnt[i] += 1;
          if (mode.charAt(i) === 'h') {
            A = xyz[i] / 180 * PI;
            dx += cos(A);
            dy += sin(A);
          }
        }
      }
    }
    for (i in xyz) {
      xyz[i] = xyz[i] / cnt[i];
      if (mode.charAt(i) === 'h') {
        A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;
        while (A < 0) {
          A += 360;
        }
        while (A >= 360) {
          A -= 360;
        }
        xyz[i] = A;
      }
    }
    return chroma(xyz, mode).alpha(alpha / l);
  };

  hex2rgb = function(hex) {
    var a, b, g, r, rgb, u;
    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
      if (hex.length === 4 || hex.length === 7) {
        hex = hex.substr(1);
      }
      if (hex.length === 3) {
        hex = hex.split("");
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
      }
      u = parseInt(hex, 16);
      r = u >> 16;
      g = u >> 8 & 0xFF;
      b = u & 0xFF;
      return [r, g, b, 1];
    }
    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {
      if (hex.length === 9) {
        hex = hex.substr(1);
      }
      u = parseInt(hex, 16);
      r = u >> 24 & 0xFF;
      g = u >> 16 & 0xFF;
      b = u >> 8 & 0xFF;
      a = round((u & 0xFF) / 0xFF * 100) / 100;
      return [r, g, b, a];
    }
    if ((_input.css != null) && (rgb = _input.css(hex))) {
      return rgb;
    }
    throw "unknown color: " + hex;
  };

  rgb2hex = function(channels, mode) {
    var a, b, g, hxa, r, str, u;
    if (mode == null) {
      mode = 'rgb';
    }
    r = channels[0], g = channels[1], b = channels[2], a = channels[3];
    r = Math.round(r);
    g = Math.round(g);
    b = Math.round(b);
    u = r << 16 | g << 8 | b;
    str = "000000" + u.toString(16);
    str = str.substr(str.length - 6);
    hxa = '0' + round(a * 255).toString(16);
    hxa = hxa.substr(hxa.length - 2);
    return "#" + (function() {
      switch (mode.toLowerCase()) {
        case 'rgba':
          return str + hxa;
        case 'argb':
          return hxa + str;
        default:
          return str;
      }
    })();
  };

  _input.hex = function(h) {
    return hex2rgb(h);
  };

  chroma.hex = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hex']), function(){});
  };

  Color.prototype.hex = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    return rgb2hex(this._rgb, mode);
  };

  _guess_formats.push({
    p: 4,
    test: function(n) {
      if (arguments.length === 1 && type(n) === "string") {
        return 'hex';
      }
    }
  });

  hsl2rgb = function() {
    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;
    args = unpack(arguments);
    h = args[0], s = args[1], l = args[2];
    if (s === 0) {
      r = g = b = l * 255;
    } else {
      t3 = [0, 0, 0];
      c = [0, 0, 0];
      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
      t1 = 2 * l - t2;
      h /= 360;
      t3[0] = h + 1 / 3;
      t3[1] = h;
      t3[2] = h - 1 / 3;
      for (i = o = 0; o <= 2; i = ++o) {
        if (t3[i] < 0) {
          t3[i] += 1;
        }
        if (t3[i] > 1) {
          t3[i] -= 1;
        }
        if (6 * t3[i] < 1) {
          c[i] = t1 + (t2 - t1) * 6 * t3[i];
        } else if (2 * t3[i] < 1) {
          c[i] = t2;
        } else if (3 * t3[i] < 2) {
          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;
        } else {
          c[i] = t1;
        }
      }
      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];
    }
    if (args.length > 3) {
      return [r, g, b, args[3]];
    } else {
      return [r, g, b];
    }
  };

  rgb2hsl = function(r, g, b) {
    var h, l, min, ref, s;
    if (r !== void 0 && r.length >= 3) {
      ref = r, r = ref[0], g = ref[1], b = ref[2];
    }
    r /= 255;
    g /= 255;
    b /= 255;
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    l = (max + min) / 2;
    if (max === min) {
      s = 0;
      h = Number.NaN;
    } else {
      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
    }
    if (r === max) {
      h = (g - b) / (max - min);
    } else if (g === max) {
      h = 2 + (b - r) / (max - min);
    } else if (b === max) {
      h = 4 + (r - g) / (max - min);
    }
    h *= 60;
    if (h < 0) {
      h += 360;
    }
    return [h, s, l];
  };

  chroma.hsl = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hsl']), function(){});
  };

  _input.hsl = hsl2rgb;

  Color.prototype.hsl = function() {
    return rgb2hsl(this._rgb);
  };

  hsv2rgb = function() {
    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;
    args = unpack(arguments);
    h = args[0], s = args[1], v = args[2];
    v *= 255;
    if (s === 0) {
      r = g = b = v;
    } else {
      if (h === 360) {
        h = 0;
      }
      if (h > 360) {
        h -= 360;
      }
      if (h < 0) {
        h += 360;
      }
      h /= 60;
      i = floor(h);
      f = h - i;
      p = v * (1 - s);
      q = v * (1 - s * f);
      t = v * (1 - s * (1 - f));
      switch (i) {
        case 0:
          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
          break;
        case 1:
          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
          break;
        case 2:
          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
          break;
        case 3:
          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
          break;
        case 4:
          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
          break;
        case 5:
          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
      }
    }
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  rgb2hsv = function() {
    var b, delta, g, h, min, r, ref, s, v;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    delta = max - min;
    v = max / 255.0;
    if (max === 0) {
      h = Number.NaN;
      s = 0;
    } else {
      s = delta / max;
      if (r === max) {
        h = (g - b) / delta;
      }
      if (g === max) {
        h = 2 + (b - r) / delta;
      }
      if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h *= 60;
      if (h < 0) {
        h += 360;
      }
    }
    return [h, s, v];
  };

  chroma.hsv = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hsv']), function(){});
  };

  _input.hsv = hsv2rgb;

  Color.prototype.hsv = function() {
    return rgb2hsv(this._rgb);
  };

  num2rgb = function(num) {
    var b, g, r;
    if (type(num) === "number" && num >= 0 && num <= 0xFFFFFF) {
      r = num >> 16;
      g = (num >> 8) & 0xFF;
      b = num & 0xFF;
      return [r, g, b, 1];
    }
    console.warn("unknown num color: " + num);
    return [0, 0, 0, 1];
  };

  rgb2num = function() {
    var b, g, r, ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    return (r << 16) + (g << 8) + b;
  };

  chroma.num = function(num) {
    return new Color(num, 'num');
  };

  Color.prototype.num = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    return rgb2num(this._rgb, mode);
  };

  _input.num = num2rgb;

  _guess_formats.push({
    p: 1,
    test: function(n) {
      if (arguments.length === 1 && type(n) === "number" && n >= 0 && n <= 0xFFFFFF) {
        return 'num';
      }
    }
  });

  hcg2rgb = function() {
    var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;
    args = unpack(arguments);
    h = args[0], c = args[1], _g = args[2];
    c = c / 100;
    g = g / 100 * 255;
    _c = c * 255;
    if (c === 0) {
      r = g = b = _g;
    } else {
      if (h === 360) {
        h = 0;
      }
      if (h > 360) {
        h -= 360;
      }
      if (h < 0) {
        h += 360;
      }
      h /= 60;
      i = floor(h);
      f = h - i;
      p = _g * (1 - c);
      q = p + _c * (1 - f);
      t = p + _c * f;
      v = p + _c;
      switch (i) {
        case 0:
          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
          break;
        case 1:
          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
          break;
        case 2:
          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
          break;
        case 3:
          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
          break;
        case 4:
          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
          break;
        case 5:
          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
      }
    }
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  rgb2hcg = function() {
    var _g, b, c, delta, g, h, min, r, ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    delta = max - min;
    c = delta * 100 / 255;
    _g = min / (255 - delta) * 100;
    if (delta === 0) {
      h = Number.NaN;
    } else {
      if (r === max) {
        h = (g - b) / delta;
      }
      if (g === max) {
        h = 2 + (b - r) / delta;
      }
      if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h *= 60;
      if (h < 0) {
        h += 360;
      }
    }
    return [h, c, _g];
  };

  chroma.hcg = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hcg']), function(){});
  };

  _input.hcg = hcg2rgb;

  Color.prototype.hcg = function() {
    return rgb2hcg(this._rgb);
  };

  css2rgb = function(css) {
    var aa, ab, hsl, i, m, o, rgb, w;
    css = css.toLowerCase();
    if ((chroma.colors != null) && chroma.colors[css]) {
      return hex2rgb(chroma.colors[css]);
    }
    if (m = css.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
      rgb = m.slice(1, 4);
      for (i = o = 0; o <= 2; i = ++o) {
        rgb[i] = +rgb[i];
      }
      rgb[3] = 1;
    } else if (m = css.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
      rgb = m.slice(1, 5);
      for (i = w = 0; w <= 3; i = ++w) {
        rgb[i] = +rgb[i];
      }
    } else if (m = css.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
      rgb = m.slice(1, 4);
      for (i = aa = 0; aa <= 2; i = ++aa) {
        rgb[i] = round(rgb[i] * 2.55);
      }
      rgb[3] = 1;
    } else if (m = css.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
      rgb = m.slice(1, 5);
      for (i = ab = 0; ab <= 2; i = ++ab) {
        rgb[i] = round(rgb[i] * 2.55);
      }
      rgb[3] = +rgb[3];
    } else if (m = css.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
      hsl = m.slice(1, 4);
      hsl[1] *= 0.01;
      hsl[2] *= 0.01;
      rgb = hsl2rgb(hsl);
      rgb[3] = 1;
    } else if (m = css.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
      hsl = m.slice(1, 4);
      hsl[1] *= 0.01;
      hsl[2] *= 0.01;
      rgb = hsl2rgb(hsl);
      rgb[3] = +m[4];
    }
    return rgb;
  };

  rgb2css = function(rgba) {
    var mode;
    mode = rgba[3] < 1 ? 'rgba' : 'rgb';
    if (mode === 'rgb') {
      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';
    } else if (mode === 'rgba') {
      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';
    } else {

    }
  };

  rnd = function(a) {
    return round(a * 100) / 100;
  };

  hsl2css = function(hsl, alpha) {
    var mode;
    mode = alpha < 1 ? 'hsla' : 'hsl';
    hsl[0] = rnd(hsl[0] || 0);
    hsl[1] = rnd(hsl[1] * 100) + '%';
    hsl[2] = rnd(hsl[2] * 100) + '%';
    if (mode === 'hsla') {
      hsl[3] = alpha;
    }
    return mode + '(' + hsl.join(',') + ')';
  };

  _input.css = function(h) {
    return css2rgb(h);
  };

  chroma.css = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['css']), function(){});
  };

  Color.prototype.css = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    if (mode.slice(0, 3) === 'rgb') {
      return rgb2css(this._rgb);
    } else if (mode.slice(0, 3) === 'hsl') {
      return hsl2css(this.hsl(), this.alpha());
    }
  };

  _input.named = function(name) {
    return hex2rgb(w3cx11[name]);
  };

  _guess_formats.push({
    p: 5,
    test: function(n) {
      if (arguments.length === 1 && (w3cx11[n] != null)) {
        return 'named';
      }
    }
  });

  Color.prototype.name = function(n) {
    var h, k;
    if (arguments.length) {
      if (w3cx11[n]) {
        this._rgb = hex2rgb(w3cx11[n]);
      }
      this._rgb[3] = 1;
      this;
    }
    h = this.hex();
    for (k in w3cx11) {
      if (h === w3cx11[k]) {
        return k;
      }
    }
    return h;
  };

  lch2lab = function() {

    /*
    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
    These formulas were invented by David Dalrymple to obtain maximum contrast without going
    out of gamut if the parameters are in the range 0-1.
    
    A saturation multiplier was added by Gregor Aisch
     */
    var c, h, l, ref;
    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];
    h = h * DEG2RAD;
    return [l, cos(h) * c, sin(h) * c];
  };

  lch2rgb = function() {
    var L, a, args, b, c, g, h, l, r, ref, ref1;
    args = unpack(arguments);
    l = args[0], c = args[1], h = args[2];
    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];
    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  lab2lch = function() {
    var a, b, c, h, l, ref;
    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];
    c = sqrt(a * a + b * b);
    h = (atan2(b, a) * RAD2DEG + 360) % 360;
    if (round(c * 10000) === 0) {
      h = Number.NaN;
    }
    return [l, c, h];
  };

  rgb2lch = function() {
    var a, b, g, l, r, ref, ref1;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];
    return lab2lch(l, a, b);
  };

  chroma.lch = function() {
    var args;
    args = unpack(arguments);
    return new Color(args, 'lch');
  };

  chroma.hcl = function() {
    var args;
    args = unpack(arguments);
    return new Color(args, 'hcl');
  };

  _input.lch = lch2rgb;

  _input.hcl = function() {
    var c, h, l, ref;
    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];
    return lch2rgb([l, c, h]);
  };

  Color.prototype.lch = function() {
    return rgb2lch(this._rgb);
  };

  Color.prototype.hcl = function() {
    return rgb2lch(this._rgb).reverse();
  };

  rgb2cmyk = function(mode) {
    var b, c, f, g, k, m, r, ref, y;
    if (mode == null) {
      mode = 'rgb';
    }
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = r / 255;
    g = g / 255;
    b = b / 255;
    k = 1 - Math.max(r, Math.max(g, b));
    f = k < 1 ? 1 / (1 - k) : 0;
    c = (1 - r - k) * f;
    m = (1 - g - k) * f;
    y = (1 - b - k) * f;
    return [c, m, y, k];
  };

  cmyk2rgb = function() {
    var alpha, args, b, c, g, k, m, r, y;
    args = unpack(arguments);
    c = args[0], m = args[1], y = args[2], k = args[3];
    alpha = args.length > 4 ? args[4] : 1;
    if (k === 1) {
      return [0, 0, 0, alpha];
    }
    r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);
    g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);
    b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);
    return [r, g, b, alpha];
  };

  _input.cmyk = function() {
    return cmyk2rgb(unpack(arguments));
  };

  chroma.cmyk = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['cmyk']), function(){});
  };

  Color.prototype.cmyk = function() {
    return rgb2cmyk(this._rgb);
  };

  _input.gl = function() {
    var i, k, o, rgb, v;
    rgb = (function() {
      var ref, results;
      ref = unpack(arguments);
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push(v);
      }
      return results;
    }).apply(this, arguments);
    for (i = o = 0; o <= 2; i = ++o) {
      rgb[i] *= 255;
    }
    return rgb;
  };

  chroma.gl = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['gl']), function(){});
  };

  Color.prototype.gl = function() {
    var rgb;
    rgb = this._rgb;
    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];
  };

  rgb2luminance = function(r, g, b) {
    var ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = luminance_x(r);
    g = luminance_x(g);
    b = luminance_x(b);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
  };

  luminance_x = function(x) {
    x /= 255;
    if (x <= 0.03928) {
      return x / 12.92;
    } else {
      return pow((x + 0.055) / 1.055, 2.4);
    }
  };

  interpolate_rgb = function(col1, col2, f, m) {
    var xyz0, xyz1;
    xyz0 = col1._rgb;
    xyz1 = col2._rgb;
    return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
  };

  _interpolators.push(['rgb', interpolate_rgb]);

  Color.prototype.luminance = function(lum, mode) {
    var cur_lum, eps, max_iter, test;
    if (mode == null) {
      mode = 'rgb';
    }
    if (!arguments.length) {
      return rgb2luminance(this._rgb);
    }
    if (lum === 0) {
      this._rgb = [0, 0, 0, this._rgb[3]];
    } else if (lum === 1) {
      this._rgb = [255, 255, 255, this._rgb[3]];
    } else {
      eps = 1e-7;
      max_iter = 20;
      test = function(l, h) {
        var lm, m;
        m = l.interpolate(h, 0.5, mode);
        lm = m.luminance();
        if (Math.abs(lum - lm) < eps || !max_iter--) {
          return m;
        }
        if (lm > lum) {
          return test(l, m);
        }
        return test(m, h);
      };
      cur_lum = rgb2luminance(this._rgb);
      this._rgb = (cur_lum > lum ? test(chroma('black'), this) : test(this, chroma('white'))).rgba();
    }
    return this;
  };

  temperature2rgb = function(kelvin) {
    var b, g, r, temp;
    temp = kelvin / 100;
    if (temp < 66) {
      r = 255;
      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);
      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);
    } else {
      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);
      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);
      b = 255;
    }
    return [r, g, b];
  };

  rgb2temperature = function() {
    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    minTemp = 1000;
    maxTemp = 40000;
    eps = 0.4;
    while (maxTemp - minTemp > eps) {
      temp = (maxTemp + minTemp) * 0.5;
      rgb = temperature2rgb(temp);
      if ((rgb[2] / rgb[0]) >= (b / r)) {
        maxTemp = temp;
      } else {
        minTemp = temp;
      }
    }
    return round(temp);
  };

  chroma.temperature = chroma.kelvin = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['temperature']), function(){});
  };

  _input.temperature = _input.kelvin = _input.K = temperature2rgb;

  Color.prototype.temperature = function() {
    return rgb2temperature(this._rgb);
  };

  Color.prototype.kelvin = Color.prototype.temperature;

  chroma.contrast = function(a, b) {
    var l1, l2, ref, ref1;
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color(b);
    }
    l1 = a.luminance();
    l2 = b.luminance();
    if (l1 > l2) {
      return (l1 + 0.05) / (l2 + 0.05);
    } else {
      return (l2 + 0.05) / (l1 + 0.05);
    }
  };

  chroma.distance = function(a, b, mode) {
    var d, i, l1, l2, ref, ref1, sum_sq;
    if (mode == null) {
      mode = 'lab';
    }
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color(b);
    }
    l1 = a.get(mode);
    l2 = b.get(mode);
    sum_sq = 0;
    for (i in l1) {
      d = (l1[i] || 0) - (l2[i] || 0);
      sum_sq += d * d;
    }
    return Math.sqrt(sum_sq);
  };

  chroma.deltaE = function(a, b, L, C) {
    var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;
    if (L == null) {
      L = 1;
    }
    if (C == null) {
      C = 1;
    }
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color(b);
    }
    ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];
    ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];
    c1 = sqrt(a1 * a1 + b1 * b1);
    c2 = sqrt(a2 * a2 + b2 * b2);
    sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);
    sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;
    h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;
    while (h1 < 0) {
      h1 += 360;
    }
    while (h1 >= 360) {
      h1 -= 360;
    }
    t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));
    c4 = c1 * c1 * c1 * c1;
    f = sqrt(c4 / (c4 + 1900.0));
    sh = sc * (f * t + 1.0 - f);
    delL = L1 - L2;
    delC = c1 - c2;
    delA = a1 - a2;
    delB = b1 - b2;
    dH2 = delA * delA + delB * delB - delC * delC;
    v1 = delL / (L * sl);
    v2 = delC / (C * sc);
    v3 = sh;
    return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));
  };

  Color.prototype.get = function(modechan) {
    var channel, i, me, mode, ref, src;
    me = this;
    ref = modechan.split('.'), mode = ref[0], channel = ref[1];
    src = me[mode]();
    if (channel) {
      i = mode.indexOf(channel);
      if (i > -1) {
        return src[i];
      } else {
        return console.warn('unknown channel ' + channel + ' in mode ' + mode);
      }
    } else {
      return src;
    }
  };

  Color.prototype.set = function(modechan, value) {
    var channel, i, me, mode, ref, src;
    me = this;
    ref = modechan.split('.'), mode = ref[0], channel = ref[1];
    if (channel) {
      src = me[mode]();
      i = mode.indexOf(channel);
      if (i > -1) {
        if (type(value) === 'string') {
          switch (value.charAt(0)) {
            case '+':
              src[i] += +value;
              break;
            case '-':
              src[i] += +value;
              break;
            case '*':
              src[i] *= +(value.substr(1));
              break;
            case '/':
              src[i] /= +(value.substr(1));
              break;
            default:
              src[i] = +value;
          }
        } else {
          src[i] = value;
        }
      } else {
        console.warn('unknown channel ' + channel + ' in mode ' + mode);
      }
    } else {
      src = value;
    }
    return chroma(src, mode).alpha(me.alpha());
  };

  Color.prototype.clipped = function() {
    return this._rgb._clipped || false;
  };

  Color.prototype.alpha = function(a) {
    if (arguments.length) {
      return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);
    }
    return this._rgb[3];
  };

  Color.prototype.darken = function(amount) {
    var lab, me;
    if (amount == null) {
      amount = 1;
    }
    me = this;
    lab = me.lab();
    lab[0] -= LAB_CONSTANTS.Kn * amount;
    return chroma.lab(lab).alpha(me.alpha());
  };

  Color.prototype.brighten = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.darken(-amount);
  };

  Color.prototype.darker = Color.prototype.darken;

  Color.prototype.brighter = Color.prototype.brighten;

  Color.prototype.saturate = function(amount) {
    var lch, me;
    if (amount == null) {
      amount = 1;
    }
    me = this;
    lch = me.lch();
    lch[1] += amount * LAB_CONSTANTS.Kn;
    if (lch[1] < 0) {
      lch[1] = 0;
    }
    return chroma.lch(lch).alpha(me.alpha());
  };

  Color.prototype.desaturate = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.saturate(-amount);
  };

  Color.prototype.premultiply = function() {
    var a, rgb;
    rgb = this.rgb();
    a = this.alpha();
    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);
  };

  blend = function(bottom, top, mode) {
    if (!blend[mode]) {
      throw 'unknown blend mode ' + mode;
    }
    return blend[mode](bottom, top);
  };

  blend_f = function(f) {
    return function(bottom, top) {
      var c0, c1;
      c0 = chroma(top).rgb();
      c1 = chroma(bottom).rgb();
      return chroma(f(c0, c1), 'rgb');
    };
  };

  each = function(f) {
    return function(c0, c1) {
      var i, o, out;
      out = [];
      for (i = o = 0; o <= 3; i = ++o) {
        out[i] = f(c0[i], c1[i]);
      }
      return out;
    };
  };

  normal = function(a, b) {
    return a;
  };

  multiply = function(a, b) {
    return a * b / 255;
  };

  darken = function(a, b) {
    if (a > b) {
      return b;
    } else {
      return a;
    }
  };

  lighten = function(a, b) {
    if (a > b) {
      return a;
    } else {
      return b;
    }
  };

  screen = function(a, b) {
    return 255 * (1 - (1 - a / 255) * (1 - b / 255));
  };

  overlay = function(a, b) {
    if (b < 128) {
      return 2 * a * b / 255;
    } else {
      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
    }
  };

  burn = function(a, b) {
    return 255 * (1 - (1 - b / 255) / (a / 255));
  };

  dodge = function(a, b) {
    if (a === 255) {
      return 255;
    }
    a = 255 * (b / 255) / (1 - a / 255);
    if (a > 255) {
      return 255;
    } else {
      return a;
    }
  };

  blend.normal = blend_f(each(normal));

  blend.multiply = blend_f(each(multiply));

  blend.screen = blend_f(each(screen));

  blend.overlay = blend_f(each(overlay));

  blend.darken = blend_f(each(darken));

  blend.lighten = blend_f(each(lighten));

  blend.dodge = blend_f(each(dodge));

  blend.burn = blend_f(each(burn));

  chroma.blend = blend;

  chroma.analyze = function(data) {
    var len, o, r, val;
    r = {
      min: Number.MAX_VALUE,
      max: Number.MAX_VALUE * -1,
      sum: 0,
      values: [],
      count: 0
    };
    for (o = 0, len = data.length; o < len; o++) {
      val = data[o];
      if ((val != null) && !isNaN(val)) {
        r.values.push(val);
        r.sum += val;
        if (val < r.min) {
          r.min = val;
        }
        if (val > r.max) {
          r.max = val;
        }
        r.count += 1;
      }
    }
    r.domain = [r.min, r.max];
    r.limits = function(mode, num) {
      return chroma.limits(r, mode, num);
    };
    return r;
  };

  chroma.scale = function(colors, positions) {
    var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f, getClass, getColor, resetCache, setColors, tmap;
    _mode = 'rgb';
    _nacol = chroma('#ccc');
    _spread = 0;
    _fixed = false;
    _domain = [0, 1];
    _pos = [];
    _padding = [0, 0];
    _classes = false;
    _colors = [];
    _out = false;
    _min = 0;
    _max = 1;
    _correctLightness = false;
    _colorCache = {};
    _useCache = true;
    _gamma = 1;
    setColors = function(colors) {
      var c, col, o, ref, ref1, w;
      if (colors == null) {
        colors = ['#fff', '#000'];
      }
      if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {
        colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;
      }
      if (type(colors) === 'array') {
        colors = colors.slice(0);
        for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {
          col = colors[c];
          if (type(col) === "string") {
            colors[c] = chroma(col);
          }
        }
        _pos.length = 0;
        for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {
          _pos.push(c / (colors.length - 1));
        }
      }
      resetCache();
      return _colors = colors;
    };
    getClass = function(value) {
      var i, n;
      if (_classes != null) {
        n = _classes.length - 1;
        i = 0;
        while (i < n && value >= _classes[i]) {
          i++;
        }
        return i - 1;
      }
      return 0;
    };
    tmap = function(t) {
      return t;
    };
    classifyValue = function(value) {
      var i, maxc, minc, n, val;
      val = value;
      if (_classes.length > 2) {
        n = _classes.length - 1;
        i = getClass(value);
        minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);
        maxc = _classes[n - 1] + (_classes[n] - _classes[n - 1]) * (1 - _spread * 0.5);
        val = _min + ((_classes[i] + (_classes[i + 1] - _classes[i]) * 0.5 - minc) / (maxc - minc)) * (_max - _min);
      }
      return val;
    };
    getColor = function(val, bypassMap) {
      var c, col, i, k, o, p, ref, t;
      if (bypassMap == null) {
        bypassMap = false;
      }
      if (isNaN(val)) {
        return _nacol;
      }
      if (!bypassMap) {
        if (_classes && _classes.length > 2) {
          c = getClass(val);
          t = c / (_classes.length - 2);
        } else if (_max !== _min) {
          t = (val - _min) / (_max - _min);
        } else {
          t = 1;
        }
      } else {
        t = val;
      }
      if (!bypassMap) {
        t = tmap(t);
      }
      if (_gamma !== 1) {
        t = pow(t, _gamma);
      }
      t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));
      t = Math.min(1, Math.max(0, t));
      k = Math.floor(t * 10000);
      if (_useCache && _colorCache[k]) {
        col = _colorCache[k];
      } else {
        if (type(_colors) === 'array') {
          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {
            p = _pos[i];
            if (t <= p) {
              col = _colors[i];
              break;
            }
            if (t >= p && i === _pos.length - 1) {
              col = _colors[i];
              break;
            }
            if (t > p && t < _pos[i + 1]) {
              t = (t - p) / (_pos[i + 1] - p);
              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);
              break;
            }
          }
        } else if (type(_colors) === 'function') {
          col = _colors(t);
        }
        if (_useCache) {
          _colorCache[k] = col;
        }
      }
      return col;
    };
    resetCache = function() {
      return _colorCache = {};
    };
    setColors(colors);
    f = function(v) {
      var c;
      c = chroma(getColor(v));
      if (_out && c[_out]) {
        return c[_out]();
      } else {
        return c;
      }
    };
    f.classes = function(classes) {
      var d;
      if (classes != null) {
        if (type(classes) === 'array') {
          _classes = classes;
          _domain = [classes[0], classes[classes.length - 1]];
        } else {
          d = chroma.analyze(_domain);
          if (classes === 0) {
            _classes = [d.min, d.max];
          } else {
            _classes = chroma.limits(d, 'e', classes);
          }
        }
        return f;
      }
      return _classes;
    };
    f.domain = function(domain) {
      var c, d, k, len, o, ref, w;
      if (!arguments.length) {
        return _domain;
      }
      _min = domain[0];
      _max = domain[domain.length - 1];
      _pos = [];
      k = _colors.length;
      if (domain.length === k && _min !== _max) {
        for (o = 0, len = domain.length; o < len; o++) {
          d = domain[o];
          _pos.push((d - _min) / (_max - _min));
        }
      } else {
        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {
          _pos.push(c / (k - 1));
        }
      }
      _domain = [_min, _max];
      return f;
    };
    f.mode = function(_m) {
      if (!arguments.length) {
        return _mode;
      }
      _mode = _m;
      resetCache();
      return f;
    };
    f.range = function(colors, _pos) {
      setColors(colors, _pos);
      return f;
    };
    f.out = function(_o) {
      _out = _o;
      return f;
    };
    f.spread = function(val) {
      if (!arguments.length) {
        return _spread;
      }
      _spread = val;
      return f;
    };
    f.correctLightness = function(v) {
      if (v == null) {
        v = true;
      }
      _correctLightness = v;
      resetCache();
      if (_correctLightness) {
        tmap = function(t) {
          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;
          L0 = getColor(0, true).lab()[0];
          L1 = getColor(1, true).lab()[0];
          pol = L0 > L1;
          L_actual = getColor(t, true).lab()[0];
          L_ideal = L0 + (L1 - L0) * t;
          L_diff = L_actual - L_ideal;
          t0 = 0;
          t1 = 1;
          max_iter = 20;
          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {
            (function() {
              if (pol) {
                L_diff *= -1;
              }
              if (L_diff < 0) {
                t0 = t;
                t += (t1 - t) * 0.5;
              } else {
                t1 = t;
                t += (t0 - t) * 0.5;
              }
              L_actual = getColor(t, true).lab()[0];
              return L_diff = L_actual - L_ideal;
            })();
          }
          return t;
        };
      } else {
        tmap = function(t) {
          return t;
        };
      }
      return f;
    };
    f.padding = function(p) {
      if (p != null) {
        if (type(p) === 'number') {
          p = [p, p];
        }
        _padding = p;
        return f;
      } else {
        return _padding;
      }
    };
    f.colors = function(numColors, out) {
      var dd, dm, i, o, ref, result, results, samples, w;
      if (arguments.length < 2) {
        out = 'hex';
      }
      result = [];
      if (arguments.length === 0) {
        result = _colors.slice(0);
      } else if (numColors === 1) {
        result = [f(0.5)];
      } else if (numColors > 1) {
        dm = _domain[0];
        dd = _domain[1] - dm;
        result = (function() {
          results = [];
          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }
          return results;
        }).apply(this).map(function(i) {
          return f(dm + i / (numColors - 1) * dd);
        });
      } else {
        colors = [];
        samples = [];
        if (_classes && _classes.length > 2) {
          for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {
            samples.push((_classes[i - 1] + _classes[i]) * 0.5);
          }
        } else {
          samples = _domain;
        }
        result = samples.map(function(v) {
          return f(v);
        });
      }
      if (chroma[out]) {
        result = result.map(function(c) {
          return c[out]();
        });
      }
      return result;
    };
    f.cache = function(c) {
      if (c != null) {
        _useCache = c;
        return f;
      } else {
        return _useCache;
      }
    };
    f.gamma = function(g) {
      if (g != null) {
        _gamma = g;
        return f;
      } else {
        return _gamma;
      }
    };
    return f;
  };

  if (chroma.scales == null) {
    chroma.scales = {};
  }

  chroma.scales.cool = function() {
    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);
  };

  chroma.scales.hot = function() {
    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');
  };

  chroma.analyze = function(data, key, filter) {
    var add, k, len, o, r, val, visit;
    r = {
      min: Number.MAX_VALUE,
      max: Number.MAX_VALUE * -1,
      sum: 0,
      values: [],
      count: 0
    };
    if (filter == null) {
      filter = function() {
        return true;
      };
    }
    add = function(val) {
      if ((val != null) && !isNaN(val)) {
        r.values.push(val);
        r.sum += val;
        if (val < r.min) {
          r.min = val;
        }
        if (val > r.max) {
          r.max = val;
        }
        r.count += 1;
      }
    };
    visit = function(val, k) {
      if (filter(val, k)) {
        if ((key != null) && type(key) === 'function') {
          return add(key(val));
        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {
          return add(val[key]);
        } else {
          return add(val);
        }
      }
    };
    if (type(data) === 'array') {
      for (o = 0, len = data.length; o < len; o++) {
        val = data[o];
        visit(val);
      }
    } else {
      for (k in data) {
        val = data[k];
        visit(val, k);
      }
    }
    r.domain = [r.min, r.max];
    r.limits = function(mode, num) {
      return chroma.limits(r, mode, num);
    };
    return r;
  };

  chroma.limits = function(data, mode, num) {
    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;
    if (mode == null) {
      mode = 'equal';
    }
    if (num == null) {
      num = 7;
    }
    if (type(data) === 'array') {
      data = chroma.analyze(data);
    }
    min = data.min;
    max = data.max;
    sum = data.sum;
    values = data.values.sort(function(a, b) {
      return a - b;
    });
    if (num === 1) {
      return [min, max];
    }
    limits = [];
    if (mode.substr(0, 1) === 'c') {
      limits.push(min);
      limits.push(max);
    }
    if (mode.substr(0, 1) === 'e') {
      limits.push(min);
      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {
        limits.push(min + (i / num) * (max - min));
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'l') {
      if (min <= 0) {
        throw 'Logarithmic scales are only possible for values > 0';
      }
      min_log = Math.LOG10E * log(min);
      max_log = Math.LOG10E * log(max);
      limits.push(min);
      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {
        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'q') {
      limits.push(min);
      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {
        p = (values.length - 1) * i / num;
        pb = floor(p);
        if (pb === p) {
          limits.push(values[pb]);
        } else {
          pr = p - pb;
          limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
        }
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'k') {

      /*
      implementation based on
      http://code.google.com/p/figue/source/browse/trunk/figue.js#336
      simplified for 1-d input values
       */
      n = values.length;
      assignments = new Array(n);
      clusterSizes = new Array(num);
      repeat = true;
      nb_iters = 0;
      centroids = null;
      centroids = [];
      centroids.push(min);
      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {
        centroids.push(min + (i / num) * (max - min));
      }
      centroids.push(max);
      while (repeat) {
        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {
          clusterSizes[j] = 0;
        }
        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {
          value = values[i];
          mindist = Number.MAX_VALUE;
          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {
            dist = abs(centroids[j] - value);
            if (dist < mindist) {
              mindist = dist;
              best = j;
            }
          }
          clusterSizes[best]++;
          assignments[i] = best;
        }
        newCentroids = new Array(num);
        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {
          newCentroids[j] = null;
        }
        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {
          cluster = assignments[i];
          if (newCentroids[cluster] === null) {
            newCentroids[cluster] = values[i];
          } else {
            newCentroids[cluster] += values[i];
          }
        }
        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {
          newCentroids[j] *= 1 / clusterSizes[j];
        }
        repeat = false;
        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {
          if (newCentroids[j] !== centroids[i]) {
            repeat = true;
            break;
          }
        }
        centroids = newCentroids;
        nb_iters++;
        if (nb_iters > 200) {
          repeat = false;
        }
      }
      kClusters = {};
      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {
        kClusters[j] = [];
      }
      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {
        cluster = assignments[i];
        kClusters[cluster].push(values[i]);
      }
      tmpKMeansBreaks = [];
      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {
        tmpKMeansBreaks.push(kClusters[j][0]);
        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);
      }
      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {
        return a - b;
      });
      limits.push(tmpKMeansBreaks[0]);
      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {
        v = tmpKMeansBreaks[i];
        if (!isNaN(v) && limits.indexOf(v) === -1) {
          limits.push(v);
        }
      }
    }
    return limits;
  };

  hsi2rgb = function(h, s, i) {

    /*
    borrowed from here:
    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
     */
    var args, b, g, r;
    args = unpack(arguments);
    h = args[0], s = args[1], i = args[2];
    if (isNaN(h)) {
      h = 0;
    }
    h /= 360;
    if (h < 1 / 3) {
      b = (1 - s) / 3;
      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      g = 1 - (b + r);
    } else if (h < 2 / 3) {
      h -= 1 / 3;
      r = (1 - s) / 3;
      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      b = 1 - (r + g);
    } else {
      h -= 2 / 3;
      g = (1 - s) / 3;
      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      r = 1 - (g + b);
    }
    r = limit(i * r * 3);
    g = limit(i * g * 3);
    b = limit(i * b * 3);
    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];
  };

  rgb2hsi = function() {

    /*
    borrowed from here:
    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
     */
    var b, g, h, i, min, r, ref, s;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    TWOPI = Math.PI * 2;
    r /= 255;
    g /= 255;
    b /= 255;
    min = Math.min(r, g, b);
    i = (r + g + b) / 3;
    s = 1 - min / i;
    if (s === 0) {
      h = 0;
    } else {
      h = ((r - g) + (r - b)) / 2;
      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));
      h = Math.acos(h);
      if (b > g) {
        h = TWOPI - h;
      }
      h /= TWOPI;
    }
    return [h * 360, s, i];
  };

  chroma.hsi = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hsi']), function(){});
  };

  _input.hsi = hsi2rgb;

  Color.prototype.hsi = function() {
    return rgb2hsi(this._rgb);
  };

  interpolate_hsx = function(col1, col2, f, m) {
    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;
    if (m === 'hsl') {
      xyz0 = col1.hsl();
      xyz1 = col2.hsl();
    } else if (m === 'hsv') {
      xyz0 = col1.hsv();
      xyz1 = col2.hsv();
    } else if (m === 'hcg') {
      xyz0 = col1.hcg();
      xyz1 = col2.hcg();
    } else if (m === 'hsi') {
      xyz0 = col1.hsi();
      xyz1 = col2.hsi();
    } else if (m === 'lch' || m === 'hcl') {
      m = 'hcl';
      xyz0 = col1.hcl();
      xyz1 = col2.hcl();
    }
    if (m.substr(0, 1) === 'h') {
      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
    }
    if (!isNaN(hue0) && !isNaN(hue1)) {
      if (hue1 > hue0 && hue1 - hue0 > 180) {
        dh = hue1 - (hue0 + 360);
      } else if (hue1 < hue0 && hue0 - hue1 > 180) {
        dh = hue1 + 360 - hue0;
      } else {
        dh = hue1 - hue0;
      }
      hue = hue0 + f * dh;
    } else if (!isNaN(hue0)) {
      hue = hue0;
      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {
        sat = sat0;
      }
    } else if (!isNaN(hue1)) {
      hue = hue1;
      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {
        sat = sat1;
      }
    } else {
      hue = Number.NaN;
    }
    if (sat == null) {
      sat = sat0 + f * (sat1 - sat0);
    }
    lbv = lbv0 + f * (lbv1 - lbv0);
    return res = chroma[m](hue, sat, lbv);
  };

  _interpolators = _interpolators.concat((function() {
    var len, o, ref, results;
    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];
    results = [];
    for (o = 0, len = ref.length; o < len; o++) {
      m = ref[o];
      results.push([m, interpolate_hsx]);
    }
    return results;
  })());

  interpolate_num = function(col1, col2, f, m) {
    var n1, n2;
    n1 = col1.num();
    n2 = col2.num();
    return chroma.num(n1 + (n2 - n1) * f, 'num');
  };

  _interpolators.push(['num', interpolate_num]);

  interpolate_lab = function(col1, col2, f, m) {
    var res, xyz0, xyz1;
    xyz0 = col1.lab();
    xyz1 = col2.lab();
    return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
  };

  _interpolators.push(['lab', interpolate_lab]);

}).call(this);

},{}],67:[function(require,module,exports) {
/* Font Face Observer v2.0.13 - © Bram Stein. License: BSD-3-Clause */(function(){function l(a,b){document.addEventListener?a.addEventListener("scroll",b,!1):a.attachEvent("scroll",b)}function m(a){document.body?a():document.addEventListener?document.addEventListener("DOMContentLoaded",function c(){document.removeEventListener("DOMContentLoaded",c);a()}):document.attachEvent("onreadystatechange",function k(){if("interactive"==document.readyState||"complete"==document.readyState)document.detachEvent("onreadystatechange",k),a()})};function r(a){this.a=document.createElement("div");this.a.setAttribute("aria-hidden","true");this.a.appendChild(document.createTextNode(a));this.b=document.createElement("span");this.c=document.createElement("span");this.h=document.createElement("span");this.f=document.createElement("span");this.g=-1;this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";this.b.appendChild(this.h);this.c.appendChild(this.f);this.a.appendChild(this.b);this.a.appendChild(this.c)}
function t(a,b){a.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;white-space:nowrap;font-synthesis:none;font:"+b+";"}function y(a){var b=a.a.offsetWidth,c=b+100;a.f.style.width=c+"px";a.c.scrollLeft=c;a.b.scrollLeft=a.b.scrollWidth+100;return a.g!==b?(a.g=b,!0):!1}function z(a,b){function c(){var a=k;y(a)&&a.a.parentNode&&b(a.g)}var k=a;l(a.b,c);l(a.c,c);y(a)};function A(a,b){var c=b||{};this.family=a;this.style=c.style||"normal";this.weight=c.weight||"normal";this.stretch=c.stretch||"normal"}var B=null,C=null,E=null,F=null;function G(){if(null===C)if(J()&&/Apple/.test(window.navigator.vendor)){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))(?:\.([0-9]+))/.exec(window.navigator.userAgent);C=!!a&&603>parseInt(a[1],10)}else C=!1;return C}function J(){null===F&&(F=!!document.fonts);return F}
function K(){if(null===E){var a=document.createElement("div");try{a.style.font="condensed 100px sans-serif"}catch(b){}E=""!==a.style.font}return E}function L(a,b){return[a.style,a.weight,K()?a.stretch:"","100px",b].join(" ")}
A.prototype.load=function(a,b){var c=this,k=a||"BESbswy",q=0,D=b||3E3,H=(new Date).getTime();return new Promise(function(a,b){if(J()&&!G()){var M=new Promise(function(a,b){function e(){(new Date).getTime()-H>=D?b():document.fonts.load(L(c,'"'+c.family+'"'),k).then(function(c){1<=c.length?a():setTimeout(e,25)},function(){b()})}e()}),N=new Promise(function(a,c){q=setTimeout(c,D)});Promise.race([N,M]).then(function(){clearTimeout(q);a(c)},function(){b(c)})}else m(function(){function u(){var b;if(b=-1!=
f&&-1!=g||-1!=f&&-1!=h||-1!=g&&-1!=h)(b=f!=g&&f!=h&&g!=h)||(null===B&&(b=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent),B=!!b&&(536>parseInt(b[1],10)||536===parseInt(b[1],10)&&11>=parseInt(b[2],10))),b=B&&(f==v&&g==v&&h==v||f==w&&g==w&&h==w||f==x&&g==x&&h==x)),b=!b;b&&(d.parentNode&&d.parentNode.removeChild(d),clearTimeout(q),a(c))}function I(){if((new Date).getTime()-H>=D)d.parentNode&&d.parentNode.removeChild(d),b(c);else{var a=document.hidden;if(!0===a||void 0===a)f=e.a.offsetWidth,
g=n.a.offsetWidth,h=p.a.offsetWidth,u();q=setTimeout(I,50)}}var e=new r(k),n=new r(k),p=new r(k),f=-1,g=-1,h=-1,v=-1,w=-1,x=-1,d=document.createElement("div");d.dir="ltr";t(e,L(c,"sans-serif"));t(n,L(c,"serif"));t(p,L(c,"monospace"));d.appendChild(e.a);d.appendChild(n.a);d.appendChild(p.a);document.body.appendChild(d);v=e.a.offsetWidth;w=n.a.offsetWidth;x=p.a.offsetWidth;I();z(e,function(a){f=a;u()});t(e,L(c,'"'+c.family+'",sans-serif'));z(n,function(a){g=a;u()});t(n,L(c,'"'+c.family+'",serif'));
z(p,function(a){h=a;u()});t(p,L(c,'"'+c.family+'",monospace'))})})};"object"===typeof module?module.exports=A:(window.FontFaceObserver=A,window.FontFaceObserver.prototype.load=A.prototype.load);}());

},{}],68:[function(require,module,exports) {
var global = (1,eval)("this");
/*!
 *  howler.js v2.0.9
 *  howlerjs.com
 *
 *  (c) 2013-2018, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {

  'use strict';

  /** Global Methods **/
  /***************************************************************************/

  /**
   * Create the global controller. All contained methods and properties apply
   * to all sounds that are currently playing or will be in the future.
   */
  var HowlerGlobal = function() {
    this.init();
  };
  HowlerGlobal.prototype = {
    /**
     * Initialize the global Howler object.
     * @return {Howler}
     */
    init: function() {
      var self = this || Howler;

      // Create a global ID counter.
      self._counter = 1000;

      // Internal properties.
      self._codecs = {};
      self._howls = [];
      self._muted = false;
      self._volume = 1;
      self._canPlayEvent = 'canplaythrough';
      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;

      // Public properties.
      self.masterGain = null;
      self.noAudio = false;
      self.usingWebAudio = true;
      self.autoSuspend = true;
      self.ctx = null;

      // Set to false to disable the auto iOS enabler.
      self.mobileAutoEnable = true;

      // Setup the various state values for global tracking.
      self._setup();

      return self;
    },

    /**
     * Get/set the global volume for all sounds.
     * @param  {Float} vol Volume from 0.0 to 1.0.
     * @return {Howler/Float}     Returns self or current volume.
     */
    volume: function(vol) {
      var self = this || Howler;
      vol = parseFloat(vol);

      // If we don't have an AudioContext created yet, run the setup.
      if (!self.ctx) {
        setupAudioContext();
      }

      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        self._volume = vol;

        // Don't update any of the nodes if we are muted.
        if (self._muted) {
          return self;
        }

        // When using Web Audio, we just need to adjust the master gain.
        if (self.usingWebAudio) {
          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);
        }

        // Loop through and change volume for all HTML5 audio nodes.
        for (var i=0; i<self._howls.length; i++) {
          if (!self._howls[i]._webAudio) {
            // Get all of the sounds in this Howl group.
            var ids = self._howls[i]._getSoundIds();

            // Loop through all sounds and change the volumes.
            for (var j=0; j<ids.length; j++) {
              var sound = self._howls[i]._soundById(ids[j]);

              if (sound && sound._node) {
                sound._node.volume = sound._volume * vol;
              }
            }
          }
        }

        return self;
      }

      return self._volume;
    },

    /**
     * Handle muting and unmuting globally.
     * @param  {Boolean} muted Is muted or not.
     */
    mute: function(muted) {
      var self = this || Howler;

      // If we don't have an AudioContext created yet, run the setup.
      if (!self.ctx) {
        setupAudioContext();
      }

      self._muted = muted;

      // With Web Audio, we just need to mute the master gain.
      if (self.usingWebAudio) {
        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);
      }

      // Loop through and mute all HTML5 Audio nodes.
      for (var i=0; i<self._howls.length; i++) {
        if (!self._howls[i]._webAudio) {
          // Get all of the sounds in this Howl group.
          var ids = self._howls[i]._getSoundIds();

          // Loop through all sounds and mark the audio node as muted.
          for (var j=0; j<ids.length; j++) {
            var sound = self._howls[i]._soundById(ids[j]);

            if (sound && sound._node) {
              sound._node.muted = (muted) ? true : sound._muted;
            }
          }
        }
      }

      return self;
    },

    /**
     * Unload and destroy all currently loaded Howl objects.
     * @return {Howler}
     */
    unload: function() {
      var self = this || Howler;

      for (var i=self._howls.length-1; i>=0; i--) {
        self._howls[i].unload();
      }

      // Create a new AudioContext to make sure it is fully reset.
      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {
        self.ctx.close();
        self.ctx = null;
        setupAudioContext();
      }

      return self;
    },

    /**
     * Check for codec support of specific extension.
     * @param  {String} ext Audio file extention.
     * @return {Boolean}
     */
    codecs: function(ext) {
      return (this || Howler)._codecs[ext.replace(/^x-/, '')];
    },

    /**
     * Setup various state values for global tracking.
     * @return {Howler}
     */
    _setup: function() {
      var self = this || Howler;

      // Keeps track of the suspend/resume state of the AudioContext.
      self.state = self.ctx ? self.ctx.state || 'running' : 'running';

      // Automatically begin the 30-second suspend process
      self._autoSuspend();

      // Check if audio is available.
      if (!self.usingWebAudio) {
        // No audio is available on this system if noAudio is set to true.
        if (typeof Audio !== 'undefined') {
          try {
            var test = new Audio();

            // Check if the canplaythrough event is available.
            if (typeof test.oncanplaythrough === 'undefined') {
              self._canPlayEvent = 'canplay';
            }
          } catch(e) {
            self.noAudio = true;
          }
        } else {
          self.noAudio = true;
        }
      }

      // Test to make sure audio isn't disabled in Internet Explorer.
      try {
        var test = new Audio();
        if (test.muted) {
          self.noAudio = true;
        }
      } catch (e) {}

      // Check for supported codecs.
      if (!self.noAudio) {
        self._setupCodecs();
      }

      return self;
    },

    /**
     * Check for browser support for various codecs and cache the results.
     * @return {Howler}
     */
    _setupCodecs: function() {
      var self = this || Howler;
      var audioTest = null;

      // Must wrap in a try/catch because IE11 in server mode throws an error.
      try {
        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;
      } catch (err) {
        return self;
      }

      if (!audioTest || typeof audioTest.canPlayType !== 'function') {
        return self;
      }

      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');

      // Opera version <33 has mixed MP3 support, so we need to check for and block it.
      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\/([0-6].)/g);
      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);

      self._codecs = {
        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),
        mpeg: !!mpegTest,
        opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
        ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        wav: !!audioTest.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''),
        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),
        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        webm: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ''),
        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')
      };

      return self;
    },

    /**
     * Mobile browsers will only allow audio to be played after a user interaction.
     * Attempt to automatically unlock audio on the first user interaction.
     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
     * @return {Howler}
     */
    _enableMobileAudio: function() {
      var self = this || Howler;

      // Only run this on mobile devices if audio isn't already eanbled.
      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);
      var isTouch = !!(('ontouchend' in window) || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));
      if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {
        return;
      }

      self._mobileEnabled = false;

      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.
      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.
      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.
      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
        self._mobileUnloaded = true;
        self.unload();
      }

      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:
      // http://stackoverflow.com/questions/24119684
      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);

      // Call this method on touch start to create and play a buffer,
      // then check if the audio actually played to determine if
      // audio has now been unlocked on iOS, Android, etc.
      var unlock = function() {
        // Fix Android can not play in suspend state.
        Howler._autoResume();

        // Create an empty buffer.
        var source = self.ctx.createBufferSource();
        source.buffer = self._scratchBuffer;
        source.connect(self.ctx.destination);

        // Play the empty buffer.
        if (typeof source.start === 'undefined') {
          source.noteOn(0);
        } else {
          source.start(0);
        }

        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.
        if (typeof self.ctx.resume === 'function') {
          self.ctx.resume();
        }

        // Setup a timeout to check that we are unlocked on the next event loop.
        source.onended = function() {
          source.disconnect(0);

          // Update the unlocked state and prevent this check from happening again.
          self._mobileEnabled = true;
          self.mobileAutoEnable = false;

          // Remove the touch start listener.
          document.removeEventListener('touchstart', unlock, true);
          document.removeEventListener('touchend', unlock, true);
        };
      };

      // Setup a touch start listener to attempt an unlock in.
      document.addEventListener('touchstart', unlock, true);
      document.addEventListener('touchend', unlock, true);

      return self;
    },

    /**
     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
     * @return {Howler}
     */
    _autoSuspend: function() {
      var self = this;

      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {
        return;
      }

      // Check if any sounds are playing.
      for (var i=0; i<self._howls.length; i++) {
        if (self._howls[i]._webAudio) {
          for (var j=0; j<self._howls[i]._sounds.length; j++) {
            if (!self._howls[i]._sounds[j]._paused) {
              return self;
            }
          }
        }
      }

      if (self._suspendTimer) {
        clearTimeout(self._suspendTimer);
      }

      // If no sound has played after 30 seconds, suspend the context.
      self._suspendTimer = setTimeout(function() {
        if (!self.autoSuspend) {
          return;
        }

        self._suspendTimer = null;
        self.state = 'suspending';
        self.ctx.suspend().then(function() {
          self.state = 'suspended';

          if (self._resumeAfterSuspend) {
            delete self._resumeAfterSuspend;
            self._autoResume();
          }
        });
      }, 30000);

      return self;
    },

    /**
     * Automatically resume the Web Audio AudioContext when a new sound is played.
     * @return {Howler}
     */
    _autoResume: function() {
      var self = this;

      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {
        return;
      }

      if (self.state === 'running' && self._suspendTimer) {
        clearTimeout(self._suspendTimer);
        self._suspendTimer = null;
      } else if (self.state === 'suspended') {
        self.ctx.resume().then(function() {
          self.state = 'running';

          // Emit to all Howls that the audio has resumed.
          for (var i=0; i<self._howls.length; i++) {
            self._howls[i]._emit('resume');
          }
        });

        if (self._suspendTimer) {
          clearTimeout(self._suspendTimer);
          self._suspendTimer = null;
        }
      } else if (self.state === 'suspending') {
        self._resumeAfterSuspend = true;
      }

      return self;
    }
  };

  // Setup the global audio controller.
  var Howler = new HowlerGlobal();

  /** Group Methods **/
  /***************************************************************************/

  /**
   * Create an audio group controller.
   * @param {Object} o Passed in properties for this group.
   */
  var Howl = function(o) {
    var self = this;

    // Throw an error if no source is provided.
    if (!o.src || o.src.length === 0) {
      console.error('An array of source files must be passed with any new Howl.');
      return;
    }

    self.init(o);
  };
  Howl.prototype = {
    /**
     * Initialize a new Howl group object.
     * @param  {Object} o Passed in properties for this group.
     * @return {Howl}
     */
    init: function(o) {
      var self = this;

      // If we don't have an AudioContext created yet, run the setup.
      if (!Howler.ctx) {
        setupAudioContext();
      }

      // Setup user-defined default properties.
      self._autoplay = o.autoplay || false;
      self._format = (typeof o.format !== 'string') ? o.format : [o.format];
      self._html5 = o.html5 || false;
      self._muted = o.mute || false;
      self._loop = o.loop || false;
      self._pool = o.pool || 5;
      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;
      self._rate = o.rate || 1;
      self._sprite = o.sprite || {};
      self._src = (typeof o.src !== 'string') ? o.src : [o.src];
      self._volume = o.volume !== undefined ? o.volume : 1;
      self._xhrWithCredentials = o.xhrWithCredentials || false;

      // Setup all other default properties.
      self._duration = 0;
      self._state = 'unloaded';
      self._sounds = [];
      self._endTimers = {};
      self._queue = [];
      self._playLock = false;

      // Setup event listeners.
      self._onend = o.onend ? [{fn: o.onend}] : [];
      self._onfade = o.onfade ? [{fn: o.onfade}] : [];
      self._onload = o.onload ? [{fn: o.onload}] : [];
      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];
      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];
      self._onpause = o.onpause ? [{fn: o.onpause}] : [];
      self._onplay = o.onplay ? [{fn: o.onplay}] : [];
      self._onstop = o.onstop ? [{fn: o.onstop}] : [];
      self._onmute = o.onmute ? [{fn: o.onmute}] : [];
      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];
      self._onrate = o.onrate ? [{fn: o.onrate}] : [];
      self._onseek = o.onseek ? [{fn: o.onseek}] : [];
      self._onresume = [];

      // Web Audio or HTML5 Audio?
      self._webAudio = Howler.usingWebAudio && !self._html5;

      // Automatically try to enable audio on iOS.
      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {
        Howler._enableMobileAudio();
      }

      // Keep track of this Howl group in the global controller.
      Howler._howls.push(self);

      // If they selected autoplay, add a play event to the load queue.
      if (self._autoplay) {
        self._queue.push({
          event: 'play',
          action: function() {
            self.play();
          }
        });
      }

      // Load the source file unless otherwise specified.
      if (self._preload) {
        self.load();
      }

      return self;
    },

    /**
     * Load the audio file.
     * @return {Howler}
     */
    load: function() {
      var self = this;
      var url = null;

      // If no audio is available, quit immediately.
      if (Howler.noAudio) {
        self._emit('loaderror', null, 'No audio support.');
        return;
      }

      // Make sure our source is in an array.
      if (typeof self._src === 'string') {
        self._src = [self._src];
      }

      // Loop through the sources and pick the first one that is compatible.
      for (var i=0; i<self._src.length; i++) {
        var ext, str;

        if (self._format && self._format[i]) {
          // If an extension was specified, use that instead.
          ext = self._format[i];
        } else {
          // Make sure the source is a string.
          str = self._src[i];
          if (typeof str !== 'string') {
            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');
            continue;
          }

          // Extract the file extension from the URL or base64 data URI.
          ext = /^data:audio\/([^;,]+);/i.exec(str);
          if (!ext) {
            ext = /\.([^.]+)$/.exec(str.split('?', 1)[0]);
          }

          if (ext) {
            ext = ext[1].toLowerCase();
          }
        }

        // Log a warning if no extension was found.
        if (!ext) {
          console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
        }

        // Check if this extension is available.
        if (ext && Howler.codecs(ext)) {
          url = self._src[i];
          break;
        }
      }

      if (!url) {
        self._emit('loaderror', null, 'No codec support for selected audio sources.');
        return;
      }

      self._src = url;
      self._state = 'loading';

      // If the hosting page is HTTPS and the source isn't,
      // drop down to HTML5 Audio to avoid Mixed Content errors.
      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {
        self._html5 = true;
        self._webAudio = false;
      }

      // Create a new sound object and add it to the pool.
      new Sound(self);

      // Load and decode the audio data for playback.
      if (self._webAudio) {
        loadBuffer(self);
      }

      return self;
    },

    /**
     * Play a sound or resume previous playback.
     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
     * @param  {Boolean} internal Internal Use: true prevents event firing.
     * @return {Number}          Sound ID.
     */
    play: function(sprite, internal) {
      var self = this;
      var id = null;

      // Determine if a sprite, sound id or nothing was passed
      if (typeof sprite === 'number') {
        id = sprite;
        sprite = null;
      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {
        // If the passed sprite doesn't exist, do nothing.
        return null;
      } else if (typeof sprite === 'undefined') {
        // Use the default sound sprite (plays the full audio length).
        sprite = '__default';

        // Check if there is a single paused sound that isn't ended.
        // If there is, play that sound. If not, continue as usual.
        var num = 0;
        for (var i=0; i<self._sounds.length; i++) {
          if (self._sounds[i]._paused && !self._sounds[i]._ended) {
            num++;
            id = self._sounds[i]._id;
          }
        }

        if (num === 1) {
          sprite = null;
        } else {
          id = null;
        }
      }

      // Get the selected node, or get one from the pool.
      var sound = id ? self._soundById(id) : self._inactiveSound();

      // If the sound doesn't exist, do nothing.
      if (!sound) {
        return null;
      }

      // Select the sprite definition.
      if (id && !sprite) {
        sprite = sound._sprite || '__default';
      }

      // If the sound hasn't loaded, we must wait to get the audio's duration.
      // We also need to wait to make sure we don't run into race conditions with
      // the order of function calls.
      if (self._state !== 'loaded') {
        // Set the sprite value on this sound.
        sound._sprite = sprite;

        // Makr this sounded as not ended in case another sound is played before this one loads.
        sound._ended = false;

        // Add the sound to the queue to be played on load.
        var soundId = sound._id;
        self._queue.push({
          event: 'play',
          action: function() {
            self.play(soundId);
          }
        });

        return soundId;
      }

      // Don't play the sound if an id was passed and it is already playing.
      if (id && !sound._paused) {
        // Trigger the play event, in order to keep iterating through queue.
        if (!internal) {
          self._loadQueue('play');
        }

        return sound._id;
      }

      // Make sure the AudioContext isn't suspended, and resume it if it is.
      if (self._webAudio) {
        Howler._autoResume();
      }

      // Determine how long to play for and where to start playing.
      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);
      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);
      var timeout = (duration * 1000) / Math.abs(sound._rate);

      // Update the parameters of the sound
      sound._paused = false;
      sound._ended = false;
      sound._sprite = sprite;
      sound._seek = seek;
      sound._start = self._sprite[sprite][0] / 1000;
      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
      sound._loop = !!(sound._loop || self._sprite[sprite][2]);

      // Begin the actual playback.
      var node = sound._node;
      if (self._webAudio) {
        // Fire this when the sound is ready to play to begin Web Audio playback.
        var playWebAudio = function() {
          self._refreshBuffer(sound);

          // Setup the playback params.
          var vol = (sound._muted || self._muted) ? 0 : sound._volume;
          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
          sound._playStart = Howler.ctx.currentTime;

          // Play the sound using the supported method.
          if (typeof node.bufferSource.start === 'undefined') {
            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
          } else {
            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
          }

          // Start a new timer if none is present.
          if (timeout !== Infinity) {
            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
          }

          if (!internal) {
            setTimeout(function() {
              self._emit('play', sound._id);
            }, 0);
          }
        };

        if (Howler.state === 'running') {
          playWebAudio();
        } else {
          self.once('resume', playWebAudio);

          // Cancel the end timer.
          self._clearTimer(sound._id);
        }
      } else {
        // Fire this when the sound is ready to play to begin HTML5 Audio playback.
        var playHtml5 = function() {
          node.currentTime = seek;
          node.muted = sound._muted || self._muted || Howler._muted || node.muted;
          node.volume = sound._volume * Howler.volume();
          node.playbackRate = sound._rate;

          // Mobile browsers will throw an error if this is called without user interaction.
          try {
            var play = node.play();

            // Support older browsers that don't support promises, and thus don't have this issue.
            if (typeof Promise !== 'undefined' && play instanceof Promise) {
              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().
              self._playLock = true;

              // Releases the lock and executes queued actions.
              var runLoadQueue = function() {
                self._playLock = false;
                if (!internal) {
                  self._emit('play', sound._id);
                }
              };
              play.then(runLoadQueue, runLoadQueue);
            } else if (!internal) {
              self._emit('play', sound._id);
            }

            // If the node is still paused, then we can assume there was a playback issue.
            if (node.paused) {
              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
                'on mobile devices where playback was not within a user interaction.');
              return;
            }

            // Setup the end timer on sprites or listen for the ended event.
            if (sprite !== '__default') {
              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
            } else {
              self._endTimers[sound._id] = function() {
                // Fire ended on this audio node.
                self._ended(sound);

                // Clear this listener.
                node.removeEventListener('ended', self._endTimers[sound._id], false);
              };
              node.addEventListener('ended', self._endTimers[sound._id], false);
            }
          } catch (err) {
            self._emit('playerror', sound._id, err);
          }
        };

        // Play immediately if ready, or wait for the 'canplaythrough'e vent.
        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);
        if (node.readyState >= 3 || loadedNoReadyState) {
          playHtml5();
        } else {
          var listener = function() {
            // Begin playback.
            playHtml5();

            // Clear this listener.
            node.removeEventListener(Howler._canPlayEvent, listener, false);
          };
          node.addEventListener(Howler._canPlayEvent, listener, false);

          // Cancel the end timer.
          self._clearTimer(sound._id);
        }
      }

      return sound._id;
    },

    /**
     * Pause playback and save current position.
     * @param  {Number} id The sound ID (empty to pause all in group).
     * @return {Howl}
     */
    pause: function(id) {
      var self = this;

      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.
      if (self._state !== 'loaded' || self._playLock) {
        self._queue.push({
          event: 'pause',
          action: function() {
            self.pause(id);
          }
        });

        return self;
      }

      // If no id is passed, get all ID's to be paused.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]);

        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound && !sound._paused) {
          // Reset the seek position.
          sound._seek = self.seek(ids[i]);
          sound._rateSeek = 0;
          sound._paused = true;

          // Stop currently running fades.
          self._stopFade(ids[i]);

          if (sound._node) {
            if (self._webAudio) {
              // Make sure the sound has been created.
              if (!sound._node.bufferSource) {
                continue;
              }

              if (typeof sound._node.bufferSource.stop === 'undefined') {
                sound._node.bufferSource.noteOff(0);
              } else {
                sound._node.bufferSource.stop(0);
              }

              // Clean up the buffer source.
              self._cleanBuffer(sound._node);
            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
              sound._node.pause();
            }
          }
        }

        // Fire the pause event, unless `true` is passed as the 2nd argument.
        if (!arguments[1]) {
          self._emit('pause', sound ? sound._id : null);
        }
      }

      return self;
    },

    /**
     * Stop playback and reset to start.
     * @param  {Number} id The sound ID (empty to stop all in group).
     * @param  {Boolean} internal Internal Use: true prevents event firing.
     * @return {Howl}
     */
    stop: function(id, internal) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to stop when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'stop',
          action: function() {
            self.stop(id);
          }
        });

        return self;
      }

      // If no id is passed, get all ID's to be stopped.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]);

        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound) {
          // Reset the seek position.
          sound._seek = sound._start || 0;
          sound._rateSeek = 0;
          sound._paused = true;
          sound._ended = true;

          // Stop currently running fades.
          self._stopFade(ids[i]);

          if (sound._node) {
            if (self._webAudio) {
              // Make sure the sound's AudioBufferSourceNode has been created.
              if (sound._node.bufferSource) {
                if (typeof sound._node.bufferSource.stop === 'undefined') {
                  sound._node.bufferSource.noteOff(0);
                } else {
                  sound._node.bufferSource.stop(0);
                }

                // Clean up the buffer source.
                self._cleanBuffer(sound._node);
              }
            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
              sound._node.currentTime = sound._start || 0;
              sound._node.pause();
            }
          }

          if (!internal) {
            self._emit('stop', sound._id);
          }
        }
      }

      return self;
    },

    /**
     * Mute/unmute a single sound or all sounds in this Howl group.
     * @param  {Boolean} muted Set to true to mute and false to unmute.
     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
     * @return {Howl}
     */
    mute: function(muted, id) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to mute when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'mute',
          action: function() {
            self.mute(muted, id);
          }
        });

        return self;
      }

      // If applying mute/unmute to all sounds, update the group's value.
      if (typeof id === 'undefined') {
        if (typeof muted === 'boolean') {
          self._muted = muted;
        } else {
          return self._muted;
        }
      }

      // If no id is passed, get all ID's to be muted.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound) {
          sound._muted = muted;

          // Cancel active fade and set the volume to the end value.
          if (sound._interval) {
            self._stopFade(sound._id);
          }

          if (self._webAudio && sound._node) {
            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);
          } else if (sound._node) {
            sound._node.muted = Howler._muted ? true : muted;
          }

          self._emit('mute', sound._id);
        }
      }

      return self;
    },

    /**
     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
     *   volume() -> Returns the group's volume value.
     *   volume(id) -> Returns the sound id's current volume.
     *   volume(vol) -> Sets the volume of all sounds in this Howl group.
     *   volume(vol, id) -> Sets the volume of passed sound id.
     * @return {Howl/Number} Returns self or current volume.
     */
    volume: function() {
      var self = this;
      var args = arguments;
      var vol, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // Return the value of the groups' volume.
        return self._volume;
      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {
        // First check if this is an ID, and if not, assume it is a new volume.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          vol = parseFloat(args[0]);
        }
      } else if (args.length >= 2) {
        vol = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // Update the volume or return the current volume.
      var sound;
      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        // If the sound hasn't loaded, add it to the load queue to change volume when capable.
        if (self._state !== 'loaded') {
          self._queue.push({
            event: 'volume',
            action: function() {
              self.volume.apply(self, args);
            }
          });

          return self;
        }

        // Set the group volume.
        if (typeof id === 'undefined') {
          self._volume = vol;
        }

        // Update one or all volumes.
        id = self._getSoundIds(id);
        for (var i=0; i<id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            sound._volume = vol;

            // Stop currently running fades.
            if (!args[2]) {
              self._stopFade(id[i]);
            }

            if (self._webAudio && sound._node && !sound._muted) {
              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
            } else if (sound._node && !sound._muted) {
              sound._node.volume = vol * Howler.volume();
            }

            self._emit('volume', sound._id);
          }
        }
      } else {
        sound = id ? self._soundById(id) : self._sounds[0];
        return sound ? sound._volume : 0;
      }

      return self;
    },

    /**
     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id (omit to fade all sounds).
     * @return {Howl}
     */
    fade: function(from, to, len, id) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to fade when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'fade',
          action: function() {
            self.fade(from, to, len, id);
          }
        });

        return self;
      }

      // Set the volume to the start position.
      self.volume(from, id);

      // Fade the volume of one or all sounds.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        // Create a linear fade or fall back to timeouts with HTML5 Audio.
        if (sound) {
          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).
          if (!id) {
            self._stopFade(ids[i]);
          }

          // If we are using Web Audio, let the native methods do the actual fade.
          if (self._webAudio && !sound._muted) {
            var currentTime = Howler.ctx.currentTime;
            var end = currentTime + (len / 1000);
            sound._volume = from;
            sound._node.gain.setValueAtTime(from, currentTime);
            sound._node.gain.linearRampToValueAtTime(to, end);
          }

          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');
        }
      }

      return self;
    },

    /**
     * Starts the internal interval to fade a sound.
     * @param  {Object} sound Reference to sound to fade.
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id to fade.
     * @param  {Boolean} isGroup   If true, set the volume on the group.
     */
    _startFadeInterval: function(sound, from, to, len, id, isGroup) {
      var self = this;
      var vol = from;
      var diff = to - from;
      var steps = Math.abs(diff / 0.01);
      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);
      var lastTick = Date.now();

      // Store the value being faded to.
      sound._fadeTo = to;

      // Update the volume value on each interval tick.
      sound._interval = setInterval(function() {
        // Update the volume based on the time since the last tick.
        var tick = (Date.now() - lastTick) / len;
        lastTick = Date.now();
        vol += diff * tick;

        // Make sure the volume is in the right bounds.
        vol = Math.max(0, vol);
        vol = Math.min(1, vol);

        // Round to within 2 decimal points.
        vol = Math.round(vol * 100) / 100;

        // Change the volume.
        if (self._webAudio) {
          sound._volume = vol;
        } else {
          self.volume(vol, sound._id, true);
        }

        // Set the group's volume.
        if (isGroup) {
          self._volume = vol;
        }

        // When the fade is complete, stop it and fire event.
        if ((to < from && vol <= to) || (to > from && vol >= to)) {
          clearInterval(sound._interval);
          sound._interval = null;
          sound._fadeTo = null;
          self.volume(to, sound._id);
          self._emit('fade', sound._id);
        }
      }, stepLen);
    },

    /**
     * Internal method that stops the currently playing fade when
     * a new fade starts, volume is changed or the sound is stopped.
     * @param  {Number} id The sound id.
     * @return {Howl}
     */
    _stopFade: function(id) {
      var self = this;
      var sound = self._soundById(id);

      if (sound && sound._interval) {
        if (self._webAudio) {
          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);
        }

        clearInterval(sound._interval);
        sound._interval = null;
        self.volume(sound._fadeTo, id);
        sound._fadeTo = null;
        self._emit('fade', id);
      }

      return self;
    },

    /**
     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
     *   loop() -> Returns the group's loop value.
     *   loop(id) -> Returns the sound id's loop value.
     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
     *   loop(loop, id) -> Sets the loop value of passed sound id.
     * @return {Howl/Boolean} Returns self or current loop value.
     */
    loop: function() {
      var self = this;
      var args = arguments;
      var loop, id, sound;

      // Determine the values for loop and id.
      if (args.length === 0) {
        // Return the grou's loop value.
        return self._loop;
      } else if (args.length === 1) {
        if (typeof args[0] === 'boolean') {
          loop = args[0];
          self._loop = loop;
        } else {
          // Return this sound's loop value.
          sound = self._soundById(parseInt(args[0], 10));
          return sound ? sound._loop : false;
        }
      } else if (args.length === 2) {
        loop = args[0];
        id = parseInt(args[1], 10);
      }

      // If no id is passed, get all ID's to be looped.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        sound = self._soundById(ids[i]);

        if (sound) {
          sound._loop = loop;
          if (self._webAudio && sound._node && sound._node.bufferSource) {
            sound._node.bufferSource.loop = loop;
            if (loop) {
              sound._node.bufferSource.loopStart = sound._start || 0;
              sound._node.bufferSource.loopEnd = sound._stop;
            }
          }
        }
      }

      return self;
    },

    /**
     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   rate() -> Returns the first sound node's current playback rate.
     *   rate(id) -> Returns the sound id's current playback rate.
     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
     *   rate(rate, id) -> Sets the playback rate of passed sound id.
     * @return {Howl/Number} Returns self or the current playback rate.
     */
    rate: function() {
      var self = this;
      var args = arguments;
      var rate, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // We will simply return the current rate of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new rate value.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          rate = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        rate = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // Update the playback rate or return the current value.
      var sound;
      if (typeof rate === 'number') {
        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.
        if (self._state !== 'loaded') {
          self._queue.push({
            event: 'rate',
            action: function() {
              self.rate.apply(self, args);
            }
          });

          return self;
        }

        // Set the group rate.
        if (typeof id === 'undefined') {
          self._rate = rate;
        }

        // Update one or all volumes.
        id = self._getSoundIds(id);
        for (var i=0; i<id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            // Keep track of our position when the rate changed and update the playback
            // start position so we can properly adjust the seek position for time elapsed.
            sound._rateSeek = self.seek(id[i]);
            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;
            sound._rate = rate;

            // Change the playback rate.
            if (self._webAudio && sound._node && sound._node.bufferSource) {
              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);
            } else if (sound._node) {
              sound._node.playbackRate = rate;
            }

            // Reset the timers.
            var seek = self.seek(id[i]);
            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;
            var timeout = (duration * 1000) / Math.abs(sound._rate);

            // Start a new end timer if sound is already playing.
            if (self._endTimers[id[i]] || !sound._paused) {
              self._clearTimer(id[i]);
              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);
            }

            self._emit('rate', sound._id);
          }
        }
      } else {
        sound = self._soundById(id);
        return sound ? sound._rate : self._rate;
      }

      return self;
    },

    /**
     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   seek() -> Returns the first sound node's current seek position.
     *   seek(id) -> Returns the sound id's current seek position.
     *   seek(seek) -> Sets the seek position of the first sound node.
     *   seek(seek, id) -> Sets the seek position of passed sound id.
     * @return {Howl/Number} Returns self or the current seek position.
     */
    seek: function() {
      var self = this;
      var args = arguments;
      var seek, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // We will simply return the current position of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new seek position.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else if (self._sounds.length) {
          id = self._sounds[0]._id;
          seek = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        seek = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // If there is no ID, bail out.
      if (typeof id === 'undefined') {
        return self;
      }

      // If the sound hasn't loaded, add it to the load queue to seek when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'seek',
          action: function() {
            self.seek.apply(self, args);
          }
        });

        return self;
      }

      // Get the sound.
      var sound = self._soundById(id);

      if (sound) {
        if (typeof seek === 'number' && seek >= 0) {
          // Pause the sound and update position for restarting playback.
          var playing = self.playing(id);
          if (playing) {
            self.pause(id, true);
          }

          // Move the position of the track and cancel timer.
          sound._seek = seek;
          sound._ended = false;
          self._clearTimer(id);

          // Restart the playback if the sound was playing.
          if (playing) {
            self.play(id, true);
          }

          // Update the seek position for HTML5 Audio.
          if (!self._webAudio && sound._node) {
            sound._node.currentTime = seek;
          }

          // Wait for the play lock to be unset before emitting (HTML5 Audio).
          if (playing && !self._webAudio) {
            var emitSeek = function() {
              if (!self._playLock) {
                self._emit('seek', id);
              } else {
                setTimeout(emitSeek, 0);
              }
            };
            setTimeout(emitSeek, 0);
          } else {
            self._emit('seek', id);
          }
        } else {
          if (self._webAudio) {
            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;
            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
          } else {
            return sound._node.currentTime;
          }
        }
      }

      return self;
    },

    /**
     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
     * @return {Boolean} True if playing and false if not.
     */
    playing: function(id) {
      var self = this;

      // Check the passed sound ID (if any).
      if (typeof id === 'number') {
        var sound = self._soundById(id);
        return sound ? !sound._paused : false;
      }

      // Otherwise, loop through all sounds and check if any are playing.
      for (var i=0; i<self._sounds.length; i++) {
        if (!self._sounds[i]._paused) {
          return true;
        }
      }

      return false;
    },

    /**
     * Get the duration of this sound. Passing a sound id will return the sprite duration.
     * @param  {Number} id The sound id to check. If none is passed, return full source duration.
     * @return {Number} Audio duration in seconds.
     */
    duration: function(id) {
      var self = this;
      var duration = self._duration;

      // If we pass an ID, get the sound and return the sprite length.
      var sound = self._soundById(id);
      if (sound) {
        duration = self._sprite[sound._sprite][1] / 1000;
      }

      return duration;
    },

    /**
     * Returns the current loaded state of this Howl.
     * @return {String} 'unloaded', 'loading', 'loaded'
     */
    state: function() {
      return this._state;
    },

    /**
     * Unload and destroy the current Howl object.
     * This will immediately stop all sound instances attached to this group.
     */
    unload: function() {
      var self = this;

      // Stop playing any active sounds.
      var sounds = self._sounds;
      for (var i=0; i<sounds.length; i++) {
        // Stop the sound if it is currently playing.
        if (!sounds[i]._paused) {
          self.stop(sounds[i]._id);
        }

        // Remove the source or disconnect.
        if (!self._webAudio) {
          // Set the source to 0-second silence to stop any downloading (except in IE).
          var checkIE = /MSIE |Trident\//.test(Howler._navigator && Howler._navigator.userAgent);
          if (!checkIE) {
            sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';
          }

          // Remove any event listeners.
          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);
          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);
        }

        // Empty out all of the nodes.
        delete sounds[i]._node;

        // Make sure all timers are cleared out.
        self._clearTimer(sounds[i]._id);

        // Remove the references in the global Howler object.
        var index = Howler._howls.indexOf(self);
        if (index >= 0) {
          Howler._howls.splice(index, 1);
        }
      }

      // Delete this sound from the cache (if no other Howl is using it).
      var remCache = true;
      for (i=0; i<Howler._howls.length; i++) {
        if (Howler._howls[i]._src === self._src) {
          remCache = false;
          break;
        }
      }

      if (cache && remCache) {
        delete cache[self._src];
      }

      // Clear global errors.
      Howler.noAudio = false;

      // Clear out `self`.
      self._state = 'unloaded';
      self._sounds = [];
      self = null;

      return null;
    },

    /**
     * Listen to a custom event.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
     * @return {Howl}
     */
    on: function(event, fn, id, once) {
      var self = this;
      var events = self['_on' + event];

      if (typeof fn === 'function') {
        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});
      }

      return self;
    },

    /**
     * Remove a custom event. Call without parameters to remove all events.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to remove. Leave empty to remove all.
     * @param  {Number}   id    (optional) Only remove events for this sound.
     * @return {Howl}
     */
    off: function(event, fn, id) {
      var self = this;
      var events = self['_on' + event];
      var i = 0;

      // Allow passing just an event and ID.
      if (typeof fn === 'number') {
        id = fn;
        fn = null;
      }

      if (fn || id) {
        // Loop through event store and remove the passed function.
        for (i=0; i<events.length; i++) {
          var isId = (id === events[i].id);
          if (fn === events[i].fn && isId || !fn && isId) {
            events.splice(i, 1);
            break;
          }
        }
      } else if (event) {
        // Clear out all events of this type.
        self['_on' + event] = [];
      } else {
        // Clear out all events of every type.
        var keys = Object.keys(self);
        for (i=0; i<keys.length; i++) {
          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {
            self[keys[i]] = [];
          }
        }
      }

      return self;
    },

    /**
     * Listen to a custom event and remove it once fired.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @return {Howl}
     */
    once: function(event, fn, id) {
      var self = this;

      // Setup the event listener.
      self.on(event, fn, id, 1);

      return self;
    },

    /**
     * Emit all events of a specific type and pass the sound id.
     * @param  {String} event Event name.
     * @param  {Number} id    Sound ID.
     * @param  {Number} msg   Message to go with event.
     * @return {Howl}
     */
    _emit: function(event, id, msg) {
      var self = this;
      var events = self['_on' + event];

      // Loop through event store and fire all functions.
      for (var i=events.length-1; i>=0; i--) {
        // Only fire the listener if the correct ID is used.
        if (!events[i].id || events[i].id === id || event === 'load') {
          setTimeout(function(fn) {
            fn.call(this, id, msg);
          }.bind(self, events[i].fn), 0);

          // If this event was setup with `once`, remove it.
          if (events[i].once) {
            self.off(event, events[i].fn, events[i].id);
          }
        }
      }

      // Pass the event type into load queue so that it can continue stepping.
      self._loadQueue(event);

      return self;
    },

    /**
     * Queue of actions initiated before the sound has loaded.
     * These will be called in sequence, with the next only firing
     * after the previous has finished executing (even if async like play).
     * @return {Howl}
     */
    _loadQueue: function(event) {
      var self = this;

      if (self._queue.length > 0) {
        var task = self._queue[0];

        // Remove this task if a matching event was passed.
        if (task.event === event) {
          self._queue.shift();
          self._loadQueue();
        }

        // Run the task if no event type is passed.
        if (!event) {
          task.action();
        }
      }

      return self;
    },

    /**
     * Fired when playback ends at the end of the duration.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _ended: function(sound) {
      var self = this;
      var sprite = sound._sprite;

      // If we are using IE and there was network latency we may be clipping
      // audio before it completes playing. Lets check the node to make sure it
      // believes it has completed, before ending the playback.
      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
        setTimeout(self._ended.bind(self, sound), 100);
        return self;
      }

      // Should this sound loop?
      var loop = !!(sound._loop || self._sprite[sprite][2]);

      // Fire the ended event.
      self._emit('end', sound._id);

      // Restart the playback for HTML5 Audio loop.
      if (!self._webAudio && loop) {
        self.stop(sound._id, true).play(sound._id);
      }

      // Restart this timer if on a Web Audio loop.
      if (self._webAudio && loop) {
        self._emit('play', sound._id);
        sound._seek = sound._start || 0;
        sound._rateSeek = 0;
        sound._playStart = Howler.ctx.currentTime;

        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);
        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
      }

      // Mark the node as paused.
      if (self._webAudio && !loop) {
        sound._paused = true;
        sound._ended = true;
        sound._seek = sound._start || 0;
        sound._rateSeek = 0;
        self._clearTimer(sound._id);

        // Clean up the buffer source.
        self._cleanBuffer(sound._node);

        // Attempt to auto-suspend AudioContext if no sounds are still playing.
        Howler._autoSuspend();
      }

      // When using a sprite, end the track.
      if (!self._webAudio && !loop) {
        self.stop(sound._id);
      }

      return self;
    },

    /**
     * Clear the end timer for a sound playback.
     * @param  {Number} id The sound ID.
     * @return {Howl}
     */
    _clearTimer: function(id) {
      var self = this;

      if (self._endTimers[id]) {
        // Clear the timeout or remove the ended listener.
        if (typeof self._endTimers[id] !== 'function') {
          clearTimeout(self._endTimers[id]);
        } else {
          var sound = self._soundById(id);
          if (sound && sound._node) {
            sound._node.removeEventListener('ended', self._endTimers[id], false);
          }
        }

        delete self._endTimers[id];
      }

      return self;
    },

    /**
     * Return the sound identified by this ID, or return null.
     * @param  {Number} id Sound ID
     * @return {Object}    Sound object or null.
     */
    _soundById: function(id) {
      var self = this;

      // Loop through all sounds and find the one with this ID.
      for (var i=0; i<self._sounds.length; i++) {
        if (id === self._sounds[i]._id) {
          return self._sounds[i];
        }
      }

      return null;
    },

    /**
     * Return an inactive sound from the pool or create a new one.
     * @return {Sound} Sound playback object.
     */
    _inactiveSound: function() {
      var self = this;

      self._drain();

      // Find the first inactive node to recycle.
      for (var i=0; i<self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          return self._sounds[i].reset();
        }
      }

      // If no inactive node was found, create a new one.
      return new Sound(self);
    },

    /**
     * Drain excess inactive sounds from the pool.
     */
    _drain: function() {
      var self = this;
      var limit = self._pool;
      var cnt = 0;
      var i = 0;

      // If there are less sounds than the max pool size, we are done.
      if (self._sounds.length < limit) {
        return;
      }

      // Count the number of inactive sounds.
      for (i=0; i<self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          cnt++;
        }
      }

      // Remove excess inactive sounds, going in reverse order.
      for (i=self._sounds.length - 1; i>=0; i--) {
        if (cnt <= limit) {
          return;
        }

        if (self._sounds[i]._ended) {
          // Disconnect the audio source when using Web Audio.
          if (self._webAudio && self._sounds[i]._node) {
            self._sounds[i]._node.disconnect(0);
          }

          // Remove sounds until we have the pool size.
          self._sounds.splice(i, 1);
          cnt--;
        }
      }
    },

    /**
     * Get all ID's from the sounds pool.
     * @param  {Number} id Only return one ID if one is passed.
     * @return {Array}    Array of IDs.
     */
    _getSoundIds: function(id) {
      var self = this;

      if (typeof id === 'undefined') {
        var ids = [];
        for (var i=0; i<self._sounds.length; i++) {
          ids.push(self._sounds[i]._id);
        }

        return ids;
      } else {
        return [id];
      }
    },

    /**
     * Load the sound back into the buffer source.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _refreshBuffer: function(sound) {
      var self = this;

      // Setup the buffer source for playback.
      sound._node.bufferSource = Howler.ctx.createBufferSource();
      sound._node.bufferSource.buffer = cache[self._src];

      // Connect to the correct node.
      if (sound._panner) {
        sound._node.bufferSource.connect(sound._panner);
      } else {
        sound._node.bufferSource.connect(sound._node);
      }

      // Setup looping and playback rate.
      sound._node.bufferSource.loop = sound._loop;
      if (sound._loop) {
        sound._node.bufferSource.loopStart = sound._start || 0;
        sound._node.bufferSource.loopEnd = sound._stop;
      }
      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);

      return self;
    },

    /**
     * Prevent memory leaks by cleaning up the buffer source after playback.
     * @param  {Object} node Sound's audio node containing the buffer source.
     * @return {Howl}
     */
    _cleanBuffer: function(node) {
      var self = this;

      if (Howler._scratchBuffer) {
        node.bufferSource.onended = null;
        node.bufferSource.disconnect(0);
        try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}
      }
      node.bufferSource = null;

      return self;
    }
  };

  /** Single Sound Methods **/
  /***************************************************************************/

  /**
   * Setup the sound object, which each node attached to a Howl group is contained in.
   * @param {Object} howl The Howl parent group.
   */
  var Sound = function(howl) {
    this._parent = howl;
    this.init();
  };
  Sound.prototype = {
    /**
     * Initialize a new Sound object.
     * @return {Sound}
     */
    init: function() {
      var self = this;
      var parent = self._parent;

      // Setup the default parameters.
      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._rate = parent._rate;
      self._seek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = '__default';

      // Generate a unique ID for this sound.
      self._id = ++Howler._counter;

      // Add itself to the parent's pool.
      parent._sounds.push(self);

      // Create the new node.
      self.create();

      return self;
    },

    /**
     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
     * @return {Sound}
     */
    create: function() {
      var self = this;
      var parent = self._parent;
      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;

      if (parent._webAudio) {
        // Create the gain node for controlling volume (the source will connect to this).
        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);
        self._node.paused = true;
        self._node.connect(Howler.masterGain);
      } else {
        self._node = new Audio();

        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
        self._errorFn = self._errorListener.bind(self);
        self._node.addEventListener('error', self._errorFn, false);

        // Listen for 'canplaythrough' event to let us know the sound is ready.
        self._loadFn = self._loadListener.bind(self);
        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);

        // Setup the new audio node.
        self._node.src = parent._src;
        self._node.preload = 'auto';
        self._node.volume = volume * Howler.volume();

        // Begin loading the source.
        self._node.load();
      }

      return self;
    },

    /**
     * Reset the parameters of this sound to the original state (for recycle).
     * @return {Sound}
     */
    reset: function() {
      var self = this;
      var parent = self._parent;

      // Reset all of the parameters of this sound.
      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._rate = parent._rate;
      self._seek = 0;
      self._rateSeek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = '__default';

      // Generate a new ID so that it isn't confused with the previous sound.
      self._id = ++Howler._counter;

      return self;
    },

    /**
     * HTML5 Audio error listener callback.
     */
    _errorListener: function() {
      var self = this;

      // Fire an error event and pass back the code.
      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);

      // Clear the event listener.
      self._node.removeEventListener('error', self._errorFn, false);
    },

    /**
     * HTML5 Audio canplaythrough listener callback.
     */
    _loadListener: function() {
      var self = this;
      var parent = self._parent;

      // Round up the duration to account for the lower precision in HTML5 Audio.
      parent._duration = Math.ceil(self._node.duration * 10) / 10;

      // Setup a sprite if none is defined.
      if (Object.keys(parent._sprite).length === 0) {
        parent._sprite = {__default: [0, parent._duration * 1000]};
      }

      if (parent._state !== 'loaded') {
        parent._state = 'loaded';
        parent._emit('load');
        parent._loadQueue();
      }

      // Clear the event listener.
      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);
    }
  };

  /** Helper Methods **/
  /***************************************************************************/

  var cache = {};

  /**
   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
   * @param  {Howl} self
   */
  var loadBuffer = function(self) {
    var url = self._src;

    // Check if the buffer has already been cached and use it instead.
    if (cache[url]) {
      // Set the duration from the cache.
      self._duration = cache[url].duration;

      // Load the sound into this Howl.
      loadSound(self);

      return;
    }

    if (/^data:[^;]+;base64,/.test(url)) {
      // Decode the base64 data URI without XHR, since some browsers don't support it.
      var data = atob(url.split(',')[1]);
      var dataView = new Uint8Array(data.length);
      for (var i=0; i<data.length; ++i) {
        dataView[i] = data.charCodeAt(i);
      }

      decodeAudioData(dataView.buffer, self);
    } else {
      // Load the buffer from the URL.
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.withCredentials = self._xhrWithCredentials;
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        // Make sure we get a successful response back.
        var code = (xhr.status + '')[0];
        if (code !== '0' && code !== '2' && code !== '3') {
          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');
          return;
        }

        decodeAudioData(xhr.response, self);
      };
      xhr.onerror = function() {
        // If there is an error, switch to HTML5 Audio.
        if (self._webAudio) {
          self._html5 = true;
          self._webAudio = false;
          self._sounds = [];
          delete cache[url];
          self.load();
        }
      };
      safeXhrSend(xhr);
    }
  };

  /**
   * Send the XHR request wrapped in a try/catch.
   * @param  {Object} xhr XHR to send.
   */
  var safeXhrSend = function(xhr) {
    try {
      xhr.send();
    } catch (e) {
      xhr.onerror();
    }
  };

  /**
   * Decode audio data from an array buffer.
   * @param  {ArrayBuffer} arraybuffer The audio data.
   * @param  {Howl}        self
   */
  var decodeAudioData = function(arraybuffer, self) {
    // Decode the buffer into an audio source.
    Howler.ctx.decodeAudioData(arraybuffer, function(buffer) {
      if (buffer && self._sounds.length > 0) {
        cache[self._src] = buffer;
        loadSound(self, buffer);
      }
    }, function() {
      self._emit('loaderror', null, 'Decoding audio data failed.');
    });
  };

  /**
   * Sound is now loaded, so finish setting everything up and fire the loaded event.
   * @param  {Howl} self
   * @param  {Object} buffer The decoded buffer sound source.
   */
  var loadSound = function(self, buffer) {
    // Set the duration.
    if (buffer && !self._duration) {
      self._duration = buffer.duration;
    }

    // Setup a sprite if none is defined.
    if (Object.keys(self._sprite).length === 0) {
      self._sprite = {__default: [0, self._duration * 1000]};
    }

    // Fire the loaded event.
    if (self._state !== 'loaded') {
      self._state = 'loaded';
      self._emit('load');
      self._loadQueue();
    }
  };

  /**
   * Setup the audio context when available, or switch to HTML5 Audio mode.
   */
  var setupAudioContext = function() {
    // Check if we are using Web Audio and setup the AudioContext if we are.
    try {
      if (typeof AudioContext !== 'undefined') {
        Howler.ctx = new AudioContext();
      } else if (typeof webkitAudioContext !== 'undefined') {
        Howler.ctx = new webkitAudioContext();
      } else {
        Howler.usingWebAudio = false;
      }
    } catch(e) {
      Howler.usingWebAudio = false;
    }

    // Check if a webview is being used on iOS8 or earlier (rather than the browser).
    // If it is, disable Web Audio as it causes crashing.
    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));
    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
    var version = appVersion ? parseInt(appVersion[1], 10) : null;
    if (iOS && version && version < 9) {
      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());
      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {
        Howler.usingWebAudio = false;
      }
    }

    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).
    if (Howler.usingWebAudio) {
      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);
      Howler.masterGain.connect(Howler.ctx.destination);
    }

    // Re-run the setup on Howler.
    Howler._setup();
  };

  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
  if (typeof define === 'function' && define.amd) {
    define([], function() {
      return {
        Howler: Howler,
        Howl: Howl
      };
    });
  }

  // Add support for CommonJS libraries such as browserify.
  if (typeof exports !== 'undefined') {
    exports.Howler = Howler;
    exports.Howl = Howl;
  }

  // Define globally in case AMD is not available or unused.
  if (typeof window !== 'undefined') {
    window.HowlerGlobal = HowlerGlobal;
    window.Howler = Howler;
    window.Howl = Howl;
    window.Sound = Sound;
  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).
    global.HowlerGlobal = HowlerGlobal;
    global.Howler = Howler;
    global.Howl = Howl;
    global.Sound = Sound;
  }
})();


/*!
 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
 *  
 *  howler.js v2.0.9
 *  howlerjs.com
 *
 *  (c) 2013-2018, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {

  'use strict';

  // Setup default properties.
  HowlerGlobal.prototype._pos = [0, 0, 0];
  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
  
  /** Global Methods **/
  /***************************************************************************/

  /**
   * Helper method to update the stereo panning position of all current Howls.
   * Future Howls will not use this value unless explicitly set.
   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.
   * @return {Howler/Number}     Self or current stereo panning value.
   */
  HowlerGlobal.prototype.stereo = function(pan) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Loop through all Howls and update their stereo panning.
    for (var i=self._howls.length-1; i>=0; i--) {
      self._howls[i].stereo(pan);
    }

    return self;
  };

  /**
   * Get/set the position of the listener in 3D cartesian space. Sounds using
   * 3D position will be relative to the listener's position.
   * @param  {Number} x The x-position of the listener.
   * @param  {Number} y The y-position of the listener.
   * @param  {Number} z The z-position of the listener.
   * @return {Howler/Array}   Self or current listener position.
   */
  HowlerGlobal.prototype.pos = function(x, y, z) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? self._pos[1] : y;
    z = (typeof z !== 'number') ? self._pos[2] : z;

    if (typeof x === 'number') {
      self._pos = [x, y, z];
      self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);
    } else {
      return self._pos;
    }

    return self;
  };

  /**
   * Get/set the direction the listener is pointing in the 3D cartesian space.
   * A front and up vector must be provided. The front is the direction the
   * face of the listener is pointing, and up is the direction the top of the
   * listener is pointing. Thus, these values are expected to be at right angles
   * from each other.
   * @param  {Number} x   The x-orientation of the listener.
   * @param  {Number} y   The y-orientation of the listener.
   * @param  {Number} z   The z-orientation of the listener.
   * @param  {Number} xUp The x-orientation of the top of the listener.
   * @param  {Number} yUp The y-orientation of the top of the listener.
   * @param  {Number} zUp The z-orientation of the top of the listener.
   * @return {Howler/Array}     Returns self or the current orientation vectors.
   */
  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    var or = self._orientation;
    y = (typeof y !== 'number') ? or[1] : y;
    z = (typeof z !== 'number') ? or[2] : z;
    xUp = (typeof xUp !== 'number') ? or[3] : xUp;
    yUp = (typeof yUp !== 'number') ? or[4] : yUp;
    zUp = (typeof zUp !== 'number') ? or[5] : zUp;

    if (typeof x === 'number') {
      self._orientation = [x, y, z, xUp, yUp, zUp];
      self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
    } else {
      return or;
    }

    return self;
  };

  /** Group Methods **/
  /***************************************************************************/

  /**
   * Add new properties to the core init.
   * @param  {Function} _super Core init method.
   * @return {Howl}
   */
  Howl.prototype.init = (function(_super) {
    return function(o) {
      var self = this;

      // Setup user-defined default properties.
      self._orientation = o.orientation || [1, 0, 0];
      self._stereo = o.stereo || null;
      self._pos = o.pos || null;
      self._pannerAttr = {
        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,
        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,
        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,
        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',
        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,
        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',
        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,
        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1
      };

      // Setup event listeners.
      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];
      self._onpos = o.onpos ? [{fn: o.onpos}] : [];
      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];

      // Complete initilization with howler.js core's init function.
      return _super.call(this, o);
    };
  })(Howl.prototype.init);

  /**
   * Get/set the stereo panning of the audio source for this sound or all in the group.
   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Number}    Returns self or the current stereo panning value.
   */
  Howl.prototype.stereo = function(pan, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'stereo',
        action: function() {
          self.stereo(pan, id);
        }
      });

      return self;
    }

    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.
    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';

    // Setup the group's stereo panning if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's stereo panning if no parameters are passed.
      if (typeof pan === 'number') {
        self._stereo = pan;
        self._pos = [pan, 0, 0];
      } else {
        return self._stereo;
      }
    }

    // Change the streo panning of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof pan === 'number') {
          sound._stereo = pan;
          sound._pos = [pan, 0, 0];

          if (sound._node) {
            // If we are falling back, make sure the panningModel is equalpower.
            sound._pannerAttr.panningModel = 'equalpower';

            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner || !sound._panner.pan) {
              setupPanner(sound, pannerType);
            }

            if (pannerType === 'spatial') {
              sound._panner.setPosition(pan, 0, 0);
            } else {
              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
            }
          }

          self._emit('stereo', sound._id);
        } else {
          return sound._stereo;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.
   * @param  {Number} x  The x-position of the audio source.
   * @param  {Number} y  The y-position of the audio source.
   * @param  {Number} z  The z-position of the audio source.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].
   */
  Howl.prototype.pos = function(x, y, z, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change position when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'pos',
        action: function() {
          self.pos(x, y, z, id);
        }
      });

      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? 0 : y;
    z = (typeof z !== 'number') ? -0.5 : z;

    // Setup the group's spatial position if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's spatial position if no parameters are passed.
      if (typeof x === 'number') {
        self._pos = [x, y, z];
      } else {
        return self._pos;
      }
    }

    // Change the spatial position of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof x === 'number') {
          sound._pos = [x, y, z];

          if (sound._node) {
            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner || sound._panner.pan) {
              setupPanner(sound, 'spatial');
            }

            sound._panner.setPosition(x, y, z);
          }

          self._emit('pos', sound._id);
        } else {
          return sound._pos;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate
   * space. Depending on how direction the sound is, based on the `cone` attributes,
   * a sound pointing away from the listener can be quiet or silent.
   * @param  {Number} x  The x-orientation of the source.
   * @param  {Number} y  The y-orientation of the source.
   * @param  {Number} z  The z-orientation of the source.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].
   */
  Howl.prototype.orientation = function(x, y, z, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'orientation',
        action: function() {
          self.orientation(x, y, z, id);
        }
      });

      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? self._orientation[1] : y;
    z = (typeof z !== 'number') ? self._orientation[2] : z;

    // Setup the group's spatial orientation if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's spatial orientation if no parameters are passed.
      if (typeof x === 'number') {
        self._orientation = [x, y, z];
      } else {
        return self._orientation;
      }
    }

    // Change the spatial orientation of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof x === 'number') {
          sound._orientation = [x, y, z];

          if (sound._node) {
            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner) {
              // Make sure we have a position to setup the node with.
              if (!sound._pos) {
                sound._pos = self._pos || [0, 0, -0.5];
              }

              setupPanner(sound, 'spatial');
            }

            sound._panner.setOrientation(x, y, z);
          }

          self._emit('orientation', sound._id);
        } else {
          return sound._orientation;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the panner node's attributes for a sound or group of sounds.
   * This method can optionall take 0, 1 or 2 arguments.
   *   pannerAttr() -> Returns the group's values.
   *   pannerAttr(id) -> Returns the sound id's values.
   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.
   *   pannerAttr(o, id) -> Set's the values of passed sound id.
   *
   *   Attributes:
   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
   *                      inside of which there will be no volume reduction.
   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.
   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the
   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.
   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from
   *                     listener. Can be `linear`, `inverse` or `exponential.
   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume
   *                   will not be reduced any further.
   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.
   *                   This is simply a variable of the distance model and has a different effect depending on which model
   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.
   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a
   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`
   *                     with `inverse` and `exponential`.
   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.
   *                     Can be `HRTF` or `equalpower`.
   * 
   * @return {Howl/Object} Returns self or current panner attributes.
   */
  Howl.prototype.pannerAttr = function() {
    var self = this;
    var args = arguments;
    var o, id, sound;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // Determine the values based on arguments.
    if (args.length === 0) {
      // Return the group's panner attribute values.
      return self._pannerAttr;
    } else if (args.length === 1) {
      if (typeof args[0] === 'object') {
        o = args[0];

        // Set the grou's panner attribute values.
        if (typeof id === 'undefined') {
          if (!o.pannerAttr) {
            o.pannerAttr = {
              coneInnerAngle: o.coneInnerAngle,
              coneOuterAngle: o.coneOuterAngle,
              coneOuterGain: o.coneOuterGain,
              distanceModel: o.distanceModel,
              maxDistance: o.maxDistance,
              refDistance: o.refDistance,
              rolloffFactor: o.rolloffFactor,
              panningModel: o.panningModel
            };
          }

          self._pannerAttr = {
            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,
            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,
            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,
            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,
            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,
            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,
            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,
            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel
          };
        }
      } else {
        // Return this sound's panner attribute values.
        sound = self._soundById(parseInt(args[0], 10));
        return sound ? sound._pannerAttr : self._pannerAttr;
      }
    } else if (args.length === 2) {
      o = args[0];
      id = parseInt(args[1], 10);
    }

    // Update the values of the specified sounds.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      sound = self._soundById(ids[i]);

      if (sound) {
        // Merge the new values into the sound.
        var pa = sound._pannerAttr;
        pa = {
          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,
          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,
          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,
          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,
          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,
          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,
          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,
          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel
        };

        // Update the panner values or create a new panner if none exists.
        var panner = sound._panner;
        if (panner) {
          panner.coneInnerAngle = pa.coneInnerAngle;
          panner.coneOuterAngle = pa.coneOuterAngle;
          panner.coneOuterGain = pa.coneOuterGain;
          panner.distanceModel = pa.distanceModel;
          panner.maxDistance = pa.maxDistance;
          panner.refDistance = pa.refDistance;
          panner.rolloffFactor = pa.rolloffFactor;
          panner.panningModel = pa.panningModel;
        } else {
          // Make sure we have a position to setup the node with.
          if (!sound._pos) {
            sound._pos = self._pos || [0, 0, -0.5];
          }

          // Create a new panner node.
          setupPanner(sound, 'spatial');
        }
      }
    }

    return self;
  };

  /** Single Sound Methods **/
  /***************************************************************************/

  /**
   * Add new properties to the core Sound init.
   * @param  {Function} _super Core Sound init method.
   * @return {Sound}
   */
  Sound.prototype.init = (function(_super) {
    return function() {
      var self = this;
      var parent = self._parent;

      // Setup user-defined default properties.
      self._orientation = parent._orientation;
      self._stereo = parent._stereo;
      self._pos = parent._pos;
      self._pannerAttr = parent._pannerAttr;

      // Complete initilization with howler.js core Sound's init function.
      _super.call(this);

      // If a stereo or position was specified, set it up.
      if (self._stereo) {
        parent.stereo(self._stereo);
      } else if (self._pos) {
        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
      }
    };
  })(Sound.prototype.init);

  /**
   * Override the Sound.reset method to clean up properties from the spatial plugin.
   * @param  {Function} _super Sound reset method.
   * @return {Sound}
   */
  Sound.prototype.reset = (function(_super) {
    return function() {
      var self = this;
      var parent = self._parent;

      // Reset all spatial plugin properties on this sound.
      self._orientation = parent._orientation;
      self._pos = parent._pos;
      self._pannerAttr = parent._pannerAttr;

      // Complete resetting of the sound.
      return _super.call(this);
    };
  })(Sound.prototype.reset);

  /** Helper Methods **/
  /***************************************************************************/

  /**
   * Create a new panner node and save it on the sound.
   * @param  {Sound} sound Specific sound to setup panning on.
   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.
   */
  var setupPanner = function(sound, type) {
    type = type || 'spatial';

    // Create the new panner node.
    if (type === 'spatial') {
      sound._panner = Howler.ctx.createPanner();
      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
      sound._panner.distanceModel = sound._pannerAttr.distanceModel;
      sound._panner.maxDistance = sound._pannerAttr.maxDistance;
      sound._panner.refDistance = sound._pannerAttr.refDistance;
      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
      sound._panner.panningModel = sound._pannerAttr.panningModel;
      sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
      sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
    } else {
      sound._panner = Howler.ctx.createStereoPanner();
      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
    }

    sound._panner.connect(sound._node);

    // Update the connections.
    if (!sound._paused) {
      sound._parent.pause(sound._id, true).play(sound._id, true);
    }
  };
})();

},{}],19:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var VERSION_ID = 4;

exports.default = VERSION_ID;
},{}],8:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ACTIVE_PROGRESSION_DEFINITION = exports.ACTIVE_PROGRESSION = exports.PROGRESSIONS = undefined;
exports.currentLevel = currentLevel;
exports.jumpToLevel = jumpToLevel;
exports.nextLevel = nextLevel;
exports.nextChallengeLevel = nextChallengeLevel;
exports.prevLevel = prevLevel;
exports.currentChapter = currentChapter;
exports.chapterIdx = chapterIdx;
exports.isChapterStart = isChapterStart;
exports.isChapterEnd = isChapterEnd;
exports.isGameEnd = isGameEnd;
exports.hasChallengeChapter = hasChallengeChapter;
exports.learnSyntax = learnSyntax;
exports.getLearnedSyntaxes = getLearnedSyntaxes;
exports.getSyntaxDefinition = getSyntaxDefinition;
exports.getFadeLevel = getFadeLevel;
exports.forceFadeLevel = forceFadeLevel;
exports.isFadeBorder = isFadeBorder;
exports.overrideFadeLevel = overrideFadeLevel;
exports.save = save;
exports.restore = restore;

var _version = require("../version");

var _version2 = _interopRequireDefault(_version);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PROGRESSIONS = exports.PROGRESSIONS = {
    "Elementary": {
        dir: "levels-progression/",
        digraph: {
            "functions": ["replication"],
            "replication": ["multiargument"],
            "multiargument": ["functions-challenge"],
            "functions-challenge": ["arithmetic"],
            "arithmetic": ["application"],
            "application": ["definition"],
            "definition": ["testing"],
            "testing": ["higher-order-functions"],
            "higher-order-functions": ["define-challenges"],
            "define-challenges": ["booleans-intro"],
            "booleans-intro": ["booleans-definition"],
            "booleans-definition": ["weekdays"],
            "weekdays": ["recursion-basics"],
            "recursion-basics": ["recursion-higher-order"],
            "recursion-higher-order": []
        },
        settings: { // This sets global flags.
            "__ALLOW_PARTIAL_REPLICATION": false,
            "__ALLOW_SKIPPING": true,
            "__ALLOW_ARRAY_EVENTS": false
        }
    }
};

var ACTIVE_PROGRESSION = exports.ACTIVE_PROGRESSION = "Elementary";

var ACTIVE_PROGRESSION_DEFINITION = exports.ACTIVE_PROGRESSION_DEFINITION = PROGRESSIONS[ACTIVE_PROGRESSION];

var currentLevelIdx = 0;

var learnedSyntaxes = [];

function currentLevel() {
    return currentLevelIdx;
}

function jumpToLevel(idx) {
    currentLevelIdx = idx;
    save();
}

function nextLevel() {
    if (isChapterEnd()) {
        var challenge = hasChallengeChapter();
        if (challenge) {
            currentLevelIdx = challenge.endIdx + 1;
            save();
            return;
        }
    }
    currentLevelIdx = Math.min(currentLevelIdx + 1, ACTIVE_PROGRESSION_DEFINITION.progression.levels.length - 1);
    save();
}

function nextChallengeLevel() {
    currentLevelIdx = Math.min(currentLevelIdx + 1, ACTIVE_PROGRESSION_DEFINITION.progression.levels.length - 1);
    save();
}

function prevLevel() {
    currentLevelIdx = Math.max(0, currentLevelIdx - 1);
    var chapter = currentChapter();
    if (chapter.challenge) {
        currentLevelIdx = chapter.startIdx - 1;
    }
    save();
}

function currentChapter() {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = Object.values(ACTIVE_PROGRESSION_DEFINITION.progression.chapters)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var chapter = _step.value;

            if (currentLevelIdx >= chapter.startIdx && currentLevelIdx <= chapter.endIdx) {
                return chapter;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return null;
}

function chapterIdx() {
    var idx = 0;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = Object.values(ACTIVE_PROGRESSION_DEFINITION.progression.linearChapters)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var chapterName = _step2.value;

            var chapter = ACTIVE_PROGRESSION_DEFINITION.progression.chapters[chapterName];
            if (currentLevelIdx >= chapter.startIdx && currentLevelIdx <= chapter.endIdx) {
                break;
            }
            idx += 1;
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    return idx;
}

function isChapterStart() {
    return currentLevelIdx === currentChapter().startIdx;
}

function isChapterEnd() {
    return currentLevelIdx === currentChapter().endIdx;
}

function isGameEnd() {
    return currentLevelIdx === ACTIVE_PROGRESSION_DEFINITION.progression.levels.length - 1;
}

function hasChallengeChapter() {
    var chapters = ACTIVE_PROGRESSION_DEFINITION.progression.linearChapters;
    for (var i = 0; i < chapters.length; i++) {
        var chapterName = chapters[i];
        var chapter = ACTIVE_PROGRESSION_DEFINITION.progression.chapters[chapterName];
        if (currentLevelIdx >= chapter.startIdx && currentLevelIdx <= chapter.endIdx) {
            var nextChapter = ACTIVE_PROGRESSION_DEFINITION.progression.chapters[chapters[i + 1]];
            if (nextChapter && nextChapter.challenge) {
                return nextChapter;
            }
        }
    }
    return false;
}

function learnSyntax(name) {
    if (learnedSyntaxes.indexOf(name) === -1) {
        learnedSyntaxes.push(name);
    }
    save();
}

function getLearnedSyntaxes() {
    // Filter out undefined syntaxes
    learnedSyntaxes = learnedSyntaxes.filter(function (name) {
        return getSyntaxDefinition(name);
    });
    save();
    return learnedSyntaxes;
}

function getSyntaxDefinition(name) {
    return ACTIVE_PROGRESSION_DEFINITION.progression.syntax[name];
}

var __fadeOverrides = {};
function getFadeLevel(exprType) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    level = level === null ? currentLevel() : level;
    var fadeLevels = ACTIVE_PROGRESSION_DEFINITION.progression.levels[level].fade;
    if (typeof __fadeOverrides[exprType] === "number") {
        return __fadeOverrides[exprType];
    } else if (typeof fadeLevels[exprType] === "number") {
        return fadeLevels[exprType];
    }
    return 0;
}

function forceFadeLevel(exprType, level) {
    __fadeOverrides[exprType] = level;
}

function isFadeBorder(exprType) {
    return currentLevel() !== 0 && getFadeLevel(exprType, currentLevel()) !== getFadeLevel(exprType, currentLevel() - 1);
}

function overrideFadeLevel(cb) {
    currentLevelIdx -= 1;
    try {
        cb();
    } finally {
        currentLevelIdx += 1;
    }
}

function save() {
    window.localStorage["currentLevelIdx"] = currentLevelIdx;
    window.localStorage["learnedSyntaxes"] = JSON.stringify(learnedSyntaxes);
    window.localStorage["version"] = _version2.default;
}

function restore() {
    if (parseInt(window.localStorage["version"], 10) !== _version2.default) {
        save();
        return;
    }

    if (window.localStorage["currentLevelIdx"]) {
        currentLevelIdx = window.parseInt(window.localStorage["currentLevelIdx"], 10);
    }

    if (window.localStorage["learnedSyntaxes"]) {
        learnedSyntaxes = JSON.parse(window.localStorage["learnedSyntaxes"]);
    }

    // Guard against negatives, NaN
    if (currentLevelIdx < 0 || !(currentLevelIdx >= 0)) currentLevelIdx = 0;
    if (currentLevelIdx > ACTIVE_PROGRESSION_DEFINITION.progression.levels.length - 1) {
        currentLevelIdx = ACTIVE_PROGRESSION_DEFINITION.progression.levels.length - 1;
    }
    save();
}
},{"../version":19}],18:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.getJSON = getJSON;
exports.postJSON = postJSON;
exports.jsonp = jsonp;
function getJSON(path) {
    return new Promise(function (resolve, reject) {
        var xhr = new window.XMLHttpRequest();
        xhr.onload = function () {
            resolve(JSON.parse(xhr.response));
        };

        xhr.open("GET", path);
        xhr.responseType = "text";
        xhr.send();
    });
}

function postJSON(path, data) {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", path, true);
    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.send(JSON.stringify(data, null, 2));
}

var PREFIXES = ["jpa", "jpb", "jpc", "jpd"];
var prefixCounter = 0;

function jsonp(path, params) {
    params = params || {};
    return new Promise(function (resolve, reject) {
        // Guard against multiple requests made at same millisecond
        var callback = "" + PREFIXES[prefixCounter] + Date.now();
        prefixCounter = (prefixCounter + 1) % PREFIXES.length;
        var completed = false;
        window[callback] = function (data) {
            completed = true;
            delete window[callback];
            scr.remove();
            resolve(data);
        };

        // Encode params in query string
        var parts = [];
        params.callback = callback;
        // Cachebuster
        params._ = Date.now();
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = Object.entries(params)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _ref = _step.value;

                var _ref2 = _slicedToArray(_ref, 2);

                var key = _ref2[0];
                var val = _ref2[1];

                parts.push(key + "=" + window.encodeURIComponent(val));
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        var query = "?" + parts.join("&");

        var scr = document.createElement("script");
        scr.setAttribute("src", path + query);

        // Set timeout first in case appendChild causes a net::ERR_ABORTED
        window.setTimeout(function () {
            if (completed) return;

            delete window[callback];
            scr.remove();
            reject();
        }, 1000);

        document.body.appendChild(scr);
    });
}
},{}],3:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LoaderClass = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fontfaceobserver = require("fontfaceobserver");

var _fontfaceobserver2 = _interopRequireDefault(_fontfaceobserver);

var _howler = require("howler");

var _core = require("./gfx/core");

var gfx = _interopRequireWildcard(_core);

var _progression = require("./game/progression");

var globalProgressions = _interopRequireWildcard(_progression);

var _ajax = require("./util/ajax");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BASE_PATH = "resources/";

function getImage(path) {
    return new Promise(function (resolve) {
        var image = document.createElement("img");
        image.onload = function () {
            resolve(image);
        };
        image.setAttribute("src", path);
    });
}

var LoaderClass = exports.LoaderClass = function () {
    function LoaderClass(root) {
        var _this = this;

        _classCallCheck(this, LoaderClass);

        this.rootPath = root;
        this.graphicsPath = root + "/graphics/";
        this.pending = this.loaded = 0;

        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
        });

        this.images = {};
        this.progressions = {};
        this.sounds = {};
        this.audioSprites = {};
    }

    _createClass(LoaderClass, [{
        key: "startLoad",
        value: function startLoad() {
            this.pending++;
        }
    }, {
        key: "finishLoad",
        value: function finishLoad() {
            this.loaded++;
            if (this.loaded === this.pending) {
                this._resolve();
            }
        }
    }, {
        key: "loadImageAtlas",
        value: function loadImageAtlas(alias, jsonSrc, imageSrc) {
            var _this2 = this;

            this.startLoad();

            Promise.all([(0, _ajax.getJSON)(jsonSrc), getImage(imageSrc)]).then(function (_ref) {
                var _ref2 = _slicedToArray(_ref, 2),
                    json = _ref2[0],
                    img = _ref2[1];

                var atlas = new gfx.image.ImageAtlas(alias, json, img);
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = atlas.sprites[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var sprite = _step.value;

                        if (!_this2.images[sprite.name]) {
                            _this2.images[sprite.name] = sprite.image;
                        } else {}
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                _this2.finishLoad();
            });
        }
    }, {
        key: "loadAudioSprite",
        value: function loadAudioSprite(alias, jsonSrc, audioSrcs) {
            var _this3 = this;

            this.startLoad();
            (0, _ajax.getJSON)(jsonSrc).then(function (json) {
                _this3.audioSprites[alias] = new _howler.Howl({
                    src: audioSrcs,
                    sprite: json.sprite,
                    onload: function onload() {
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = Object.keys(json.sprite)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var key = _step2.value;

                                _this3.sounds[key] = _this3.audioSprites[alias];
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }

                        _this3.finishLoad();
                    }
                });
            });
        }
    }, {
        key: "loadSyntax",
        value: function loadSyntax(progression, name, path) {
            var _this4 = this;

            this.startLoad();

            return (0, _ajax.getJSON)(BASE_PATH + "/" + path).then(function (json) {
                _this4.progressions[progression].syntax[name] = json;

                _this4.finishLoad();
            });
        }
    }, {
        key: "loadChapter",
        value: function loadChapter(progression, name, path) {
            var _this5 = this;

            this.startLoad();

            return (0, _ajax.getJSON)(BASE_PATH + "/" + path).then(function (json) {
                // Copy the planet's aliens to the individual level
                // definitions, so that buildLevel has access to
                // them. Provide a default alien when not specified.
                var aliens = json.resources && json.resources.aliens ? json.resources.aliens : ["alien-function-1"];
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = json.levels[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var level = _step3.value;

                        level.resources = level.resources || { aliens: aliens };
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                var d = {
                    key: name,
                    name: json.chapterName,
                    description: json.description,
                    challenge: json.challenge || false,
                    language: json.language,
                    levels: [],
                    dependencies: []
                };
                if (json.resources) d.resources = json.resources;

                json.levels.forEach(function (lvl) {
                    lvl.language = d.language;
                    if (json.macros) lvl.macros = json.macros;
                    if (typeof lvl.goal === "string") lvl.goal = [lvl.goal];
                    if (!lvl.toolbox) lvl.toolbox = [];
                    if (typeof lvl.board === "string") lvl.board = [lvl.board];
                    if (typeof lvl.toolbox === "string") lvl.toolbox = [lvl.toolbox];
                    if (!lvl.defines) lvl.defines = [];else if (typeof lvl.defines === "string") lvl.defines = [lvl.defines];
                    if (!lvl.globals) lvl.globals = {};
                    if (!lvl.syntax) lvl.syntax = [];else if (typeof lvl.syntax === "string") lvl.syntax = [lvl.syntax];

                    if (!lvl.fade) lvl.fade = {};

                    if (!lvl.animationScales) lvl.animationScales = {};

                    if (typeof lvl.showConcreteGoal === "undefined") lvl.showConcreteGoal = true;

                    d.levels.push(lvl);
                });

                _this5.progressions[progression].chapters[name] = d;

                _this5.finishLoad();
            });
        }
    }, {
        key: "loadChapters",
        value: function loadChapters(name, definition) {
            var _this6 = this;

            this.startLoad();
            var progression = this.progressions[name] = {
                chapters: {},
                levels: [],
                linearChapters: [],
                syntax: {}
            };
            var filenames = Object.keys(definition.digraph);

            var extraDefines = [];
            var animationScales = {};
            var fade = {};

            Promise.all(filenames.map(function (filename) {
                return _this6.loadChapter(name, filename, definition.dir + "/" + filename + ".json");
            })).then(function () {
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = filenames[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var chapter = _step4.value;

                        progression.chapters[chapter].transitions = definition.digraph[chapter];
                        var _iteratorNormalCompletion8 = true;
                        var _didIteratorError8 = false;
                        var _iteratorError8 = undefined;

                        try {
                            for (var _iterator8 = definition.digraph[chapter][Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                                var transition = _step8.value;

                                progression.chapters[transition].dependencies.push(chapter);
                            }
                        } catch (err) {
                            _didIteratorError8 = true;
                            _iteratorError8 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion8 && _iterator8.return) {
                                    _iterator8.return();
                                }
                            } finally {
                                if (_didIteratorError8) {
                                    throw _iteratorError8;
                                }
                            }
                        }
                    }

                    // Topological sort
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }

                var marked = {};
                var remaining = filenames.length;

                outerLoop: while (remaining > 0) {
                    var _iteratorNormalCompletion5 = true;
                    var _didIteratorError5 = false;
                    var _iteratorError5 = undefined;

                    try {
                        for (var _iterator5 = Object.entries(progression.chapters)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                            var _ref3 = _step5.value;

                            var _ref4 = _slicedToArray(_ref3, 2);

                            var chapterName = _ref4[0];
                            var _chapter = _ref4[1];

                            if (_chapter.dependencies.every(function (dep) {
                                return marked[dep];
                            }) && !marked[chapterName]) {
                                marked[chapterName] = true;
                                progression.linearChapters.push(chapterName);

                                _chapter.startIdx = progression.levels.length;
                                progression.levels = progression.levels.concat(_chapter.levels);
                                _chapter.endIdx = progression.levels.length - 1;

                                remaining--;

                                // TODO: patch defines
                                var _iteratorNormalCompletion6 = true;
                                var _didIteratorError6 = false;
                                var _iteratorError6 = undefined;

                                try {
                                    for (var _iterator6 = _chapter.levels[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                        var level = _step6.value;

                                        var newScales = Object.assign({}, animationScales, level.animationScales);
                                        level.animationScales = Object.assign(animationScales, level.animationScales);
                                        animationScales = newScales;

                                        var newFade = Object.assign({}, fade, level.fade);
                                        level.fade = Object.assign({}, fade, level.fade);
                                        fade = newFade;

                                        level.extraDefines = extraDefines;
                                        extraDefines = extraDefines.concat(level.defines);

                                        var _iteratorNormalCompletion7 = true;
                                        var _didIteratorError7 = false;
                                        var _iteratorError7 = undefined;

                                        try {
                                            for (var _iterator7 = level.syntax[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                                                var syntax = _step7.value;

                                                if (progression.syntax[syntax]) continue;

                                                progression.syntax[syntax] = _this6.loadSyntax(name, syntax, definition.dir + "/" + syntax + ".json");
                                            }
                                        } catch (err) {
                                            _didIteratorError7 = true;
                                            _iteratorError7 = err;
                                        } finally {
                                            try {
                                                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                                    _iterator7.return();
                                                }
                                            } finally {
                                                if (_didIteratorError7) {
                                                    throw _iteratorError7;
                                                }
                                            }
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError6 = true;
                                    _iteratorError6 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                            _iterator6.return();
                                        }
                                    } finally {
                                        if (_didIteratorError6) {
                                            throw _iteratorError6;
                                        }
                                    }
                                }

                                continue outerLoop;
                            }
                        }
                    } catch (err) {
                        _didIteratorError5 = true;
                        _iteratorError5 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                _iterator5.return();
                            }
                        } finally {
                            if (_didIteratorError5) {
                                throw _iteratorError5;
                            }
                        }
                    }

                    console.error("Loader#loadChapters: Could not finish digraph.");
                    break;
                }

                globalProgressions.PROGRESSIONS[name].progression = progression;

                _this6.finishLoad();
            });
        }
    }, {
        key: "waitForFonts",
        value: function waitForFonts(fonts) {
            var _this7 = this;

            this.startLoad();
            Promise.all(fonts.map(function (name) {
                return new _fontfaceobserver2.default(name).load();
            })).then(function () {
                _this7.finishLoad();
            });
        }
    }, {
        key: "finished",
        get: function get() {
            return this._promise;
        }
    }]);

    return LoaderClass;
}();

var Loader = new LoaderClass();
exports.default = Loader;
},{"fontfaceobserver":67,"howler":68,"./gfx/core":4,"./game/progression":8,"./util/ajax":18}],36:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _howler = require("howler");

var _loader = require("../loader");

var _loader2 = _interopRequireDefault(_loader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AudioEngine = function () {
    function AudioEngine() {
        _classCallCheck(this, AudioEngine);

        this.muted = false;
        if (window.localStorage["muted"] === "true") {
            this.muted = true;
        }
    }

    _createClass(AudioEngine, [{
        key: "play",
        value: function play(sound) {
            if (!_loader2.default.sounds[sound]) {
                console.error("@AudioEngine#play: could not find sound " + sound);
                return;
            }
            return _loader2.default.sounds[sound].play(sound);
        }
    }, {
        key: "playSeries",
        value: function playSeries(sounds) {
            var _this = this;

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = sounds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var sound = _step.value;

                    if (!_loader2.default.sounds[sound]) {
                        console.error("@AudioEngine#play: could not find sound " + sound);
                        return;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var queue = sounds.slice().reverse(); // Copy sound list
            var step = function step() {
                if (queue.length === 0) return;

                var sound = queue.pop();
                var id = _this.play(sound);
                _loader2.default.sounds[sound].on("end", step, id);
            };
            step();
        }
    }, {
        key: "mute",
        value: function mute() {
            _howler.Howler.mute(true);
            this.muted = true;
            window.localStorage["muted"] = "true";
        }
    }, {
        key: "unmute",
        value: function unmute() {
            _howler.Howler.mute(false);
            this.muted = false;
            window.localStorage["muted"] = "false";
        }
    }, {
        key: "toggleMute",
        value: function toggleMute() {
            if (this.muted) {
                this.unmute();
            } else {
                this.mute();
            }
        }
    }]);

    return AudioEngine;
}();

var Audio = new AudioEngine();

exports.default = Audio;
},{"howler":68,"../loader":3}],45:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.splosion = splosion;
exports.blink = blink;
exports.shatter = shatter;
exports.poof = poof;
exports.error = error;
exports.emerge = emerge;
exports.expandingShape = expandingShape;
exports.keepAlive = keepAlive;

var _loader = require("../../loader");

var _loader2 = _interopRequireDefault(_loader);

var _audio = require("../../resource/audio");

var _audio2 = _interopRequireDefault(_audio);

var _core = require("../core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("../animate");

var animate = _interopRequireWildcard(_animate);

var _primitive = require("../primitive");

var primitive = _interopRequireWildcard(_primitive);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An explosion effect.
 */
function splosion(stage, pos) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    options = Object.assign({}, {
        color: "gold",
        numOfParticles: 20,
        explosionRadius: 100,
        duration: 600,
        angle: function angle(_idx) {
            return Math.random() * Math.PI * 2;
        }
    }, options);
    var parts = [];
    var tweens = [];

    var minRadius = 1;
    var maxRadius = 12;

    for (var i = 0; i < options.numOfParticles; i++) {
        var record = {
            x: pos.x,
            y: pos.y,
            r: Math.floor(minRadius + (maxRadius - minRadius) * Math.random())
        };
        parts.push(record);

        var theta = options.angle(i);
        var rad = options.explosionRadius * (Math.random() / 2.0 + 0.5);

        tweens.push(animate.tween(record, {
            x: pos.x + rad * Math.cos(theta),
            y: pos.y + rad * Math.sin(theta),
            r: 0
        }, {
            duration: options.duration,
            easing: animate.Easing.Time(function (t) {
                return Math.pow(t, 0.5);
            })
        }));
    }

    var id = stage.addEffect({
        prepare: function prepare() {},
        draw: function draw() {
            var ctx = stage.ctx;

            if (typeof options.color === "string") ctx.fillStyle = options.color;
            ctx.save();
            var i = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _record = _step.value;

                    ctx.beginPath();
                    if (typeof options.color === "function") ctx.fillStyle = options.color(i);
                    ctx.arc(_record.x + _record.r, _record.y + _record.r, _record.r, 0, 2 * Math.PI);
                    ctx.fill();
                    i += 1;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            ctx.restore();
        },
        containsPoint: function containsPoint() {
            return false;
        }
    });

    return Promise.all(tweens).then(function () {
        stage.removeEffect(id);
    });
} /**
   * Handy built-in effects.
   */

function blink(stage, projection, opts) {
    var options = Object.assign({
        times: 1,
        color: "#F00",
        speed: 600,
        lineWidth: 3,
        background: false,
        field: "stroke"
    }, opts);

    if (options.background) {
        if (!projection.__origColor) {
            projection.__origColor = projection.color;
        }

        var bgColor = typeof options.background === "string" ? options.background : options.color;

        animate.tween(projection, { color: bgColor }, {
            reverse: true,
            repeat: options.times * 2,
            duration: options.speed,
            easing: animate.Easing.Color(animate.Easing.Linear, projection.color, bgColor)
        }).then(function () {
            projection.color = projection.__origColor;
        });
    }

    // TODO: refactor this into a helper

    var updatedStroke = projection[options.field];
    var tempStroke = { color: options.color, lineWidth: 0 };
    var descriptor = Object.getOwnPropertyDescriptor(projection, options.field);
    // Don't blink if fx already in progress
    if (!descriptor || !descriptor.get) {
        Object.defineProperty(projection, options.field, {
            configurable: true,
            get: function get() {
                return tempStroke;
            },
            set: function set(newValue) {
                updatedStroke = newValue;
            }
        });
        return animate.tween(tempStroke, { lineWidth: options.lineWidth }, {
            reverse: true,
            repeat: options.times * 2,
            duration: options.speed
        }).then(function () {
            delete projection[options.field];
            projection[options.field] = updatedStroke;
            stage.drawImpl();
        });
    }
    return Promise.resolve();
}

function shatter(stage, projection, options) {
    var onFullComplete = options.onFullComplete;


    var size = gfx.absoluteSize(projection);
    var pos = gfx.absolutePos(projection);
    var status = {
        x: pos.x,
        y: pos.y,
        w: size.w,
        h: size.h,
        a: 0
    };

    var ctx = stage.ctx;

    var primitive = function primitive(offset) {
        gfx.primitive.roundRect(ctx, status.x, status.y + offset, status.w, status.h, projection.radius, true, true);
    };
    if (projection.baseType === "hexaRect") {
        primitive = function primitive(offset) {
            gfx.primitive.hexaRect(ctx, status.x, status.y + offset, status.w, status.h, Math.min(25, status.w / 2), status.h / 2, true, true);
        };
    }

    var id = stage.addEffect({
        prepare: function prepare() {},
        draw: function draw() {
            ctx.save();
            ctx.globalAlpha = status.a;
            ctx.strokeStyle = "white";
            ctx.lineWidth = 3;
            ctx.fillStyle = "black";
            primitive(4);
            ctx.fillStyle = "white";
            primitive(0);
            ctx.restore();
        }
    });

    return new Promise(function (resolve, _reject) {
        animate.chain(status, { a: 1 }, {
            duration: options.introDuration || 500,
            easing: animate.Easing.Cubic.In,
            callback: function callback() {
                resolve();
            }
        }, {
            a: 0,
            w: 1.2 * size.w,
            h: 1.4 * size.h,
            x: pos.x - 0.1 * size.w,
            y: pos.y - 0.2 * size.h
        }, { duration: options.outroDuration || 800, easing: animate.Easing.Cubic.Out }).then(function () {
            stage.removeEffect(id);
            if (onFullComplete) {
                onFullComplete();
            }
        });
    });
}

function poof(stage, projection) {
    var pos = gfx.centerPos(projection);
    var status = { t: 0.0 };
    var images = ["poof0", "poof1", "poof2", "poof3", "poof4"].map(function (key) {
        return _loader2.default.images[key];
    });

    var ctx = stage.ctx;

    var id = stage.addEffect({
        prepare: function prepare() {},
        draw: function draw() {
            ctx.save();
            var idx = Math.min(Math.floor(status.t * images.length), images.length - 1);
            images[idx].draw(ctx, pos.x - 45, pos.y - 45, 90, 90);
            ctx.restore();
        }
    });

    return animate.tween(status, { t: 1.0 }, {
        duration: 500
    }).then(function () {
        stage.removeEffect(id);
    });
}

function error(stage, projection) {
    _audio2.default.play("negative_2");
    return blink(stage, projection, {
        times: 3,
        speed: 350,
        color: "#F00",
        lineWidth: 5,
        background: "orange"
    });
}

function emerge(stage, state, bodyPos, bodySize, resultIds) {
    var spacing = 10;
    var emergeDistance = 100;
    var totalHeight = 0;
    var maxWidth = 50;
    var maxHeight = 50;

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = resultIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var resultId = _step2.value;

            var resultView = stage.views[resultId];
            resultView.prepare(resultId, resultId, state, stage);
            var sz = gfx.absoluteSize(resultView);
            totalHeight += sz.h + spacing;
            maxWidth = Math.max(sz.w, maxWidth);
            maxHeight = Math.max(sz.h, maxHeight);
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    totalHeight -= spacing;

    var ap = bodyPos;
    var as = bodySize;
    var y = ap.y + as.h / 2;

    // Compute using bounding box of the end position

    var _stage$findSafePositi = stage.findSafePosition(ap.x + as.w / 2 - maxWidth / 2, y - emergeDistance, maxWidth, totalHeight),
        safeX = _stage$findSafePositi.x,
        safeY = _stage$findSafePositi.y;

    emergeDistance = y - maxHeight / 2 - safeY;

    var tweens = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = resultIds[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _resultId = _step3.value;

            var resultView = stage.views[_resultId];
            var sz = gfx.absoluteSize(resultView);
            resultView.pos.x = safeX + maxWidth / 2;
            resultView.pos.y = y;
            resultView.anchor.x = 0.5;
            resultView.anchor.y = 0.5;
            resultView.scale.x = 0.0;
            resultView.scale.y = 0.0;

            tweens.push(animate.tween(resultView, {
                pos: {
                    y: resultView.pos.y - emergeDistance
                },
                scale: {
                    x: 1,
                    y: 1
                }
            }, {
                duration: 1000,
                easing: animate.Easing.Cubic.Out
            }));
            y += sz.h + spacing;
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    return Promise.all(tweens);
}

function expandingShape(stage, projection) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var centerPos = gfx.centerPos(projection);
    var state = {
        pos: centerPos,
        size: gfx.absoluteSize(projection),
        color: options.color || "white",
        scale: { x: 1, y: 1 },
        radius: projection.radius || 0,
        opacity: 1
    };

    var ctx = stage.ctx;

    var id = stage.addEffect({
        prepare: function prepare() {},
        draw: function draw() {
            var w = state.size.w * state.scale.x;
            var h = state.size.h * state.scale.y;
            primitive.setStroke(ctx, { lineWidth: 2, color: state.color });
            primitive.roundRect(ctx, state.pos.x - w / 2, state.pos.y - h / 2, w, h, state.scale.x * state.radius, false, true, state.opacity);
        }
    });

    return animate.tween(state, {
        scale: {
            x: 4,
            y: 4
        },
        opacity: 0
    }, {
        duration: options.duration || 500
    }).then(function () {
        stage.removeEffect(id);
    });
}

/**
 * Render a node that isn't currently part of the board, for as long
 * as a particular tween is running.
 */
function keepAlive(stage, id, promise) {
    var under = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    var fxId = stage.addEffect({
        under: under,
        prepare: function prepare() {
            stage.getView(id).prepare(id, id, stage.getState(), stage);
        },
        draw: function draw() {
            stage.getView(id).draw(id, id, stage.getState(), stage, stage.makeBaseOffset());
        }
    });

    return promise.then(function (args) {
        stage.removeEffect(fxId);
        return args;
    });
}
},{"../../loader":3,"../../resource/audio":36,"../core":4,"../animate":5,"../primitive":24}],5:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fx = exports.clock = exports.Clock = exports.InfiniteTween = exports.InterpolateTween = exports.Tween = exports.Easing = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * The animation & tweening library.


exports.addUpdateListener = addUpdateListener;
exports.tween = tween;
exports.infinite = infinite;
exports.chain = chain;
exports.after = after;
exports.setDurationScale = setDurationScale;
exports.replaceDurationScales = replaceDurationScales;
exports.scaleDuration = scaleDuration;

var _chromaJs = require("chroma-js");

var _chromaJs2 = _interopRequireDefault(_chromaJs);

var _fx = require("./fx/fx");

var fx = _interopRequireWildcard(_fx);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A set of easing functions.
 *
 * @example
 * animate.tween(view, { pos: { x: 0 } }, {
 *     duration: 500,
 *     easing: animate.Easing.Linear,
 * });
 */
var Easing = exports.Easing = {
    /**
     * A linear tween.
     */
    Linear: function Linear(start, stop, t) {
        return start + t * (stop - start);
    },

    /**
     * Quadratic tweens.
     */
    Quadratic: {
        /**
         * An ease-in tween.
         */
        In: function In(start, stop, t) {
            return start + t * t * (stop - start);
        },
        Out: function Out(start, stop, t) {
            return start - t * (t - 2) * (stop - start);
        },
        InOut: function InOut(start, stop, t) {
            t *= 2;
            if (t < 1) {
                return start + (stop - start) * t * t / 2;
            }
            t -= 1;
            return start - (stop - start) * (t * (t - 2) - 1) / 2;
        }
    },

    /**
     * Cubic tweens.
     */
    Cubic: {
        In: function In(start, stop, t) {
            return start + t * t * t * (stop - start);
        },
        Out: function Out(start, stop, t) {
            t -= 1;
            return start + (t * t * t + 1) * (stop - start);
        },
        InOut: function InOut(start, stop, t) {
            t *= 2;
            if (t < 1) {
                return start + (stop - start) * t * t * t / 2;
            }
            t -= 2;
            return start + (stop - start) * (t * t * t + 2) / 2;
        }
    },

    /**
     * Exponential tweens.
     */
    Exponential: {
        Out: function Out(start, stop, t) {
            return (stop - start) * (1 - Math.pow(2, -10 * t)) + start;
        }
    },

    /**
     * Interpolate between colors in the CIELAB color space (so it
     * looks more natural than directly tweening RGB values).
     *
     * Right now this easing is not automatically applied. To tween a
     * color, pass the final color as the target value and
     * additionally specify the source and target colors to this
     * easing function, passing the return value as the easing option.
     *
     * @param {Function} easing - The underlying easing function to use.
     * @param {String} src - The start color.
     * @param {String} dst - The final color.
     *
     * @example
     * // Use linear interpolation underneath
     * animate.tween(view, { color: "#000" }, {
     *     duration: 500,
     *     easing: animate.Easing.Color(animate.Easing.Linear, view.color, "#000"),
     * });
     * @example
     * // Use cubic interpolation underneath
     * animate.tween(view, { color: "#000" }, {
     *     duration: 500,
     *     easing: animate.Easing.Color(animate.Easing.Cubic.In, view.color, "#000"),
     * });
     *
     * @returns {Function} The easing function.
     */
    Color: function Color(easing, src, dst) {
        var scale = _chromaJs2.default.scale([src, dst]).mode("lch");
        return function (start, stop, t) {
            return scale(easing(0.0, 1.0, t));
        };
    },

    /**
     * Parabolic projectile trajectory tween. Used similarly to
     * :func:`Color`.
     */
    Projectile: function Projectile(easing) {
        return function (start, stop, t) {
            var dy = stop - start;
            // console.log(start, stop, t, start + (-4 * dy * t * t) + (4 * dy * t));
            t = easing(0.0, 1.0, t);
            return start + -4 * dy * t * t + 4 * dy * t;
        };
    },

    /**
     * Apply a user-supplied function to the time value, like Reduct
     * 1.
     */
    Time: function Time(fn) {
        return function (start, stop, t) {
            return start + (stop - start) * fn(t);
        };
    },

    /**
     * Tween with a sinusoidal offset value added. The sinusoidal
     * offset's magnitude is itself tweened.
     */
    Sinusoid: function Sinusoid(mag0, mag1, magEasing, freq) {
        return function (start, stop, t) {
            return start + t * (stop - start) + magEasing(mag0, mag1, t) * Math.sin(2 * Math.PI * t * freq);
        };
    },

    /**
     * Tweens that overshoot/undershoot their target.
     * See https://github.com/d3/d3-ease.
     */
    Anticipate: {
        BackIn: function BackIn(s) {
            return function (start, stop, t) {
                return start + (stop - start) * t * t * ((s + 1) * t - s);
            };
        },
        BackOut: function BackOut(s) {
            return function (start, stop, t) {
                return start + (stop - start) * ((t - 1) * (t - 1) * ((s + 1) * (t - 1) + s) + 1);
            };
        }
    }
};

/**
 * The base class for a tween.
 */

var Tween = exports.Tween = function () {
    function Tween(clock, options) {
        var _this = this;

        _classCallCheck(this, Tween);

        this.clock = clock;
        this.options = options;
        /**
         * The underlying Promise object of this tween, which is
         * resolved when the tween finishes.
         */
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });

        this.status = "running";
    }

    _createClass(Tween, [{
        key: "update",
        value: function update(dt) {
            return false;
        }

        /**
         * A convenience function to register a callback for when the
         * tween finishes.
         * @returns {Promise}
         */

    }, {
        key: "then",
        value: function then(cb1, cb2) {
            return this.promise.then(cb1, cb2);
        }

        /**
         * Pause this tween and resume execution after a specified delay.
         * @param {number} ms
         * @returns The tween itself.
         */

    }, {
        key: "delay",
        value: function delay(ms) {
            var _this2 = this;

            // TODO: respect Clock.scale
            this.status = "paused";
            setTimeout(function () {
                _this2.status = "running";
                _this2.clock.start();
            }, ms);
            return this;
        }

        /**
         * Force this tween to mark itself as completed.
         */

    }, {
        key: "completed",
        value: function completed() {
            this.status = "completed";
            this.resolve();
            if (this.options.callback) {
                this.options.callback();
            }
        }
    }]);

    return Tween;
}();

/**
 * A tween that interpolates from a start value to an end value.
 *
 * @augments animate.Tween
 */


var InterpolateTween = exports.InterpolateTween = function (_Tween) {
    _inherits(InterpolateTween, _Tween);

    function InterpolateTween(clock, properties, duration, options) {
        _classCallCheck(this, InterpolateTween);

        var _this3 = _possibleConstructorReturn(this, (InterpolateTween.__proto__ || Object.getPrototypeOf(InterpolateTween)).call(this, clock, options));

        _this3.properties = properties;
        _this3.duration = duration;
        _this3.remaining = duration;
        _this3.reverse = false;
        _this3.repeat = 1;
        _this3.reversing = false;

        if ("reverse" in options) {
            _this3.reverse = options.reverse;
        }
        if ("repeat" in options) {
            _this3.repeat = options.repeat;
        }
        return _this3;
    }

    _createClass(InterpolateTween, [{
        key: "update",
        value: function update(dt) {
            if (this.status !== "running") {
                return false;
            }

            // Guard against very long time steps (e.g. when paused by a
            // debugger)
            dt = dt % this.duration;

            if (this.reversing) {
                this.remaining += dt;
            } else {
                this.remaining -= dt;
            }

            var t = Math.max(0, 1 - this.remaining / this.duration);
            var completed = false;

            if (!this.reversing && this.remaining <= 0 || this.reversing && this.remaining >= this.duration) {
                this.repeat -= 1;
                if (this.repeat <= 0) {
                    completed = true;
                    t = 1.0;
                } else {
                    if (this.reverse) {
                        this.reversing = !this.reversing;
                    } else {
                        this.remaining = this.duration;
                    }
                    t = Math.max(0, 1 - this.remaining / this.duration);
                }
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var attr = _step.value;
                    var target = attr.target,
                        property = attr.property,
                        start = attr.start,
                        end = attr.end,
                        easing = attr.easing;

                    target[property] = easing(start, end, t);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (completed) {
                this.completed();
                return false;
            }
            return true;
        }

        /** Resets properties affected back to their initial value. */

    }, {
        key: "undo",
        value: function undo() {
            var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (animated) {
                var _tween = this.makeUndo();
                this.clock.addTween(_tween);
                return _tween;
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var attr = _step2.value;
                    var target = attr.target,
                        property = attr.property,
                        start = attr.start;

                    target[property] = start;
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: "makeUndo",
        value: function makeUndo() {
            var properties = [];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.properties[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var attr = _step3.value;

                    properties.push(Object.assign({}, attr, {
                        start: attr.end,
                        end: attr.start
                    }));
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return new InterpolateTween(this.clock, properties, this.duration, this.options);
        }
    }, {
        key: "cancel",
        value: function cancel() {
            this.status = "completed";
        }
    }, {
        key: "completed",
        value: function completed() {
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.properties[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var attr = _step4.value;
                    var target = attr.target,
                        property = attr.property,
                        start = attr.start,
                        end = attr.end,
                        easing = attr.easing;

                    target[property] = easing(start, end, 1);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            _get(InterpolateTween.prototype.__proto__ || Object.getPrototypeOf(InterpolateTween.prototype), "completed", this).call(this);
        }
    }]);

    return InterpolateTween;
}(Tween);

/**
 * A tween that continues running until explicitly stopped.
 *
 * @param clock
 * @param {Function} updater - A function that is called on every tick
 * with the delta-time value. It can return ``true`` to stop running.
 */


var InfiniteTween = exports.InfiniteTween = function (_Tween2) {
    _inherits(InfiniteTween, _Tween2);

    function InfiniteTween(clock, updater, options) {
        _classCallCheck(this, InfiniteTween);

        var _this4 = _possibleConstructorReturn(this, (InfiniteTween.__proto__ || Object.getPrototypeOf(InfiniteTween)).call(this, clock, options));

        _this4.updater = updater;
        _this4.stopped = false;
        return _this4;
    }

    _createClass(InfiniteTween, [{
        key: "update",
        value: function update(dt) {
            if (this.status !== "running") {
                return false;
            }

            var finished = this.stopped || this.updater(dt);
            if (finished) {
                this.completed();
                return false;
            }

            return true;
        }

        /**
         * Stop running this infinite tween.
         */

    }, {
        key: "stop",
        value: function stop() {
            this.stopped = true;
        }
    }]);

    return InfiniteTween;
}(Tween);

/**
 * An animation loop and tween manager.
 */


var Clock = exports.Clock = function () {
    function Clock() {
        _classCallCheck(this, Clock);

        this.listeners = [];
        this.tweens = [];
        this.running = false;
        this.lastTimestamp = null;
        /**
         * A global scale factor applied to tween durations. This is
         * dynamic, i.e. instead of statically changing the durations
         * of new tweens, this value is multiplied by the delta time
         * used to update tweens. Thus, changing this affects
         * animations in progress. However, it will not dynamically
         * affect :func:`animate.after`, which does scale its duration
         * according to this, but does not readjust its duration
         * afterwards.
         */
        this.scale = null;
        this.tick = this.tick.bind(this);
    }

    _createClass(Clock, [{
        key: "addUpdateListener",
        value: function addUpdateListener(f) {
            this.listeners.push(f);
        }

        /**
         * Update all tweens by the given delta time. If any tweens are
         * still running, automatically requests a new animation frame,
         * otherwise pauses the clock. This helps save CPU cycles and
         * battery power when no animations are running.
         */

    }, {
        key: "tick",
        value: function tick(t) {
            var dt = this.scale * (t - this.lastTimestamp);
            var completed = [];
            var running = false;
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = this.tweens[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _tween2 = _step5.value;

                    running = _tween2.update(dt) || running;
                    if (_tween2.status === "completed") {
                        completed.push(_tween2);
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = completed[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var _tween3 = _step6.value;

                    this.tweens.splice(this.tweens.indexOf(_tween3), 1);
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            this.running = this.tweens.length > 0 && running;

            if (this.running) {
                this.lastTimestamp = t;
                window.requestAnimationFrame(this.tick);
            } else {
                this.lastTimestamp = null;
            }

            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = this.listeners[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var listener = _step7.value;

                    listener();
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }
        }

        /**
         * Add a :class:`InterpolateTween` tween to this clock.
         *
         * @param {Object} target - The object whose properties should be tweened.
         * @param {Object} properties - A dictionary of property values to
         * be tweened. The RHS should be the final value of the
         * property. It can also be a list, where in order, the list
         * (optionally) contains the start value, the final value, and an
         * easing function to use for just that property. Properties can
         * be nested, e.g. passing ``{ pos: { x: 0 }}`` will tween
         * ``target.pos.x`` to 0.
         * @param {Object} options - Various options for the tween. Any
         * options not described here are passed to the tween
         * constructor—see :class:`animate.InterpolateTween`.
         * @param {number} [options.duration=300] - The duration of the tween.
         * @param {Function} [options.easing=animate.Easing.Linear] - The
         * default easing function to use.
         * @param {number} [options.restTime] - If given, an amount of
         * time to wait before decrementing the ``animating`` counter on
         * ``target``. Some views use this counter to avoid performing
         * layout on children that are being animated, so that the
         * animation is not overridden by the view.
         * @param {boolean} [options.setAnimatingFlag] - Don't set the
         * ``animating`` counter.
         * @returns {animate.InterpolateTween} The tween object.
         */

    }, {
        key: "tween",
        value: function tween(target, properties, options) {
            var duration = options.duration || 300;
            var props = [];
            var defaultEasing = options.easing || Easing.Linear;
            var setAnimatingFlag = typeof options.setAnimatingFlag === "undefined" ? true : options.setAnimatingFlag;

            var buildProps = function buildProps(subTarget, subProps, easing) {
                var _iteratorNormalCompletion8 = true;
                var _didIteratorError8 = false;
                var _iteratorError8 = undefined;

                try {
                    for (var _iterator8 = Object.entries(subProps)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                        var _ref = _step8.value;

                        var _ref2 = _slicedToArray(_ref, 2);

                        var prop = _ref2[0];
                        var final = _ref2[1];

                        var start = null;

                        if (Array.isArray(final)) {
                            if (final.length === 2 && typeof final[1] === "function") {
                                var _final = final;

                                var _final2 = _slicedToArray(_final, 2);

                                final = _final2[0];
                                easing = _final2[1];
                            } else if (final.length === 2) {
                                var _final3 = final;

                                var _final4 = _slicedToArray(_final3, 2);

                                start = _final4[0];
                                final = _final4[1];
                            } else if (final.length === 3) {
                                var _final5 = final;

                                var _final6 = _slicedToArray(_final5, 3);

                                start = _final6[0];
                                final = _final6[1];
                                easing = _final6[2];
                            } else {
                                throw "Tween target can only be array if array is length 2 or 3";
                            }
                        }

                        if (typeof final === "number" || typeof final === "string") {
                            props.push({
                                target: subTarget,
                                property: prop,
                                start: start || subTarget[prop],
                                end: final,
                                easing: easing
                            });
                        } else if (final) {
                            buildProps(subTarget[prop], final, easing);
                        }
                    }
                } catch (err) {
                    _didIteratorError8 = true;
                    _iteratorError8 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion8 && _iterator8.return) {
                            _iterator8.return();
                        }
                    } finally {
                        if (_didIteratorError8) {
                            throw _iteratorError8;
                        }
                    }
                }
            };

            buildProps(target, properties, defaultEasing);
            // Set flag so that layout functions know to skip this view,
            // if it is a child. Use counter to allow overlapping tweens.
            if (setAnimatingFlag) {
                if (typeof target.animating === "number") {
                    target.animating += 1;
                } else {
                    target.animating = 1;
                }
            }

            var decrementAnimatingCount = function decrementAnimatingCount() {
                if (typeof target.animating === "number") {
                    target.animating -= 1;
                } else {
                    target.animating = 0;
                }
            };

            var result = this.addTween(new InterpolateTween(this, props, duration, options));
            if (setAnimatingFlag) {
                result.then(function () {
                    if (options.restTime) {
                        return after(options.restTime);
                    }
                    return null;
                }).then(function () {
                    return decrementAnimatingCount();
                });
            }
            return result;
        }

        /**
         * Directly add a tween to this clock.
         *
         * Starts the clock if paused.
         *
         * @param {animate.Tween} tween
         */

    }, {
        key: "addTween",
        value: function addTween(tween) {
            this.tweens.push(tween);
            if (!this.running) {
                this.start();
            }

            return tween;
        }

        /**
         * Start the clock, if paused.
         */

    }, {
        key: "start",
        value: function start() {
            if (!this.running) {
                this.running = true;
                this.lastTimestamp = window.performance.now();
                window.requestAnimationFrame(this.tick);
            }
        }

        /**
         * Cancel all tweens on this clock and stop the clock.
         */

    }, {
        key: "cancelAll",
        value: function cancelAll() {
            this.running = false;
            this.lastTimestamp = null;
            while (this.tweens.length > 0) {
                this.tweens.pop();
            }
        }
    }, {
        key: "scale",
        get: function get() {
            if (this._scale) {
                return this._scale;
            }
            var el = document.querySelector("#animation-speed-slider");
            if (el) {
                return el.value;
            }
            return 1;
        },
        set: function set(s) {
            this._scale = s;
        }
    }]);

    return Clock;
}();

/**
 * The default clock.
 *
 * @example
 * // clock example
 */


var clock = exports.clock = new Clock();

/**
 * Add a callback that is fired every animation tick.
 *
 * Useful to trigger a re-render whenever an animation updates.
 *
 * @param {Function} f - The function to be called.
 */
function addUpdateListener(f) {
    clock.addUpdateListener(f);
}

/**
 * Add a tween to the default clock (and start the clock if
 * applicable).
 *
 * @param {Object} target - The object whose properties to tween.
 * @param {Object} properties - A (nested) dictionary of property
 * values to tween to.
 * @param {Object} options - Other options for the tween. See
 * :js:func:`~animate.Clock.tween`.
 */
function tween(target, properties) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    return clock.tween(target, properties, options);
}

/**
 * Add an infinite tween to the default clock.
 *
 * @param {Function} updater - The update function. See
 * :class:`~animate.InfiniteTween`.
 * @param {Object} options
 */
function infinite(updater) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return clock.addTween(new InfiniteTween(clock, updater, options));
}

function chain(target) {
    for (var _len = arguments.length, properties = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        properties[_key - 1] = arguments[_key];
    }

    if (properties.length % 2 !== 0) {
        throw "animate.chain: Must provide an even number of properties.";
    }
    var base = null;

    var _loop = function _loop(i) {
        if (base === null) {
            base = tween(target, properties[i], properties[i + 1]);
        } else {
            base = base.then(function () {
                return tween(target, properties[i], properties[i + 1]);
            });
        }
    };

    for (var i = 0; i < properties.length; i += 2) {
        _loop(i);
    }

    return base;
}

/**
 * A helper function to resolve a Promise after a specified delay.
 *
 * @param ms {number} The delay in milliseconds.
 * @returns {Promise}
 */
function after(ms) {
    return new Promise(function (resolve) {
        window.setTimeout(function () {
            resolve();
        }, ms / clock.scale);
    });
}

var scales = {};

/**
 * Set the duration scale factor for a given category.
 *
 * @param {String} category
 * @param {number} factor
 */
function setDurationScale(category, factor) {
    scales[category] = factor;
}

function replaceDurationScales(_scales) {
    scales = Object.assign({}, _scales);
}

/**
 * Scale a duration by the given categories' scale factors.
 *
 * @param {number} duration
 * @param {...String} categories
 *
 * @example
 * animate.tween(view, { opacity: 0 }, {
 *     duration: animate.scaleDuration(300, "expr-add", "global-scale"),
 * });
 */
function scaleDuration(ms) {
    for (var _len2 = arguments.length, categories = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        categories[_key2 - 1] = arguments[_key2];
    }

    var _iteratorNormalCompletion9 = true;
    var _didIteratorError9 = false;
    var _iteratorError9 = undefined;

    try {
        for (var _iterator9 = categories[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var category = _step9.value;

            ms *= typeof scales[category] === "undefined" ? 1.0 : scales[category];
        }
    } catch (err) {
        _didIteratorError9 = true;
        _iteratorError9 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion9 && _iterator9.return) {
                _iterator9.return();
            }
        } finally {
            if (_didIteratorError9) {
                throw _iteratorError9;
            }
        }
    }

    return ms;
}

exports.fx = fx;
},{"chroma-js":71,"./fx/fx":45}],54:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getRandInt = getRandInt;
exports.getRandString = getRandString;
/** Random integer in the range [min, max). */
function getRandInt(min, max) {
    // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values
    return Math.floor(Math.random() * (max - min)) + min;
}

function getRandString(length) {
    var alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var result = "";
    for (var i = 0; i < length; i++) {
        result += alphabet[getRandInt(0, alphabet.length)];
    }
    return result;
}
},{}],26:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
ustom views for specific expressions.


exports.argumentBar = argumentBar;
exports.fadeMe = fadeMe;

var _core = require("./core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("./animate");

var animate = _interopRequireWildcard(_animate);

var _primitive = require("./primitive");

var primitive = _interopRequireWildcard(_primitive);

var _util = require("./util");

var util = _interopRequireWildcard(_util);

var _random = require("../util/random");

var random = _interopRequireWildcard(_random);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function argumentBar() {
    var projection = gfx.baseProjection();
    projection.type = "custom/argumentBar";

    var txt = gfx.text("", {
        color: "#888"
    });

    projection.prepare = function (id, exprId, state, stage) {
        this.names = [];
        this.size = { w: 0, h: 50 };

        var define = state.getIn(["nodes", exprId]);

        if (define.get("type") === "define" && define.get("params") === "dynamic") {
            // let body = state.getIn([ "nodes", define.get("body") ]);
            // while (body.get("type") === "lambda") {
            //     const name = state.getIn([ "nodes", body.get("arg"), "name" ]);
            //     txt.text = name;
            //     txt.prepare(null, null, state, stage);
            //     const size = Math.max(txt.size.w, 40);
            //     this.names.push([ name, size + 10 ]);
            //     this.size.w += size + 20;
            //     body = state.getIn([ "nodes", body.get("body") ]);
            // }

            throw "Dynamic parameter lists are unimplemented.";
        } else {
            this.names = [];
            var params = Array.isArray(define.get("params")) ? define.get("params") : state.getIn(["nodes", state.getIn(["globals", define.get("name")]), "params"]);

            var maxY = 50;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var name = _step.value;

                    var subexprField = "arg_" + name;
                    if (define.get(subexprField)) {
                        var subexprId = define.get(subexprField);
                        var childProjection = stage.getView(subexprId);
                        childProjection.parent = this;
                        childProjection.pos.x = this.size.w;
                        childProjection.pos.y = 0;
                        childProjection.anchor.x = 0;
                        childProjection.anchor.y = 0;
                        // TODO: use subexpScale
                        childProjection.scale.x = 0.85;
                        childProjection.scale.y = 0.85;

                        childProjection.prepare(subexprId, subexprId, state, stage);
                        // TODO: use padding
                        this.size.w += childProjection.size.w * childProjection.scale.x + 20;
                        maxY = Math.max(maxY, childProjection.size.h * childProjection.scale.y);
                        this.names.push([null, subexprId]);
                    } else {
                        txt.text = name;
                        txt.prepare(null, null, state, stage);
                        var size = txt.size.w;
                        this.names.push([name, size]);
                        this.size.w += Math.max(size, 40) + 20;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.size.h = maxY;

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = params[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _name = _step2.value;

                    var subexprField = "arg_" + _name;
                    if (define.get(subexprField)) {
                        var _subexprId = define.get(subexprField);
                        var _childProjection = stage.getView(_subexprId);
                        _childProjection.pos.y = (this.size.h - _childProjection.size.h * _childProjection.scale.y) / 2;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }

        this.size.w = Math.max(0, this.size.w - 20);
    };
    projection.draw = function (id, exprId, state, stage, offset) {
        var ctx = stage.ctx;

        ctx.save();

        var _util$absoluteScale = util.absoluteScale(this, offset),
            _util$absoluteScale2 = _slicedToArray(_util$absoluteScale, 2),
            sx = _util$absoluteScale2[0],
            sy = _util$absoluteScale2[1];

        var _util$topLeftPos = util.topLeftPos(this, offset),
            x = _util$topLeftPos.x,
            y = _util$topLeftPos.y;

        util.setOpacity(ctx, this.opacity, offset);

        var h = sy * (this.size.h - 10);

        var dy = sy * 5;
        var dx = 0;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
            for (var _iterator3 = this.names[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _ref = _step3.value;

                var _ref2 = _slicedToArray(_ref, 2);

                var name = _ref2[0];
                var width = _ref2[1];

                if (name === null) {
                    var subexprId = width;
                    var subOffset = Object.assign({}, offset, {
                        x: x,
                        y: y,
                        sx: offset.sx * this.scale.x,
                        sy: offset.sy * this.scale.y,
                        opacity: this.opacity * offset.opacity
                    });

                    stage.getView(subexprId).draw(subexprId, subexprId, state, stage, subOffset);
                } else {
                    var w = sx * Math.max(width, 40);
                    ctx.fillStyle = "#000";
                    primitive.roundRect(ctx, x + dx, y + (dy - 3), w, h, sx * 22, true, false, 1.0, null);

                    ctx.fillStyle = "#555";
                    primitive.roundRect(ctx, x + dx, y + dy, w, h, sx * 22, true, false, 1.0, null);

                    txt.text = name;
                    txt.draw(null, null, state, stage, Object.assign({}, offset, {
                        x: x + dx + Math.max(0, (w - width) / 2),
                        y: y + 5 * offset.sy,
                        sx: sx,
                        sy: sy
                    }));

                    dx += w + 20 * sx;
                }
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }

        gfx.debugDraw(ctx, this, offset);
        ctx.restore();
    };

    projection.children = /*#__PURE__*/regeneratorRuntime.mark(function _callee(exprId, state) {
        var expr, params, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, name, subexprField, child;

        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        expr = state.getIn(["nodes", exprId]);

                        if (!(expr.get("type") === "define")) {
                            _context.next = 3;
                            break;
                        }

                        return _context.abrupt("return");

                    case 3:
                        params = expr.get("params");


                        if (!params) {
                            params = state.getIn(["nodes", state.getIn(["globals", expr.get("name")]), "params"]);
                        }

                        if (params) {
                            _context.next = 7;
                            break;
                        }

                        return _context.abrupt("return");

                    case 7:
                        _iteratorNormalCompletion4 = true;
                        _didIteratorError4 = false;
                        _iteratorError4 = undefined;
                        _context.prev = 10;
                        _iterator4 = params[Symbol.iterator]();

                    case 12:
                        if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                            _context.next = 22;
                            break;
                        }

                        name = _step4.value;
                        subexprField = "arg_" + name;

                        if (!expr.get(subexprField)) {
                            _context.next = 19;
                            break;
                        }

                        child = expr.get(subexprField);
                        _context.next = 19;
                        return [child, child];

                    case 19:
                        _iteratorNormalCompletion4 = true;
                        _context.next = 12;
                        break;

                    case 22:
                        _context.next = 28;
                        break;

                    case 24:
                        _context.prev = 24;
                        _context.t0 = _context["catch"](10);
                        _didIteratorError4 = true;
                        _iteratorError4 = _context.t0;

                    case 28:
                        _context.prev = 28;
                        _context.prev = 29;

                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }

                    case 31:
                        _context.prev = 31;

                        if (!_didIteratorError4) {
                            _context.next = 34;
                            break;
                        }

                        throw _iteratorError4;

                    case 34:
                        return _context.finish(31);

                    case 35:
                        return _context.finish(28);

                    case 36:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee, this, [[10, 24, 28, 36], [29,, 31, 35]]);
    });
    return projection;
}

function fadeMe(projection, onfade) {
    var origDraw = projection.draw;

    var stars = [];
    var size = gfx.absoluteSize(projection);
    var count = Math.min(100, 30 * (size.w / 50));
    for (var i = 0; i < count; i++) {
        stars.push({
            dx: Math.random() - 0.5,
            dy: Math.random() - 0.5,
            r: random.getRandInt(2, 8),
            opacity: 1.0,
            deltaOpacity: -Math.max(3 * Math.random(), 0.8)
        });
    }

    var tween = animate.infinite(function (dt) {
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
            for (var _iterator5 = stars[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                var star = _step5.value;

                star.opacity += star.deltaOpacity * (dt / 1000);
                if (star.opacity <= 0) {
                    star.opacity = 1.0;
                    star.deltaOpacity = -Math.max(3 * Math.random(), 0.8);
                    star.dx = Math.random() - 0.5;
                    star.dy = Math.random() - 0.5;
                }
            }
        } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion5 && _iterator5.return) {
                    _iterator5.return();
                }
            } finally {
                if (_didIteratorError5) {
                    throw _iteratorError5;
                }
            }
        }
    });

    projection.onmouseenter = function () {
        onfade(tween);
    };

    projection.draw = function (id, exprId, state, stage, offset) {
        origDraw.call(this, id, exprId, state, stage, offset);

        var _util$topLeftPos2 = util.topLeftPos(this, offset),
            x = _util$topLeftPos2.x,
            y = _util$topLeftPos2.y;

        var _util$absoluteScale3 = util.absoluteScale(projection, offset),
            _util$absoluteScale4 = _slicedToArray(_util$absoluteScale3, 2),
            sx = _util$absoluteScale4[0],
            sy = _util$absoluteScale4[1];

        var ctx = stage.ctx;

        ctx.save();

        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
            for (var _iterator6 = stars[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                var star = _step6.value;

                ctx.globalAlpha = offset.opacity * star.opacity * this.opacity;
                ctx.fillStyle = "#000";
                primitive.drawStar(ctx, x + sx * (this.size.w / 2) + this.size.w * sx * 1.2 * star.dx, y + sy * (this.size.h / 2) + this.size.h * sy * 1.2 * star.dy, 5, star.r / 2, star.r, true);
                ctx.fillStyle = "#0F0";
                primitive.drawStar(ctx, x + sx * (this.size.w / 2) + this.size.w * sx * 1.2 * star.dx, y + sy * (this.size.h / 2) + this.size.h * sy * 1.2 * star.dy, 5, star.r / 2, star.r, true);
            }
        } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion6 && _iterator6.return) {
                    _iterator6.return();
                }
            } finally {
                if (_didIteratorError6) {
                    throw _iteratorError6;
                }
            }
        }

        ctx.restore();
    };

    return projection;
}
},{"./core":4,"./animate":5,"./primitive":24,"./util":25,"../util/random":54}],27:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.hexpand = hexpand;
exports.expand = expand;
exports.sticky = sticky;
exports.hbox = hbox;
exports.vbox = vbox;
exports.previewer = previewer;
exports.ratioSizer = ratioSizer;
exports.ratioPlacer = ratioPlacer;

var _animate = require("./animate");

var animate = _interopRequireWildcard(_animate);

var _core = require("./core");

var _util = require("./util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function hexpand(projection) {
    return expand(projection, { horizontal: true });
}

function expand(projection, options) {
    var origPrepare = projection.prepare;
    projection.expand = options;
    projection.prepare = function (id, exprId, state, stage) {
        origPrepare.call(this, id, exprId, state, stage);
        if (this.expand.horizontal) {
            this.size.w = stage.width;
        }
        if (this.expand.vertical) {
            this.size.h = stage.height;
        }
    };
    return projection;
}

function sticky(projection, direction, options) {
    var origPrepare = projection.prepare;
    projection.sticky = Object.assign({
        margin: 0,
        marginX: 0,
        marginY: 0,
        align: "left"
    }, options || {});
    projection.prepare = function (id, exprId, state, stage) {
        origPrepare.call(this, id, exprId, state, stage);
        this.anchor.x = 0;
        this.anchor.y = 0;

        var w = this.size.w * this.scale.x;
        var h = this.size.h * this.scale.y;

        if (direction === "bottom") {
            this.pos.y = stage.height - h - this.sticky.margin;
        } else if (direction === "top") {
            this.pos.y = this.sticky.margin;
        } else if (direction === "left") {
            this.pos.x = 0;
        } else if (direction === "center") {
            this.pos.x = (stage.width - w) / 2 + this.sticky.marginX;
            var hFactor = 0.5;
            if (typeof this.sticky.hAlign === "number") {
                hFactor = this.sticky.hAlign;
            }
            this.pos.y = stage.height / 2 - h * hFactor + this.sticky.marginY;
        }

        if (direction === "top" || direction === "bottom") {
            if (this.sticky.align === "center") {
                this.pos.x = (stage.width - w) / 2;
            } else if (this.sticky.align === "right") {
                this.pos.x = stage.width - w;
            }
        }
    };
    return projection;
}

function hbox(childrenFunc) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var baseProjection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _core.roundedRect;

    if (options && options.padding) {
        options.padding = Object.assign({
            left: 10, inner: 5, right: 10, top: 0, bottom: 0
        }, options.padding);
    }

    var projection = baseProjection(Object.assign({}, {
        padding: { left: 10, inner: 5, right: 10, top: 0, bottom: 0 },
        subexpScale: 0.85
    }, options));
    var baseDraw = projection.draw;
    var basePrepare = projection.prepare;

    projection.baseType = projection.type;
    projection.type = "hbox";

    projection.prepare = function (id, exprId, state, stage) {
        basePrepare.call(this, id, exprId, state, stage);
        var x = this.padding.left;

        var maxY = typeof this.minHeight === "number" ? this.minHeight : 40;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = this.children(exprId, state)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _ref = _step.value;

                var _ref2 = _slicedToArray(_ref, 2);

                var childId = _ref2[0];
                var subexprId = _ref2[1];

                var childProjection = stage.views[childId];

                childProjection.parent = this;

                if (typeof childProjection.animating !== "number" || childProjection.animating === 0) {
                    childProjection.pos.x = x;
                    childProjection.anchor.x = 0;
                    childProjection.anchor.y = 0;
                    childProjection.scale.x = this.subexpScale;
                    childProjection.scale.y = this.subexpScale;
                }

                childProjection.prepare(childId, subexprId, state, stage);
                x += childProjection.size.w * childProjection.scale.x + this.padding.inner;
                maxY = Math.max(maxY, childProjection.size.h * childProjection.scale.y);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        this.size.w = x - this.padding.inner + this.padding.right;
        this.size.h = maxY + this.padding.top + this.padding.bottom;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = this.children(exprId, state)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _ref3 = _step2.value;

                var _ref4 = _slicedToArray(_ref3, 1);

                var _childId = _ref4[0];

                var childProjection = stage.views[_childId];
                if (typeof childProjection.animating === "number" && childProjection.animating > 0) continue;

                childProjection.pos.y = (this.size.h * this.scale.y - childProjection.size.h * childProjection.scale.y * this.scale.y) / 2;
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }
    };
    projection.draw = function (id, exprId, state, stage, offset) {
        baseDraw.call(this, id, exprId, state, stage, offset);

        var _util$absoluteScale = util.absoluteScale(this, offset),
            _util$absoluteScale2 = _slicedToArray(_util$absoluteScale, 2),
            sx = _util$absoluteScale2[0],
            sy = _util$absoluteScale2[1];

        var _util$topLeftPos = util.topLeftPos(this, offset),
            x = _util$topLeftPos.x,
            y = _util$topLeftPos.y;

        var subOffset = Object.assign({}, offset, {
            x: x,
            y: y,
            sx: offset.sx * this.scale.x,
            sy: offset.sy * this.scale.y,
            opacity: this.opacity * offset.opacity
        });

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
            for (var _iterator3 = this.children(exprId, state)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _ref5 = _step3.value;

                var _ref6 = _slicedToArray(_ref5, 2);

                var childId = _ref6[0];
                var subexprId = _ref6[1];

                stage.views[childId].draw(childId, subexprId, state, stage, subOffset);
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }

        (0, _core.debugDraw)(stage.ctx, this, offset);
    };

    projection.children = util.genericChildrenFunc(childrenFunc);

    return projection;
}

function vbox(childrenFunc) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var baseProjection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _core.roundedRect;

    if (options && options.padding) {
        options.padding = Object.assign({
            top: 5, left: 0, inner: 5, right: 0, bottom: 5
        }, options.padding);
    }
    var projection = baseProjection(Object.assign({
        horizontalAlign: 0.5,
        padding: { top: 5, left: 0, inner: 5, right: 0, bottom: 5 },
        subexpScale: 0.85,
        ellipsize: false
    }, options));
    var baseDraw = projection.draw;
    var basePrepare = projection.prepare;
    projection.type = "vbox";

    projection.isEllipsized = function (id, exprId, state) {
        var parent = state.getIn(["nodes", exprId, "parent"]);
        var parent2 = state.getIn(["nodes", parent, "parent"]);
        return this.ellipsize && id === exprId && // Are we the top-level projection for this expression?
        parent && parent2 && state.getIn(["nodes", exprId, "type"]) === state.getIn(["nodes", parent, "type"]) && state.getIn(["nodes", parent, "type"]) === state.getIn(["nodes", parent2, "type"]);
    };

    projection.prepare = function (id, exprId, state, stage) {
        if (this.isEllipsized(id, exprId, state)) {
            this.size.w = 50;
            this.size.h = 50;
            return;
        }

        basePrepare.call(id, exprId, state, stage);

        var maxX = 50;
        var y = this.padding.top;

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
            for (var _iterator4 = this.children(exprId, state)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var _ref7 = _step4.value;

                var _ref8 = _slicedToArray(_ref7, 2);

                var childId = _ref8[0];
                var subexprId = _ref8[1];

                var childProjection = stage.views[childId];

                childProjection.parent = this;

                if (!childProjection.animating) {
                    childProjection.pos.y = y;
                    childProjection.scale.x = this.subexpScale;
                    childProjection.scale.y = this.subexpScale;
                }

                childProjection.prepare(childId, subexprId, state, stage);
                y += childProjection.size.h * childProjection.scale.y + this.padding.inner;
                maxX = Math.max(maxX, childProjection.size.w * childProjection.scale.x);
            }
        } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                    _iterator4.return();
                }
            } finally {
                if (_didIteratorError4) {
                    throw _iteratorError4;
                }
            }
        }

        this.size.w = maxX + this.padding.left + this.padding.right;
        this.size.h = y - this.padding.inner + this.padding.bottom;
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
            for (var _iterator5 = this.children(exprId, state)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                var _ref9 = _step5.value;

                var _ref10 = _slicedToArray(_ref9, 1);

                var _childId2 = _ref10[0];

                var childProjection = stage.views[_childId2];
                if (childProjection.animating) continue;

                childProjection.pos.x = this.scale.x * this.padding.left + this.horizontalAlign * (this.size.w * this.scale.x - childProjection.size.w * childProjection.scale.x * this.scale.x);
            }
        } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion5 && _iterator5.return) {
                    _iterator5.return();
                }
            } finally {
                if (_didIteratorError5) {
                    throw _iteratorError5;
                }
            }
        }
    };
    projection.draw = function (id, exprId, state, stage, offset) {
        baseDraw.call(this, id, exprId, state, stage, offset);

        var _util$topLeftPos2 = util.topLeftPos(this, offset),
            x = _util$topLeftPos2.x,
            y = _util$topLeftPos2.y;

        if (this.isEllipsized(id, exprId, state)) {
            var _util$absoluteScale3 = util.absoluteScale(this, offset),
                _util$absoluteScale4 = _slicedToArray(_util$absoluteScale3, 2),
                sx = _util$absoluteScale4[0],
                sy = _util$absoluteScale4[1];

            var ctx = stage.ctx;


            ctx.save();
            ctx.globalAlpha = offset.opacity * this.opacity;
            ctx.fillStyle = "gray";
            var r = 5 * Math.min(sx, sy);
            var w = sx * (this.size.w - 4 * r);
            var h = sy * this.size.h;
            ctx.beginPath();
            ctx.arc(x + 2 * r, y + h / 2, r, 0, 2 * Math.PI, false);
            ctx.arc(x + 2 * r + w / 2, y + h / 2, r, 0, 2 * Math.PI, false);
            ctx.arc(x + 2 * r + w, y + h / 2, r, 0, 2 * Math.PI, false);
            ctx.fill();
            ctx.restore();

            return;
        }

        var subOffset = Object.assign({}, offset, {
            x: x,
            y: y,
            sx: offset.sx * this.scale.x,
            sy: offset.sy * this.scale.y,
            opacity: this.opacity * offset.opacity
        });
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
            for (var _iterator6 = this.children(exprId, state)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                var _ref11 = _step6.value;

                var _ref12 = _slicedToArray(_ref11, 2);

                var childId = _ref12[0];
                var subexprId = _ref12[1];

                stage.views[childId].draw(childId, subexprId, state, stage, subOffset);
            }
        } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion6 && _iterator6.return) {
                    _iterator6.return();
                }
            } finally {
                if (_didIteratorError6) {
                    throw _iteratorError6;
                }
            }
        }
    };

    projection.children = util.genericChildrenFunc(childrenFunc);

    return projection;
}

function previewer(projection) {
    var prepare = projection.prepare,
        draw = projection.draw;


    projection.prepare = function (id, exprId, state, stage) {
        if (this.preview && !this.prevPreview) {
            this.prevPreview = Object.assign({}, stage.getView(this.preview), {
                pos: this.pos,
                scale: {
                    x: this.scale.x,
                    y: this.scale.y
                },
                shadow: false,
                anchor: this.anchor,
                opacity: 1
            });
        } else if (!this.preview) {
            delete this.prevPreview;
        }
        if (this.preview) {
            this.prevPreview.prepare(this.preview, this.preview, state, stage);
            this.size = Object.assign({}, this.prevPreview.size);
            return;
        }

        prepare.call(this, id, exprId, state, stage);
    };

    projection.draw = function (id, exprId, state, stage, offset) {
        if (this.preview) {
            this.prevPreview.draw(this.preview, this.preview, state, stage, Object.assign({}, offset));
            return;
        }

        draw.call(this, id, exprId, state, stage, offset);
    };

    return projection;
}

function ratioSizer(projection, ratio, percentage) {
    var prepare = projection.prepare;

    projection.prepare = function (id, exprId, state, stage) {
        var w = percentage * stage.width;
        var h = ratio * w;
        this.size.w = w;
        this.size.h = h;
        prepare.call(this, id, exprId, state, stage);
    };

    return projection;
}

function ratioPlacer(projection, x, y) {
    var prepare = projection.prepare;

    projection.prepare = function (id, exprId, state, stage) {
        this.pos.x = x * stage.width;
        this.pos.y = y * stage.height;
        prepare.call(this, id, exprId, state, stage);
    };

    return projection;
}
},{"./animate":5,"./core":4,"./util":25}],28:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.triangle = triangle;
exports.circle = circle;
exports.rectangle = rectangle;
exports.star = star;

var _core = require("./core");

var _primitive = require("./primitive");

var primitive = _interopRequireWildcard(_primitive);

var _util = require("./util");

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// TODO: use these helpers everywhere
function shadow(ctx, exprId, projection, state, f) {
    var node = state.getIn(["nodes", exprId]);
    if (projection.shadow || node && (!node.get("parent") || !node.get("locked"))) {
        ctx.fillStyle = projection.shadowColor;
        f(projection.shadowOffset);
        ctx.fill();
    }
}

function drawPrimitive(exprId, projection, state, stage, offset, drawFunction) {
    var strokeFunction = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

    var ctx = stage.ctx;
    ctx.save();

    var node = state.getIn(["nodes", exprId]);
    var hasParent = node && Number.isInteger(node.get("parent"));
    var locked = !node || node.get("locked");
    var stroke = false;

    util.setOpacity(ctx, projection.opacity, offset);

    if (projection.stroke) {
        primitive.setStroke(ctx, projection);
        stroke = true;
    } else if (hasParent && !locked) {
        var _util$absoluteScale = util.absoluteScale(projection, offset),
            _util$absoluteScale2 = _slicedToArray(_util$absoluteScale, 2),
            sx = _util$absoluteScale2[0],
            sy = _util$absoluteScale2[1];

        ctx.fillStyle = "#000";
        primitive.setStroke(ctx, {
            lineWidth: 2,
            color: projection.highlightColor || "yellow"
        });
        primitive.roundRect(ctx, offset.x + projection.pos.x * offset.sx, offset.y + (projection.pos.y + 2) * offset.sy, offset.sx * projection.scale.x * projection.size.w, offset.sy * projection.scale.y * projection.size.h, sx * 22, true, stage.isHovered(exprId), null);
        ctx.fillStyle = "#555";
        primitive.roundRect(ctx, offset.x + projection.pos.x * offset.sx, offset.y + projection.pos.y * offset.sy, offset.sx * projection.scale.x * projection.size.w, offset.sy * projection.scale.y * projection.size.h, sx * 22, true, stage.isHovered(exprId), null);
    } else if ((!hasParent || !locked) && stage.isHovered(exprId)) {
        primitive.setStroke(ctx, {
            lineWidth: 2,
            color: projection.highlightColor || "yellow"
        });

        stroke = true;
    }

    shadow(ctx, exprId, projection, state, drawFunction);
    if (projection.color) ctx.fillStyle = projection.color;
    drawFunction(0);
    if (projection.color) ctx.fill();
    if (stroke && strokeFunction) strokeFunction();else if (stroke) ctx.stroke();

    (0, _core.debugDraw)(ctx, projection, offset);

    ctx.restore();
}

function shapeProjection(options) {
    return Object.assign((0, _core.baseProjection)(), {
        size: { w: 50, h: 50 },
        color: "gold",
        shadowColor: "#000",
        shadowOffset: 4,
        shadow: true // Always draw shadow
    }, options);
}

function triangle() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var projection = shapeProjection(options);
    projection.type = "triangle";

    projection.draw = function (id, exprId, state, stage, offset) {
        var _this = this;

        var ctx = stage.ctx;

        var _util$absoluteScale3 = util.absoluteScale(this, offset),
            _util$absoluteScale4 = _slicedToArray(_util$absoluteScale3, 2),
            sx = _util$absoluteScale4[0],
            sy = _util$absoluteScale4[1];

        drawPrimitive(exprId, this, state, stage, offset, function (dy) {
            var w = offset.sx * _this.scale.x * _this.size.w;
            var h = offset.sy * _this.scale.y * _this.size.h;

            var _util$topLeftPos = util.topLeftPos(_this, offset),
                x = _util$topLeftPos.x,
                y = _util$topLeftPos.y;

            x += 0.15 * w;
            y += 0.15 * h;
            w *= 0.7;
            h *= 0.7;

            ctx.beginPath();
            ctx.moveTo(x, y + h + dy);
            ctx.lineTo(x + w, y + h + dy);
            ctx.lineTo(x + w / 2.0, y + dy);
            ctx.closePath();
        });
    };
    return projection;
}

function circle() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var projection = shapeProjection(options);
    projection.type = "circle";

    projection.draw = function (id, exprId, state, stage, offset) {
        var _this2 = this;

        var ctx = stage.ctx;

        var _util$absoluteScale5 = util.absoluteScale(this, offset),
            _util$absoluteScale6 = _slicedToArray(_util$absoluteScale5, 2),
            sx = _util$absoluteScale6[0],
            sy = _util$absoluteScale6[1];

        drawPrimitive(exprId, this, state, stage, offset, function (dy) {
            var w = offset.sx * _this2.scale.x * _this2.size.w;
            var h = offset.sy * _this2.scale.y * _this2.size.h;

            var _util$topLeftPos2 = util.topLeftPos(_this2, offset),
                x = _util$topLeftPos2.x,
                y = _util$topLeftPos2.y;

            x += 0.15 * w;
            y += 0.15 * h;
            w *= 0.7;
            h *= 0.7;
            var rad = w / 2;

            ctx.beginPath();
            ctx.arc(x + rad, y + rad + dy, rad, 0, 2 * Math.PI);
        });
    };
    return projection;
}

function rectangle() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var projection = shapeProjection(options);
    projection.type = "rectangle";

    projection.draw = function (id, exprId, state, stage, offset) {
        var ctx = stage.ctx;

        var _util$absoluteScale7 = util.absoluteScale(this, offset),
            _util$absoluteScale8 = _slicedToArray(_util$absoluteScale7, 2),
            sx = _util$absoluteScale8[0],
            sy = _util$absoluteScale8[1];

        var w = offset.sx * this.scale.x * this.size.w;
        var h = offset.sy * this.scale.y * this.size.h;

        var _util$topLeftPos3 = util.topLeftPos(this, offset),
            x = _util$topLeftPos3.x,
            y = _util$topLeftPos3.y;

        x += 0.15 * w;
        y += 0.15 * h;
        w *= 0.7;
        h *= 0.7;

        drawPrimitive(id, this, state, stage, offset, function (dy) {
            ctx.beginPath();
            ctx.fillRect(x, y + dy, w, h);
        }, function (dy) {
            ctx.strokeRect(x, y, w, h);
        });
    };
    return projection;
}

function star() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var projection = shapeProjection(options);
    projection.type = "star";

    projection.draw = function (id, exprId, state, stage, offset) {
        var ctx = stage.ctx;

        var _util$absoluteScale9 = util.absoluteScale(this, offset),
            _util$absoluteScale10 = _slicedToArray(_util$absoluteScale9, 2),
            sx = _util$absoluteScale10[0],
            sy = _util$absoluteScale10[1];

        var w = offset.sx * this.scale.x * this.size.w;
        var h = offset.sy * this.scale.y * this.size.h;

        var _util$topLeftPos4 = util.topLeftPos(this, offset),
            x = _util$topLeftPos4.x,
            y = _util$topLeftPos4.y;

        x += 0.15 * w;
        y += 0.15 * h;
        w *= 0.7;
        h *= 0.7;

        drawPrimitive(id, this, state, stage, offset, function (dy) {
            primitive.drawStar(ctx, x + w / 2, y + h / 2 + dy, 5, w / 2, 0.5 * w / 2, false, false);
        });
    };
    return projection;
}
},{"./core":4,"./primitive":24,"./util":25}],29:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.button = button;
exports.imageButton = imageButton;

var _core = require("./core");

var gfx = _interopRequireWildcard(_core);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function button(stage, label, options) {
    if (typeof label === "string") {
        label = gfx.constant(stage.allocate(gfx.text(label, {
            fontSize: 32,
            color: "#FFF"
        })));
    }
    var projection = gfx.layout.hbox(label, {
        color: options.color || "lightblue",
        padding: {
            left: 20,
            right: 20,
            inner: 10
        },
        size: {
            w: 50,
            h: 70
        },
        anchor: {
            x: 0.5,
            y: 0.5
        },
        shadow: true,
        shadowColor: "black"
    });

    projection.onclick = function () {
        this.shadow = true;
        this.offset.y -= 3;

        if (options.click) options.click();
    };

    projection.onmousedown = function () {
        this.shadow = false;
        this.offset.y += 3;
    };

    return projection;
}

function imageButton(images, handlers) {
    var projection = gfx.baseProjection();

    var sprites = {
        normal: gfx.sprite({ image: images.normal }),
        hover: gfx.sprite({ image: images.hover }),
        active: gfx.sprite({ image: images.active })
    };

    projection.size = {
        w: images.normal.naturalWidth,
        h: images.normal.naturalHeight
    };

    var state = "normal";

    projection.onclick = function () {
        if (handlers.click) handlers.click();
        state = "normal";
    };

    projection.onmousedown = function () {
        state = "active";
    };

    projection.onmouseenter = function () {
        state = "hover";
    };

    projection.onmouseexit = function () {
        state = "normal";
    };

    projection.draw = function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        sprites[state].draw.apply(this, args);
    };

    projection.highlight = function () {
        state = "hover";
    };

    return projection;
}
},{"./core":4}],4:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ui = exports.shapes = exports.primitive = exports.layout = exports.custom = exports.decal = exports.hexaRect = exports.roundedRect = exports.rect = exports.util = exports.image = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
module gfx/core


exports.baseProjection = baseProjection;
exports.notchProjection = notchProjection;
exports.debugDraw = debugDraw;
exports.hoverOutline = hoverOutline;
exports.constant = constant;
exports.distance = distance;
exports.absolutePos = absolutePos;
exports.absoluteSize = absoluteSize;
exports.centerPos = centerPos;
exports.baseShape = baseShape;
exports.text = text;
exports.dynamic = dynamic;
exports.dynamicProperty = dynamicProperty;

var _decal = require("./decal");

Object.defineProperty(exports, "decal", {
    enumerable: true,
    get: function get() {
        return _interopRequireDefault(_decal).default;
    }
});

var _sprite = require("./sprite");

Object.keys(_sprite).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _sprite[key];
        }
    });
});

var _image = require("./image");

var image = _interopRequireWildcard(_image);

var _notch = require("./notch");

var notch = _interopRequireWildcard(_notch);

var _primitive = require("./primitive");

var primitive = _interopRequireWildcard(_primitive);

var _util = require("./util");

var util = _interopRequireWildcard(_util);

var _custom = require("./custom");

var custom = _interopRequireWildcard(_custom);

var _layout = require("./layout");

var layout = _interopRequireWildcard(_layout);

var _shapes = require("./shapes");

var shapes = _interopRequireWildcard(_shapes);

var _ui = require("./ui");

var ui = _interopRequireWildcard(_ui);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.image = image;
exports.util = util;


var DEBUG = false;
var DEBUG_COLORS = {
    "hbox": "blue",
    "vbox": "blue",
    "text": "green",
    "custom/argumentBar": "purple"
};

document.body.addEventListener("keyup", function (e) {
    if (e.key === "F2") DEBUG = !DEBUG;
});

function baseProjection(options) {
    var projection = Object.assign({
        pos: { x: 0, y: 0 },
        anchor: { x: 0, y: 0 },
        scale: { x: 1, y: 1 },
        size: { w: 0, h: 0 },
        opacity: 1.0,
        backgroundOpacity: 1.0,
        offset: { x: 0, y: 0 }
    }, options);

    if (options && options.notches) {
        projection.notches = notch.parseDescriptions(options.notches);
    }

    projection.prepare = function (id, exprId, state, stage) {};
    projection.draw = function (id, exprId, state, stage, offset) {};

    projection.children = function (exprId, state) {
        return [];
    };

    projection.containsPoint = function (pos, offset) {
        var _util$topLeftPos = util.topLeftPos(this, offset),
            x = _util$topLeftPos.x,
            y = _util$topLeftPos.y;

        return pos.x >= x && pos.y >= y && pos.x <= x + this.size.w * offset.sx * this.scale.x && pos.y <= y + this.size.h * offset.sy * this.scale.y;
    };

    projection.notchOffset = function (id, exprId, notchId) {};
    projection.notchPos = function (id, exprId, notchId) {
        var pos = util.topLeftPos(this, {
            x: 0,
            y: 0,
            sx: 1,
            sy: 1
        }); // Assume we are a top level expression
        var offset = this.notchOffset(id, exprId, notchId);
        return {
            x: pos.x + offset.x,
            y: pos.y + offset.y
        };
    };

    return projection;
}

function notchProjection(options) {
    var projection = baseProjection(options);
    projection.type = "notch";

    projection.prepare = function (id, exprId, state, stage) {
        if (this.notches) {
            var node = state.getIn(["nodes", exprId]);
            // TODO: don't hardcode this
            if (node.has("notch0")) {
                var childId = node.get("notch0");
                stage.views[childId].prepare(childId, childId, state, stage);
            }
        }
    };
    projection.draw = function (id, exprId, state, stage, offset) {
        var _this = this;

        if (this.notches) {
            var _util$topLeftPos2 = util.topLeftPos(this, offset),
                x = _util$topLeftPos2.x,
                y = _util$topLeftPos2.y;

            var ctx = stage.ctx;

            var draw = function draw(yOffset) {
                _this.size.h = 160;
                ctx.beginPath();
                ctx.moveTo(x, y + yOffset);
                _this.notches.drawSequence(ctx, "right", x, y + yOffset, _this.size.h);
                ctx.lineTo(x, y + _this.size.h + yOffset);
                ctx.closePath();
                ctx.fill();
                if (_this.highlighted || _this.stroke) ctx.stroke();
            };
            ctx.save();
            if (this.shadow) ctx.fillStyle = this.shadowColor;
            draw(this.shadowOffset);
            if (this.highlighted) {
                primitive.setStroke(ctx, {
                    lineWidth: 4,
                    color: "magenta"
                });
            } else if (this.stroke) {
                primitive.setStroke(ctx, this);
            } else {
                primitive.setStroke(ctx, null);
            }
            if (this.color) ctx.fillStyle = this.color;
            draw(0);
            ctx.restore();

            var node = state.getIn(["nodes", exprId]);
            // TODO: don't hardcode this
            if (node.has("notch0")) {
                var childId = node.get("notch0");
                var delta = stage.views[childId].notchOffset(childId, childId, 0);
                stage.views[childId].anchor.x = 0.0;
                stage.views[childId].anchor.y = 0.0;
                stage.views[childId].pos.x = this.pos.x - delta.x / 2;
                stage.views[childId].pos.y = this.pos.y + this.notchOffset(id, exprId, 0).y - delta.y;

                stage.views[childId].draw(childId, childId, state, stage, offset);
            }
        }
    };
    projection.notchOffset = function (id, exprId, notch) {
        return { x: 0, y: this.size.h / 2 };
    };
    return projection;
}

function debugDraw(ctx, projection, offset) {
    if (DEBUG) {
        var _util$absoluteScale = util.absoluteScale(projection, offset),
            _util$absoluteScale2 = _slicedToArray(_util$absoluteScale, 2),
            sx = _util$absoluteScale2[0],
            sy = _util$absoluteScale2[1];

        var _util$topLeftPos3 = util.topLeftPos(projection, offset),
            x = _util$topLeftPos3.x,
            y = _util$topLeftPos3.y;

        ctx.save();
        ctx.strokeStyle = DEBUG_COLORS[projection.type] || "red";
        ctx.lineWidth = 1;
        ctx.strokeRect(x, y, projection.size.w * sx, projection.size.h * sy);
        ctx.restore();
    }
}

function hoverOutline(id, projection, stage, offset) {
    if (stage.isHovered(id)) {
        var _util$topLeftPos4 = util.topLeftPos(projection, offset),
            x = _util$topLeftPos4.x,
            y = _util$topLeftPos4.y;

        primitive.setStroke(stage.ctx, {
            lineWidth: 2,
            color: projection.highlightColor || "yellow"
        });

        primitive.roundRect(stage.ctx, x, y, offset.sx * projection.scale.x * projection.size.w, offset.sy * projection.scale.y * projection.size.h, projection.scale.x * offset.sx * (projection.radius || 15), false, true, projection.stroke ? projection.stroke.opacity : null);
    }
}

function constant() {
    for (var _len = arguments.length, projections = Array(_len), _key = 0; _key < _len; _key++) {
        projections[_key] = arguments[_key];
    }

    return function () {
        return projections;
    };
}

function distance(proj1, proj2) {
    var p1 = proj1.pos || proj1;
    var p2 = proj2.pos || proj2;
    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}

function absolutePos(projection) {
    var _projection$pos = projection.pos,
        x = _projection$pos.x,
        y = _projection$pos.y;

    x -= projection.anchor.x * projection.size.w * projection.scale.x;
    y -= projection.anchor.y * projection.size.h * projection.scale.y;

    while (projection.parent) {
        projection = projection.parent;
        x *= projection.scale.x;
        y *= projection.scale.y;
        x += projection.pos.x - projection.anchor.x * projection.size.w * projection.scale.x;
        y += projection.pos.y - projection.anchor.y * projection.size.h * projection.scale.y;
    }
    return { x: x, y: y };
}

function absoluteSize(projection) {
    var _projection$size = projection.size,
        w = _projection$size.w,
        h = _projection$size.h;

    w *= projection.scale.x;
    h *= projection.scale.y;
    while (projection.parent) {
        projection = projection.parent;
        w *= projection.scale.x;
        h *= projection.scale.y;
    }
    return { w: w, h: h };
}

function centerPos(projection) {
    var _absolutePos = absolutePos(projection),
        x = _absolutePos.x,
        y = _absolutePos.y;

    var _absoluteSize = absoluteSize(projection),
        w = _absoluteSize.w,
        h = _absoluteSize.h;

    return {
        x: x + w / 2,
        y: y + h / 2
    };
}

function baseShape(name, defaults, draw) {
    var baseShapeOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    return function (options) {
        var projection = Object.assign(baseProjection(), defaults, options);
        projection.size.w = projection.size.h = 40;
        projection.type = name;

        if (options.notches) {
            projection.notches = notch.parseDescriptions(options.notches);
        }

        projection.prepare = function (id, exprId, state, stage) {};

        if (baseShapeOptions.prepare) {
            projection.prepare = function () {
                baseShapeOptions.prepare.apply(baseShapeOptions, arguments);
            };
        }

        projection.draw = function (id, exprId, state, stage, offset) {
            var ctx = stage.ctx;
            ctx.save();

            var _util$absoluteScale3 = util.absoluteScale(this, offset),
                _util$absoluteScale4 = _slicedToArray(_util$absoluteScale3, 2),
                sx = _util$absoluteScale4[0],
                sy = _util$absoluteScale4[1];

            var _util$topLeftPos5 = util.topLeftPos(this, offset),
                x = _util$topLeftPos5.x,
                y = _util$topLeftPos5.y;

            util.setOpacity(ctx, this.opacity, offset, this.backgroundOpacity);

            var node = state.getIn(["nodes", exprId]);

            if (this.shadow !== false && (this.shadow || node && (!node.get("parent") || !node.get("locked")))) {
                ctx.fillStyle = this.shadowColor;
                draw(ctx, this, x, y + this.shadowOffset * offset.sy, offset.sx * this.scale.x * this.size.w, offset.sy * this.scale.y * this.size.h, sx, sy, this.stroke, this.notches);
            }

            if (this.color) ctx.fillStyle = this.color;

            var shouldStroke = false;
            if (this.stroke || this.outerStroke) {
                shouldStroke = true;
                primitive.setStroke(ctx, this.stroke || this.outerStroke);
            } else if (stage.isHovered(id)) {
                primitive.setStroke(ctx, {
                    lineWidth: 2,
                    color: this.highlightColor || "yellow"
                });
                shouldStroke = true;
            } else if (!!(node && node.get("parent") && node.get("locked")) && this.strokeWhenChild) {
                // Stroke if we have a parent to make it clearer.
                primitive.setStroke(ctx, {
                    lineWidth: 1,
                    color: "gray"
                });
                shouldStroke = true;
            } else {
                primitive.setStroke(ctx, null);
            }

            if (node && !node.get("parent") && stage.semantics.kind(node) === "expression") {
                if (node.get("complete")) {
                    ctx.shadowColor = "DeepPink";
                    ctx.shadowBlur = 10;
                    ctx.shadowOffsetY = 0;
                }
            }

            draw(ctx, this, x, y, offset.sx * this.scale.x * this.size.w, offset.sy * this.scale.y * this.size.h, sx, sy, this.stroke || shouldStroke, this.notches);
            debugDraw(ctx, this, offset);

            ctx.restore();
        };

        if (baseShapeOptions.notchOffset) {
            projection.notchOffset = baseShapeOptions.notchOffset;
        }

        return projection;
    };
}

var rect = exports.rect = baseShape("roundedRect", {
    color: "lightgray",
    radius: 20,
    shadowColor: "#000",
    shadowOffset: 4,
    strokeWhenChild: true
}, function (ctx, projection, x, y, w, h, sx, sy, shouldStroke, notches) {
    ctx.fillRect(x, y, w, h);
    if (shouldStroke) {
        // TODO: stroke opacity, etc
        ctx.strokeRect(x, y, w, h);
    }
    // TODO: notches
});

var roundedRect = exports.roundedRect = baseShape("roundedRect", {
    color: "lightgray",
    radius: 18,
    shadowColor: "#000",
    shadowOffset: 4,
    strokeWhenChild: true // Draw border when child of another expression
}, function (ctx, projection, x, y, w, h, sx, sy, shouldStroke, notches) {
    primitive.roundRect(ctx, x, y, w, h, sx * projection.radius, projection.color ? true : false, shouldStroke, projection.stroke ? projection.stroke.opacity : null, notches);
}, {
    notchOffset: function notchOffset(id, exprId, notchIdx) {
        var notch = this.notches.get(notchIdx);
        switch (notch.side) {
            case "left":
                return {
                    x: 0,
                    y: this.radius + (this.size.h - this.radius) * (1 - notch.relpos) * this.scale.y
                };
            case "right":
                return {
                    x: this.size.w * this.scale.x,
                    y: (this.radius + (this.size.h - this.radius * 2) * notch.relpos) * this.scale.y
                };
            case "top":
                return {
                    x: this.radius + (this.size.w - this.radius * 2) * notch.relpos,
                    y: 0
                };
            case "bottom":
                return {
                    x: this.radius + (this.size.w - this.radius * 2) * (1 - notch.relpos),
                    y: this.size.h
                };
            default:
                throw "roundedRect#notchOffset: unrecognized side " + notch.side;
        }
    }
});

var hexaRect = exports.hexaRect = baseShape("hexaRect", {
    color: "lightgray",
    radius: 20,
    shadowColor: "#000",
    shadowOffset: 4,
    strokeWhenChild: true // Draw border when child of another expression
}, function (ctx, projection, x, y, w, h, sx, sy, shouldStroke) {
    primitive.hexaRect(ctx, x, y, w, h, Math.min(25, w / 2), h / 2, projection.color ? true : false, shouldStroke, projection.stroke ? projection.stroke.opacity : null);
});

// TODO: make this part of the stage instead?
var TEXT_SIZE_CACHE = {};

function text(txt, options) {
    var projection = baseProjection(Object.assign({
        text: txt,
        fontSize: 28,
        font: text.mono,
        color: "#000",
        type: "text"
    }, options));

    projection.prepare = function (id, exprId, state, stage) {
        var curText = typeof this.text === "function" ? this.text(state, exprId) : this.text;

        var cacheKey = this.fontSize + ";" + this.font + ";" + curText;
        if (TEXT_SIZE_CACHE[cacheKey] === undefined) {
            stage.ctx.font = this.fontSize + "px " + this.font;
            TEXT_SIZE_CACHE[cacheKey] = stage.ctx.measureText(curText).width;
        }
        this.size.h = this.fontSize * 1.35;
        this.size.w = TEXT_SIZE_CACHE[cacheKey];
    };
    projection.draw = function (id, exprId, state, stage, offset) {
        var curText = typeof this.text === "function" ? this.text(state, exprId) : this.text;
        var ctx = stage.ctx;

        var _util$absoluteScale5 = util.absoluteScale(this, offset),
            _util$absoluteScale6 = _slicedToArray(_util$absoluteScale5, 2),
            sx = _util$absoluteScale6[0],
            sy = _util$absoluteScale6[1];

        ctx.save();

        debugDraw(ctx, this, offset);

        util.setOpacity(ctx, this.opacity, offset);

        ctx.scale(sx, sy);
        ctx.fillStyle = this.color;
        ctx.textBaseline = "alphabetic";
        ctx.font = this.fontSize + "px " + this.font;
        ctx.fillText(curText, (offset.x + this.pos.x * offset.sx) / sx, (offset.y + this.pos.y * offset.sy) / sy + this.fontSize);
        if (this.stroke) {
            primitive.setStroke(ctx, this.stroke);
            ctx.strokeText(curText, (offset.x + this.pos.x * offset.sx) / sx, (offset.y + this.pos.y * offset.sy) / sy + this.fontSize);
        }
        ctx.restore();

        if (stage.isHovered(id) || this.outerStroke) {
            ctx.save();

            var _util$topLeftPos6 = util.topLeftPos(this, offset),
                x = _util$topLeftPos6.x,
                y = _util$topLeftPos6.y;

            if (this.outerStroke) {
                primitive.setStroke(ctx, this.outerStroke);
            } else {
                primitive.setStroke(ctx, {
                    lineWidth: 2,
                    color: this.highlightColor || "yellow"
                });
            }

            primitive.roundRect(ctx, x, y, offset.sx * this.scale.x * this.size.w, offset.sy * this.scale.y * this.size.h, this.scale.x * offset.sx * (this.radius || 15), false, true, this.stroke);
            ctx.restore();
        }
    };
    return projection;
}

// Font family definitions
text.mono = "'Fira Mono', Consolas, Monaco, monospace";
text.sans = "'Fira Sans', Arial, sans-serif";
text.script = "'Nanum Pen Script', 'Comic Sans', cursive";

/**
 * Create a projection that renders based on an expression field or function.
 *
 * Note that all projections must have compatible fields.
 */
function dynamic(mapping, keyFunc, options) {
    var projection = {};
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = Object.values(mapping)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var childProjection = _step.value;

            projection = Object.assign(projection, childProjection);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    projection.type = "dynamic";

    if (typeof keyFunc === "string") {
        var field = keyFunc;
        keyFunc = function keyFunc(state, exprId) {
            var expr = state.getIn(["nodes", exprId]);
            return expr.get(field);
        };
    }

    projection.prepare = function (id, exprId, state, stage) {
        var newKey = keyFunc(state, exprId);
        if (options.onKeyChange && this.dynamicKey && newKey !== this.dynamicKey) {
            this.dynamicKey = newKey;
            options.onKeyChange(this, id, exprId, state, stage);
        }
        this.dynamicKey = newKey;

        var proj = mapping["__default__"];
        if (typeof mapping[this.dynamicKey] !== "undefined") {
            proj = mapping[this.dynamicKey];
        }
        this.children = proj.children;

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = (options.resetFields || [])[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var fieldName = _step2.value;

                this[fieldName] = proj[fieldName];
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }

        proj.prepare.call(this, id, exprId, state, stage);
    };

    projection.draw = function (id, exprId, state, stage, offset) {
        if (typeof mapping[this.dynamicKey] !== "undefined") {
            this.children = mapping[this.dynamicKey].children;
            mapping[this.dynamicKey].draw.call(this, id, exprId, state, stage, offset);
        } else {
            this.children = mapping["__default__"].children;
            mapping["__default__"].draw.call(this, id, exprId, state, stage, offset);
        }
    };

    return projection;
}

/**
 * Create a projection that changes values based on an expression field or function.
 */
function dynamicProperty(projection, keyFunc, mappings) {
    if (typeof keyFunc === "string") {
        var field = keyFunc;
        keyFunc = function keyFunc(state, exprId) {
            var expr = state.getIn(["nodes", exprId]);
            return expr.get(field);
        };
    }

    var origPrepare = projection.prepare;
    var lastKey = "default";
    var lastTween = null;

    projection.prepare = function (id, exprId, state, stage) {
        var fieldVal = keyFunc(state, exprId);
        if (fieldVal !== lastKey) {
            lastKey = fieldVal;

            var props = mappings[fieldVal];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = Object.entries(props)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _ref = _step3.value;

                    var _ref2 = _slicedToArray(_ref, 2);

                    var prop = _ref2[0];
                    var val = _ref2[1];

                    if (typeof val === "function") {
                        if (lastTween) lastTween.completed();
                        lastTween = val(this);
                    } else {
                        this[prop] = val;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }

        origPrepare.call(this, id, exprId, state, stage);
    };

    return projection;
}

exports.custom = custom;
exports.layout = layout;
exports.primitive = primitive;
exports.shapes = shapes;
exports.ui = ui;
},{"./decal":20,"./sprite":21,"./image":22,"./notch":23,"./primitive":24,"./util":25,"./custom":26,"./layout":27,"./shapes":28,"./ui":29}],70:[function(require,module,exports) {
var global = (1,eval)("this");
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.Immutable = factory());
}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;

  function createClass(ctor, superClass) {
    if (superClass) {
      ctor.prototype = Object.create(superClass.prototype);
    }
    ctor.prototype.constructor = ctor;
  }

  function Iterable(value) {
      return isIterable(value) ? value : Seq(value);
    }


  createClass(KeyedIterable, Iterable);
    function KeyedIterable(value) {
      return isKeyed(value) ? value : KeyedSeq(value);
    }


  createClass(IndexedIterable, Iterable);
    function IndexedIterable(value) {
      return isIndexed(value) ? value : IndexedSeq(value);
    }


  createClass(SetIterable, Iterable);
    function SetIterable(value) {
      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
    }



  function isIterable(maybeIterable) {
    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
  }

  function isKeyed(maybeKeyed) {
    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
  }

  function isIndexed(maybeIndexed) {
    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
  }

  function isAssociative(maybeAssociative) {
    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
  }

  function isOrdered(maybeOrdered) {
    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
  }

  Iterable.isIterable = isIterable;
  Iterable.isKeyed = isKeyed;
  Iterable.isIndexed = isIndexed;
  Iterable.isAssociative = isAssociative;
  Iterable.isOrdered = isOrdered;

  Iterable.Keyed = KeyedIterable;
  Iterable.Indexed = IndexedIterable;
  Iterable.Set = SetIterable;


  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  // Used for setting prototype methods that IE8 chokes on.
  var DELETE = 'delete';

  // Constants describing the size of trie nodes.
  var SHIFT = 5; // Resulted in best performance after ______?
  var SIZE = 1 << SHIFT;
  var MASK = SIZE - 1;

  // A consistent shared value representing "not set" which equals nothing other
  // than itself, and nothing that could be provided externally.
  var NOT_SET = {};

  // Boolean references, Rough equivalent of `bool &`.
  var CHANGE_LENGTH = { value: false };
  var DID_ALTER = { value: false };

  function MakeRef(ref) {
    ref.value = false;
    return ref;
  }

  function SetRef(ref) {
    ref && (ref.value = true);
  }

  // A function which returns a value representing an "owner" for transient writes
  // to tries. The return value will only ever equal itself, and will not equal
  // the return of any subsequent call of this function.
  function OwnerID() {}

  // http://jsperf.com/copy-array-inline
  function arrCopy(arr, offset) {
    offset = offset || 0;
    var len = Math.max(0, arr.length - offset);
    var newArr = new Array(len);
    for (var ii = 0; ii < len; ii++) {
      newArr[ii] = arr[ii + offset];
    }
    return newArr;
  }

  function ensureSize(iter) {
    if (iter.size === undefined) {
      iter.size = iter.__iterate(returnTrue);
    }
    return iter.size;
  }

  function wrapIndex(iter, index) {
    // This implements "is array index" which the ECMAString spec defines as:
    //
    //     A String property name P is an array index if and only if
    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
    //     to 2^32−1.
    //
    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
    if (typeof index !== 'number') {
      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
      if ('' + uint32Index !== index || uint32Index === 4294967295) {
        return NaN;
      }
      index = uint32Index;
    }
    return index < 0 ? ensureSize(iter) + index : index;
  }

  function returnTrue() {
    return true;
  }

  function wholeSlice(begin, end, size) {
    return (begin === 0 || (size !== undefined && begin <= -size)) &&
      (end === undefined || (size !== undefined && end >= size));
  }

  function resolveBegin(begin, size) {
    return resolveIndex(begin, size, 0);
  }

  function resolveEnd(end, size) {
    return resolveIndex(end, size, size);
  }

  function resolveIndex(index, size, defaultIndex) {
    return index === undefined ?
      defaultIndex :
      index < 0 ?
        Math.max(0, size + index) :
        size === undefined ?
          index :
          Math.min(size, index);
  }

  /* global Symbol */

  var ITERATE_KEYS = 0;
  var ITERATE_VALUES = 1;
  var ITERATE_ENTRIES = 2;

  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';

  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;


  function Iterator(next) {
      this.next = next;
    }

    Iterator.prototype.toString = function() {
      return '[Iterator]';
    };


  Iterator.KEYS = ITERATE_KEYS;
  Iterator.VALUES = ITERATE_VALUES;
  Iterator.ENTRIES = ITERATE_ENTRIES;

  Iterator.prototype.inspect =
  Iterator.prototype.toSource = function () { return this.toString(); }
  Iterator.prototype[ITERATOR_SYMBOL] = function () {
    return this;
  };


  function iteratorValue(type, k, v, iteratorResult) {
    var value = type === 0 ? k : type === 1 ? v : [k, v];
    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {
      value: value, done: false
    });
    return iteratorResult;
  }

  function iteratorDone() {
    return { value: undefined, done: true };
  }

  function hasIterator(maybeIterable) {
    return !!getIteratorFn(maybeIterable);
  }

  function isIterator(maybeIterator) {
    return maybeIterator && typeof maybeIterator.next === 'function';
  }

  function getIterator(iterable) {
    var iteratorFn = getIteratorFn(iterable);
    return iteratorFn && iteratorFn.call(iterable);
  }

  function getIteratorFn(iterable) {
    var iteratorFn = iterable && (
      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
      iterable[FAUX_ITERATOR_SYMBOL]
    );
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  function isArrayLike(value) {
    return value && typeof value.length === 'number';
  }

  createClass(Seq, Iterable);
    function Seq(value) {
      return value === null || value === undefined ? emptySequence() :
        isIterable(value) ? value.toSeq() : seqFromValue(value);
    }

    Seq.of = function(/*...values*/) {
      return Seq(arguments);
    };

    Seq.prototype.toSeq = function() {
      return this;
    };

    Seq.prototype.toString = function() {
      return this.__toString('Seq {', '}');
    };

    Seq.prototype.cacheResult = function() {
      if (!this._cache && this.__iterateUncached) {
        this._cache = this.entrySeq().toArray();
        this.size = this._cache.length;
      }
      return this;
    };

    // abstract __iterateUncached(fn, reverse)

    Seq.prototype.__iterate = function(fn, reverse) {
      return seqIterate(this, fn, reverse, true);
    };

    // abstract __iteratorUncached(type, reverse)

    Seq.prototype.__iterator = function(type, reverse) {
      return seqIterator(this, type, reverse, true);
    };



  createClass(KeyedSeq, Seq);
    function KeyedSeq(value) {
      return value === null || value === undefined ?
        emptySequence().toKeyedSeq() :
        isIterable(value) ?
          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :
          keyedSeqFromValue(value);
    }

    KeyedSeq.prototype.toKeyedSeq = function() {
      return this;
    };



  createClass(IndexedSeq, Seq);
    function IndexedSeq(value) {
      return value === null || value === undefined ? emptySequence() :
        !isIterable(value) ? indexedSeqFromValue(value) :
        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
    }

    IndexedSeq.of = function(/*...values*/) {
      return IndexedSeq(arguments);
    };

    IndexedSeq.prototype.toIndexedSeq = function() {
      return this;
    };

    IndexedSeq.prototype.toString = function() {
      return this.__toString('Seq [', ']');
    };

    IndexedSeq.prototype.__iterate = function(fn, reverse) {
      return seqIterate(this, fn, reverse, false);
    };

    IndexedSeq.prototype.__iterator = function(type, reverse) {
      return seqIterator(this, type, reverse, false);
    };



  createClass(SetSeq, Seq);
    function SetSeq(value) {
      return (
        value === null || value === undefined ? emptySequence() :
        !isIterable(value) ? indexedSeqFromValue(value) :
        isKeyed(value) ? value.entrySeq() : value
      ).toSetSeq();
    }

    SetSeq.of = function(/*...values*/) {
      return SetSeq(arguments);
    };

    SetSeq.prototype.toSetSeq = function() {
      return this;
    };



  Seq.isSeq = isSeq;
  Seq.Keyed = KeyedSeq;
  Seq.Set = SetSeq;
  Seq.Indexed = IndexedSeq;

  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

  Seq.prototype[IS_SEQ_SENTINEL] = true;



  createClass(ArraySeq, IndexedSeq);
    function ArraySeq(array) {
      this._array = array;
      this.size = array.length;
    }

    ArraySeq.prototype.get = function(index, notSetValue) {
      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
    };

    ArraySeq.prototype.__iterate = function(fn, reverse) {
      var array = this._array;
      var maxIndex = array.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
          return ii + 1;
        }
      }
      return ii;
    };

    ArraySeq.prototype.__iterator = function(type, reverse) {
      var array = this._array;
      var maxIndex = array.length - 1;
      var ii = 0;
      return new Iterator(function() 
        {return ii > maxIndex ?
          iteratorDone() :
          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}
      );
    };



  createClass(ObjectSeq, KeyedSeq);
    function ObjectSeq(object) {
      var keys = Object.keys(object);
      this._object = object;
      this._keys = keys;
      this.size = keys.length;
    }

    ObjectSeq.prototype.get = function(key, notSetValue) {
      if (notSetValue !== undefined && !this.has(key)) {
        return notSetValue;
      }
      return this._object[key];
    };

    ObjectSeq.prototype.has = function(key) {
      return this._object.hasOwnProperty(key);
    };

    ObjectSeq.prototype.__iterate = function(fn, reverse) {
      var object = this._object;
      var keys = this._keys;
      var maxIndex = keys.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        var key = keys[reverse ? maxIndex - ii : ii];
        if (fn(object[key], key, this) === false) {
          return ii + 1;
        }
      }
      return ii;
    };

    ObjectSeq.prototype.__iterator = function(type, reverse) {
      var object = this._object;
      var keys = this._keys;
      var maxIndex = keys.length - 1;
      var ii = 0;
      return new Iterator(function()  {
        var key = keys[reverse ? maxIndex - ii : ii];
        return ii++ > maxIndex ?
          iteratorDone() :
          iteratorValue(type, key, object[key]);
      });
    };

  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;


  createClass(IterableSeq, IndexedSeq);
    function IterableSeq(iterable) {
      this._iterable = iterable;
      this.size = iterable.length || iterable.size;
    }

    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterable = this._iterable;
      var iterator = getIterator(iterable);
      var iterations = 0;
      if (isIterator(iterator)) {
        var step;
        while (!(step = iterator.next()).done) {
          if (fn(step.value, iterations++, this) === false) {
            break;
          }
        }
      }
      return iterations;
    };

    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterable = this._iterable;
      var iterator = getIterator(iterable);
      if (!isIterator(iterator)) {
        return new Iterator(iteratorDone);
      }
      var iterations = 0;
      return new Iterator(function()  {
        var step = iterator.next();
        return step.done ? step : iteratorValue(type, iterations++, step.value);
      });
    };



  createClass(IteratorSeq, IndexedSeq);
    function IteratorSeq(iterator) {
      this._iterator = iterator;
      this._iteratorCache = [];
    }

    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterator = this._iterator;
      var cache = this._iteratorCache;
      var iterations = 0;
      while (iterations < cache.length) {
        if (fn(cache[iterations], iterations++, this) === false) {
          return iterations;
        }
      }
      var step;
      while (!(step = iterator.next()).done) {
        var val = step.value;
        cache[iterations] = val;
        if (fn(val, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };

    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = this._iterator;
      var cache = this._iteratorCache;
      var iterations = 0;
      return new Iterator(function()  {
        if (iterations >= cache.length) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          cache[iterations] = step.value;
        }
        return iteratorValue(type, iterations, cache[iterations++]);
      });
    };




  // # pragma Helper functions

  function isSeq(maybeSeq) {
    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
  }

  var EMPTY_SEQ;

  function emptySequence() {
    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
  }

  function keyedSeqFromValue(value) {
    var seq =
      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :
      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :
      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :
      typeof value === 'object' ? new ObjectSeq(value) :
      undefined;
    if (!seq) {
      throw new TypeError(
        'Expected Array or iterable object of [k, v] entries, '+
        'or keyed object: ' + value
      );
    }
    return seq;
  }

  function indexedSeqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (!seq) {
      throw new TypeError(
        'Expected Array or iterable object of values: ' + value
      );
    }
    return seq;
  }

  function seqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value) ||
      (typeof value === 'object' && new ObjectSeq(value));
    if (!seq) {
      throw new TypeError(
        'Expected Array or iterable object of values, or keyed object: ' + value
      );
    }
    return seq;
  }

  function maybeIndexedSeqFromValue(value) {
    return (
      isArrayLike(value) ? new ArraySeq(value) :
      isIterator(value) ? new IteratorSeq(value) :
      hasIterator(value) ? new IterableSeq(value) :
      undefined
    );
  }

  function seqIterate(seq, fn, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        var entry = cache[reverse ? maxIndex - ii : ii];
        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
          return ii + 1;
        }
      }
      return ii;
    }
    return seq.__iterateUncached(fn, reverse);
  }

  function seqIterator(seq, type, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      var ii = 0;
      return new Iterator(function()  {
        var entry = cache[reverse ? maxIndex - ii : ii];
        return ii++ > maxIndex ?
          iteratorDone() :
          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
      });
    }
    return seq.__iteratorUncached(type, reverse);
  }

  function fromJS(json, converter) {
    return converter ?
      fromJSWith(converter, json, '', {'': json}) :
      fromJSDefault(json);
  }

  function fromJSWith(converter, json, key, parentJSON) {
    if (Array.isArray(json)) {
      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
    }
    if (isPlainObj(json)) {
      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
    }
    return json;
  }

  function fromJSDefault(json) {
    if (Array.isArray(json)) {
      return IndexedSeq(json).map(fromJSDefault).toList();
    }
    if (isPlainObj(json)) {
      return KeyedSeq(json).map(fromJSDefault).toMap();
    }
    return json;
  }

  function isPlainObj(value) {
    return value && (value.constructor === Object || value.constructor === undefined);
  }

  /**
   * An extension of the "same-value" algorithm as [described for use by ES6 Map
   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
   *
   * NaN is considered the same as NaN, however -0 and 0 are considered the same
   * value, which is different from the algorithm described by
   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
   *
   * This is extended further to allow Objects to describe the values they
   * represent, by way of `valueOf` or `equals` (and `hashCode`).
   *
   * Note: because of this extension, the key equality of Immutable.Map and the
   * value equality of Immutable.Set will differ from ES6 Map and Set.
   *
   * ### Defining custom values
   *
   * The easiest way to describe the value an object represents is by implementing
   * `valueOf`. For example, `Date` represents a value by returning a unix
   * timestamp for `valueOf`:
   *
   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
   *     var date2 = new Date(1234567890000);
   *     date1.valueOf(); // 1234567890000
   *     assert( date1 !== date2 );
   *     assert( Immutable.is( date1, date2 ) );
   *
   * Note: overriding `valueOf` may have other implications if you use this object
   * where JavaScript expects a primitive, such as implicit string coercion.
   *
   * For more complex types, especially collections, implementing `valueOf` may
   * not be performant. An alternative is to implement `equals` and `hashCode`.
   *
   * `equals` takes another object, presumably of similar type, and returns true
   * if the it is equal. Equality is symmetrical, so the same result should be
   * returned if this and the argument are flipped.
   *
   *     assert( a.equals(b) === b.equals(a) );
   *
   * `hashCode` returns a 32bit integer number representing the object which will
   * be used to determine how to store the value object in a Map or Set. You must
   * provide both or neither methods, one must not exist without the other.
   *
   * Also, an important relationship between these methods must be upheld: if two
   * values are equal, they *must* return the same hashCode. If the values are not
   * equal, they might have the same hashCode; this is called a hash collision,
   * and while undesirable for performance reasons, it is acceptable.
   *
   *     if (a.equals(b)) {
   *       assert( a.hashCode() === b.hashCode() );
   *     }
   *
   * All Immutable collections implement `equals` and `hashCode`.
   *
   */
  function is(valueA, valueB) {
    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
    if (typeof valueA.valueOf === 'function' &&
        typeof valueB.valueOf === 'function') {
      valueA = valueA.valueOf();
      valueB = valueB.valueOf();
      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
    }
    if (typeof valueA.equals === 'function' &&
        typeof valueB.equals === 'function' &&
        valueA.equals(valueB)) {
      return true;
    }
    return false;
  }

  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }

    if (
      !isIterable(b) ||
      a.size !== undefined && b.size !== undefined && a.size !== b.size ||
      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||
      isKeyed(a) !== isKeyed(b) ||
      isIndexed(a) !== isIndexed(b) ||
      isOrdered(a) !== isOrdered(b)
    ) {
      return false;
    }

    if (a.size === 0 && b.size === 0) {
      return true;
    }

    var notAssociative = !isAssociative(a);

    if (isOrdered(a)) {
      var entries = a.entries();
      return b.every(function(v, k)  {
        var entry = entries.next().value;
        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
      }) && entries.next().done;
    }

    var flipped = false;

    if (a.size === undefined) {
      if (b.size === undefined) {
        if (typeof a.cacheResult === 'function') {
          a.cacheResult();
        }
      } else {
        flipped = true;
        var _ = a;
        a = b;
        b = _;
      }
    }

    var allEqual = true;
    var bSize = b.__iterate(function(v, k)  {
      if (notAssociative ? !a.has(v) :
          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
        allEqual = false;
        return false;
      }
    });

    return allEqual && a.size === bSize;
  }

  createClass(Repeat, IndexedSeq);

    function Repeat(value, times) {
      if (!(this instanceof Repeat)) {
        return new Repeat(value, times);
      }
      this._value = value;
      this.size = times === undefined ? Infinity : Math.max(0, times);
      if (this.size === 0) {
        if (EMPTY_REPEAT) {
          return EMPTY_REPEAT;
        }
        EMPTY_REPEAT = this;
      }
    }

    Repeat.prototype.toString = function() {
      if (this.size === 0) {
        return 'Repeat []';
      }
      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
    };

    Repeat.prototype.get = function(index, notSetValue) {
      return this.has(index) ? this._value : notSetValue;
    };

    Repeat.prototype.includes = function(searchValue) {
      return is(this._value, searchValue);
    };

    Repeat.prototype.slice = function(begin, end) {
      var size = this.size;
      return wholeSlice(begin, end, size) ? this :
        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
    };

    Repeat.prototype.reverse = function() {
      return this;
    };

    Repeat.prototype.indexOf = function(searchValue) {
      if (is(this._value, searchValue)) {
        return 0;
      }
      return -1;
    };

    Repeat.prototype.lastIndexOf = function(searchValue) {
      if (is(this._value, searchValue)) {
        return this.size;
      }
      return -1;
    };

    Repeat.prototype.__iterate = function(fn, reverse) {
      for (var ii = 0; ii < this.size; ii++) {
        if (fn(this._value, ii, this) === false) {
          return ii + 1;
        }
      }
      return ii;
    };

    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;
      var ii = 0;
      return new Iterator(function() 
        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}
      );
    };

    Repeat.prototype.equals = function(other) {
      return other instanceof Repeat ?
        is(this._value, other._value) :
        deepEqual(other);
    };


  var EMPTY_REPEAT;

  function invariant(condition, error) {
    if (!condition) throw new Error(error);
  }

  createClass(Range, IndexedSeq);

    function Range(start, end, step) {
      if (!(this instanceof Range)) {
        return new Range(start, end, step);
      }
      invariant(step !== 0, 'Cannot step a Range by 0');
      start = start || 0;
      if (end === undefined) {
        end = Infinity;
      }
      step = step === undefined ? 1 : Math.abs(step);
      if (end < start) {
        step = -step;
      }
      this._start = start;
      this._end = end;
      this._step = step;
      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
      if (this.size === 0) {
        if (EMPTY_RANGE) {
          return EMPTY_RANGE;
        }
        EMPTY_RANGE = this;
      }
    }

    Range.prototype.toString = function() {
      if (this.size === 0) {
        return 'Range []';
      }
      return 'Range [ ' +
        this._start + '...' + this._end +
        (this._step !== 1 ? ' by ' + this._step : '') +
      ' ]';
    };

    Range.prototype.get = function(index, notSetValue) {
      return this.has(index) ?
        this._start + wrapIndex(this, index) * this._step :
        notSetValue;
    };

    Range.prototype.includes = function(searchValue) {
      var possibleIndex = (searchValue - this._start) / this._step;
      return possibleIndex >= 0 &&
        possibleIndex < this.size &&
        possibleIndex === Math.floor(possibleIndex);
    };

    Range.prototype.slice = function(begin, end) {
      if (wholeSlice(begin, end, this.size)) {
        return this;
      }
      begin = resolveBegin(begin, this.size);
      end = resolveEnd(end, this.size);
      if (end <= begin) {
        return new Range(0, 0);
      }
      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
    };

    Range.prototype.indexOf = function(searchValue) {
      var offsetValue = searchValue - this._start;
      if (offsetValue % this._step === 0) {
        var index = offsetValue / this._step;
        if (index >= 0 && index < this.size) {
          return index
        }
      }
      return -1;
    };

    Range.prototype.lastIndexOf = function(searchValue) {
      return this.indexOf(searchValue);
    };

    Range.prototype.__iterate = function(fn, reverse) {
      var maxIndex = this.size - 1;
      var step = this._step;
      var value = reverse ? this._start + maxIndex * step : this._start;
      for (var ii = 0; ii <= maxIndex; ii++) {
        if (fn(value, ii, this) === false) {
          return ii + 1;
        }
        value += reverse ? -step : step;
      }
      return ii;
    };

    Range.prototype.__iterator = function(type, reverse) {
      var maxIndex = this.size - 1;
      var step = this._step;
      var value = reverse ? this._start + maxIndex * step : this._start;
      var ii = 0;
      return new Iterator(function()  {
        var v = value;
        value += reverse ? -step : step;
        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
      });
    };

    Range.prototype.equals = function(other) {
      return other instanceof Range ?
        this._start === other._start &&
        this._end === other._end &&
        this._step === other._step :
        deepEqual(this, other);
    };


  var EMPTY_RANGE;

  createClass(Collection, Iterable);
    function Collection() {
      throw TypeError('Abstract');
    }


  createClass(KeyedCollection, Collection);function KeyedCollection() {}

  createClass(IndexedCollection, Collection);function IndexedCollection() {}

  createClass(SetCollection, Collection);function SetCollection() {}


  Collection.Keyed = KeyedCollection;
  Collection.Indexed = IndexedCollection;
  Collection.Set = SetCollection;

  var imul =
    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?
    Math.imul :
    function imul(a, b) {
      a = a | 0; // int
      b = b | 0; // int
      var c = a & 0xffff;
      var d = b & 0xffff;
      // Shift by 0 fixes the sign on the high part.
      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int
    };

  // v8 has an optimization for storing 31-bit signed numbers.
  // Values which have either 00 or 11 as the high order bits qualify.
  // This function drops the highest order bit in a signed number, maintaining
  // the sign bit.
  function smi(i32) {
    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);
  }

  function hash(o) {
    if (o === false || o === null || o === undefined) {
      return 0;
    }
    if (typeof o.valueOf === 'function') {
      o = o.valueOf();
      if (o === false || o === null || o === undefined) {
        return 0;
      }
    }
    if (o === true) {
      return 1;
    }
    var type = typeof o;
    if (type === 'number') {
      if (o !== o || o === Infinity) {
        return 0;
      }
      var h = o | 0;
      if (h !== o) {
        h ^= o * 0xFFFFFFFF;
      }
      while (o > 0xFFFFFFFF) {
        o /= 0xFFFFFFFF;
        h ^= o;
      }
      return smi(h);
    }
    if (type === 'string') {
      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
    }
    if (typeof o.hashCode === 'function') {
      return o.hashCode();
    }
    if (type === 'object') {
      return hashJSObj(o);
    }
    if (typeof o.toString === 'function') {
      return hashString(o.toString());
    }
    throw new Error('Value type ' + type + ' cannot be hashed.');
  }

  function cachedHashString(string) {
    var hash = stringHashCache[string];
    if (hash === undefined) {
      hash = hashString(string);
      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
        STRING_HASH_CACHE_SIZE = 0;
        stringHashCache = {};
      }
      STRING_HASH_CACHE_SIZE++;
      stringHashCache[string] = hash;
    }
    return hash;
  }

  // http://jsperf.com/hashing-strings
  function hashString(string) {
    // This is the hash from JVM
    // The hash code for a string is computed as
    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
    // where s[i] is the ith character of the string and n is the length of
    // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
    // (exclusive) by dropping high bits.
    var hash = 0;
    for (var ii = 0; ii < string.length; ii++) {
      hash = 31 * hash + string.charCodeAt(ii) | 0;
    }
    return smi(hash);
  }

  function hashJSObj(obj) {
    var hash;
    if (usingWeakMap) {
      hash = weakMap.get(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = obj[UID_HASH_KEY];
    if (hash !== undefined) {
      return hash;
    }

    if (!canDefineProperty) {
      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
      if (hash !== undefined) {
        return hash;
      }

      hash = getIENodeHash(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = ++objHashUID;
    if (objHashUID & 0x40000000) {
      objHashUID = 0;
    }

    if (usingWeakMap) {
      weakMap.set(obj, hash);
    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
      throw new Error('Non-extensible objects are not allowed as keys.');
    } else if (canDefineProperty) {
      Object.defineProperty(obj, UID_HASH_KEY, {
        'enumerable': false,
        'configurable': false,
        'writable': false,
        'value': hash
      });
    } else if (obj.propertyIsEnumerable !== undefined &&
               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
      // Since we can't define a non-enumerable property on the object
      // we'll hijack one of the less-used non-enumerable properties to
      // save our hash on it. Since this is a function it will not show up in
      // `JSON.stringify` which is what we want.
      obj.propertyIsEnumerable = function() {
        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
      };
      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
    } else if (obj.nodeType !== undefined) {
      // At this point we couldn't get the IE `uniqueID` to use as a hash
      // and we couldn't use a non-enumerable property to exploit the
      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
      // itself.
      obj[UID_HASH_KEY] = hash;
    } else {
      throw new Error('Unable to set a non-enumerable property on object.');
    }

    return hash;
  }

  // Get references to ES5 object methods.
  var isExtensible = Object.isExtensible;

  // True if Object.defineProperty works as expected. IE8 fails this test.
  var canDefineProperty = (function() {
    try {
      Object.defineProperty({}, '@', {});
      return true;
    } catch (e) {
      return false;
    }
  }());

  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
  // and avoid memory leaks from the IE cloneNode bug.
  function getIENodeHash(node) {
    if (node && node.nodeType > 0) {
      switch (node.nodeType) {
        case 1: // Element
          return node.uniqueID;
        case 9: // Document
          return node.documentElement && node.documentElement.uniqueID;
      }
    }
  }

  // If possible, use a WeakMap.
  var usingWeakMap = typeof WeakMap === 'function';
  var weakMap;
  if (usingWeakMap) {
    weakMap = new WeakMap();
  }

  var objHashUID = 0;

  var UID_HASH_KEY = '__immutablehash__';
  if (typeof Symbol === 'function') {
    UID_HASH_KEY = Symbol(UID_HASH_KEY);
  }

  var STRING_HASH_CACHE_MIN_STRLEN = 16;
  var STRING_HASH_CACHE_MAX_SIZE = 255;
  var STRING_HASH_CACHE_SIZE = 0;
  var stringHashCache = {};

  function assertNotInfinite(size) {
    invariant(
      size !== Infinity,
      'Cannot perform this action with an infinite size.'
    );
  }

  createClass(Map, KeyedCollection);

    // @pragma Construction

    function Map(value) {
      return value === null || value === undefined ? emptyMap() :
        isMap(value) && !isOrdered(value) ? value :
        emptyMap().withMutations(function(map ) {
          var iter = KeyedIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v, k)  {return map.set(k, v)});
        });
    }

    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);
      return emptyMap().withMutations(function(map ) {
        for (var i = 0; i < keyValues.length; i += 2) {
          if (i + 1 >= keyValues.length) {
            throw new Error('Missing value for key: ' + keyValues[i]);
          }
          map.set(keyValues[i], keyValues[i + 1]);
        }
      });
    };

    Map.prototype.toString = function() {
      return this.__toString('Map {', '}');
    };

    // @pragma Access

    Map.prototype.get = function(k, notSetValue) {
      return this._root ?
        this._root.get(0, undefined, k, notSetValue) :
        notSetValue;
    };

    // @pragma Modification

    Map.prototype.set = function(k, v) {
      return updateMap(this, k, v);
    };

    Map.prototype.setIn = function(keyPath, v) {
      return this.updateIn(keyPath, NOT_SET, function()  {return v});
    };

    Map.prototype.remove = function(k) {
      return updateMap(this, k, NOT_SET);
    };

    Map.prototype.deleteIn = function(keyPath) {
      return this.updateIn(keyPath, function()  {return NOT_SET});
    };

    Map.prototype.update = function(k, notSetValue, updater) {
      return arguments.length === 1 ?
        k(this) :
        this.updateIn([k], notSetValue, updater);
    };

    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
      if (!updater) {
        updater = notSetValue;
        notSetValue = undefined;
      }
      var updatedValue = updateInDeepMap(
        this,
        forceIterator(keyPath),
        notSetValue,
        updater
      );
      return updatedValue === NOT_SET ? undefined : updatedValue;
    };

    Map.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._root = null;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return emptyMap();
    };

    // @pragma Composition

    Map.prototype.merge = function(/*...iters*/) {
      return mergeIntoMapWith(this, undefined, arguments);
    };

    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoMapWith(this, merger, iters);
    };

    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
      return this.updateIn(
        keyPath,
        emptyMap(),
        function(m ) {return typeof m.merge === 'function' ?
          m.merge.apply(m, iters) :
          iters[iters.length - 1]}
      );
    };

    Map.prototype.mergeDeep = function(/*...iters*/) {
      return mergeIntoMapWith(this, deepMerger, arguments);
    };

    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoMapWith(this, deepMergerWith(merger), iters);
    };

    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
      return this.updateIn(
        keyPath,
        emptyMap(),
        function(m ) {return typeof m.mergeDeep === 'function' ?
          m.mergeDeep.apply(m, iters) :
          iters[iters.length - 1]}
      );
    };

    Map.prototype.sort = function(comparator) {
      // Late binding
      return OrderedMap(sortFactory(this, comparator));
    };

    Map.prototype.sortBy = function(mapper, comparator) {
      // Late binding
      return OrderedMap(sortFactory(this, comparator, mapper));
    };

    // @pragma Mutability

    Map.prototype.withMutations = function(fn) {
      var mutable = this.asMutable();
      fn(mutable);
      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
    };

    Map.prototype.asMutable = function() {
      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
    };

    Map.prototype.asImmutable = function() {
      return this.__ensureOwner();
    };

    Map.prototype.wasAltered = function() {
      return this.__altered;
    };

    Map.prototype.__iterator = function(type, reverse) {
      return new MapIterator(this, type, reverse);
    };

    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      var iterations = 0;
      this._root && this._root.iterate(function(entry ) {
        iterations++;
        return fn(entry[1], entry[0], this$0);
      }, reverse);
      return iterations;
    };

    Map.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeMap(this.size, this._root, ownerID, this.__hash);
    };


  function isMap(maybeMap) {
    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
  }

  Map.isMap = isMap;

  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

  var MapPrototype = Map.prototype;
  MapPrototype[IS_MAP_SENTINEL] = true;
  MapPrototype[DELETE] = MapPrototype.remove;
  MapPrototype.removeIn = MapPrototype.deleteIn;


  // #pragma Trie Nodes



    function ArrayMapNode(ownerID, entries) {
      this.ownerID = ownerID;
      this.entries = entries;
    }

    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      var entries = this.entries;
      for (var ii = 0, len = entries.length; ii < len; ii++) {
        if (is(key, entries[ii][0])) {
          return entries[ii][1];
        }
      }
      return notSetValue;
    };

    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      var removed = value === NOT_SET;

      var entries = this.entries;
      var idx = 0;
      for (var len = entries.length; idx < len; idx++) {
        if (is(key, entries[idx][0])) {
          break;
        }
      }
      var exists = idx < len;

      if (exists ? entries[idx][1] === value : removed) {
        return this;
      }

      SetRef(didAlter);
      (removed || !exists) && SetRef(didChangeSize);

      if (removed && entries.length === 1) {
        return; // undefined
      }

      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
        return createNodes(ownerID, entries, key, value);
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newEntries = isEditable ? entries : arrCopy(entries);

      if (exists) {
        if (removed) {
          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
        } else {
          newEntries[idx] = [key, value];
        }
      } else {
        newEntries.push([key, value]);
      }

      if (isEditable) {
        this.entries = newEntries;
        return this;
      }

      return new ArrayMapNode(ownerID, newEntries);
    };




    function BitmapIndexedNode(ownerID, bitmap, nodes) {
      this.ownerID = ownerID;
      this.bitmap = bitmap;
      this.nodes = nodes;
    }

    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));
      var bitmap = this.bitmap;
      return (bitmap & bit) === 0 ? notSetValue :
        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);
    };

    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var bit = 1 << keyHashFrag;
      var bitmap = this.bitmap;
      var exists = (bitmap & bit) !== 0;

      if (!exists && value === NOT_SET) {
        return this;
      }

      var idx = popCount(bitmap & (bit - 1));
      var nodes = this.nodes;
      var node = exists ? nodes[idx] : undefined;
      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

      if (newNode === node) {
        return this;
      }

      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
      }

      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
        return nodes[idx ^ 1];
      }

      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
        return newNode;
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
      var newNodes = exists ? newNode ?
        setIn(nodes, idx, newNode, isEditable) :
        spliceOut(nodes, idx, isEditable) :
        spliceIn(nodes, idx, newNode, isEditable);

      if (isEditable) {
        this.bitmap = newBitmap;
        this.nodes = newNodes;
        return this;
      }

      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
    };




    function HashArrayMapNode(ownerID, count, nodes) {
      this.ownerID = ownerID;
      this.count = count;
      this.nodes = nodes;
    }

    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var node = this.nodes[idx];
      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
    };

    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var removed = value === NOT_SET;
      var nodes = this.nodes;
      var node = nodes[idx];

      if (removed && !node) {
        return this;
      }

      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
      if (newNode === node) {
        return this;
      }

      var newCount = this.count;
      if (!node) {
        newCount++;
      } else if (!newNode) {
        newCount--;
        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
          return packNodes(ownerID, nodes, newCount, idx);
        }
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newNodes = setIn(nodes, idx, newNode, isEditable);

      if (isEditable) {
        this.count = newCount;
        this.nodes = newNodes;
        return this;
      }

      return new HashArrayMapNode(ownerID, newCount, newNodes);
    };




    function HashCollisionNode(ownerID, keyHash, entries) {
      this.ownerID = ownerID;
      this.keyHash = keyHash;
      this.entries = entries;
    }

    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      var entries = this.entries;
      for (var ii = 0, len = entries.length; ii < len; ii++) {
        if (is(key, entries[ii][0])) {
          return entries[ii][1];
        }
      }
      return notSetValue;
    };

    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }

      var removed = value === NOT_SET;

      if (keyHash !== this.keyHash) {
        if (removed) {
          return this;
        }
        SetRef(didAlter);
        SetRef(didChangeSize);
        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
      }

      var entries = this.entries;
      var idx = 0;
      for (var len = entries.length; idx < len; idx++) {
        if (is(key, entries[idx][0])) {
          break;
        }
      }
      var exists = idx < len;

      if (exists ? entries[idx][1] === value : removed) {
        return this;
      }

      SetRef(didAlter);
      (removed || !exists) && SetRef(didChangeSize);

      if (removed && len === 2) {
        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newEntries = isEditable ? entries : arrCopy(entries);

      if (exists) {
        if (removed) {
          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
        } else {
          newEntries[idx] = [key, value];
        }
      } else {
        newEntries.push([key, value]);
      }

      if (isEditable) {
        this.entries = newEntries;
        return this;
      }

      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
    };




    function ValueNode(ownerID, keyHash, entry) {
      this.ownerID = ownerID;
      this.keyHash = keyHash;
      this.entry = entry;
    }

    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
    };

    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      var removed = value === NOT_SET;
      var keyMatch = is(key, this.entry[0]);
      if (keyMatch ? value === this.entry[1] : removed) {
        return this;
      }

      SetRef(didAlter);

      if (removed) {
        SetRef(didChangeSize);
        return; // undefined
      }

      if (keyMatch) {
        if (ownerID && ownerID === this.ownerID) {
          this.entry[1] = value;
          return this;
        }
        return new ValueNode(ownerID, this.keyHash, [key, value]);
      }

      SetRef(didChangeSize);
      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
    };



  // #pragma Iterators

  ArrayMapNode.prototype.iterate =
  HashCollisionNode.prototype.iterate = function (fn, reverse) {
    var entries = this.entries;
    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
        return false;
      }
    }
  }

  BitmapIndexedNode.prototype.iterate =
  HashArrayMapNode.prototype.iterate = function (fn, reverse) {
    var nodes = this.nodes;
    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
      var node = nodes[reverse ? maxIndex - ii : ii];
      if (node && node.iterate(fn, reverse) === false) {
        return false;
      }
    }
  }

  ValueNode.prototype.iterate = function (fn, reverse) {
    return fn(this.entry);
  }

  createClass(MapIterator, Iterator);

    function MapIterator(map, type, reverse) {
      this._type = type;
      this._reverse = reverse;
      this._stack = map._root && mapIteratorFrame(map._root);
    }

    MapIterator.prototype.next = function() {
      var type = this._type;
      var stack = this._stack;
      while (stack) {
        var node = stack.node;
        var index = stack.index++;
        var maxIndex;
        if (node.entry) {
          if (index === 0) {
            return mapIteratorValue(type, node.entry);
          }
        } else if (node.entries) {
          maxIndex = node.entries.length - 1;
          if (index <= maxIndex) {
            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
          }
        } else {
          maxIndex = node.nodes.length - 1;
          if (index <= maxIndex) {
            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
            if (subNode) {
              if (subNode.entry) {
                return mapIteratorValue(type, subNode.entry);
              }
              stack = this._stack = mapIteratorFrame(subNode, stack);
            }
            continue;
          }
        }
        stack = this._stack = this._stack.__prev;
      }
      return iteratorDone();
    };


  function mapIteratorValue(type, entry) {
    return iteratorValue(type, entry[0], entry[1]);
  }

  function mapIteratorFrame(node, prev) {
    return {
      node: node,
      index: 0,
      __prev: prev
    };
  }

  function makeMap(size, root, ownerID, hash) {
    var map = Object.create(MapPrototype);
    map.size = size;
    map._root = root;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_MAP;
  function emptyMap() {
    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
  }

  function updateMap(map, k, v) {
    var newRoot;
    var newSize;
    if (!map._root) {
      if (v === NOT_SET) {
        return map;
      }
      newSize = 1;
      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
    } else {
      var didChangeSize = MakeRef(CHANGE_LENGTH);
      var didAlter = MakeRef(DID_ALTER);
      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
      if (!didAlter.value) {
        return map;
      }
      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
    }
    if (map.__ownerID) {
      map.size = newSize;
      map._root = newRoot;
      map.__hash = undefined;
      map.__altered = true;
      return map;
    }
    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
  }

  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (!node) {
      if (value === NOT_SET) {
        return node;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return new ValueNode(ownerID, keyHash, [key, value]);
    }
    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
  }

  function isLeafNode(node) {
    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
  }

  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
    if (node.keyHash === keyHash) {
      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
    }

    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

    var newNode;
    var nodes = idx1 === idx2 ?
      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :
      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);

    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
  }

  function createNodes(ownerID, entries, key, value) {
    if (!ownerID) {
      ownerID = new OwnerID();
    }
    var node = new ValueNode(ownerID, hash(key), [key, value]);
    for (var ii = 0; ii < entries.length; ii++) {
      var entry = entries[ii];
      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
    }
    return node;
  }

  function packNodes(ownerID, nodes, count, excluding) {
    var bitmap = 0;
    var packedII = 0;
    var packedNodes = new Array(count);
    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
      var node = nodes[ii];
      if (node !== undefined && ii !== excluding) {
        bitmap |= bit;
        packedNodes[packedII++] = node;
      }
    }
    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
  }

  function expandNodes(ownerID, nodes, bitmap, including, node) {
    var count = 0;
    var expandedNodes = new Array(SIZE);
    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
    }
    expandedNodes[including] = node;
    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
  }

  function mergeIntoMapWith(map, merger, iterables) {
    var iters = [];
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = KeyedIterable(value);
      if (!isIterable(value)) {
        iter = iter.map(function(v ) {return fromJS(v)});
      }
      iters.push(iter);
    }
    return mergeIntoCollectionWith(map, merger, iters);
  }

  function deepMerger(existing, value, key) {
    return existing && existing.mergeDeep && isIterable(value) ?
      existing.mergeDeep(value) :
      is(existing, value) ? existing : value;
  }

  function deepMergerWith(merger) {
    return function(existing, value, key)  {
      if (existing && existing.mergeDeepWith && isIterable(value)) {
        return existing.mergeDeepWith(merger, value);
      }
      var nextValue = merger(existing, value, key);
      return is(existing, nextValue) ? existing : nextValue;
    };
  }

  function mergeIntoCollectionWith(collection, merger, iters) {
    iters = iters.filter(function(x ) {return x.size !== 0});
    if (iters.length === 0) {
      return collection;
    }
    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
      return collection.constructor(iters[0]);
    }
    return collection.withMutations(function(collection ) {
      var mergeIntoMap = merger ?
        function(value, key)  {
          collection.update(key, NOT_SET, function(existing )
            {return existing === NOT_SET ? value : merger(existing, value, key)}
          );
        } :
        function(value, key)  {
          collection.set(key, value);
        }
      for (var ii = 0; ii < iters.length; ii++) {
        iters[ii].forEach(mergeIntoMap);
      }
    });
  }

  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
    var isNotSet = existing === NOT_SET;
    var step = keyPathIter.next();
    if (step.done) {
      var existingValue = isNotSet ? notSetValue : existing;
      var newValue = updater(existingValue);
      return newValue === existingValue ? existing : newValue;
    }
    invariant(
      isNotSet || (existing && existing.set),
      'invalid keyPath'
    );
    var key = step.value;
    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
    var nextUpdated = updateInDeepMap(
      nextExisting,
      keyPathIter,
      notSetValue,
      updater
    );
    return nextUpdated === nextExisting ? existing :
      nextUpdated === NOT_SET ? existing.remove(key) :
      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
  }

  function popCount(x) {
    x = x - ((x >> 1) & 0x55555555);
    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
    x = (x + (x >> 4)) & 0x0f0f0f0f;
    x = x + (x >> 8);
    x = x + (x >> 16);
    return x & 0x7f;
  }

  function setIn(array, idx, val, canEdit) {
    var newArray = canEdit ? array : arrCopy(array);
    newArray[idx] = val;
    return newArray;
  }

  function spliceIn(array, idx, val, canEdit) {
    var newLen = array.length + 1;
    if (canEdit && idx + 1 === newLen) {
      array[idx] = val;
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        newArray[ii] = val;
        after = -1;
      } else {
        newArray[ii] = array[ii + after];
      }
    }
    return newArray;
  }

  function spliceOut(array, idx, canEdit) {
    var newLen = array.length - 1;
    if (canEdit && idx === newLen) {
      array.pop();
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        after = 1;
      }
      newArray[ii] = array[ii + after];
    }
    return newArray;
  }

  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

  createClass(List, IndexedCollection);

    // @pragma Construction

    function List(value) {
      var empty = emptyList();
      if (value === null || value === undefined) {
        return empty;
      }
      if (isList(value)) {
        return value;
      }
      var iter = IndexedIterable(value);
      var size = iter.size;
      if (size === 0) {
        return empty;
      }
      assertNotInfinite(size);
      if (size > 0 && size < SIZE) {
        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
      }
      return empty.withMutations(function(list ) {
        list.setSize(size);
        iter.forEach(function(v, i)  {return list.set(i, v)});
      });
    }

    List.of = function(/*...values*/) {
      return this(arguments);
    };

    List.prototype.toString = function() {
      return this.__toString('List [', ']');
    };

    // @pragma Access

    List.prototype.get = function(index, notSetValue) {
      index = wrapIndex(this, index);
      if (index >= 0 && index < this.size) {
        index += this._origin;
        var node = listNodeFor(this, index);
        return node && node.array[index & MASK];
      }
      return notSetValue;
    };

    // @pragma Modification

    List.prototype.set = function(index, value) {
      return updateList(this, index, value);
    };

    List.prototype.remove = function(index) {
      return !this.has(index) ? this :
        index === 0 ? this.shift() :
        index === this.size - 1 ? this.pop() :
        this.splice(index, 1);
    };

    List.prototype.insert = function(index, value) {
      return this.splice(index, 0, value);
    };

    List.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = this._origin = this._capacity = 0;
        this._level = SHIFT;
        this._root = this._tail = null;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return emptyList();
    };

    List.prototype.push = function(/*...values*/) {
      var values = arguments;
      var oldSize = this.size;
      return this.withMutations(function(list ) {
        setListBounds(list, 0, oldSize + values.length);
        for (var ii = 0; ii < values.length; ii++) {
          list.set(oldSize + ii, values[ii]);
        }
      });
    };

    List.prototype.pop = function() {
      return setListBounds(this, 0, -1);
    };

    List.prototype.unshift = function(/*...values*/) {
      var values = arguments;
      return this.withMutations(function(list ) {
        setListBounds(list, -values.length);
        for (var ii = 0; ii < values.length; ii++) {
          list.set(ii, values[ii]);
        }
      });
    };

    List.prototype.shift = function() {
      return setListBounds(this, 1);
    };

    // @pragma Composition

    List.prototype.merge = function(/*...iters*/) {
      return mergeIntoListWith(this, undefined, arguments);
    };

    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoListWith(this, merger, iters);
    };

    List.prototype.mergeDeep = function(/*...iters*/) {
      return mergeIntoListWith(this, deepMerger, arguments);
    };

    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoListWith(this, deepMergerWith(merger), iters);
    };

    List.prototype.setSize = function(size) {
      return setListBounds(this, 0, size);
    };

    // @pragma Iteration

    List.prototype.slice = function(begin, end) {
      var size = this.size;
      if (wholeSlice(begin, end, size)) {
        return this;
      }
      return setListBounds(
        this,
        resolveBegin(begin, size),
        resolveEnd(end, size)
      );
    };

    List.prototype.__iterator = function(type, reverse) {
      var index = 0;
      var values = iterateList(this, reverse);
      return new Iterator(function()  {
        var value = values();
        return value === DONE ?
          iteratorDone() :
          iteratorValue(type, index++, value);
      });
    };

    List.prototype.__iterate = function(fn, reverse) {
      var index = 0;
      var values = iterateList(this, reverse);
      var value;
      while ((value = values()) !== DONE) {
        if (fn(value, index++, this) === false) {
          break;
        }
      }
      return index;
    };

    List.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        this.__ownerID = ownerID;
        return this;
      }
      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
    };


  function isList(maybeList) {
    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
  }

  List.isList = isList;

  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

  var ListPrototype = List.prototype;
  ListPrototype[IS_LIST_SENTINEL] = true;
  ListPrototype[DELETE] = ListPrototype.remove;
  ListPrototype.setIn = MapPrototype.setIn;
  ListPrototype.deleteIn =
  ListPrototype.removeIn = MapPrototype.removeIn;
  ListPrototype.update = MapPrototype.update;
  ListPrototype.updateIn = MapPrototype.updateIn;
  ListPrototype.mergeIn = MapPrototype.mergeIn;
  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  ListPrototype.withMutations = MapPrototype.withMutations;
  ListPrototype.asMutable = MapPrototype.asMutable;
  ListPrototype.asImmutable = MapPrototype.asImmutable;
  ListPrototype.wasAltered = MapPrototype.wasAltered;



    function VNode(array, ownerID) {
      this.array = array;
      this.ownerID = ownerID;
    }

    // TODO: seems like these methods are very similar

    VNode.prototype.removeBefore = function(ownerID, level, index) {
      if (index === level ? 1 << level : 0 || this.array.length === 0) {
        return this;
      }
      var originIndex = (index >>> level) & MASK;
      if (originIndex >= this.array.length) {
        return new VNode([], ownerID);
      }
      var removingFirst = originIndex === 0;
      var newChild;
      if (level > 0) {
        var oldChild = this.array[originIndex];
        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
        if (newChild === oldChild && removingFirst) {
          return this;
        }
      }
      if (removingFirst && !newChild) {
        return this;
      }
      var editable = editableVNode(this, ownerID);
      if (!removingFirst) {
        for (var ii = 0; ii < originIndex; ii++) {
          editable.array[ii] = undefined;
        }
      }
      if (newChild) {
        editable.array[originIndex] = newChild;
      }
      return editable;
    };

    VNode.prototype.removeAfter = function(ownerID, level, index) {
      if (index === (level ? 1 << level : 0) || this.array.length === 0) {
        return this;
      }
      var sizeIndex = ((index - 1) >>> level) & MASK;
      if (sizeIndex >= this.array.length) {
        return this;
      }

      var newChild;
      if (level > 0) {
        var oldChild = this.array[sizeIndex];
        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
        if (newChild === oldChild && sizeIndex === this.array.length - 1) {
          return this;
        }
      }

      var editable = editableVNode(this, ownerID);
      editable.array.splice(sizeIndex + 1);
      if (newChild) {
        editable.array[sizeIndex] = newChild;
      }
      return editable;
    };



  var DONE = {};

  function iterateList(list, reverse) {
    var left = list._origin;
    var right = list._capacity;
    var tailPos = getTailOffset(right);
    var tail = list._tail;

    return iterateNodeOrLeaf(list._root, list._level, 0);

    function iterateNodeOrLeaf(node, level, offset) {
      return level === 0 ?
        iterateLeaf(node, offset) :
        iterateNode(node, level, offset);
    }

    function iterateLeaf(node, offset) {
      var array = offset === tailPos ? tail && tail.array : node && node.array;
      var from = offset > left ? 0 : left - offset;
      var to = right - offset;
      if (to > SIZE) {
        to = SIZE;
      }
      return function()  {
        if (from === to) {
          return DONE;
        }
        var idx = reverse ? --to : from++;
        return array && array[idx];
      };
    }

    function iterateNode(node, level, offset) {
      var values;
      var array = node && node.array;
      var from = offset > left ? 0 : (left - offset) >> level;
      var to = ((right - offset) >> level) + 1;
      if (to > SIZE) {
        to = SIZE;
      }
      return function()  {
        do {
          if (values) {
            var value = values();
            if (value !== DONE) {
              return value;
            }
            values = null;
          }
          if (from === to) {
            return DONE;
          }
          var idx = reverse ? --to : from++;
          values = iterateNodeOrLeaf(
            array && array[idx], level - SHIFT, offset + (idx << level)
          );
        } while (true);
      };
    }
  }

  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
    var list = Object.create(ListPrototype);
    list.size = capacity - origin;
    list._origin = origin;
    list._capacity = capacity;
    list._level = level;
    list._root = root;
    list._tail = tail;
    list.__ownerID = ownerID;
    list.__hash = hash;
    list.__altered = false;
    return list;
  }

  var EMPTY_LIST;
  function emptyList() {
    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
  }

  function updateList(list, index, value) {
    index = wrapIndex(list, index);

    if (index !== index) {
      return list;
    }

    if (index >= list.size || index < 0) {
      return list.withMutations(function(list ) {
        index < 0 ?
          setListBounds(list, index).set(0, value) :
          setListBounds(list, 0, index + 1).set(index, value)
      });
    }

    index += list._origin;

    var newTail = list._tail;
    var newRoot = list._root;
    var didAlter = MakeRef(DID_ALTER);
    if (index >= getTailOffset(list._capacity)) {
      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
    } else {
      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
    }

    if (!didAlter.value) {
      return list;
    }

    if (list.__ownerID) {
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
  }

  function updateVNode(node, ownerID, level, index, value, didAlter) {
    var idx = (index >>> level) & MASK;
    var nodeHas = node && idx < node.array.length;
    if (!nodeHas && value === undefined) {
      return node;
    }

    var newNode;

    if (level > 0) {
      var lowerNode = node && node.array[idx];
      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
      if (newLowerNode === lowerNode) {
        return node;
      }
      newNode = editableVNode(node, ownerID);
      newNode.array[idx] = newLowerNode;
      return newNode;
    }

    if (nodeHas && node.array[idx] === value) {
      return node;
    }

    SetRef(didAlter);

    newNode = editableVNode(node, ownerID);
    if (value === undefined && idx === newNode.array.length - 1) {
      newNode.array.pop();
    } else {
      newNode.array[idx] = value;
    }
    return newNode;
  }

  function editableVNode(node, ownerID) {
    if (ownerID && node && ownerID === node.ownerID) {
      return node;
    }
    return new VNode(node ? node.array.slice() : [], ownerID);
  }

  function listNodeFor(list, rawIndex) {
    if (rawIndex >= getTailOffset(list._capacity)) {
      return list._tail;
    }
    if (rawIndex < 1 << (list._level + SHIFT)) {
      var node = list._root;
      var level = list._level;
      while (node && level > 0) {
        node = node.array[(rawIndex >>> level) & MASK];
        level -= SHIFT;
      }
      return node;
    }
  }

  function setListBounds(list, begin, end) {
    // Sanitize begin & end using this shorthand for ToInt32(argument)
    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      end = end | 0;
    }
    var owner = list.__ownerID || new OwnerID();
    var oldOrigin = list._origin;
    var oldCapacity = list._capacity;
    var newOrigin = oldOrigin + begin;
    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
      return list;
    }

    // If it's going to end after it starts, it's empty.
    if (newOrigin >= newCapacity) {
      return list.clear();
    }

    var newLevel = list._level;
    var newRoot = list._root;

    // New origin might need creating a higher root.
    var offsetShift = 0;
    while (newOrigin + offsetShift < 0) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
      newLevel += SHIFT;
      offsetShift += 1 << newLevel;
    }
    if (offsetShift) {
      newOrigin += offsetShift;
      oldOrigin += offsetShift;
      newCapacity += offsetShift;
      oldCapacity += offsetShift;
    }

    var oldTailOffset = getTailOffset(oldCapacity);
    var newTailOffset = getTailOffset(newCapacity);

    // New size might need creating a higher root.
    while (newTailOffset >= 1 << (newLevel + SHIFT)) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
      newLevel += SHIFT;
    }

    // Locate or create the new tail.
    var oldTail = list._tail;
    var newTail = newTailOffset < oldTailOffset ?
      listNodeFor(list, newCapacity - 1) :
      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

    // Merge Tail into tree.
    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
      newRoot = editableVNode(newRoot, owner);
      var node = newRoot;
      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
        var idx = (oldTailOffset >>> level) & MASK;
        node = node.array[idx] = editableVNode(node.array[idx], owner);
      }
      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
    }

    // If the size has been reduced, there's a chance the tail needs to be trimmed.
    if (newCapacity < oldCapacity) {
      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
    }

    // If the new origin is within the tail, then we do not need a root.
    if (newOrigin >= newTailOffset) {
      newOrigin -= newTailOffset;
      newCapacity -= newTailOffset;
      newLevel = SHIFT;
      newRoot = null;
      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

    // Otherwise, if the root has been trimmed, garbage collect.
    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
      offsetShift = 0;

      // Identify the new top root node of the subtree of the old root.
      while (newRoot) {
        var beginIndex = (newOrigin >>> newLevel) & MASK;
        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {
          break;
        }
        if (beginIndex) {
          offsetShift += (1 << newLevel) * beginIndex;
        }
        newLevel -= SHIFT;
        newRoot = newRoot.array[beginIndex];
      }

      // Trim the new sides of the new root.
      if (newRoot && newOrigin > oldOrigin) {
        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
      }
      if (newRoot && newTailOffset < oldTailOffset) {
        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
      }
      if (offsetShift) {
        newOrigin -= offsetShift;
        newCapacity -= offsetShift;
      }
    }

    if (list.__ownerID) {
      list.size = newCapacity - newOrigin;
      list._origin = newOrigin;
      list._capacity = newCapacity;
      list._level = newLevel;
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
  }

  function mergeIntoListWith(list, merger, iterables) {
    var iters = [];
    var maxSize = 0;
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = IndexedIterable(value);
      if (iter.size > maxSize) {
        maxSize = iter.size;
      }
      if (!isIterable(value)) {
        iter = iter.map(function(v ) {return fromJS(v)});
      }
      iters.push(iter);
    }
    if (maxSize > list.size) {
      list = list.setSize(maxSize);
    }
    return mergeIntoCollectionWith(list, merger, iters);
  }

  function getTailOffset(size) {
    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);
  }

  createClass(OrderedMap, Map);

    // @pragma Construction

    function OrderedMap(value) {
      return value === null || value === undefined ? emptyOrderedMap() :
        isOrderedMap(value) ? value :
        emptyOrderedMap().withMutations(function(map ) {
          var iter = KeyedIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v, k)  {return map.set(k, v)});
        });
    }

    OrderedMap.of = function(/*...values*/) {
      return this(arguments);
    };

    OrderedMap.prototype.toString = function() {
      return this.__toString('OrderedMap {', '}');
    };

    // @pragma Access

    OrderedMap.prototype.get = function(k, notSetValue) {
      var index = this._map.get(k);
      return index !== undefined ? this._list.get(index)[1] : notSetValue;
    };

    // @pragma Modification

    OrderedMap.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._map.clear();
        this._list.clear();
        return this;
      }
      return emptyOrderedMap();
    };

    OrderedMap.prototype.set = function(k, v) {
      return updateOrderedMap(this, k, v);
    };

    OrderedMap.prototype.remove = function(k) {
      return updateOrderedMap(this, k, NOT_SET);
    };

    OrderedMap.prototype.wasAltered = function() {
      return this._map.wasAltered() || this._list.wasAltered();
    };

    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._list.__iterate(
        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},
        reverse
      );
    };

    OrderedMap.prototype.__iterator = function(type, reverse) {
      return this._list.fromEntrySeq().__iterator(type, reverse);
    };

    OrderedMap.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      var newList = this._list.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._map = newMap;
        this._list = newList;
        return this;
      }
      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
    };


  function isOrderedMap(maybeOrderedMap) {
    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
  }

  OrderedMap.isOrderedMap = isOrderedMap;

  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;



  function makeOrderedMap(map, list, ownerID, hash) {
    var omap = Object.create(OrderedMap.prototype);
    omap.size = map ? map.size : 0;
    omap._map = map;
    omap._list = list;
    omap.__ownerID = ownerID;
    omap.__hash = hash;
    return omap;
  }

  var EMPTY_ORDERED_MAP;
  function emptyOrderedMap() {
    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
  }

  function updateOrderedMap(omap, k, v) {
    var map = omap._map;
    var list = omap._list;
    var i = map.get(k);
    var has = i !== undefined;
    var newMap;
    var newList;
    if (v === NOT_SET) { // removed
      if (!has) {
        return omap;
      }
      if (list.size >= SIZE && list.size >= map.size * 2) {
        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});
        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();
        if (omap.__ownerID) {
          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
        }
      } else {
        newMap = map.remove(k);
        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
      }
    } else {
      if (has) {
        if (v === list.get(i)[1]) {
          return omap;
        }
        newMap = map;
        newList = list.set(i, [k, v]);
      } else {
        newMap = map.set(k, list.size);
        newList = list.set(list.size, [k, v]);
      }
    }
    if (omap.__ownerID) {
      omap.size = newMap.size;
      omap._map = newMap;
      omap._list = newList;
      omap.__hash = undefined;
      return omap;
    }
    return makeOrderedMap(newMap, newList);
  }

  createClass(ToKeyedSequence, KeyedSeq);
    function ToKeyedSequence(indexed, useKeys) {
      this._iter = indexed;
      this._useKeys = useKeys;
      this.size = indexed.size;
    }

    ToKeyedSequence.prototype.get = function(key, notSetValue) {
      return this._iter.get(key, notSetValue);
    };

    ToKeyedSequence.prototype.has = function(key) {
      return this._iter.has(key);
    };

    ToKeyedSequence.prototype.valueSeq = function() {
      return this._iter.valueSeq();
    };

    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;
      var reversedSequence = reverseFactory(this, true);
      if (!this._useKeys) {
        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};
      }
      return reversedSequence;
    };

    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;
      var mappedSequence = mapFactory(this, mapper, context);
      if (!this._useKeys) {
        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};
      }
      return mappedSequence;
    };

    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      var ii;
      return this._iter.__iterate(
        this._useKeys ?
          function(v, k)  {return fn(v, k, this$0)} :
          ((ii = reverse ? resolveSize(this) : 0),
            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),
        reverse
      );
    };

    ToKeyedSequence.prototype.__iterator = function(type, reverse) {
      if (this._useKeys) {
        return this._iter.__iterator(type, reverse);
      }
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      var ii = reverse ? resolveSize(this) : 0;
      return new Iterator(function()  {
        var step = iterator.next();
        return step.done ? step :
          iteratorValue(type, reverse ? --ii : ii++, step.value, step);
      });
    };

  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;


  createClass(ToIndexedSequence, IndexedSeq);
    function ToIndexedSequence(iter) {
      this._iter = iter;
      this.size = iter.size;
    }

    ToIndexedSequence.prototype.includes = function(value) {
      return this._iter.includes(value);
    };

    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      var iterations = 0;
      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);
    };

    ToIndexedSequence.prototype.__iterator = function(type, reverse) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      var iterations = 0;
      return new Iterator(function()  {
        var step = iterator.next();
        return step.done ? step :
          iteratorValue(type, iterations++, step.value, step)
      });
    };



  createClass(ToSetSequence, SetSeq);
    function ToSetSequence(iter) {
      this._iter = iter;
      this.size = iter.size;
    }

    ToSetSequence.prototype.has = function(key) {
      return this._iter.includes(key);
    };

    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);
    };

    ToSetSequence.prototype.__iterator = function(type, reverse) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      return new Iterator(function()  {
        var step = iterator.next();
        return step.done ? step :
          iteratorValue(type, step.value, step.value, step);
      });
    };



  createClass(FromEntriesSequence, KeyedSeq);
    function FromEntriesSequence(entries) {
      this._iter = entries;
      this.size = entries.size;
    }

    FromEntriesSequence.prototype.entrySeq = function() {
      return this._iter.toSeq();
    };

    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._iter.__iterate(function(entry ) {
        // Check if entry exists first so array access doesn't throw for holes
        // in the parent iteration.
        if (entry) {
          validateEntry(entry);
          var indexedIterable = isIterable(entry);
          return fn(
            indexedIterable ? entry.get(1) : entry[1],
            indexedIterable ? entry.get(0) : entry[0],
            this$0
          );
        }
      }, reverse);
    };

    FromEntriesSequence.prototype.__iterator = function(type, reverse) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      return new Iterator(function()  {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          // Check if entry exists first so array access doesn't throw for holes
          // in the parent iteration.
          if (entry) {
            validateEntry(entry);
            var indexedIterable = isIterable(entry);
            return iteratorValue(
              type,
              indexedIterable ? entry.get(0) : entry[0],
              indexedIterable ? entry.get(1) : entry[1],
              step
            );
          }
        }
      });
    };


  ToIndexedSequence.prototype.cacheResult =
  ToKeyedSequence.prototype.cacheResult =
  ToSetSequence.prototype.cacheResult =
  FromEntriesSequence.prototype.cacheResult =
    cacheResultThrough;


  function flipFactory(iterable) {
    var flipSequence = makeSequence(iterable);
    flipSequence._iter = iterable;
    flipSequence.size = iterable.size;
    flipSequence.flip = function()  {return iterable};
    flipSequence.reverse = function () {
      var reversedSequence = iterable.reverse.apply(this); // super.reverse()
      reversedSequence.flip = function()  {return iterable.reverse()};
      return reversedSequence;
    };
    flipSequence.has = function(key ) {return iterable.includes(key)};
    flipSequence.includes = function(key ) {return iterable.has(key)};
    flipSequence.cacheResult = cacheResultThrough;
    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);
    }
    flipSequence.__iteratorUncached = function(type, reverse) {
      if (type === ITERATE_ENTRIES) {
        var iterator = iterable.__iterator(type, reverse);
        return new Iterator(function()  {
          var step = iterator.next();
          if (!step.done) {
            var k = step.value[0];
            step.value[0] = step.value[1];
            step.value[1] = k;
          }
          return step;
        });
      }
      return iterable.__iterator(
        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
        reverse
      );
    }
    return flipSequence;
  }


  function mapFactory(iterable, mapper, context) {
    var mappedSequence = makeSequence(iterable);
    mappedSequence.size = iterable.size;
    mappedSequence.has = function(key ) {return iterable.has(key)};
    mappedSequence.get = function(key, notSetValue)  {
      var v = iterable.get(key, NOT_SET);
      return v === NOT_SET ?
        notSetValue :
        mapper.call(context, v, key, iterable);
    };
    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      return iterable.__iterate(
        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},
        reverse
      );
    }
    mappedSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      return new Iterator(function()  {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        return iteratorValue(
          type,
          key,
          mapper.call(context, entry[1], key, iterable),
          step
        );
      });
    }
    return mappedSequence;
  }


  function reverseFactory(iterable, useKeys) {
    var reversedSequence = makeSequence(iterable);
    reversedSequence._iter = iterable;
    reversedSequence.size = iterable.size;
    reversedSequence.reverse = function()  {return iterable};
    if (iterable.flip) {
      reversedSequence.flip = function () {
        var flipSequence = flipFactory(iterable);
        flipSequence.reverse = function()  {return iterable.flip()};
        return flipSequence;
      };
    }
    reversedSequence.get = function(key, notSetValue) 
      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};
    reversedSequence.has = function(key )
      {return iterable.has(useKeys ? key : -1 - key)};
    reversedSequence.includes = function(value ) {return iterable.includes(value)};
    reversedSequence.cacheResult = cacheResultThrough;
    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;
      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);
    };
    reversedSequence.__iterator =
      function(type, reverse)  {return iterable.__iterator(type, !reverse)};
    return reversedSequence;
  }


  function filterFactory(iterable, predicate, context, useKeys) {
    var filterSequence = makeSequence(iterable);
    if (useKeys) {
      filterSequence.has = function(key ) {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
      };
      filterSequence.get = function(key, notSetValue)  {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?
          v : notSetValue;
      };
    }
    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function(v, k, c)  {
        if (predicate.call(context, v, k, c)) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      }, reverse);
      return iterations;
    };
    filterSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterations = 0;
      return new Iterator(function()  {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          var value = entry[1];
          if (predicate.call(context, value, key, iterable)) {
            return iteratorValue(type, useKeys ? key : iterations++, value, step);
          }
        }
      });
    }
    return filterSequence;
  }


  function countByFactory(iterable, grouper, context) {
    var groups = Map().asMutable();
    iterable.__iterate(function(v, k)  {
      groups.update(
        grouper.call(context, v, k, iterable),
        0,
        function(a ) {return a + 1}
      );
    });
    return groups.asImmutable();
  }


  function groupByFactory(iterable, grouper, context) {
    var isKeyedIter = isKeyed(iterable);
    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
    iterable.__iterate(function(v, k)  {
      groups.update(
        grouper.call(context, v, k, iterable),
        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}
      );
    });
    var coerce = iterableClass(iterable);
    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});
  }


  function sliceFactory(iterable, begin, end, useKeys) {
    var originalSize = iterable.size;

    // Sanitize begin & end using this shorthand for ToInt32(argument)
    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      if (end === Infinity) {
        end = originalSize;
      } else {
        end = end | 0;
      }
    }

    if (wholeSlice(begin, end, originalSize)) {
      return iterable;
    }

    var resolvedBegin = resolveBegin(begin, originalSize);
    var resolvedEnd = resolveEnd(end, originalSize);

    // begin or end will be NaN if they were provided as negative numbers and
    // this iterable's size is unknown. In that case, cache first so there is
    // a known size and these do not resolve to NaN.
    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
    }

    // Note: resolvedEnd is undefined when the original sequence's length is
    // unknown and this slice did not supply an end and should contain all
    // elements after resolvedBegin.
    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
    var resolvedSize = resolvedEnd - resolvedBegin;
    var sliceSize;
    if (resolvedSize === resolvedSize) {
      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
    }

    var sliceSeq = makeSequence(iterable);

    // If iterable.size is undefined, the size of the realized sliceSeq is
    // unknown at this point unless the number of items to slice is 0
    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
      sliceSeq.get = function (index, notSetValue) {
        index = wrapIndex(this, index);
        return index >= 0 && index < sliceSize ?
          iterable.get(index + resolvedBegin, notSetValue) :
          notSetValue;
      }
    }

    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;
      if (sliceSize === 0) {
        return 0;
      }
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var skipped = 0;
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function(v, k)  {
        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
                 iterations !== sliceSize;
        }
      });
      return iterations;
    };

    sliceSeq.__iteratorUncached = function(type, reverse) {
      if (sliceSize !== 0 && reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      // Don't bother instantiating parent iterator if taking 0.
      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
      var skipped = 0;
      var iterations = 0;
      return new Iterator(function()  {
        while (skipped++ < resolvedBegin) {
          iterator.next();
        }
        if (++iterations > sliceSize) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (useKeys || type === ITERATE_VALUES) {
          return step;
        } else if (type === ITERATE_KEYS) {
          return iteratorValue(type, iterations - 1, undefined, step);
        } else {
          return iteratorValue(type, iterations - 1, step.value[1], step);
        }
      });
    }

    return sliceSeq;
  }


  function takeWhileFactory(iterable, predicate, context) {
    var takeSequence = makeSequence(iterable);
    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterations = 0;
      iterable.__iterate(function(v, k, c) 
        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}
      );
      return iterations;
    };
    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterating = true;
      return new Iterator(function()  {
        if (!iterating) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var k = entry[0];
        var v = entry[1];
        if (!predicate.call(context, v, k, this$0)) {
          iterating = false;
          return iteratorDone();
        }
        return type === ITERATE_ENTRIES ? step :
          iteratorValue(type, k, v, step);
      });
    };
    return takeSequence;
  }


  function skipWhileFactory(iterable, predicate, context, useKeys) {
    var skipSequence = makeSequence(iterable);
    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function(v, k, c)  {
        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      });
      return iterations;
    };
    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var skipping = true;
      var iterations = 0;
      return new Iterator(function()  {
        var step, k, v;
        do {
          step = iterator.next();
          if (step.done) {
            if (useKeys || type === ITERATE_VALUES) {
              return step;
            } else if (type === ITERATE_KEYS) {
              return iteratorValue(type, iterations++, undefined, step);
            } else {
              return iteratorValue(type, iterations++, step.value[1], step);
            }
          }
          var entry = step.value;
          k = entry[0];
          v = entry[1];
          skipping && (skipping = predicate.call(context, v, k, this$0));
        } while (skipping);
        return type === ITERATE_ENTRIES ? step :
          iteratorValue(type, k, v, step);
      });
    };
    return skipSequence;
  }


  function concatFactory(iterable, values) {
    var isKeyedIterable = isKeyed(iterable);
    var iters = [iterable].concat(values).map(function(v ) {
      if (!isIterable(v)) {
        v = isKeyedIterable ?
          keyedSeqFromValue(v) :
          indexedSeqFromValue(Array.isArray(v) ? v : [v]);
      } else if (isKeyedIterable) {
        v = KeyedIterable(v);
      }
      return v;
    }).filter(function(v ) {return v.size !== 0});

    if (iters.length === 0) {
      return iterable;
    }

    if (iters.length === 1) {
      var singleton = iters[0];
      if (singleton === iterable ||
          isKeyedIterable && isKeyed(singleton) ||
          isIndexed(iterable) && isIndexed(singleton)) {
        return singleton;
      }
    }

    var concatSeq = new ArraySeq(iters);
    if (isKeyedIterable) {
      concatSeq = concatSeq.toKeyedSeq();
    } else if (!isIndexed(iterable)) {
      concatSeq = concatSeq.toSetSeq();
    }
    concatSeq = concatSeq.flatten(true);
    concatSeq.size = iters.reduce(
      function(sum, seq)  {
        if (sum !== undefined) {
          var size = seq.size;
          if (size !== undefined) {
            return sum + size;
          }
        }
      },
      0
    );
    return concatSeq;
  }


  function flattenFactory(iterable, depth, useKeys) {
    var flatSequence = makeSequence(iterable);
    flatSequence.__iterateUncached = function(fn, reverse) {
      var iterations = 0;
      var stopped = false;
      function flatDeep(iter, currentDepth) {var this$0 = this;
        iter.__iterate(function(v, k)  {
          if ((!depth || currentDepth < depth) && isIterable(v)) {
            flatDeep(v, currentDepth + 1);
          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
            stopped = true;
          }
          return !stopped;
        }, reverse);
      }
      flatDeep(iterable, 0);
      return iterations;
    }
    flatSequence.__iteratorUncached = function(type, reverse) {
      var iterator = iterable.__iterator(type, reverse);
      var stack = [];
      var iterations = 0;
      return new Iterator(function()  {
        while (iterator) {
          var step = iterator.next();
          if (step.done !== false) {
            iterator = stack.pop();
            continue;
          }
          var v = step.value;
          if (type === ITERATE_ENTRIES) {
            v = v[1];
          }
          if ((!depth || stack.length < depth) && isIterable(v)) {
            stack.push(iterator);
            iterator = v.__iterator(type, reverse);
          } else {
            return useKeys ? step : iteratorValue(type, iterations++, v, step);
          }
        }
        return iteratorDone();
      });
    }
    return flatSequence;
  }


  function flatMapFactory(iterable, mapper, context) {
    var coerce = iterableClass(iterable);
    return iterable.toSeq().map(
      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}
    ).flatten(true);
  }


  function interposeFactory(iterable, separator) {
    var interposedSequence = makeSequence(iterable);
    interposedSequence.size = iterable.size && iterable.size * 2 -1;
    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function(v, k) 
        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&
        fn(v, iterations++, this$0) !== false},
        reverse
      );
      return iterations;
    };
    interposedSequence.__iteratorUncached = function(type, reverse) {
      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
      var iterations = 0;
      var step;
      return new Iterator(function()  {
        if (!step || iterations % 2) {
          step = iterator.next();
          if (step.done) {
            return step;
          }
        }
        return iterations % 2 ?
          iteratorValue(type, iterations++, separator) :
          iteratorValue(type, iterations++, step.value, step);
      });
    };
    return interposedSequence;
  }


  function sortFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    var isKeyedIterable = isKeyed(iterable);
    var index = 0;
    var entries = iterable.toSeq().map(
      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}
    ).toArray();
    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(
      isKeyedIterable ?
      function(v, i)  { entries[i].length = 2; } :
      function(v, i)  { entries[i] = v[1]; }
    );
    return isKeyedIterable ? KeyedSeq(entries) :
      isIndexed(iterable) ? IndexedSeq(entries) :
      SetSeq(entries);
  }


  function maxFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    if (mapper) {
      var entry = iterable.toSeq()
        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})
        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});
      return entry && entry[0];
    } else {
      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});
    }
  }

  function maxCompare(comparator, a, b) {
    var comp = comparator(b, a);
    // b is considered the new max if the comparator declares them equal, but
    // they are not equal and b is in fact a nullish value.
    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;
  }


  function zipWithFactory(keyIter, zipper, iters) {
    var zipSequence = makeSequence(keyIter);
    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();
    // Note: this a generic base implementation of __iterate in terms of
    // __iterator which may be more generically useful in the future.
    zipSequence.__iterate = function(fn, reverse) {
      /* generic:
      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        iterations++;
        if (fn(step.value[1], step.value[0], this) === false) {
          break;
        }
      }
      return iterations;
      */
      // indexed:
      var iterator = this.__iterator(ITERATE_VALUES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };
    zipSequence.__iteratorUncached = function(type, reverse) {
      var iterators = iters.map(function(i )
        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}
      );
      var iterations = 0;
      var isDone = false;
      return new Iterator(function()  {
        var steps;
        if (!isDone) {
          steps = iterators.map(function(i ) {return i.next()});
          isDone = steps.some(function(s ) {return s.done});
        }
        if (isDone) {
          return iteratorDone();
        }
        return iteratorValue(
          type,
          iterations++,
          zipper.apply(null, steps.map(function(s ) {return s.value}))
        );
      });
    };
    return zipSequence
  }


  // #pragma Helper Functions

  function reify(iter, seq) {
    return isSeq(iter) ? seq : iter.constructor(seq);
  }

  function validateEntry(entry) {
    if (entry !== Object(entry)) {
      throw new TypeError('Expected [K, V] tuple: ' + entry);
    }
  }

  function resolveSize(iter) {
    assertNotInfinite(iter.size);
    return ensureSize(iter);
  }

  function iterableClass(iterable) {
    return isKeyed(iterable) ? KeyedIterable :
      isIndexed(iterable) ? IndexedIterable :
      SetIterable;
  }

  function makeSequence(iterable) {
    return Object.create(
      (
        isKeyed(iterable) ? KeyedSeq :
        isIndexed(iterable) ? IndexedSeq :
        SetSeq
      ).prototype
    );
  }

  function cacheResultThrough() {
    if (this._iter.cacheResult) {
      this._iter.cacheResult();
      this.size = this._iter.size;
      return this;
    } else {
      return Seq.prototype.cacheResult.call(this);
    }
  }

  function defaultComparator(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  function forceIterator(keyPath) {
    var iter = getIterator(keyPath);
    if (!iter) {
      // Array might not be iterable in this environment, so we need a fallback
      // to our wrapped type.
      if (!isArrayLike(keyPath)) {
        throw new TypeError('Expected iterable or array-like: ' + keyPath);
      }
      iter = getIterator(Iterable(keyPath));
    }
    return iter;
  }

  createClass(Record, KeyedCollection);

    function Record(defaultValues, name) {
      var hasInitialized;

      var RecordType = function Record(values) {
        if (values instanceof RecordType) {
          return values;
        }
        if (!(this instanceof RecordType)) {
          return new RecordType(values);
        }
        if (!hasInitialized) {
          hasInitialized = true;
          var keys = Object.keys(defaultValues);
          setProps(RecordTypePrototype, keys);
          RecordTypePrototype.size = keys.length;
          RecordTypePrototype._name = name;
          RecordTypePrototype._keys = keys;
          RecordTypePrototype._defaultValues = defaultValues;
        }
        this._map = Map(values);
      };

      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
      RecordTypePrototype.constructor = RecordType;

      return RecordType;
    }

    Record.prototype.toString = function() {
      return this.__toString(recordName(this) + ' {', '}');
    };

    // @pragma Access

    Record.prototype.has = function(k) {
      return this._defaultValues.hasOwnProperty(k);
    };

    Record.prototype.get = function(k, notSetValue) {
      if (!this.has(k)) {
        return notSetValue;
      }
      var defaultVal = this._defaultValues[k];
      return this._map ? this._map.get(k, defaultVal) : defaultVal;
    };

    // @pragma Modification

    Record.prototype.clear = function() {
      if (this.__ownerID) {
        this._map && this._map.clear();
        return this;
      }
      var RecordType = this.constructor;
      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
    };

    Record.prototype.set = function(k, v) {
      if (!this.has(k)) {
        throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
      }
      if (this._map && !this._map.has(k)) {
        var defaultVal = this._defaultValues[k];
        if (v === defaultVal) {
          return this;
        }
      }
      var newMap = this._map && this._map.set(k, v);
      if (this.__ownerID || newMap === this._map) {
        return this;
      }
      return makeRecord(this, newMap);
    };

    Record.prototype.remove = function(k) {
      if (!this.has(k)) {
        return this;
      }
      var newMap = this._map && this._map.remove(k);
      if (this.__ownerID || newMap === this._map) {
        return this;
      }
      return makeRecord(this, newMap);
    };

    Record.prototype.wasAltered = function() {
      return this._map.wasAltered();
    };

    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;
      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);
    };

    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);
    };

    Record.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map && this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return makeRecord(this, newMap, ownerID);
    };


  var RecordPrototype = Record.prototype;
  RecordPrototype[DELETE] = RecordPrototype.remove;
  RecordPrototype.deleteIn =
  RecordPrototype.removeIn = MapPrototype.removeIn;
  RecordPrototype.merge = MapPrototype.merge;
  RecordPrototype.mergeWith = MapPrototype.mergeWith;
  RecordPrototype.mergeIn = MapPrototype.mergeIn;
  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  RecordPrototype.setIn = MapPrototype.setIn;
  RecordPrototype.update = MapPrototype.update;
  RecordPrototype.updateIn = MapPrototype.updateIn;
  RecordPrototype.withMutations = MapPrototype.withMutations;
  RecordPrototype.asMutable = MapPrototype.asMutable;
  RecordPrototype.asImmutable = MapPrototype.asImmutable;


  function makeRecord(likeRecord, map, ownerID) {
    var record = Object.create(Object.getPrototypeOf(likeRecord));
    record._map = map;
    record.__ownerID = ownerID;
    return record;
  }

  function recordName(record) {
    return record._name || record.constructor.name || 'Record';
  }

  function setProps(prototype, names) {
    try {
      names.forEach(setProp.bind(undefined, prototype));
    } catch (error) {
      // Object.defineProperty failed. Probably IE8.
    }
  }

  function setProp(prototype, name) {
    Object.defineProperty(prototype, name, {
      get: function() {
        return this.get(name);
      },
      set: function(value) {
        invariant(this.__ownerID, 'Cannot set on an immutable record.');
        this.set(name, value);
      }
    });
  }

  createClass(Set, SetCollection);

    // @pragma Construction

    function Set(value) {
      return value === null || value === undefined ? emptySet() :
        isSet(value) && !isOrdered(value) ? value :
        emptySet().withMutations(function(set ) {
          var iter = SetIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v ) {return set.add(v)});
        });
    }

    Set.of = function(/*...values*/) {
      return this(arguments);
    };

    Set.fromKeys = function(value) {
      return this(KeyedIterable(value).keySeq());
    };

    Set.prototype.toString = function() {
      return this.__toString('Set {', '}');
    };

    // @pragma Access

    Set.prototype.has = function(value) {
      return this._map.has(value);
    };

    // @pragma Modification

    Set.prototype.add = function(value) {
      return updateSet(this, this._map.set(value, true));
    };

    Set.prototype.remove = function(value) {
      return updateSet(this, this._map.remove(value));
    };

    Set.prototype.clear = function() {
      return updateSet(this, this._map.clear());
    };

    // @pragma Composition

    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);
      iters = iters.filter(function(x ) {return x.size !== 0});
      if (iters.length === 0) {
        return this;
      }
      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
        return this.constructor(iters[0]);
      }
      return this.withMutations(function(set ) {
        for (var ii = 0; ii < iters.length; ii++) {
          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});
        }
      });
    };

    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter ) {return SetIterable(iter)});
      var originalSet = this;
      return this.withMutations(function(set ) {
        originalSet.forEach(function(value ) {
          if (!iters.every(function(iter ) {return iter.includes(value)})) {
            set.remove(value);
          }
        });
      });
    };

    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter ) {return SetIterable(iter)});
      var originalSet = this;
      return this.withMutations(function(set ) {
        originalSet.forEach(function(value ) {
          if (iters.some(function(iter ) {return iter.includes(value)})) {
            set.remove(value);
          }
        });
      });
    };

    Set.prototype.merge = function() {
      return this.union.apply(this, arguments);
    };

    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return this.union.apply(this, iters);
    };

    Set.prototype.sort = function(comparator) {
      // Late binding
      return OrderedSet(sortFactory(this, comparator));
    };

    Set.prototype.sortBy = function(mapper, comparator) {
      // Late binding
      return OrderedSet(sortFactory(this, comparator, mapper));
    };

    Set.prototype.wasAltered = function() {
      return this._map.wasAltered();
    };

    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);
    };

    Set.prototype.__iterator = function(type, reverse) {
      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);
    };

    Set.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return this.__make(newMap, ownerID);
    };


  function isSet(maybeSet) {
    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
  }

  Set.isSet = isSet;

  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

  var SetPrototype = Set.prototype;
  SetPrototype[IS_SET_SENTINEL] = true;
  SetPrototype[DELETE] = SetPrototype.remove;
  SetPrototype.mergeDeep = SetPrototype.merge;
  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
  SetPrototype.withMutations = MapPrototype.withMutations;
  SetPrototype.asMutable = MapPrototype.asMutable;
  SetPrototype.asImmutable = MapPrototype.asImmutable;

  SetPrototype.__empty = emptySet;
  SetPrototype.__make = makeSet;

  function updateSet(set, newMap) {
    if (set.__ownerID) {
      set.size = newMap.size;
      set._map = newMap;
      return set;
    }
    return newMap === set._map ? set :
      newMap.size === 0 ? set.__empty() :
      set.__make(newMap);
  }

  function makeSet(map, ownerID) {
    var set = Object.create(SetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_SET;
  function emptySet() {
    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
  }

  createClass(OrderedSet, Set);

    // @pragma Construction

    function OrderedSet(value) {
      return value === null || value === undefined ? emptyOrderedSet() :
        isOrderedSet(value) ? value :
        emptyOrderedSet().withMutations(function(set ) {
          var iter = SetIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v ) {return set.add(v)});
        });
    }

    OrderedSet.of = function(/*...values*/) {
      return this(arguments);
    };

    OrderedSet.fromKeys = function(value) {
      return this(KeyedIterable(value).keySeq());
    };

    OrderedSet.prototype.toString = function() {
      return this.__toString('OrderedSet {', '}');
    };


  function isOrderedSet(maybeOrderedSet) {
    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
  }

  OrderedSet.isOrderedSet = isOrderedSet;

  var OrderedSetPrototype = OrderedSet.prototype;
  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

  OrderedSetPrototype.__empty = emptyOrderedSet;
  OrderedSetPrototype.__make = makeOrderedSet;

  function makeOrderedSet(map, ownerID) {
    var set = Object.create(OrderedSetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_ORDERED_SET;
  function emptyOrderedSet() {
    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
  }

  createClass(Stack, IndexedCollection);

    // @pragma Construction

    function Stack(value) {
      return value === null || value === undefined ? emptyStack() :
        isStack(value) ? value :
        emptyStack().unshiftAll(value);
    }

    Stack.of = function(/*...values*/) {
      return this(arguments);
    };

    Stack.prototype.toString = function() {
      return this.__toString('Stack [', ']');
    };

    // @pragma Access

    Stack.prototype.get = function(index, notSetValue) {
      var head = this._head;
      index = wrapIndex(this, index);
      while (head && index--) {
        head = head.next;
      }
      return head ? head.value : notSetValue;
    };

    Stack.prototype.peek = function() {
      return this._head && this._head.value;
    };

    // @pragma Modification

    Stack.prototype.push = function(/*...values*/) {
      if (arguments.length === 0) {
        return this;
      }
      var newSize = this.size + arguments.length;
      var head = this._head;
      for (var ii = arguments.length - 1; ii >= 0; ii--) {
        head = {
          value: arguments[ii],
          next: head
        };
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };

    Stack.prototype.pushAll = function(iter) {
      iter = IndexedIterable(iter);
      if (iter.size === 0) {
        return this;
      }
      assertNotInfinite(iter.size);
      var newSize = this.size;
      var head = this._head;
      iter.reverse().forEach(function(value ) {
        newSize++;
        head = {
          value: value,
          next: head
        };
      });
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };

    Stack.prototype.pop = function() {
      return this.slice(1);
    };

    Stack.prototype.unshift = function(/*...values*/) {
      return this.push.apply(this, arguments);
    };

    Stack.prototype.unshiftAll = function(iter) {
      return this.pushAll(iter);
    };

    Stack.prototype.shift = function() {
      return this.pop.apply(this, arguments);
    };

    Stack.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._head = undefined;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return emptyStack();
    };

    Stack.prototype.slice = function(begin, end) {
      if (wholeSlice(begin, end, this.size)) {
        return this;
      }
      var resolvedBegin = resolveBegin(begin, this.size);
      var resolvedEnd = resolveEnd(end, this.size);
      if (resolvedEnd !== this.size) {
        // super.slice(begin, end);
        return IndexedCollection.prototype.slice.call(this, begin, end);
      }
      var newSize = this.size - resolvedBegin;
      var head = this._head;
      while (resolvedBegin--) {
        head = head.next;
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };

    // @pragma Mutability

    Stack.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeStack(this.size, this._head, ownerID, this.__hash);
    };

    // @pragma Iteration

    Stack.prototype.__iterate = function(fn, reverse) {
      if (reverse) {
        return this.reverse().__iterate(fn);
      }
      var iterations = 0;
      var node = this._head;
      while (node) {
        if (fn(node.value, iterations++, this) === false) {
          break;
        }
        node = node.next;
      }
      return iterations;
    };

    Stack.prototype.__iterator = function(type, reverse) {
      if (reverse) {
        return this.reverse().__iterator(type);
      }
      var iterations = 0;
      var node = this._head;
      return new Iterator(function()  {
        if (node) {
          var value = node.value;
          node = node.next;
          return iteratorValue(type, iterations++, value);
        }
        return iteratorDone();
      });
    };


  function isStack(maybeStack) {
    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
  }

  Stack.isStack = isStack;

  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

  var StackPrototype = Stack.prototype;
  StackPrototype[IS_STACK_SENTINEL] = true;
  StackPrototype.withMutations = MapPrototype.withMutations;
  StackPrototype.asMutable = MapPrototype.asMutable;
  StackPrototype.asImmutable = MapPrototype.asImmutable;
  StackPrototype.wasAltered = MapPrototype.wasAltered;


  function makeStack(size, head, ownerID, hash) {
    var map = Object.create(StackPrototype);
    map.size = size;
    map._head = head;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_STACK;
  function emptyStack() {
    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
  }

  /**
   * Contributes additional methods to a constructor
   */
  function mixin(ctor, methods) {
    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };
    Object.keys(methods).forEach(keyCopier);
    Object.getOwnPropertySymbols &&
      Object.getOwnPropertySymbols(methods).forEach(keyCopier);
    return ctor;
  }

  Iterable.Iterator = Iterator;

  mixin(Iterable, {

    // ### Conversion to other types

    toArray: function() {
      assertNotInfinite(this.size);
      var array = new Array(this.size || 0);
      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });
      return array;
    },

    toIndexedSeq: function() {
      return new ToIndexedSequence(this);
    },

    toJS: function() {
      return this.toSeq().map(
        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}
      ).__toJS();
    },

    toJSON: function() {
      return this.toSeq().map(
        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}
      ).__toJS();
    },

    toKeyedSeq: function() {
      return new ToKeyedSequence(this, true);
    },

    toMap: function() {
      // Use Late Binding here to solve the circular dependency.
      return Map(this.toKeyedSeq());
    },

    toObject: function() {
      assertNotInfinite(this.size);
      var object = {};
      this.__iterate(function(v, k)  { object[k] = v; });
      return object;
    },

    toOrderedMap: function() {
      // Use Late Binding here to solve the circular dependency.
      return OrderedMap(this.toKeyedSeq());
    },

    toOrderedSet: function() {
      // Use Late Binding here to solve the circular dependency.
      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
    },

    toSet: function() {
      // Use Late Binding here to solve the circular dependency.
      return Set(isKeyed(this) ? this.valueSeq() : this);
    },

    toSetSeq: function() {
      return new ToSetSequence(this);
    },

    toSeq: function() {
      return isIndexed(this) ? this.toIndexedSeq() :
        isKeyed(this) ? this.toKeyedSeq() :
        this.toSetSeq();
    },

    toStack: function() {
      // Use Late Binding here to solve the circular dependency.
      return Stack(isKeyed(this) ? this.valueSeq() : this);
    },

    toList: function() {
      // Use Late Binding here to solve the circular dependency.
      return List(isKeyed(this) ? this.valueSeq() : this);
    },


    // ### Common JavaScript methods and properties

    toString: function() {
      return '[Iterable]';
    },

    __toString: function(head, tail) {
      if (this.size === 0) {
        return head + tail;
      }
      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
    },


    // ### ES6 Collection methods (ES6 Array and Map)

    concat: function() {var values = SLICE$0.call(arguments, 0);
      return reify(this, concatFactory(this, values));
    },

    includes: function(searchValue) {
      return this.some(function(value ) {return is(value, searchValue)});
    },

    entries: function() {
      return this.__iterator(ITERATE_ENTRIES);
    },

    every: function(predicate, context) {
      assertNotInfinite(this.size);
      var returnValue = true;
      this.__iterate(function(v, k, c)  {
        if (!predicate.call(context, v, k, c)) {
          returnValue = false;
          return false;
        }
      });
      return returnValue;
    },

    filter: function(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, true));
    },

    find: function(predicate, context, notSetValue) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[1] : notSetValue;
    },

    forEach: function(sideEffect, context) {
      assertNotInfinite(this.size);
      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
    },

    join: function(separator) {
      assertNotInfinite(this.size);
      separator = separator !== undefined ? '' + separator : ',';
      var joined = '';
      var isFirst = true;
      this.__iterate(function(v ) {
        isFirst ? (isFirst = false) : (joined += separator);
        joined += v !== null && v !== undefined ? v.toString() : '';
      });
      return joined;
    },

    keys: function() {
      return this.__iterator(ITERATE_KEYS);
    },

    map: function(mapper, context) {
      return reify(this, mapFactory(this, mapper, context));
    },

    reduce: function(reducer, initialReduction, context) {
      assertNotInfinite(this.size);
      var reduction;
      var useFirst;
      if (arguments.length < 2) {
        useFirst = true;
      } else {
        reduction = initialReduction;
      }
      this.__iterate(function(v, k, c)  {
        if (useFirst) {
          useFirst = false;
          reduction = v;
        } else {
          reduction = reducer.call(context, reduction, v, k, c);
        }
      });
      return reduction;
    },

    reduceRight: function(reducer, initialReduction, context) {
      var reversed = this.toKeyedSeq().reverse();
      return reversed.reduce.apply(reversed, arguments);
    },

    reverse: function() {
      return reify(this, reverseFactory(this, true));
    },

    slice: function(begin, end) {
      return reify(this, sliceFactory(this, begin, end, true));
    },

    some: function(predicate, context) {
      return !this.every(not(predicate), context);
    },

    sort: function(comparator) {
      return reify(this, sortFactory(this, comparator));
    },

    values: function() {
      return this.__iterator(ITERATE_VALUES);
    },


    // ### More sequential methods

    butLast: function() {
      return this.slice(0, -1);
    },

    isEmpty: function() {
      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});
    },

    count: function(predicate, context) {
      return ensureSize(
        predicate ? this.toSeq().filter(predicate, context) : this
      );
    },

    countBy: function(grouper, context) {
      return countByFactory(this, grouper, context);
    },

    equals: function(other) {
      return deepEqual(this, other);
    },

    entrySeq: function() {
      var iterable = this;
      if (iterable._cache) {
        // We cache as an entries array, so we can just return the cache!
        return new ArraySeq(iterable._cache);
      }
      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};
      return entriesSequence;
    },

    filterNot: function(predicate, context) {
      return this.filter(not(predicate), context);
    },

    findEntry: function(predicate, context, notSetValue) {
      var found = notSetValue;
      this.__iterate(function(v, k, c)  {
        if (predicate.call(context, v, k, c)) {
          found = [k, v];
          return false;
        }
      });
      return found;
    },

    findKey: function(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry && entry[0];
    },

    findLast: function(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
    },

    findLastEntry: function(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
    },

    findLastKey: function(predicate, context) {
      return this.toKeyedSeq().reverse().findKey(predicate, context);
    },

    first: function() {
      return this.find(returnTrue);
    },

    flatMap: function(mapper, context) {
      return reify(this, flatMapFactory(this, mapper, context));
    },

    flatten: function(depth) {
      return reify(this, flattenFactory(this, depth, true));
    },

    fromEntrySeq: function() {
      return new FromEntriesSequence(this);
    },

    get: function(searchKey, notSetValue) {
      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);
    },

    getIn: function(searchKeyPath, notSetValue) {
      var nested = this;
      // Note: in an ES6 environment, we would prefer:
      // for (var key of searchKeyPath) {
      var iter = forceIterator(searchKeyPath);
      var step;
      while (!(step = iter.next()).done) {
        var key = step.value;
        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
        if (nested === NOT_SET) {
          return notSetValue;
        }
      }
      return nested;
    },

    groupBy: function(grouper, context) {
      return groupByFactory(this, grouper, context);
    },

    has: function(searchKey) {
      return this.get(searchKey, NOT_SET) !== NOT_SET;
    },

    hasIn: function(searchKeyPath) {
      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
    },

    isSubset: function(iter) {
      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
      return this.every(function(value ) {return iter.includes(value)});
    },

    isSuperset: function(iter) {
      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
      return iter.isSubset(this);
    },

    keyOf: function(searchValue) {
      return this.findKey(function(value ) {return is(value, searchValue)});
    },

    keySeq: function() {
      return this.toSeq().map(keyMapper).toIndexedSeq();
    },

    last: function() {
      return this.toSeq().reverse().first();
    },

    lastKeyOf: function(searchValue) {
      return this.toKeyedSeq().reverse().keyOf(searchValue);
    },

    max: function(comparator) {
      return maxFactory(this, comparator);
    },

    maxBy: function(mapper, comparator) {
      return maxFactory(this, comparator, mapper);
    },

    min: function(comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
    },

    minBy: function(mapper, comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
    },

    rest: function() {
      return this.slice(1);
    },

    skip: function(amount) {
      return this.slice(Math.max(0, amount));
    },

    skipLast: function(amount) {
      return reify(this, this.toSeq().reverse().skip(amount).reverse());
    },

    skipWhile: function(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, true));
    },

    skipUntil: function(predicate, context) {
      return this.skipWhile(not(predicate), context);
    },

    sortBy: function(mapper, comparator) {
      return reify(this, sortFactory(this, comparator, mapper));
    },

    take: function(amount) {
      return this.slice(0, Math.max(0, amount));
    },

    takeLast: function(amount) {
      return reify(this, this.toSeq().reverse().take(amount).reverse());
    },

    takeWhile: function(predicate, context) {
      return reify(this, takeWhileFactory(this, predicate, context));
    },

    takeUntil: function(predicate, context) {
      return this.takeWhile(not(predicate), context);
    },

    valueSeq: function() {
      return this.toIndexedSeq();
    },


    // ### Hashable Object

    hashCode: function() {
      return this.__hash || (this.__hash = hashIterable(this));
    }


    // ### Internal

    // abstract __iterate(fn, reverse)

    // abstract __iterator(type, reverse)
  });

  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  var IterablePrototype = Iterable.prototype;
  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
  IterablePrototype.__toJS = IterablePrototype.toArray;
  IterablePrototype.__toStringMapper = quoteString;
  IterablePrototype.inspect =
  IterablePrototype.toSource = function() { return this.toString(); };
  IterablePrototype.chain = IterablePrototype.flatMap;
  IterablePrototype.contains = IterablePrototype.includes;

  mixin(KeyedIterable, {

    // ### More sequential methods

    flip: function() {
      return reify(this, flipFactory(this));
    },

    mapEntries: function(mapper, context) {var this$0 = this;
      var iterations = 0;
      return reify(this,
        this.toSeq().map(
          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}
        ).fromEntrySeq()
      );
    },

    mapKeys: function(mapper, context) {var this$0 = this;
      return reify(this,
        this.toSeq().flip().map(
          function(k, v)  {return mapper.call(context, k, v, this$0)}
        ).flip()
      );
    }

  });

  var KeyedIterablePrototype = KeyedIterable.prototype;
  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};



  mixin(IndexedIterable, {

    // ### Conversion to other types

    toKeyedSeq: function() {
      return new ToKeyedSequence(this, false);
    },


    // ### ES6 Collection methods (ES6 Array and Map)

    filter: function(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, false));
    },

    findIndex: function(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    indexOf: function(searchValue) {
      var key = this.keyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    lastIndexOf: function(searchValue) {
      var key = this.lastKeyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    reverse: function() {
      return reify(this, reverseFactory(this, false));
    },

    slice: function(begin, end) {
      return reify(this, sliceFactory(this, begin, end, false));
    },

    splice: function(index, removeNum /*, ...values*/) {
      var numArgs = arguments.length;
      removeNum = Math.max(removeNum | 0, 0);
      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
        return this;
      }
      // If index is negative, it should resolve relative to the size of the
      // collection. However size may be expensive to compute if not cached, so
      // only call count() if the number is in fact negative.
      index = resolveBegin(index, index < 0 ? this.count() : this.size);
      var spliced = this.slice(0, index);
      return reify(
        this,
        numArgs === 1 ?
          spliced :
          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
      );
    },


    // ### More collection methods

    findLastIndex: function(predicate, context) {
      var entry = this.findLastEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    first: function() {
      return this.get(0);
    },

    flatten: function(depth) {
      return reify(this, flattenFactory(this, depth, false));
    },

    get: function(index, notSetValue) {
      index = wrapIndex(this, index);
      return (index < 0 || (this.size === Infinity ||
          (this.size !== undefined && index > this.size))) ?
        notSetValue :
        this.find(function(_, key)  {return key === index}, undefined, notSetValue);
    },

    has: function(index) {
      index = wrapIndex(this, index);
      return index >= 0 && (this.size !== undefined ?
        this.size === Infinity || index < this.size :
        this.indexOf(index) !== -1
      );
    },

    interpose: function(separator) {
      return reify(this, interposeFactory(this, separator));
    },

    interleave: function(/*...iterables*/) {
      var iterables = [this].concat(arrCopy(arguments));
      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
      var interleaved = zipped.flatten(true);
      if (zipped.size) {
        interleaved.size = zipped.size * iterables.length;
      }
      return reify(this, interleaved);
    },

    keySeq: function() {
      return Range(0, this.size);
    },

    last: function() {
      return this.get(-1);
    },

    skipWhile: function(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, false));
    },

    zip: function(/*, ...iterables */) {
      var iterables = [this].concat(arrCopy(arguments));
      return reify(this, zipWithFactory(this, defaultZipper, iterables));
    },

    zipWith: function(zipper/*, ...iterables */) {
      var iterables = arrCopy(arguments);
      iterables[0] = this;
      return reify(this, zipWithFactory(this, zipper, iterables));
    }

  });

  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;



  mixin(SetIterable, {

    // ### ES6 Collection methods (ES6 Array and Map)

    get: function(value, notSetValue) {
      return this.has(value) ? value : notSetValue;
    },

    includes: function(value) {
      return this.has(value);
    },


    // ### More sequential methods

    keySeq: function() {
      return this.valueSeq();
    }

  });

  SetIterable.prototype.has = IterablePrototype.includes;
  SetIterable.prototype.contains = SetIterable.prototype.includes;


  // Mixin subclasses

  mixin(KeyedSeq, KeyedIterable.prototype);
  mixin(IndexedSeq, IndexedIterable.prototype);
  mixin(SetSeq, SetIterable.prototype);

  mixin(KeyedCollection, KeyedIterable.prototype);
  mixin(IndexedCollection, IndexedIterable.prototype);
  mixin(SetCollection, SetIterable.prototype);


  // #pragma Helper functions

  function keyMapper(v, k) {
    return k;
  }

  function entryMapper(v, k) {
    return [k, v];
  }

  function not(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    }
  }

  function neg(predicate) {
    return function() {
      return -predicate.apply(this, arguments);
    }
  }

  function quoteString(value) {
    return typeof value === 'string' ? JSON.stringify(value) : String(value);
  }

  function defaultZipper() {
    return arrCopy(arguments);
  }

  function defaultNegComparator(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
  }

  function hashIterable(iterable) {
    if (iterable.size === Infinity) {
      return 0;
    }
    var ordered = isOrdered(iterable);
    var keyed = isKeyed(iterable);
    var h = ordered ? 1 : 0;
    var size = iterable.__iterate(
      keyed ?
        ordered ?
          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :
          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :
        ordered ?
          function(v ) { h = 31 * h + hash(v) | 0; } :
          function(v ) { h = h + hash(v) | 0; }
    );
    return murmurHashOfSize(size, h);
  }

  function murmurHashOfSize(size, h) {
    h = imul(h, 0xCC9E2D51);
    h = imul(h << 15 | h >>> -15, 0x1B873593);
    h = imul(h << 13 | h >>> -13, 5);
    h = (h + 0xE6546B64 | 0) ^ size;
    h = imul(h ^ h >>> 16, 0x85EBCA6B);
    h = imul(h ^ h >>> 13, 0xC2B2AE35);
    h = smi(h ^ h >>> 16);
    return h;
  }

  function hashMerge(a, b) {
    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
  }

  var Immutable = {

    Iterable: Iterable,

    Seq: Seq,
    Collection: Collection,
    Map: Map,
    OrderedMap: OrderedMap,
    List: List,
    Stack: Stack,
    Set: Set,
    OrderedSet: OrderedSet,

    Record: Record,
    Range: Range,
    Repeat: Repeat,

    is: is,
    fromJS: fromJS

  };

  return Immutable;

}));
},{}],78:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (action) {
  return action && action.type === '@@redux/INIT' ? 'initialState argument passed to createStore' : 'previous state received by the reducer';
};

module.exports = exports['default'];
//# sourceMappingURL=getStateName.js.map
},{}],79:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _getStateName = require('./getStateName');

var _getStateName2 = _interopRequireDefault(_getStateName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (state, reducers, action) {
  var reducerNames = Object.keys(reducers);

  if (!reducerNames.length) {
    return 'Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.';
  }

  var stateName = (0, _getStateName2.default)(action);

  if (_immutable2.default.isImmutable ? !_immutable2.default.isImmutable(state) : !_immutable2.default.Iterable.isIterable(state)) {
    return 'The ' + stateName + ' is of unexpected type. Expected argument to be an instance of Immutable.Collection or Immutable.Record with the following properties: "' + reducerNames.join('", "') + '".';
  }

  var unexpectedStatePropertyNames = state.toSeq().keySeq().toArray().filter(function (name) {
    return !reducers.hasOwnProperty(name);
  });

  if (unexpectedStatePropertyNames.length > 0) {
    return 'Unexpected ' + (unexpectedStatePropertyNames.length === 1 ? 'property' : 'properties') + ' "' + unexpectedStatePropertyNames.join('", "') + '" found in ' + stateName + '. Expected to find one of the known reducer property names instead: "' + reducerNames.join('", "') + '". Unexpected properties will be ignored.';
  }

  return null;
};

module.exports = exports['default'];
//# sourceMappingURL=getUnexpectedInvocationParameterMessage.js.map
},{"immutable":70,"./getStateName":78}],80:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (nextState, reducerName, action) {
  // eslint-disable-next-line no-undefined
  if (nextState === undefined) {
    throw new Error('Reducer "' + reducerName + '" returned undefined when handling "' + action.type + '" action. To ignore an action, you must explicitly return the previous state.');
  }
};

module.exports = exports['default'];
//# sourceMappingURL=validateNextState.js.map
},{}],77:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateNextState = exports.getUnexpectedInvocationParameterMessage = exports.getStateName = undefined;

var _getStateName2 = require('./getStateName');

var _getStateName3 = _interopRequireDefault(_getStateName2);

var _getUnexpectedInvocationParameterMessage2 = require('./getUnexpectedInvocationParameterMessage');

var _getUnexpectedInvocationParameterMessage3 = _interopRequireDefault(_getUnexpectedInvocationParameterMessage2);

var _validateNextState2 = require('./validateNextState');

var _validateNextState3 = _interopRequireDefault(_validateNextState2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.getStateName = _getStateName3.default;
exports.getUnexpectedInvocationParameterMessage = _getUnexpectedInvocationParameterMessage3.default;
exports.validateNextState = _validateNextState3.default;
//# sourceMappingURL=index.js.map
},{"./getStateName":78,"./getUnexpectedInvocationParameterMessage":79,"./validateNextState":80}],72:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _utilities = require('./utilities');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = function (reducers) {
  var getDefaultState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _immutable2.default.Map;

  var reducerKeys = Object.keys(reducers);

  // eslint-disable-next-line space-infix-ops
  return function () {
    var inputState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getDefaultState();
    var action = arguments[1];

    // eslint-disable-next-line no-process-env
    if ('development' !== 'production') {
      var warningMessage = (0, _utilities.getUnexpectedInvocationParameterMessage)(inputState, reducers, action);

      if (warningMessage) {
        // eslint-disable-next-line no-console
        console.error(warningMessage);
      }
    }

    return inputState.withMutations(function (temporaryState) {
      reducerKeys.forEach(function (reducerName) {
        var reducer = reducers[reducerName];
        var currentDomainState = temporaryState.get(reducerName);
        var nextDomainState = reducer(currentDomainState, action);

        (0, _utilities.validateNextState)(nextDomainState, reducerName, action);

        temporaryState.set(reducerName, nextDomainState);
      });
    });
  };
};

module.exports = exports['default'];
//# sourceMappingURL=combineReducers.js.map
},{"immutable":70,"./utilities":77}],69:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineReducers = undefined;

var _combineReducers2 = require('./combineReducers');

var _combineReducers3 = _interopRequireDefault(_combineReducers2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.combineReducers = _combineReducers3.default;
//# sourceMappingURL=index.js.map
},{"./combineReducers":72}],30:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DEFINE = exports.UNFADE = exports.FADE = exports.VICTORY = exports.START_LEVEL = exports.BETA_REDUCE = exports.UNFOLD = exports.SMALL_STEP = exports.ATTACH_NOTCH = exports.FILL_HOLE = exports.DETACH = exports.RAISE = exports.USE_TOOLBOX = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.startLevel = startLevel;
exports.smallStep = smallStep;
exports.unfold = unfold;
exports.betaReduce = betaReduce;
exports.raise = raise;
exports.detach = detach;
exports.fillHole = fillHole;
exports.attachNotch = attachNotch;
exports.useToolbox = useToolbox;
exports.victory = victory;
exports.skipUndo = skipUndo;
exports.unfade = unfade;
exports.fade = fade;
exports.define = define;

var _immutable = require("immutable");

var immutable = _interopRequireWildcard(_immutable);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var USE_TOOLBOX = exports.USE_TOOLBOX = "use-toolbox";
var RAISE = exports.RAISE = "raise";
var DETACH = exports.DETACH = "detach";
var FILL_HOLE = exports.FILL_HOLE = "fill-hole";
var ATTACH_NOTCH = exports.ATTACH_NOTCH = "attach-notch";
var SMALL_STEP = exports.SMALL_STEP = "small-step";
var UNFOLD = exports.UNFOLD = "unfold";
var BETA_REDUCE = exports.BETA_REDUCE = "beta-reduce";
var START_LEVEL = exports.START_LEVEL = "start-level";
var VICTORY = exports.VICTORY = "victory";
var FADE = exports.FADE = "fade";
var UNFADE = exports.UNFADE = "unfade";
var DEFINE = exports.DEFINE = "define";

/**
 * Redux action to start a new level.
 *
 * Takes trees of normal AST nodes and flattens them into immutable
 * nodes, suitable to store in Redux.
 *
 * Flattened trees are doubly-linked: children know their parent, and
 * which parent field they are stored in.
 */
function startLevel(stage, goal, board, toolbox, globals) {
    var semantics = stage.semantics;

    var _nodes = {};
    var _goal = [];
    var _board = [];
    var _toolbox = [];
    var _globals = {};

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = goal[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var expr = _step.value;
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = semantics.flatten(expr)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var newExpr = _step6.value;

                    _nodes[newExpr.id] = newExpr;
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            _goal.push(expr.id);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = board[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _expr = _step2.value;
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = semantics.flatten(_expr)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var _newExpr = _step7.value;

                    _nodes[_newExpr.id] = _newExpr;
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            _board.push(_expr.id);
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = toolbox[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _expr2 = _step3.value;
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = semantics.flatten(_expr2)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var _newExpr2 = _step8.value;

                    _nodes[_newExpr2.id] = _newExpr2;
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            _toolbox.push(_expr2.id);
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
        for (var _iterator4 = Object.entries(globals)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _ref = _step4.value;

            var _ref2 = _slicedToArray(_ref, 2);

            var name = _ref2[0];
            var _expr3 = _ref2[1];
            var _iteratorNormalCompletion9 = true;
            var _didIteratorError9 = false;
            var _iteratorError9 = undefined;

            try {
                for (var _iterator9 = semantics.flatten(_expr3)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                    var _newExpr3 = _step9.value;

                    _nodes[_newExpr3.id] = _newExpr3;
                }
            } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion9 && _iterator9.return) {
                        _iterator9.return();
                    }
                } finally {
                    if (_didIteratorError9) {
                        throw _iteratorError9;
                    }
                }
            }

            _globals[name] = _expr3.id;
        }
    } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
            }
        } finally {
            if (_didIteratorError4) {
                throw _iteratorError4;
            }
        }
    }

    var _semantics$parser$pos = semantics.parser.postParse(_nodes, _goal, _board, _toolbox, _globals);

    _nodes = _semantics$parser$pos.nodes;
    _goal = _semantics$parser$pos.goal;
    _board = _semantics$parser$pos.board;
    _toolbox = _semantics$parser$pos.toolbox;
    _globals = _semantics$parser$pos.globals;


    var finalNodes = immutable.Map().withMutations(function (fn) {
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
            for (var _iterator5 = Object.values(_nodes)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                var node = _step5.value;

                fn.set(node.id, immutable.Map(node));
            }
        } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion5 && _iterator5.return) {
                    _iterator5.return();
                }
            } finally {
                if (_didIteratorError5) {
                    throw _iteratorError5;
                }
            }
        }
    });

    finalNodes.map(function (node, nodeId) {
        stage.views[nodeId] = semantics.project(stage, finalNodes, node);
    });

    return {
        type: START_LEVEL,
        nodes: finalNodes,
        goal: _goal,
        board: _board,
        toolbox: _toolbox,
        globals: _globals
    };
}

/**
 * Node `nodeId` took a small step to produce `newNode` which contains
 * `newNodes` as nested nodes.
 */
function smallStep(nodeId, newNodeIds, newNodes) {
    return {
        type: SMALL_STEP,
        topNodeId: nodeId,
        newNodeIds: newNodeIds,
        addedNodes: newNodes
    };
}

/**
 * Unfold the definition of ``nodeId``.
 */
function unfold(nodeId, newNodeId, addedNodes) {
    return {
        type: UNFOLD,
        nodeId: nodeId,
        newNodeId: newNodeId,
        addedNodes: addedNodes
    };
}

/**
 * Node `topNodeId` was applied to `argNodeId` to produce `newNodeIds`
 * which contain `addedNodes` as nested nodes.
 *
 * A beta-reduction can produce multiple result nodes due to replicators.
 */
function betaReduce(topNodeId, argNodeId, newNodeIds, addedNodes) {
    return {
        type: BETA_REDUCE,
        topNodeId: topNodeId,
        argNodeId: argNodeId,
        newNodeIds: newNodeIds,
        addedNodes: addedNodes
    };
}

/**
 * Raise the given node to the top.
 *
 * This is a visual concern, but the stage draws nodes in the order
 * they are in the store, so this changes the z-index. We could make
 * the board an immutable.Set and store the draw-order elsewhere, but
 * we would have to synchronize it with any changes to the store. I
 * figured it was easier to just break separation in this case.
 */
function raise(nodeId) {
    return {
        type: RAISE,
        nodeId: nodeId
    };
}

/**
 * Detach the given node from its parent.
 */
function detach(nodeId) {
    return {
        type: DETACH,
        nodeId: nodeId
    };
}

/**
 * Replace the given hole by the given expression.
 */
function fillHole(holeId, childId) {
    return {
        type: FILL_HOLE,
        holeId: holeId,
        childId: childId
    };
}

/**
 * Attach the child to the given parent through the given notches
 */
function attachNotch(parentId, notchIdx, childId, childNotchIdx) {
    return {
        type: ATTACH_NOTCH,
        parentId: parentId,
        childId: childId,
        notchIdx: notchIdx,
        childNotchIdx: childNotchIdx
    };
}

/**
 * Take the given node out of the toolbox.
 */
function useToolbox(nodeId) {
    var clonedNodeId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var addedNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    return {
        type: USE_TOOLBOX,
        nodeId: nodeId,
        clonedNodeId: clonedNodeId,
        addedNodes: addedNodes
    };
}

/**
 * We've won the level.
 *
 * Clear the board/goal, which has the side effect of stopping them
 * from drawing anymore.
 */
function victory() {
    return {
        type: VICTORY
    };
}

/**
 * Add a flag to the action indicating not to record this on the
 * undo/redo stack.
 */
function skipUndo(action) {
    action.skipUndo = true;
    return action;
}

function unfade(source, nodeId, newNodeId, addedNodes) {
    return {
        type: UNFADE,
        source: source,
        nodeId: nodeId,
        newNodeId: newNodeId,
        addedNodes: addedNodes
    };
}

function fade(source, unfadedId, fadedId) {
    return {
        type: FADE,
        source: source,
        unfadedId: unfadedId,
        fadedId: fadedId
    };
}

function define(name, id) {
    return {
        type: DEFINE,
        name: name,
        id: id
    };
}
},{"immutable":70}],14:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.REDO = exports.UNDO = undefined;
exports.undo = undo;
exports.redo = redo;
exports.undoable = undoable;

var _immutable = require("immutable");

var immutable = _interopRequireWildcard(_immutable);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var UNDO = exports.UNDO = "undo";
var REDO = exports.REDO = "redo";

function undo() {
    return {
        type: UNDO
    };
}

function redo() {
    return {
        type: REDO
    };
}

/**
 * Given a reducer, return a reducer that supports undo/redo.
 */
function undoable(reducer) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var initialState = immutable.Map({
        $present: reducer(undefined, {}),
        $past: immutable.Stack(),
        $future: immutable.Stack(),
        // "Extra" state (used to store node positions)
        $presentExtra: {},
        $pastExtra: immutable.Stack(),
        $futureExtra: immutable.Stack()
    });

    return function () {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
        var action = arguments[1];

        var $present = state.get("$present");
        var $past = state.get("$past");
        var $future = state.get("$future");

        // Additional state to preserve that isn't part of Redux.
        var $presentExtra = state.get("$presentExtra");
        var $pastExtra = state.get("$pastExtra");
        var $futureExtra = state.get("$futureExtra");

        switch (action.type) {
            case UNDO:
                {
                    if ($past.isEmpty()) return state;

                    var newState = state.withMutations(function (map) {
                        map.set("$past", $past.shift()).set("$present", $past.peek()).set("$future", $future.unshift($present)).set("$pastExtra", $pastExtra.shift()).set("$presentExtra", $pastExtra.peek()).set("$futureExtra", $futureExtra.unshift($presentExtra));
                    });
                    options.restoreExtraState($past.peek(), $present, $pastExtra.peek());
                    return newState;
                }
            case REDO:
                {
                    if ($future.isEmpty()) return state;

                    var _newState = state.withMutations(function (map) {
                        map.set("$past", $past.unshift($present)).set("$present", $future.peek()).set("$future", $future.shift()).set("$pastExtra", $pastExtra.unshift($presentExtra)).set("$presentExtra", $futureExtra.peek()).set("$futureExtra", $futureExtra.shift());
                    });
                    options.restoreExtraState($future.peek(), $present, $futureExtra.peek());
                    return _newState;
                }
            default:
                {
                    var newPresent = reducer($present, action);
                    if (newPresent === $present) {
                        return state;
                    } else if (options.actionFilter && options.actionFilter(action)) {
                        return state.set("$present", newPresent);
                    }

                    var extraState = options.extraState($present, newPresent);
                    return state.withMutations(function (map) {
                        map.set("$past", $past.unshift($present)).set("$present", newPresent).set("$future", immutable.Stack()).set("$pastExtra", $pastExtra.unshift($presentExtra)).set("$presentExtra", extraState).set("$futureExtra", immutable.Stack());
                    });
                }
        }
    };
}
},{"immutable":70}],6:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.nextId = nextId;
exports.reduct = reduct;

var _immutable = require("immutable");

var immutable = _interopRequireWildcard(_immutable);

var _redux = require("redux");

var _reduxImmutable = require("redux-immutable");

var _action = require("./action");

var action = _interopRequireWildcard(_action);

var _core = require("../gfx/core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _undo = require("./undo");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var initialProgram = immutable.Map({
    nodes: immutable.Map(),
    goal: immutable.List(),
    board: immutable.List(),
    toolbox: immutable.List(),
    globals: immutable.Map()
});

var idCounter = 0;

function nextId() {
    return idCounter++;
}

// To speed up type checking, we only type check nodes that have
// changed.
var dirty = new Set();
function markDirty(nodes, id) {
    var expr = nodes.get(id);
    while (expr.get("parent")) {
        expr = nodes.get(expr.get("parent"));
    }
    dirty.add(expr.get("id"));
}

function reduct(semantics, views, restorePos) {
    function program() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialProgram;
        var act = arguments[1];

        switch (act.type) {
            case action.START_LEVEL:
                {
                    act.nodes.forEach(function (n) {
                        return markDirty(act.nodes, n.get("id"));
                    });
                    act.toolbox.forEach(function (n) {
                        return markDirty(act.nodes, n);
                    });
                    return state.merge({
                        nodes: act.nodes,
                        goal: act.goal,
                        board: act.board,
                        toolbox: act.toolbox,
                        globals: act.globals
                    });
                }
            case action.RAISE:
                {
                    var board = state.get("board");
                    if (board.contains(act.nodeId)) {
                        var newBoard = board.filter(function (n) {
                            return n !== act.nodeId;
                        }).push(act.nodeId);
                        return state.set("board", newBoard);
                    }
                    return state;
                }
            case action.SMALL_STEP:
                {
                    var oldNode = state.getIn(["nodes", act.topNodeId]);

                    var newNodes = state.get("nodes").withMutations(function (n) {
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = act.addedNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var node = _step.value;

                                n.set(node.get("id"), node);
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    });

                    var _newBoard = state.get("board").filter(function (id) {
                        return id !== act.topNodeId;
                    });
                    if (!oldNode.get("parent")) {
                        _newBoard = _newBoard.concat(act.newNodeIds);
                    } else if (act.newNodeIds.length !== 1) {
                        throw "Cannot small-step a child expression to multiple new expressions.";
                        // TODO: handle this more gracefully? Create a vtuple?
                    } else {
                        var parent = newNodes.get(oldNode.get("parent")).set(oldNode.get("parentField"), act.newNodeIds[0]);
                        // TODO: this could be done more efficiently
                        newNodes = newNodes.withMutations(function (n) {
                            n.set(oldNode.get("parent"), parent);
                            n.set(act.newNodeIds[0], newNodes.get(act.newNodeIds[0]).withMutations(function (nn) {
                                nn.set("parent", parent.get("id"));
                                nn.set("parentField", oldNode.get("parentField"));
                            }));
                        });
                    }

                    act.newNodeIds.forEach(function (id) {
                        return markDirty(newNodes, id);
                    });

                    return state.set("nodes", newNodes).set("board", _newBoard);
                }
            case action.UNFOLD:
                {
                    var nodes = state.get("nodes");
                    var ref = nodes.get(act.nodeId);

                    var newState = state.set("nodes", nodes.withMutations(function (n) {
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = act.addedNodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var node = _step2.value;

                                n.set(node.get("id"), node);
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }

                        if (ref.has("parent")) {
                            var parentId = ref.get("parent");
                            n.set(parentId, n.get(parentId).set(ref.get("parentField"), act.newNodeId));
                            n.set("locked", true);
                        }
                    }));

                    if (!ref.has("parent")) {
                        newState = newState.set("board", state.get("board").map(function (id) {
                            return id === act.nodeId ? act.newNodeId : id;
                        }));
                    }

                    return newState;
                }
            case action.BETA_REDUCE:
                {
                    var queue = [act.topNodeId, act.argNodeId];
                    var removedNodes = {};

                    var addedNodes = immutable.Map(act.addedNodes.map(function (n) {
                        var id = n.get("id");
                        if (act.newNodeIds.indexOf(id) >= 0) {
                            return [id, n.delete("parent").delete("parentField")];
                        } else {
                            return [id, n];
                        }
                    }));

                    while (queue.length > 0) {
                        var current = queue.pop();
                        var currentNode = state.getIn(["nodes", current]);
                        removedNodes[current] = true;
                        var _iteratorNormalCompletion3 = true;
                        var _didIteratorError3 = false;
                        var _iteratorError3 = undefined;

                        try {
                            for (var _iterator3 = semantics.subexpressions(currentNode)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                var subexpField = _step3.value;

                                queue.push(currentNode.get(subexpField));
                            }
                        } catch (err) {
                            _didIteratorError3 = true;
                            _iteratorError3 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                    _iterator3.return();
                                }
                            } finally {
                                if (_didIteratorError3) {
                                    throw _iteratorError3;
                                }
                            }
                        }
                    }

                    var _oldNode = state.getIn(["nodes", act.topNodeId]);

                    var _newNodes = state.get("nodes").filter(function (key, value) {
                        return !removedNodes[key];
                    }).merge(addedNodes);

                    var _newBoard2 = state.get("board").filter(function (id) {
                        return !removedNodes[id];
                    });
                    if (!_oldNode.get("parent")) {
                        _newBoard2 = _newBoard2.concat(act.newNodeIds);
                    } else {
                        if (act.newNodeIds.length > 1) {
                            console.error("Can't beta reduce nested lambda that produced multiple new nodes!");
                            return null;
                        }
                        var _parent = _newNodes.get(_oldNode.get("parent")).set(_oldNode.get("parentField"), act.newNodeIds[0]);
                        _newNodes = _newNodes.set(_oldNode.get("parent"), _parent);
                    }

                    act.newNodeIds.forEach(function (id) {
                        return markDirty(_newNodes, id);
                    });

                    return state.withMutations(function (s) {
                        s.set("nodes", _newNodes);
                        s.set("board", _newBoard2);
                        s.set("toolbox", s.get("toolbox").filter(function (id) {
                            return !removedNodes[id];
                        }));
                    });
                }
            case action.FILL_HOLE:
                {
                    var hole = state.getIn(["nodes", act.holeId]);

                    var holeParent = state.getIn(["nodes", act.holeId, "parent"]);
                    if (holeParent === undefined) throw "Hole " + act.holeId + " has no parent!";

                    var child = state.getIn(["nodes", act.childId]);
                    if (child.get("parent")) throw "Dragging objects from one hole to another is unsupported.";

                    return state.withMutations(function (map) {
                        map.set("board", map.get("board").filter(function (n) {
                            return n != act.childId;
                        }));
                        map.set("toolbox", map.get("toolbox").filter(function (n) {
                            return n != act.childId;
                        }));
                        map.set("nodes", map.get("nodes").withMutations(function (nodes) {
                            nodes.set(holeParent, nodes.get(holeParent).withMutations(function (holeParent) {
                                // Cache the hole in the parent, so that we
                                // don't have to create a new hole if they
                                // detach the field later.
                                holeParent.set(hole.get("parentField") + "__hole", holeParent.get(hole.get("parentField")));
                                holeParent.set(hole.get("parentField"), act.childId);
                            }));
                            nodes.set(act.childId, child.withMutations(function (child) {
                                child.set("parentField", hole.get("parentField"));
                                child.set("parent", holeParent);
                                child.set("locked", false);
                            }));
                        }));

                        markDirty(map.get("nodes"), act.childId);
                    });
                }
            case action.ATTACH_NOTCH:
                {
                    var _child = state.getIn(["nodes", act.childId]);
                    if (_child.get("parent")) throw "Dragging objects from one hole to another is unsupported.";

                    return state.withMutations(function (s) {
                        // s.set("board", s.get("board").filter(n => n !== act.childId));
                        s.set("toolbox", s.get("toolbox").filter(function (n) {
                            return n !== act.childId;
                        }));
                        s.set("nodes", s.get("nodes").withMutations(function (nodes) {
                            nodes.set(act.parentId, nodes.get(act.parentId).set("notch" + act.notchIdx, act.childId));
                            nodes.set(act.childId, _child.withMutations(function (c) {
                                c.set("parentField", "notch" + act.notchIdx);
                                c.set("parent", act.parentId);
                                c.set("locked", false);
                            }));
                        }));

                        // TODO: refactor
                        var defn = semantics.definition.expressions[s.getIn(["nodes", act.parentId, "type"])];
                        if (defn && defn.notches[act.notchIdx]) {
                            var notch = defn.notches[act.notchIdx];
                            if (notch.onAttach) {
                                notch.onAttach(semantics, s, act.parentId, act.childId);
                            }
                        }

                        if (s.get("board").contains(act.childId)) {
                            // Actually remove from the board
                            s.set("board", s.get("board").filter(function (n) {
                                return n !== act.childId;
                            }));
                        }

                        var nodes = state.get("nodes");
                        var _iteratorNormalCompletion4 = true;
                        var _didIteratorError4 = false;
                        var _iteratorError4 = undefined;

                        try {
                            for (var _iterator4 = state.get("board").concat(state.get("toolbox"))[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                                var id = _step4.value;

                                markDirty(nodes, id);
                            }
                        } catch (err) {
                            _didIteratorError4 = true;
                            _iteratorError4 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                    _iterator4.return();
                                }
                            } finally {
                                if (_didIteratorError4) {
                                    throw _iteratorError4;
                                }
                            }
                        }
                    });
                }
            case action.USE_TOOLBOX:
                {
                    if (state.get("toolbox").contains(act.nodeId)) {
                        // If node has __meta indicating infinite uses, clone
                        // instead.
                        if (act.clonedNodeId) {
                            return state.withMutations(function (mutState) {
                                // TODO: don't delete entire metadata section
                                mutState.set("nodes", mutState.get("nodes").withMutations(function (nodes) {
                                    var _iteratorNormalCompletion5 = true;
                                    var _didIteratorError5 = false;
                                    var _iteratorError5 = undefined;

                                    try {
                                        for (var _iterator5 = act.addedNodes[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                                            var node = _step5.value;

                                            nodes.set(node.get("id"), node);
                                        }
                                    } catch (err) {
                                        _didIteratorError5 = true;
                                        _iteratorError5 = err;
                                    } finally {
                                        try {
                                            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                                _iterator5.return();
                                            }
                                        } finally {
                                            if (_didIteratorError5) {
                                                throw _iteratorError5;
                                            }
                                        }
                                    }
                                }));
                                mutState.set("board", mutState.get("board").push(act.clonedNodeId));
                            });
                        }

                        return state.withMutations(function (mutState) {
                            mutState.set("board", mutState.get("board").push(act.nodeId));
                            mutState.set("toolbox", mutState.get("toolbox").filter(function (n) {
                                return n !== act.nodeId;
                            }));
                        });
                    }
                    return state;
                }
            case action.DETACH:
                {
                    var node = state.getIn(["nodes", act.nodeId]);

                    var _parent2 = state.getIn(["nodes", act.nodeId, "parent"]);
                    if (_parent2 === undefined) throw "Can't detach node " + act.nodeId + " with no parent!";

                    return state.withMutations(function (map) {
                        map.set("board", map.get("board").push(act.nodeId));
                        map.set("nodes", map.get("nodes").withMutations(function (nodes) {
                            nodes.set(_parent2, nodes.get(_parent2).withMutations(function (parent) {
                                var oldHole = parent.get(node.get("parentField") + "__hole");
                                if (oldHole) {
                                    parent.set(node.get("parentField"), oldHole);
                                    parent.delete(node.get("parentField") + "__hole");
                                } else if (node.get("parentField").slice(0, 5) === "notch") {
                                    parent.delete(node.get("parentField"));
                                } else {
                                    throw "Unimplemented: creating new hole";
                                }
                            }));

                            // TODO: refactor
                            if (node.get("parentField").slice(0, 5) === "notch") {
                                var notchIdx = parseInt(node.get("parentField").slice(5), 10);
                                var parentNode = map.getIn(["nodes", _parent2]);
                                var defn = semantics.definition.expressions[parentNode.get("type")];
                                if (defn && defn.notches[notchIdx]) {
                                    var notch = defn.notches[notchIdx];
                                    if (notch.onDetach) {
                                        notch.onDetach(semantics, map, parentNode.get("id"), node.get("id"));
                                    }
                                }

                                var _nodes = state.get("nodes");
                                var _iteratorNormalCompletion6 = true;
                                var _didIteratorError6 = false;
                                var _iteratorError6 = undefined;

                                try {
                                    for (var _iterator6 = state.get("board").concat(state.get("toolbox"))[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                        var id = _step6.value;

                                        markDirty(_nodes, id);
                                    }
                                } catch (err) {
                                    _didIteratorError6 = true;
                                    _iteratorError6 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                            _iterator6.return();
                                        }
                                    } finally {
                                        if (_didIteratorError6) {
                                            throw _iteratorError6;
                                        }
                                    }
                                }
                            }

                            nodes.set(act.nodeId, node.withMutations(function (node) {
                                node.delete("parentField");
                                node.delete("parent");
                            }));

                            markDirty(nodes, _parent2);
                        }));
                    });
                }
            case action.VICTORY:
                {
                    return state.withMutations(function (map) {
                        map.set("board", immutable.List());
                        map.set("goal", immutable.List());
                    });
                }
            case action.UNFADE:
                {
                    return state.withMutations(function (s) {
                        s.set("nodes", s.get("nodes").withMutations(function (n) {
                            var _iteratorNormalCompletion7 = true;
                            var _didIteratorError7 = false;
                            var _iteratorError7 = undefined;

                            try {
                                for (var _iterator7 = act.addedNodes[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                                    var newNode = _step7.value;

                                    n.set(newNode.get("id"), newNode);
                                }
                            } catch (err) {
                                _didIteratorError7 = true;
                                _iteratorError7 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                        _iterator7.return();
                                    }
                                } finally {
                                    if (_didIteratorError7) {
                                        throw _iteratorError7;
                                    }
                                }
                            }
                        }));
                        s.set(act.source, s.get(act.source).map(function (n) {
                            return n === act.nodeId ? act.newNodeId : n;
                        }));
                    });
                }
            case action.FADE:
                {
                    return state.withMutations(function (s) {
                        s.set(act.source, s.get(act.source).map(function (n) {
                            return n === act.unfadedId ? act.fadedId : n;
                        }));
                    });
                }
            case action.DEFINE:
                {
                    return state.withMutations(function (s) {
                        s.set("globals", state.get("globals").set(act.name, act.id));
                        s.set("board", state.get("board").filter(function (id) {
                            return id !== act.id;
                        }));
                    });
                }
            default:
                return state;
        }
    }

    function annotateTypes() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialProgram;

        var annotatedNodes = state.get("nodes").withMutations(function (n) {
            // for (const [ exprId, expr ] of n.entries()) {
            //     n.set(exprId, expr.set("ty", null));
            //     n.set(exprId, expr.set("complete", false));
            // }

            // for (const id of state.get("board").concat(state.get("toolbox"))) {
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = dirty.values()[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var id = _step8.value;

                    var _semantics$collectTyp = semantics.collectTypes(state.set("nodes", n), n.get(id)),
                        types = _semantics$collectTyp.types,
                        completeness = _semantics$collectTyp.completeness;

                    var _iteratorNormalCompletion9 = true;
                    var _didIteratorError9 = false;
                    var _iteratorError9 = undefined;

                    try {
                        for (var _iterator9 = n.entries()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                            var _ref = _step9.value;

                            var _ref2 = _slicedToArray(_ref, 2);

                            var exprId = _ref2[0];
                            var expr = _ref2[1];

                            var newExpr = expr;
                            if (types.has(exprId)) {
                                newExpr = newExpr.set("ty", types.get(exprId));
                            }
                            if (completeness.has(exprId)) {
                                newExpr = newExpr.set("complete", completeness.get(exprId));
                            }
                            n.set(exprId, newExpr);
                        }
                    } catch (err) {
                        _didIteratorError9 = true;
                        _iteratorError9 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion9 && _iterator9.return) {
                                _iterator9.return();
                            }
                        } finally {
                            if (_didIteratorError9) {
                                throw _iteratorError9;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            dirty = new Set();
        });
        return state.set("nodes", annotatedNodes);
    }

    return {
        reducer: (0, _reduxImmutable.combineReducers)({
            program: (0, _undo.undoable)((0, _redux.compose)(annotateTypes, program), {
                actionFilter: function actionFilter(act) {
                    return act.type === action.RAISE || act.type === action.HOVER ||
                    // Prevent people from undoing start of level
                    act.type === action.START_LEVEL || act.skipUndo;
                },
                extraState: function extraState(state, newState) {
                    var result = {};
                    var _iteratorNormalCompletion10 = true;
                    var _didIteratorError10 = false;
                    var _iteratorError10 = undefined;

                    try {
                        for (var _iterator10 = state.get("board")[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                            var id = _step10.value;

                            if (views[id]) {
                                var pos = Object.assign({}, gfx.absolutePos(views[id]));
                                if (pos.x === 0 && pos.y === 0) continue;
                                result[id] = pos;
                            }
                        }
                    } catch (err) {
                        _didIteratorError10 = true;
                        _iteratorError10 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion10 && _iterator10.return) {
                                _iterator10.return();
                            }
                        } finally {
                            if (_didIteratorError10) {
                                throw _iteratorError10;
                            }
                        }
                    }

                    var _iteratorNormalCompletion11 = true;
                    var _didIteratorError11 = false;
                    var _iteratorError11 = undefined;

                    try {
                        for (var _iterator11 = newState.get("board")[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                            var _id = _step11.value;

                            if (views[_id]) {
                                var _pos = Object.assign({}, gfx.absolutePos(views[_id]));
                                if (_pos.x === 0 && _pos.y === 0) continue;
                                result[_id] = _pos;
                            }
                        }
                    } catch (err) {
                        _didIteratorError11 = true;
                        _iteratorError11 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion11 && _iterator11.return) {
                                _iterator11.return();
                            }
                        } finally {
                            if (_didIteratorError11) {
                                throw _iteratorError11;
                            }
                        }
                    }

                    return result;
                },
                restoreExtraState: function restoreExtraState(state, oldState, extraState) {
                    if (!extraState) return;

                    var _iteratorNormalCompletion12 = true;
                    var _didIteratorError12 = false;
                    var _iteratorError12 = undefined;

                    try {
                        for (var _iterator12 = state.get("board")[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                            var id = _step12.value;

                            if (!oldState.get("board").contains(id)) {
                                if (extraState[id]) {
                                    Object.assign(views[id].pos, gfx.absolutePos(views[id]));
                                    views[id].anchor.x = 0;
                                    views[id].anchor.y = 0;
                                    views[id].scale.x = 1.0;
                                    views[id].scale.y = 1.0;
                                    animate.tween(views[id].pos, restorePos(id, extraState[id]), {
                                        duration: 250,
                                        easing: animate.Easing.Cubic.Out
                                    });
                                }
                            }
                        }
                    } catch (err) {
                        _didIteratorError12 = true;
                        _iteratorError12 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion12 && _iterator12.return) {
                                _iterator12.return();
                            }
                        } finally {
                            if (_didIteratorError12) {
                                throw _iteratorError12;
                            }
                        }
                    }

                    var _iteratorNormalCompletion13 = true;
                    var _didIteratorError13 = false;
                    var _iteratorError13 = undefined;

                    try {
                        for (var _iterator13 = state.get("toolbox")[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                            var _id2 = _step13.value;

                            if (!oldState.get("toolbox").contains(_id2)) {
                                views[_id2].pos = gfx.absolutePos(views[_id2]);
                                views[_id2].scale.x = 1.0;
                                views[_id2].scale.y = 1.0;
                            }
                        }
                    } catch (err) {
                        _didIteratorError13 = true;
                        _iteratorError13 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion13 && _iterator13.return) {
                                _iterator13.return();
                            }
                        } finally {
                            if (_didIteratorError13) {
                                throw _iteratorError13;
                            }
                        }
                    }
                }
            })
        })
    };
}
},{"immutable":70,"redux":60,"redux-immutable":69,"./action":30,"../gfx/core":4,"../gfx/animate":5,"./undo":14}],73:[function(require,module,exports) {
var global = (1,eval)("this");
"use strict";

var numeric = (typeof exports === "undefined")?(function numeric() {}):(exports);
if(typeof global !== "undefined") { global.numeric = numeric; }

numeric.version = "1.2.6";

// 1. Utility functions
numeric.bench = function bench (f,interval) {
    var t1,t2,n,i;
    if(typeof interval === "undefined") { interval = 15; }
    n = 0.5;
    t1 = new Date();
    while(1) {
        n*=2;
        for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
        while(i>0) { f(); i--; }
        t2 = new Date();
        if(t2-t1 > interval) break;
    }
    for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
    while(i>0) { f(); i--; }
    t2 = new Date();
    return 1000*(3*n-1)/(t2-t1);
}

numeric._myIndexOf = (function _myIndexOf(w) {
    var n = this.length,k;
    for(k=0;k<n;++k) if(this[k]===w) return k;
    return -1;
});
numeric.myIndexOf = (Array.prototype.indexOf)?Array.prototype.indexOf:numeric._myIndexOf;

numeric.Function = Function;
numeric.precision = 4;
numeric.largeArray = 50;

numeric.prettyPrint = function prettyPrint(x) {
    function fmtnum(x) {
        if(x === 0) { return '0'; }
        if(isNaN(x)) { return 'NaN'; }
        if(x<0) { return '-'+fmtnum(-x); }
        if(isFinite(x)) {
            var scale = Math.floor(Math.log(x) / Math.log(10));
            var normalized = x / Math.pow(10,scale);
            var basic = normalized.toPrecision(numeric.precision);
            if(parseFloat(basic) === 10) { scale++; normalized = 1; basic = normalized.toPrecision(numeric.precision); }
            return parseFloat(basic).toString()+'e'+scale.toString();
        }
        return 'Infinity';
    }
    var ret = [];
    function foo(x) {
        var k;
        if(typeof x === "undefined") { ret.push(Array(numeric.precision+8).join(' ')); return false; }
        if(typeof x === "string") { ret.push('"'+x+'"'); return false; }
        if(typeof x === "boolean") { ret.push(x.toString()); return false; }
        if(typeof x === "number") {
            var a = fmtnum(x);
            var b = x.toPrecision(numeric.precision);
            var c = parseFloat(x.toString()).toString();
            var d = [a,b,c,parseFloat(b).toString(),parseFloat(c).toString()];
            for(k=1;k<d.length;k++) { if(d[k].length < a.length) a = d[k]; }
            ret.push(Array(numeric.precision+8-a.length).join(' ')+a);
            return false;
        }
        if(x === null) { ret.push("null"); return false; }
        if(typeof x === "function") { 
            ret.push(x.toString());
            var flag = false;
            for(k in x) { if(x.hasOwnProperty(k)) { 
                if(flag) ret.push(',\n');
                else ret.push('\n{');
                flag = true; 
                ret.push(k); 
                ret.push(': \n'); 
                foo(x[k]); 
            } }
            if(flag) ret.push('}\n');
            return true;
        }
        if(x instanceof Array) {
            if(x.length > numeric.largeArray) { ret.push('...Large Array...'); return true; }
            var flag = false;
            ret.push('[');
            for(k=0;k<x.length;k++) { if(k>0) { ret.push(','); if(flag) ret.push('\n '); } flag = foo(x[k]); }
            ret.push(']');
            return true;
        }
        ret.push('{');
        var flag = false;
        for(k in x) { if(x.hasOwnProperty(k)) { if(flag) ret.push(',\n'); flag = true; ret.push(k); ret.push(': \n'); foo(x[k]); } }
        ret.push('}');
        return true;
    }
    foo(x);
    return ret.join('');
}

numeric.parseDate = function parseDate(d) {
    function foo(d) {
        if(typeof d === 'string') { return Date.parse(d.replace(/-/g,'/')); }
        if(!(d instanceof Array)) { throw new Error("parseDate: parameter must be arrays of strings"); }
        var ret = [],k;
        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
        return ret;
    }
    return foo(d);
}

numeric.parseFloat = function parseFloat_(d) {
    function foo(d) {
        if(typeof d === 'string') { return parseFloat(d); }
        if(!(d instanceof Array)) { throw new Error("parseFloat: parameter must be arrays of strings"); }
        var ret = [],k;
        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
        return ret;
    }
    return foo(d);
}

numeric.parseCSV = function parseCSV(t) {
    var foo = t.split('\n');
    var j,k;
    var ret = [];
    var pat = /(([^'",]*)|('[^']*')|("[^"]*")),/g;
    var patnum = /^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/;
    var stripper = function(n) { return n.substr(0,n.length-1); }
    var count = 0;
    for(k=0;k<foo.length;k++) {
      var bar = (foo[k]+",").match(pat),baz;
      if(bar.length>0) {
          ret[count] = [];
          for(j=0;j<bar.length;j++) {
              baz = stripper(bar[j]);
              if(patnum.test(baz)) { ret[count][j] = parseFloat(baz); }
              else ret[count][j] = baz;
          }
          count++;
      }
    }
    return ret;
}

numeric.toCSV = function toCSV(A) {
    var s = numeric.dim(A);
    var i,j,m,n,row,ret;
    m = s[0];
    n = s[1];
    ret = [];
    for(i=0;i<m;i++) {
        row = [];
        for(j=0;j<m;j++) { row[j] = A[i][j].toString(); }
        ret[i] = row.join(', ');
    }
    return ret.join('\n')+'\n';
}

numeric.getURL = function getURL(url) {
    var client = new XMLHttpRequest();
    client.open("GET",url,false);
    client.send();
    return client;
}

numeric.imageURL = function imageURL(img) {
    function base64(A) {
        var n = A.length, i,x,y,z,p,q,r,s;
        var key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var ret = "";
        for(i=0;i<n;i+=3) {
            x = A[i];
            y = A[i+1];
            z = A[i+2];
            p = x >> 2;
            q = ((x & 3) << 4) + (y >> 4);
            r = ((y & 15) << 2) + (z >> 6);
            s = z & 63;
            if(i+1>=n) { r = s = 64; }
            else if(i+2>=n) { s = 64; }
            ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);
            }
        return ret;
    }
    function crc32Array (a,from,to) {
        if(typeof from === "undefined") { from = 0; }
        if(typeof to === "undefined") { to = a.length; }
        var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
                     0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 
                     0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
                     0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 
                     0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 
                     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 
                     0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
                     0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
                     0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
                     0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 
                     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 
                     0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 
                     0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 
                     0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 
                     0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 
                     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 
                     0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 
                     0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 
                     0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 
                     0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 
                     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 
                     0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 
                     0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 
                     0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 
                     0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 
                     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 
                     0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 
                     0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 
                     0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 
                     0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 
                     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 
                     0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
     
        var crc = -1, y = 0, n = a.length,i;

        for (i = from; i < to; i++) {
            y = (crc ^ a[i]) & 0xFF;
            crc = (crc >>> 8) ^ table[y];
        }
     
        return crc ^ (-1);
    }

    var h = img[0].length, w = img[0][0].length, s1, s2, next,k,length,a,b,i,j,adler32,crc32;
    var stream = [
                  137, 80, 78, 71, 13, 10, 26, 10,                           //  0: PNG signature
                  0,0,0,13,                                                  //  8: IHDR Chunk length
                  73, 72, 68, 82,                                            // 12: "IHDR" 
                  (w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w&255,   // 16: Width
                  (h >> 24) & 255, (h >> 16) & 255, (h >> 8) & 255, h&255,   // 20: Height
                  8,                                                         // 24: bit depth
                  2,                                                         // 25: RGB
                  0,                                                         // 26: deflate
                  0,                                                         // 27: no filter
                  0,                                                         // 28: no interlace
                  -1,-2,-3,-4,                                               // 29: CRC
                  -5,-6,-7,-8,                                               // 33: IDAT Chunk length
                  73, 68, 65, 84,                                            // 37: "IDAT"
                  // RFC 1950 header starts here
                  8,                                                         // 41: RFC1950 CMF
                  29                                                         // 42: RFC1950 FLG
                  ];
    crc32 = crc32Array(stream,12,29);
    stream[29] = (crc32>>24)&255;
    stream[30] = (crc32>>16)&255;
    stream[31] = (crc32>>8)&255;
    stream[32] = (crc32)&255;
    s1 = 1;
    s2 = 0;
    for(i=0;i<h;i++) {
        if(i<h-1) { stream.push(0); }
        else { stream.push(1); }
        a = (3*w+1+(i===0))&255; b = ((3*w+1+(i===0))>>8)&255;
        stream.push(a); stream.push(b);
        stream.push((~a)&255); stream.push((~b)&255);
        if(i===0) stream.push(0);
        for(j=0;j<w;j++) {
            for(k=0;k<3;k++) {
                a = img[k][i][j];
                if(a>255) a = 255;
                else if(a<0) a=0;
                else a = Math.round(a);
                s1 = (s1 + a )%65521;
                s2 = (s2 + s1)%65521;
                stream.push(a);
            }
        }
        stream.push(0);
    }
    adler32 = (s2<<16)+s1;
    stream.push((adler32>>24)&255);
    stream.push((adler32>>16)&255);
    stream.push((adler32>>8)&255);
    stream.push((adler32)&255);
    length = stream.length - 41;
    stream[33] = (length>>24)&255;
    stream[34] = (length>>16)&255;
    stream[35] = (length>>8)&255;
    stream[36] = (length)&255;
    crc32 = crc32Array(stream,37);
    stream.push((crc32>>24)&255);
    stream.push((crc32>>16)&255);
    stream.push((crc32>>8)&255);
    stream.push((crc32)&255);
    stream.push(0);
    stream.push(0);
    stream.push(0);
    stream.push(0);
//    a = stream.length;
    stream.push(73);  // I
    stream.push(69);  // E
    stream.push(78);  // N
    stream.push(68);  // D
    stream.push(174); // CRC1
    stream.push(66);  // CRC2
    stream.push(96);  // CRC3
    stream.push(130); // CRC4
    return 'data:image/png;base64,'+base64(stream);
}

// 2. Linear algebra with Arrays.
numeric._dim = function _dim(x) {
    var ret = [];
    while(typeof x === "object") { ret.push(x.length); x = x[0]; }
    return ret;
}

numeric.dim = function dim(x) {
    var y,z;
    if(typeof x === "object") {
        y = x[0];
        if(typeof y === "object") {
            z = y[0];
            if(typeof z === "object") {
                return numeric._dim(x);
            }
            return [x.length,y.length];
        }
        return [x.length];
    }
    return [];
}

numeric.mapreduce = function mapreduce(body,init) {
    return Function('x','accum','_s','_k',
            'if(typeof accum === "undefined") accum = '+init+';\n'+
            'if(typeof x === "number") { var xi = x; '+body+'; return accum; }\n'+
            'if(typeof _s === "undefined") _s = numeric.dim(x);\n'+
            'if(typeof _k === "undefined") _k = 0;\n'+
            'var _n = _s[_k];\n'+
            'var i,xi;\n'+
            'if(_k < _s.length-1) {\n'+
            '    for(i=_n-1;i>=0;i--) {\n'+
            '        accum = arguments.callee(x[i],accum,_s,_k+1);\n'+
            '    }'+
            '    return accum;\n'+
            '}\n'+
            'for(i=_n-1;i>=1;i-=2) { \n'+
            '    xi = x[i];\n'+
            '    '+body+';\n'+
            '    xi = x[i-1];\n'+
            '    '+body+';\n'+
            '}\n'+
            'if(i === 0) {\n'+
            '    xi = x[i];\n'+
            '    '+body+'\n'+
            '}\n'+
            'return accum;'
            );
}
numeric.mapreduce2 = function mapreduce2(body,setup) {
    return Function('x',
            'var n = x.length;\n'+
            'var i,xi;\n'+setup+';\n'+
            'for(i=n-1;i!==-1;--i) { \n'+
            '    xi = x[i];\n'+
            '    '+body+';\n'+
            '}\n'+
            'return accum;'
            );
}


numeric.same = function same(x,y) {
    var i,n;
    if(!(x instanceof Array) || !(y instanceof Array)) { return false; }
    n = x.length;
    if(n !== y.length) { return false; }
    for(i=0;i<n;i++) {
        if(x[i] === y[i]) { continue; }
        if(typeof x[i] === "object") { if(!same(x[i],y[i])) return false; }
        else { return false; }
    }
    return true;
}

numeric.rep = function rep(s,v,k) {
    if(typeof k === "undefined") { k=0; }
    var n = s[k], ret = Array(n), i;
    if(k === s.length-1) {
        for(i=n-2;i>=0;i-=2) { ret[i+1] = v; ret[i] = v; }
        if(i===-1) { ret[0] = v; }
        return ret;
    }
    for(i=n-1;i>=0;i--) { ret[i] = numeric.rep(s,v,k+1); }
    return ret;
}


numeric.dotMMsmall = function dotMMsmall(x,y) {
    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0;
    p = x.length; q = y.length; r = y[0].length;
    ret = Array(p);
    for(i=p-1;i>=0;i--) {
        foo = Array(r);
        bar = x[i];
        for(k=r-1;k>=0;k--) {
            woo = bar[q-1]*y[q-1][k];
            for(j=q-2;j>=1;j-=2) {
                i0 = j-1;
                woo += bar[j]*y[j][k] + bar[i0]*y[i0][k];
            }
            if(j===0) { woo += bar[0]*y[0][k]; }
            foo[k] = woo;
        }
        ret[i] = foo;
    }
    return ret;
}
numeric._getCol = function _getCol(A,j,x) {
    var n = A.length, i;
    for(i=n-1;i>0;--i) {
        x[i] = A[i][j];
        --i;
        x[i] = A[i][j];
    }
    if(i===0) x[0] = A[0][j];
}
numeric.dotMMbig = function dotMMbig(x,y){
    var gc = numeric._getCol, p = y.length, v = Array(p);
    var m = x.length, n = y[0].length, A = new Array(m), xj;
    var VV = numeric.dotVV;
    var i,j,k,z;
    --p;
    --m;
    for(i=m;i!==-1;--i) A[i] = Array(n);
    --n;
    for(i=n;i!==-1;--i) {
        gc(y,i,v);
        for(j=m;j!==-1;--j) {
            z=0;
            xj = x[j];
            A[j][i] = VV(xj,v);
        }
    }
    return A;
}

numeric.dotMV = function dotMV(x,y) {
    var p = x.length, q = y.length,i;
    var ret = Array(p), dotVV = numeric.dotVV;
    for(i=p-1;i>=0;i--) { ret[i] = dotVV(x[i],y); }
    return ret;
}

numeric.dotVM = function dotVM(x,y) {
    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0,s1,s2,s3,baz,accum;
    p = x.length; q = y[0].length;
    ret = Array(q);
    for(k=q-1;k>=0;k--) {
        woo = x[p-1]*y[p-1][k];
        for(j=p-2;j>=1;j-=2) {
            i0 = j-1;
            woo += x[j]*y[j][k] + x[i0]*y[i0][k];
        }
        if(j===0) { woo += x[0]*y[0][k]; }
        ret[k] = woo;
    }
    return ret;
}

numeric.dotVV = function dotVV(x,y) {
    var i,n=x.length,i1,ret = x[n-1]*y[n-1];
    for(i=n-2;i>=1;i-=2) {
        i1 = i-1;
        ret += x[i]*y[i] + x[i1]*y[i1];
    }
    if(i===0) { ret += x[0]*y[0]; }
    return ret;
}

numeric.dot = function dot(x,y) {
    var d = numeric.dim;
    switch(d(x).length*1000+d(y).length) {
    case 2002:
        if(y.length < 10) return numeric.dotMMsmall(x,y);
        else return numeric.dotMMbig(x,y);
    case 2001: return numeric.dotMV(x,y);
    case 1002: return numeric.dotVM(x,y);
    case 1001: return numeric.dotVV(x,y);
    case 1000: return numeric.mulVS(x,y);
    case 1: return numeric.mulSV(x,y);
    case 0: return x*y;
    default: throw new Error('numeric.dot only works on vectors and matrices');
    }
}

numeric.diag = function diag(d) {
    var i,i1,j,n = d.length, A = Array(n), Ai;
    for(i=n-1;i>=0;i--) {
        Ai = Array(n);
        i1 = i+2;
        for(j=n-1;j>=i1;j-=2) {
            Ai[j] = 0;
            Ai[j-1] = 0;
        }
        if(j>i) { Ai[j] = 0; }
        Ai[i] = d[i];
        for(j=i-1;j>=1;j-=2) {
            Ai[j] = 0;
            Ai[j-1] = 0;
        }
        if(j===0) { Ai[0] = 0; }
        A[i] = Ai;
    }
    return A;
}
numeric.getDiag = function(A) {
    var n = Math.min(A.length,A[0].length),i,ret = Array(n);
    for(i=n-1;i>=1;--i) {
        ret[i] = A[i][i];
        --i;
        ret[i] = A[i][i];
    }
    if(i===0) {
        ret[0] = A[0][0];
    }
    return ret;
}

numeric.identity = function identity(n) { return numeric.diag(numeric.rep([n],1)); }
numeric.pointwise = function pointwise(params,body,setup) {
    if(typeof setup === "undefined") { setup = ""; }
    var fun = [];
    var k;
    var avec = /\[i\]$/,p,thevec = '';
    var haveret = false;
    for(k=0;k<params.length;k++) {
        if(avec.test(params[k])) {
            p = params[k].substring(0,params[k].length-3);
            thevec = p;
        } else { p = params[k]; }
        if(p==='ret') haveret = true;
        fun.push(p);
    }
    fun[params.length] = '_s';
    fun[params.length+1] = '_k';
    fun[params.length+2] = (
            'if(typeof _s === "undefined") _s = numeric.dim('+thevec+');\n'+
            'if(typeof _k === "undefined") _k = 0;\n'+
            'var _n = _s[_k];\n'+
            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
            'if(_k < _s.length-1) {\n'+
            '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee('+params.join(',')+',_s,_k+1);\n'+
            '    return ret;\n'+
            '}\n'+
            setup+'\n'+
            'for(i=_n-1;i!==-1;--i) {\n'+
            '    '+body+'\n'+
            '}\n'+
            'return ret;'
            );
    return Function.apply(null,fun);
}
numeric.pointwise2 = function pointwise2(params,body,setup) {
    if(typeof setup === "undefined") { setup = ""; }
    var fun = [];
    var k;
    var avec = /\[i\]$/,p,thevec = '';
    var haveret = false;
    for(k=0;k<params.length;k++) {
        if(avec.test(params[k])) {
            p = params[k].substring(0,params[k].length-3);
            thevec = p;
        } else { p = params[k]; }
        if(p==='ret') haveret = true;
        fun.push(p);
    }
    fun[params.length] = (
            'var _n = '+thevec+'.length;\n'+
            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
            setup+'\n'+
            'for(i=_n-1;i!==-1;--i) {\n'+
            body+'\n'+
            '}\n'+
            'return ret;'
            );
    return Function.apply(null,fun);
}
numeric._biforeach = (function _biforeach(x,y,s,k,f) {
    if(k === s.length-1) { f(x,y); return; }
    var i,n=s[k];
    for(i=n-1;i>=0;i--) { _biforeach(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
});
numeric._biforeach2 = (function _biforeach2(x,y,s,k,f) {
    if(k === s.length-1) { return f(x,y); }
    var i,n=s[k],ret = Array(n);
    for(i=n-1;i>=0;--i) { ret[i] = _biforeach2(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
    return ret;
});
numeric._foreach = (function _foreach(x,s,k,f) {
    if(k === s.length-1) { f(x); return; }
    var i,n=s[k];
    for(i=n-1;i>=0;i--) { _foreach(x[i],s,k+1,f); }
});
numeric._foreach2 = (function _foreach2(x,s,k,f) {
    if(k === s.length-1) { return f(x); }
    var i,n=s[k], ret = Array(n);
    for(i=n-1;i>=0;i--) { ret[i] = _foreach2(x[i],s,k+1,f); }
    return ret;
});

/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');
numeric.allV = numeric.mapreduce('if(!xi) return false;','true');
numeric.any = function(x) { if(typeof x.length === "undefined") return x; return numeric.anyV(x); }
numeric.all = function(x) { if(typeof x.length === "undefined") return x; return numeric.allV(x); }*/

numeric.ops2 = {
        add: '+',
        sub: '-',
        mul: '*',
        div: '/',
        mod: '%',
        and: '&&',
        or:  '||',
        eq:  '===',
        neq: '!==',
        lt:  '<',
        gt:  '>',
        leq: '<=',
        geq: '>=',
        band: '&',
        bor: '|',
        bxor: '^',
        lshift: '<<',
        rshift: '>>',
        rrshift: '>>>'
};
numeric.opseq = {
        addeq: '+=',
        subeq: '-=',
        muleq: '*=',
        diveq: '/=',
        modeq: '%=',
        lshifteq: '<<=',
        rshifteq: '>>=',
        rrshifteq: '>>>=',
        bandeq: '&=',
        boreq: '|=',
        bxoreq: '^='
};
numeric.mathfuns = ['abs','acos','asin','atan','ceil','cos',
                    'exp','floor','log','round','sin','sqrt','tan',
                    'isNaN','isFinite'];
numeric.mathfuns2 = ['atan2','pow','max','min'];
numeric.ops1 = {
        neg: '-',
        not: '!',
        bnot: '~',
        clone: ''
};
numeric.mapreducers = {
        any: ['if(xi) return true;','var accum = false;'],
        all: ['if(!xi) return false;','var accum = true;'],
        sum: ['accum += xi;','var accum = 0;'],
        prod: ['accum *= xi;','var accum = 1;'],
        norm2Squared: ['accum += xi*xi;','var accum = 0;'],
        norminf: ['accum = max(accum,abs(xi));','var accum = 0, max = Math.max, abs = Math.abs;'],
        norm1: ['accum += abs(xi)','var accum = 0, abs = Math.abs;'],
        sup: ['accum = max(accum,xi);','var accum = -Infinity, max = Math.max;'],
        inf: ['accum = min(accum,xi);','var accum = Infinity, min = Math.min;']
};

(function () {
    var i,o;
    for(i=0;i<numeric.mathfuns2.length;++i) {
        o = numeric.mathfuns2[i];
        numeric.ops2[o] = o;
    }
    for(i in numeric.ops2) {
        if(numeric.ops2.hasOwnProperty(i)) {
            o = numeric.ops2[i];
            var code, codeeq, setup = '';
            if(numeric.myIndexOf.call(numeric.mathfuns2,i)!==-1) {
                setup = 'var '+o+' = Math.'+o+';\n';
                code = function(r,x,y) { return r+' = '+o+'('+x+','+y+')'; };
                codeeq = function(x,y) { return x+' = '+o+'('+x+','+y+')'; };
            } else {
                code = function(r,x,y) { return r+' = '+x+' '+o+' '+y; };
                if(numeric.opseq.hasOwnProperty(i+'eq')) {
                    codeeq = function(x,y) { return x+' '+o+'= '+y; };
                } else {
                    codeeq = function(x,y) { return x+' = '+x+' '+o+' '+y; };                    
                }
            }
            numeric[i+'VV'] = numeric.pointwise2(['x[i]','y[i]'],code('ret[i]','x[i]','y[i]'),setup);
            numeric[i+'SV'] = numeric.pointwise2(['x','y[i]'],code('ret[i]','x','y[i]'),setup);
            numeric[i+'VS'] = numeric.pointwise2(['x[i]','y'],code('ret[i]','x[i]','y'),setup);
            numeric[i] = Function(
                    'var n = arguments.length, i, x = arguments[0], y;\n'+
                    'var VV = numeric.'+i+'VV, VS = numeric.'+i+'VS, SV = numeric.'+i+'SV;\n'+
                    'var dim = numeric.dim;\n'+
                    'for(i=1;i!==n;++i) { \n'+
                    '  y = arguments[i];\n'+
                    '  if(typeof x === "object") {\n'+
                    '      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n'+
                    '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n'+
                    '  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n'+
                    '  else '+codeeq('x','y')+'\n'+
                    '}\nreturn x;\n');
            numeric[o] = numeric[i];
            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]','x[i]'], codeeq('ret[i]','x[i]'),setup);
            numeric[i+'eqS'] = numeric.pointwise2(['ret[i]','x'], codeeq('ret[i]','x'),setup);
            numeric[i+'eq'] = Function(
                    'var n = arguments.length, i, x = arguments[0], y;\n'+
                    'var V = numeric.'+i+'eqV, S = numeric.'+i+'eqS\n'+
                    'var s = numeric.dim(x);\n'+
                    'for(i=1;i!==n;++i) { \n'+
                    '  y = arguments[i];\n'+
                    '  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n'+
                    '  else numeric._biforeach(x,y,s,0,S);\n'+
                    '}\nreturn x;\n');
        }
    }
    for(i=0;i<numeric.mathfuns2.length;++i) {
        o = numeric.mathfuns2[i];
        delete numeric.ops2[o];
    }
    for(i=0;i<numeric.mathfuns.length;++i) {
        o = numeric.mathfuns[i];
        numeric.ops1[o] = o;
    }
    for(i in numeric.ops1) {
        if(numeric.ops1.hasOwnProperty(i)) {
            setup = '';
            o = numeric.ops1[i];
            if(numeric.myIndexOf.call(numeric.mathfuns,i)!==-1) {
                if(Math.hasOwnProperty(o)) setup = 'var '+o+' = Math.'+o+';\n';
            }
            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]'],'ret[i] = '+o+'(ret[i]);',setup);
            numeric[i+'eq'] = Function('x',
                    'if(typeof x !== "object") return '+o+'x\n'+
                    'var i;\n'+
                    'var V = numeric.'+i+'eqV;\n'+
                    'var s = numeric.dim(x);\n'+
                    'numeric._foreach(x,s,0,V);\n'+
                    'return x;\n');
            numeric[i+'V'] = numeric.pointwise2(['x[i]'],'ret[i] = '+o+'(x[i]);',setup);
            numeric[i] = Function('x',
                    'if(typeof x !== "object") return '+o+'(x)\n'+
                    'var i;\n'+
                    'var V = numeric.'+i+'V;\n'+
                    'var s = numeric.dim(x);\n'+
                    'return numeric._foreach2(x,s,0,V);\n');
        }
    }
    for(i=0;i<numeric.mathfuns.length;++i) {
        o = numeric.mathfuns[i];
        delete numeric.ops1[o];
    }
    for(i in numeric.mapreducers) {
        if(numeric.mapreducers.hasOwnProperty(i)) {
            o = numeric.mapreducers[i];
            numeric[i+'V'] = numeric.mapreduce2(o[0],o[1]);
            numeric[i] = Function('x','s','k',
                    o[1]+
                    'if(typeof x !== "object") {'+
                    '    xi = x;\n'+
                    o[0]+';\n'+
                    '    return accum;\n'+
                    '}'+
                    'if(typeof s === "undefined") s = numeric.dim(x);\n'+
                    'if(typeof k === "undefined") k = 0;\n'+
                    'if(k === s.length-1) return numeric.'+i+'V(x);\n'+
                    'var xi;\n'+
                    'var n = x.length, i;\n'+
                    'for(i=n-1;i!==-1;--i) {\n'+
                    '   xi = arguments.callee(x[i]);\n'+
                    o[0]+';\n'+
                    '}\n'+
                    'return accum;\n');
        }
    }
}());

numeric.truncVV = numeric.pointwise(['x[i]','y[i]'],'ret[i] = round(x[i]/y[i])*y[i];','var round = Math.round;');
numeric.truncVS = numeric.pointwise(['x[i]','y'],'ret[i] = round(x[i]/y)*y;','var round = Math.round;');
numeric.truncSV = numeric.pointwise(['x','y[i]'],'ret[i] = round(x/y[i])*y[i];','var round = Math.round;');
numeric.trunc = function trunc(x,y) {
    if(typeof x === "object") {
        if(typeof y === "object") return numeric.truncVV(x,y);
        return numeric.truncVS(x,y);
    }
    if (typeof y === "object") return numeric.truncSV(x,y);
    return Math.round(x/y)*y;
}

numeric.inv = function inv(x) {
    var s = numeric.dim(x), abs = Math.abs, m = s[0], n = s[1];
    var A = numeric.clone(x), Ai, Aj;
    var I = numeric.identity(m), Ii, Ij;
    var i,j,k,x;
    for(j=0;j<n;++j) {
        var i0 = -1;
        var v0 = -1;
        for(i=j;i!==m;++i) { k = abs(A[i][j]); if(k>v0) { i0 = i; v0 = k; } }
        Aj = A[i0]; A[i0] = A[j]; A[j] = Aj;
        Ij = I[i0]; I[i0] = I[j]; I[j] = Ij;
        x = Aj[j];
        for(k=j;k!==n;++k)    Aj[k] /= x; 
        for(k=n-1;k!==-1;--k) Ij[k] /= x;
        for(i=m-1;i!==-1;--i) {
            if(i!==j) {
                Ai = A[i];
                Ii = I[i];
                x = Ai[j];
                for(k=j+1;k!==n;++k)  Ai[k] -= Aj[k]*x;
                for(k=n-1;k>0;--k) { Ii[k] -= Ij[k]*x; --k; Ii[k] -= Ij[k]*x; }
                if(k===0) Ii[0] -= Ij[0]*x;
            }
        }
    }
    return I;
}

numeric.det = function det(x) {
    var s = numeric.dim(x);
    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: det() only works on square matrices'); }
    var n = s[0], ret = 1,i,j,k,A = numeric.clone(x),Aj,Ai,alpha,temp,k1,k2,k3;
    for(j=0;j<n-1;j++) {
        k=j;
        for(i=j+1;i<n;i++) { if(Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }
        if(k !== j) {
            temp = A[k]; A[k] = A[j]; A[j] = temp;
            ret *= -1;
        }
        Aj = A[j];
        for(i=j+1;i<n;i++) {
            Ai = A[i];
            alpha = Ai[j]/Aj[j];
            for(k=j+1;k<n-1;k+=2) {
                k1 = k+1;
                Ai[k] -= Aj[k]*alpha;
                Ai[k1] -= Aj[k1]*alpha;
            }
            if(k!==n) { Ai[k] -= Aj[k]*alpha; }
        }
        if(Aj[j] === 0) { return 0; }
        ret *= Aj[j];
    }
    return ret*A[j][j];
}

numeric.transpose = function transpose(x) {
    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
    for(j=0;j<n;j++) ret[j] = Array(m);
    for(i=m-1;i>=1;i-=2) {
        A1 = x[i];
        A0 = x[i-1];
        for(j=n-1;j>=1;--j) {
            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
            --j;
            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
        }
        if(j===0) {
            Bj = ret[0]; Bj[i] = A1[0]; Bj[i-1] = A0[0];
        }
    }
    if(i===0) {
        A0 = x[0];
        for(j=n-1;j>=1;--j) {
            ret[j][0] = A0[j];
            --j;
            ret[j][0] = A0[j];
        }
        if(j===0) { ret[0][0] = A0[0]; }
    }
    return ret;
}
numeric.negtranspose = function negtranspose(x) {
    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
    for(j=0;j<n;j++) ret[j] = Array(m);
    for(i=m-1;i>=1;i-=2) {
        A1 = x[i];
        A0 = x[i-1];
        for(j=n-1;j>=1;--j) {
            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
            --j;
            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
        }
        if(j===0) {
            Bj = ret[0]; Bj[i] = -A1[0]; Bj[i-1] = -A0[0];
        }
    }
    if(i===0) {
        A0 = x[0];
        for(j=n-1;j>=1;--j) {
            ret[j][0] = -A0[j];
            --j;
            ret[j][0] = -A0[j];
        }
        if(j===0) { ret[0][0] = -A0[0]; }
    }
    return ret;
}

numeric._random = function _random(s,k) {
    var i,n=s[k],ret=Array(n), rnd;
    if(k === s.length-1) {
        rnd = Math.random;
        for(i=n-1;i>=1;i-=2) {
            ret[i] = rnd();
            ret[i-1] = rnd();
        }
        if(i===0) { ret[0] = rnd(); }
        return ret;
    }
    for(i=n-1;i>=0;i--) ret[i] = _random(s,k+1);
    return ret;
}
numeric.random = function random(s) { return numeric._random(s,0); }

numeric.norm2 = function norm2(x) { return Math.sqrt(numeric.norm2Squared(x)); }

numeric.linspace = function linspace(a,b,n) {
    if(typeof n === "undefined") n = Math.max(Math.round(b-a)+1,1);
    if(n<2) { return n===1?[a]:[]; }
    var i,ret = Array(n);
    n--;
    for(i=n;i>=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }
    return ret;
}

numeric.getBlock = function getBlock(x,from,to) {
    var s = numeric.dim(x);
    function foo(x,k) {
        var i,a = from[k], n = to[k]-a, ret = Array(n);
        if(k === s.length-1) {
            for(i=n;i>=0;i--) { ret[i] = x[i+a]; }
            return ret;
        }
        for(i=n;i>=0;i--) { ret[i] = foo(x[i+a],k+1); }
        return ret;
    }
    return foo(x,0);
}

numeric.setBlock = function setBlock(x,from,to,B) {
    var s = numeric.dim(x);
    function foo(x,y,k) {
        var i,a = from[k], n = to[k]-a;
        if(k === s.length-1) { for(i=n;i>=0;i--) { x[i+a] = y[i]; } }
        for(i=n;i>=0;i--) { foo(x[i+a],y[i],k+1); }
    }
    foo(x,B,0);
    return x;
}

numeric.getRange = function getRange(A,I,J) {
    var m = I.length, n = J.length;
    var i,j;
    var B = Array(m), Bi, AI;
    for(i=m-1;i!==-1;--i) {
        B[i] = Array(n);
        Bi = B[i];
        AI = A[I[i]];
        for(j=n-1;j!==-1;--j) Bi[j] = AI[J[j]];
    }
    return B;
}

numeric.blockMatrix = function blockMatrix(X) {
    var s = numeric.dim(X);
    if(s.length<4) return numeric.blockMatrix([X]);
    var m=s[0],n=s[1],M,N,i,j,Xij;
    M = 0; N = 0;
    for(i=0;i<m;++i) M+=X[i][0].length;
    for(j=0;j<n;++j) N+=X[0][j][0].length;
    var Z = Array(M);
    for(i=0;i<M;++i) Z[i] = Array(N);
    var I=0,J,ZI,k,l,Xijk;
    for(i=0;i<m;++i) {
        J=N;
        for(j=n-1;j!==-1;--j) {
            Xij = X[i][j];
            J -= Xij[0].length;
            for(k=Xij.length-1;k!==-1;--k) {
                Xijk = Xij[k];
                ZI = Z[I+k];
                for(l = Xijk.length-1;l!==-1;--l) ZI[J+l] = Xijk[l];
            }
        }
        I += X[i][0].length;
    }
    return Z;
}

numeric.tensor = function tensor(x,y) {
    if(typeof x === "number" || typeof y === "number") return numeric.mul(x,y);
    var s1 = numeric.dim(x), s2 = numeric.dim(y);
    if(s1.length !== 1 || s2.length !== 1) {
        throw new Error('numeric: tensor product is only defined for vectors');
    }
    var m = s1[0], n = s2[0], A = Array(m), Ai, i,j,xi;
    for(i=m-1;i>=0;i--) {
        Ai = Array(n);
        xi = x[i];
        for(j=n-1;j>=3;--j) {
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
        }
        while(j>=0) { Ai[j] = xi * y[j]; --j; }
        A[i] = Ai;
    }
    return A;
}

// 3. The Tensor type T
numeric.T = function T(x,y) { this.x = x; this.y = y; }
numeric.t = function t(x,y) { return new numeric.T(x,y); }

numeric.Tbinop = function Tbinop(rr,rc,cr,cc,setup) {
    var io = numeric.indexOf;
    if(typeof setup !== "string") {
        var k;
        setup = '';
        for(k in numeric) {
            if(numeric.hasOwnProperty(k) && (rr.indexOf(k)>=0 || rc.indexOf(k)>=0 || cr.indexOf(k)>=0 || cc.indexOf(k)>=0) && k.length>1) {
                setup += 'var '+k+' = numeric.'+k+';\n';
            }
        }
    }
    return Function(['y'],
            'var x = this;\n'+
            'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n'+
            setup+'\n'+
            'if(x.y) {'+
            '  if(y.y) {'+
            '    return new numeric.T('+cc+');\n'+
            '  }\n'+
            '  return new numeric.T('+cr+');\n'+
            '}\n'+
            'if(y.y) {\n'+
            '  return new numeric.T('+rc+');\n'+
            '}\n'+
            'return new numeric.T('+rr+');\n'
    );
}

numeric.T.prototype.add = numeric.Tbinop(
        'add(x.x,y.x)',
        'add(x.x,y.x),y.y',
        'add(x.x,y.x),x.y',
        'add(x.x,y.x),add(x.y,y.y)');
numeric.T.prototype.sub = numeric.Tbinop(
        'sub(x.x,y.x)',
        'sub(x.x,y.x),neg(y.y)',
        'sub(x.x,y.x),x.y',
        'sub(x.x,y.x),sub(x.y,y.y)');
numeric.T.prototype.mul = numeric.Tbinop(
        'mul(x.x,y.x)',
        'mul(x.x,y.x),mul(x.x,y.y)',
        'mul(x.x,y.x),mul(x.y,y.x)',
        'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');

numeric.T.prototype.reciprocal = function reciprocal() {
    var mul = numeric.mul, div = numeric.div;
    if(this.y) {
        var d = numeric.add(mul(this.x,this.x),mul(this.y,this.y));
        return new numeric.T(div(this.x,d),div(numeric.neg(this.y),d));
    }
    return new T(div(1,this.x));
}
numeric.T.prototype.div = function div(y) {
    if(!(y instanceof numeric.T)) y = new numeric.T(y);
    if(y.y) { return this.mul(y.reciprocal()); }
    var div = numeric.div;
    if(this.y) { return new numeric.T(div(this.x,y.x),div(this.y,y.x)); }
    return new numeric.T(div(this.x,y.x));
}
numeric.T.prototype.dot = numeric.Tbinop(
        'dot(x.x,y.x)',
        'dot(x.x,y.x),dot(x.x,y.y)',
        'dot(x.x,y.x),dot(x.y,y.x)',
        'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))'
        );
numeric.T.prototype.transpose = function transpose() {
    var t = numeric.transpose, x = this.x, y = this.y;
    if(y) { return new numeric.T(t(x),t(y)); }
    return new numeric.T(t(x));
}
numeric.T.prototype.transjugate = function transjugate() {
    var t = numeric.transpose, x = this.x, y = this.y;
    if(y) { return new numeric.T(t(x),numeric.negtranspose(y)); }
    return new numeric.T(t(x));
}
numeric.Tunop = function Tunop(r,c,s) {
    if(typeof s !== "string") { s = ''; }
    return Function(
            'var x = this;\n'+
            s+'\n'+
            'if(x.y) {'+
            '  '+c+';\n'+
            '}\n'+
            r+';\n'
    );
}

numeric.T.prototype.exp = numeric.Tunop(
        'return new numeric.T(ex)',
        'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))',
        'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');
numeric.T.prototype.conj = numeric.Tunop(
        'return new numeric.T(x.x);',
        'return new numeric.T(x.x,numeric.neg(x.y));');
numeric.T.prototype.neg = numeric.Tunop(
        'return new numeric.T(neg(x.x));',
        'return new numeric.T(neg(x.x),neg(x.y));',
        'var neg = numeric.neg;');
numeric.T.prototype.sin = numeric.Tunop(
        'return new numeric.T(numeric.sin(x.x))',
        'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');
numeric.T.prototype.cos = numeric.Tunop(
        'return new numeric.T(numeric.cos(x.x))',
        'return x.exp().add(x.neg().exp()).div(2);');
numeric.T.prototype.abs = numeric.Tunop(
        'return new numeric.T(numeric.abs(x.x));',
        'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));',
        'var mul = numeric.mul;');
numeric.T.prototype.log = numeric.Tunop(
        'return new numeric.T(numeric.log(x.x));',
        'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\n'+
        'return new numeric.T(numeric.log(r.x),theta.x);');
numeric.T.prototype.norm2 = numeric.Tunop(
        'return numeric.norm2(x.x);',
        'var f = numeric.norm2Squared;\n'+
        'return Math.sqrt(f(x.x)+f(x.y));');
numeric.T.prototype.inv = function inv() {
    var A = this;
    if(typeof A.y === "undefined") { return new numeric.T(numeric.inv(A.x)); }
    var n = A.x.length, i, j, k;
    var Rx = numeric.identity(n),Ry = numeric.rep([n,n],0);
    var Ax = numeric.clone(A.x), Ay = numeric.clone(A.y);
    var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;
    var i,j,k,d,d1,ax,ay,bx,by,temp;
    for(i=0;i<n;i++) {
        ax = Ax[i][i]; ay = Ay[i][i];
        d = ax*ax+ay*ay;
        k = i;
        for(j=i+1;j<n;j++) {
            ax = Ax[j][i]; ay = Ay[j][i];
            d1 = ax*ax+ay*ay;
            if(d1 > d) { k=j; d = d1; }
        }
        if(k!==i) {
            temp = Ax[i]; Ax[i] = Ax[k]; Ax[k] = temp;
            temp = Ay[i]; Ay[i] = Ay[k]; Ay[k] = temp;
            temp = Rx[i]; Rx[i] = Rx[k]; Rx[k] = temp;
            temp = Ry[i]; Ry[i] = Ry[k]; Ry[k] = temp;
        }
        Aix = Ax[i]; Aiy = Ay[i];
        Rix = Rx[i]; Riy = Ry[i];
        ax = Aix[i]; ay = Aiy[i];
        for(j=i+1;j<n;j++) {
            bx = Aix[j]; by = Aiy[j];
            Aix[j] = (bx*ax+by*ay)/d;
            Aiy[j] = (by*ax-bx*ay)/d;
        }
        for(j=0;j<n;j++) {
            bx = Rix[j]; by = Riy[j];
            Rix[j] = (bx*ax+by*ay)/d;
            Riy[j] = (by*ax-bx*ay)/d;
        }
        for(j=i+1;j<n;j++) {
            Ajx = Ax[j]; Ajy = Ay[j];
            Rjx = Rx[j]; Rjy = Ry[j];
            ax = Ajx[i]; ay = Ajy[i];
            for(k=i+1;k<n;k++) {
                bx = Aix[k]; by = Aiy[k];
                Ajx[k] -= bx*ax-by*ay;
                Ajy[k] -= by*ax+bx*ay;
            }
            for(k=0;k<n;k++) {
                bx = Rix[k]; by = Riy[k];
                Rjx[k] -= bx*ax-by*ay;
                Rjy[k] -= by*ax+bx*ay;
            }
        }
    }
    for(i=n-1;i>0;i--) {
        Rix = Rx[i]; Riy = Ry[i];
        for(j=i-1;j>=0;j--) {
            Rjx = Rx[j]; Rjy = Ry[j];
            ax = Ax[j][i]; ay = Ay[j][i];
            for(k=n-1;k>=0;k--) {
                bx = Rix[k]; by = Riy[k];
                Rjx[k] -= ax*bx - ay*by;
                Rjy[k] -= ax*by + ay*bx;
            }
        }
    }
    return new numeric.T(Rx,Ry);
}
numeric.T.prototype.get = function get(i) {
    var x = this.x, y = this.y, k = 0, ik, n = i.length;
    if(y) {
        while(k<n) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        return new numeric.T(x,y);
    }
    while(k<n) {
        ik = i[k];
        x = x[ik];
        k++;
    }
    return new numeric.T(x);
}
numeric.T.prototype.set = function set(i,v) {
    var x = this.x, y = this.y, k = 0, ik, n = i.length, vx = v.x, vy = v.y;
    if(n===0) {
        if(vy) { this.y = vy; }
        else if(y) { this.y = undefined; }
        this.x = x;
        return this;
    }
    if(vy) {
        if(y) { /* ok */ }
        else {
            y = numeric.rep(numeric.dim(x),0);
            this.y = y;
        }
        while(k<n-1) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        ik = i[k];
        x[ik] = vx;
        y[ik] = vy;
        return this;
    }
    if(y) {
        while(k<n-1) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        ik = i[k];
        x[ik] = vx;
        if(vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx),0);
        else y[ik] = 0;
        return this;
    }
    while(k<n-1) {
        ik = i[k];
        x = x[ik];
        k++;
    }
    ik = i[k];
    x[ik] = vx;
    return this;
}
numeric.T.prototype.getRows = function getRows(i0,i1) {
    var n = i1-i0+1, j;
    var rx = Array(n), ry, x = this.x, y = this.y;
    for(j=i0;j<=i1;j++) { rx[j-i0] = x[j]; }
    if(y) {
        ry = Array(n);
        for(j=i0;j<=i1;j++) { ry[j-i0] = y[j]; }
        return new numeric.T(rx,ry);
    }
    return new numeric.T(rx);
}
numeric.T.prototype.setRows = function setRows(i0,i1,A) {
    var j;
    var rx = this.x, ry = this.y, x = A.x, y = A.y;
    for(j=i0;j<=i1;j++) { rx[j] = x[j-i0]; }
    if(y) {
        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
        for(j=i0;j<=i1;j++) { ry[j] = y[j-i0]; }
    } else if(ry) {
        for(j=i0;j<=i1;j++) { ry[j] = numeric.rep([x[j-i0].length],0); }
    }
    return this;
}
numeric.T.prototype.getRow = function getRow(k) {
    var x = this.x, y = this.y;
    if(y) { return new numeric.T(x[k],y[k]); }
    return new numeric.T(x[k]);
}
numeric.T.prototype.setRow = function setRow(i,v) {
    var rx = this.x, ry = this.y, x = v.x, y = v.y;
    rx[i] = x;
    if(y) {
        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
        ry[i] = y;
    } else if(ry) {
        ry = numeric.rep([x.length],0);
    }
    return this;
}

numeric.T.prototype.getBlock = function getBlock(from,to) {
    var x = this.x, y = this.y, b = numeric.getBlock;
    if(y) { return new numeric.T(b(x,from,to),b(y,from,to)); }
    return new numeric.T(b(x,from,to));
}
numeric.T.prototype.setBlock = function setBlock(from,to,A) {
    if(!(A instanceof numeric.T)) A = new numeric.T(A);
    var x = this.x, y = this.y, b = numeric.setBlock, Ax = A.x, Ay = A.y;
    if(Ay) {
        if(!y) { this.y = numeric.rep(numeric.dim(this),0); y = this.y; }
        b(x,from,to,Ax);
        b(y,from,to,Ay);
        return this;
    }
    b(x,from,to,Ax);
    if(y) b(y,from,to,numeric.rep(numeric.dim(Ax),0));
}
numeric.T.rep = function rep(s,v) {
    var T = numeric.T;
    if(!(v instanceof T)) v = new T(v);
    var x = v.x, y = v.y, r = numeric.rep;
    if(y) return new T(r(s,x),r(s,y));
    return new T(r(s,x));
}
numeric.T.diag = function diag(d) {
    if(!(d instanceof numeric.T)) d = new numeric.T(d);
    var x = d.x, y = d.y, diag = numeric.diag;
    if(y) return new numeric.T(diag(x),diag(y));
    return new numeric.T(diag(x));
}
numeric.T.eig = function eig() {
    if(this.y) { throw new Error('eig: not implemented for complex matrices.'); }
    return numeric.eig(this.x);
}
numeric.T.identity = function identity(n) { return new numeric.T(numeric.identity(n)); }
numeric.T.prototype.getDiag = function getDiag() {
    var n = numeric;
    var x = this.x, y = this.y;
    if(y) { return new n.T(n.getDiag(x),n.getDiag(y)); }
    return new n.T(n.getDiag(x));
}

// 4. Eigenvalues of real matrices

numeric.house = function house(x) {
    var v = numeric.clone(x);
    var s = x[0] >= 0 ? 1 : -1;
    var alpha = s*numeric.norm2(x);
    v[0] += alpha;
    var foo = numeric.norm2(v);
    if(foo === 0) { /* this should not happen */ throw new Error('eig: internal error'); }
    return numeric.div(v,foo);
}

numeric.toUpperHessenberg = function toUpperHessenberg(me) {
    var s = numeric.dim(me);
    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: toUpperHessenberg() only works on square matrices'); }
    var m = s[0], i,j,k,x,v,A = numeric.clone(me),B,C,Ai,Ci,Q = numeric.identity(m),Qi;
    for(j=0;j<m-2;j++) {
        x = Array(m-j-1);
        for(i=j+1;i<m;i++) { x[i-j-1] = A[i][j]; }
        if(numeric.norm2(x)>0) {
            v = numeric.house(x);
            B = numeric.getBlock(A,[j+1,j],[m-1,m-1]);
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<m;i++) { Ai = A[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Ai[k] -= 2*Ci[k-j]; }
            B = numeric.getBlock(A,[0,j+1],[m-1,m-1]);
            C = numeric.tensor(numeric.dot(B,v),v);
            for(i=0;i<m;i++) { Ai = A[i]; Ci = C[i]; for(k=j+1;k<m;k++) Ai[k] -= 2*Ci[k-j-1]; }
            B = Array(m-j-1);
            for(i=j+1;i<m;i++) B[i-j-1] = Q[i];
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<m;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        }
    }
    return {H:A, Q:Q};
}

numeric.epsilon = 2.220446049250313e-16;

numeric.QRFrancis = function(H,maxiter) {
    if(typeof maxiter === "undefined") { maxiter = 10000; }
    H = numeric.clone(H);
    var H0 = numeric.clone(H);
    var s = numeric.dim(H),m=s[0],x,v,a,b,c,d,det,tr, Hloc, Q = numeric.identity(m), Qi, Hi, B, C, Ci,i,j,k,iter;
    if(m<3) { return {Q:Q, B:[ [0,m-1] ]}; }
    var epsilon = numeric.epsilon;
    for(iter=0;iter<maxiter;iter++) {
        for(j=0;j<m-1;j++) {
            if(Math.abs(H[j+1][j]) < epsilon*(Math.abs(H[j][j])+Math.abs(H[j+1][j+1]))) {
                var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[j,j]),maxiter);
                var QH2 = numeric.QRFrancis(numeric.getBlock(H,[j+1,j+1],[m-1,m-1]),maxiter);
                B = Array(j+1);
                for(i=0;i<=j;i++) { B[i] = Q[i]; }
                C = numeric.dot(QH1.Q,B);
                for(i=0;i<=j;i++) { Q[i] = C[i]; }
                B = Array(m-j-1);
                for(i=j+1;i<m;i++) { B[i-j-1] = Q[i]; }
                C = numeric.dot(QH2.Q,B);
                for(i=j+1;i<m;i++) { Q[i] = C[i-j-1]; }
                return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,j+1))};
            }
        }
        a = H[m-2][m-2]; b = H[m-2][m-1];
        c = H[m-1][m-2]; d = H[m-1][m-1];
        tr = a+d;
        det = (a*d-b*c);
        Hloc = numeric.getBlock(H, [0,0], [2,2]);
        if(tr*tr>=4*det) {
            var s1,s2;
            s1 = 0.5*(tr+Math.sqrt(tr*tr-4*det));
            s2 = 0.5*(tr-Math.sqrt(tr*tr-4*det));
            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
                                           numeric.mul(Hloc,s1+s2)),
                               numeric.diag(numeric.rep([3],s1*s2)));
        } else {
            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
                                           numeric.mul(Hloc,tr)),
                               numeric.diag(numeric.rep([3],det)));
        }
        x = [Hloc[0][0],Hloc[1][0],Hloc[2][0]];
        v = numeric.house(x);
        B = [H[0],H[1],H[2]];
        C = numeric.tensor(v,numeric.dot(v,B));
        for(i=0;i<3;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<m;k++) Hi[k] -= 2*Ci[k]; }
        B = numeric.getBlock(H, [0,0],[m-1,2]);
        C = numeric.tensor(numeric.dot(B,v),v);
        for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<3;k++) Hi[k] -= 2*Ci[k]; }
        B = [Q[0],Q[1],Q[2]];
        C = numeric.tensor(v,numeric.dot(v,B));
        for(i=0;i<3;i++) { Qi = Q[i]; Ci = C[i]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        var J;
        for(j=0;j<m-2;j++) {
            for(k=j;k<=j+1;k++) {
                if(Math.abs(H[k+1][k]) < epsilon*(Math.abs(H[k][k])+Math.abs(H[k+1][k+1]))) {
                    var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[k,k]),maxiter);
                    var QH2 = numeric.QRFrancis(numeric.getBlock(H,[k+1,k+1],[m-1,m-1]),maxiter);
                    B = Array(k+1);
                    for(i=0;i<=k;i++) { B[i] = Q[i]; }
                    C = numeric.dot(QH1.Q,B);
                    for(i=0;i<=k;i++) { Q[i] = C[i]; }
                    B = Array(m-k-1);
                    for(i=k+1;i<m;i++) { B[i-k-1] = Q[i]; }
                    C = numeric.dot(QH2.Q,B);
                    for(i=k+1;i<m;i++) { Q[i] = C[i-k-1]; }
                    return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,k+1))};
                }
            }
            J = Math.min(m-1,j+3);
            x = Array(J-j);
            for(i=j+1;i<=J;i++) { x[i-j-1] = H[i][j]; }
            v = numeric.house(x);
            B = numeric.getBlock(H, [j+1,j],[J,m-1]);
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<=J;i++) { Hi = H[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Hi[k] -= 2*Ci[k-j]; }
            B = numeric.getBlock(H, [0,j+1],[m-1,J]);
            C = numeric.tensor(numeric.dot(B,v),v);
            for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=j+1;k<=J;k++) Hi[k] -= 2*Ci[k-j-1]; }
            B = Array(J-j);
            for(i=j+1;i<=J;i++) B[i-j-1] = Q[i];
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<=J;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        }
    }
    throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');
}

numeric.eig = function eig(A,maxiter) {
    var QH = numeric.toUpperHessenberg(A);
    var QB = numeric.QRFrancis(QH.H,maxiter);
    var T = numeric.T;
    var n = A.length,i,k,flag = false,B = QB.B,H = numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q)));
    var Q = new T(numeric.dot(QB.Q,QH.Q)),Q0;
    var m = B.length,j;
    var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2;
    var sqrt = Math.sqrt;
    for(k=0;k<m;k++) {
        i = B[k][0];
        if(i === B[k][1]) {
            // nothing
        } else {
            j = i+1;
            a = H[i][i];
            b = H[i][j];
            c = H[j][i];
            d = H[j][j];
            if(b === 0 && c === 0) continue;
            p1 = -a-d;
            p2 = a*d-b*c;
            disc = p1*p1-4*p2;
            if(disc>=0) {
                if(p1<0) x = -0.5*(p1-sqrt(disc));
                else     x = -0.5*(p1+sqrt(disc));
                n1 = (a-x)*(a-x)+b*b;
                n2 = c*c+(d-x)*(d-x);
                if(n1>n2) {
                    n1 = sqrt(n1);
                    p = (a-x)/n1;
                    q = b/n1;
                } else {
                    n2 = sqrt(n2);
                    p = c/n2;
                    q = (d-x)/n2;
                }
                Q0 = new T([[q,-p],[p,q]]);
                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
            } else {
                x = -0.5*p1;
                y = 0.5*sqrt(-disc);
                n1 = (a-x)*(a-x)+b*b;
                n2 = c*c+(d-x)*(d-x);
                if(n1>n2) {
                    n1 = sqrt(n1+y*y);
                    p = (a-x)/n1;
                    q = b/n1;
                    x = 0;
                    y /= n1;
                } else {
                    n2 = sqrt(n2+y*y);
                    p = c/n2;
                    q = (d-x)/n2;
                    x = y/n2;
                    y = 0;
                }
                Q0 = new T([[q,-p],[p,q]],[[x,y],[y,-x]]);
                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
            }
        }
    }
    var R = Q.dot(A).dot(Q.transjugate()), n = A.length, E = numeric.T.identity(n);
    for(j=0;j<n;j++) {
        if(j>0) {
            for(k=j-1;k>=0;k--) {
                var Rk = R.get([k,k]), Rj = R.get([j,j]);
                if(numeric.neq(Rk.x,Rj.x) || numeric.neq(Rk.y,Rj.y)) {
                    x = R.getRow(k).getBlock([k],[j-1]);
                    y = E.getRow(j).getBlock([k],[j-1]);
                    E.set([j,k],(R.get([k,j]).neg().sub(x.dot(y))).div(Rk.sub(Rj)));
                } else {
                    E.setRow(j,E.getRow(k));
                    continue;
                }
            }
        }
    }
    for(j=0;j<n;j++) {
        x = E.getRow(j);
        E.setRow(j,x.div(x.norm2()));
    }
    E = E.transpose();
    E = Q.transjugate().dot(E);
    return { lambda:R.getDiag(), E:E };
};

// 5. Compressed Column Storage matrices
numeric.ccsSparse = function ccsSparse(A) {
    var m = A.length,n,foo, i,j, counts = [];
    for(i=m-1;i!==-1;--i) {
        foo = A[i];
        for(j in foo) {
            j = parseInt(j);
            while(j>=counts.length) counts[counts.length] = 0;
            if(foo[j]!==0) counts[j]++;
        }
    }
    var n = counts.length;
    var Ai = Array(n+1);
    Ai[0] = 0;
    for(i=0;i<n;++i) Ai[i+1] = Ai[i] + counts[i];
    var Aj = Array(Ai[n]), Av = Array(Ai[n]);
    for(i=m-1;i!==-1;--i) {
        foo = A[i];
        for(j in foo) {
            if(foo[j]!==0) {
                counts[j]--;
                Aj[Ai[j]+counts[j]] = i;
                Av[Ai[j]+counts[j]] = foo[j];
            }
        }
    }
    return [Ai,Aj,Av];
}
numeric.ccsFull = function ccsFull(A) {
    var Ai = A[0], Aj = A[1], Av = A[2], s = numeric.ccsDim(A), m = s[0], n = s[1], i,j,j0,j1,k;
    var B = numeric.rep([m,n],0);
    for(i=0;i<n;i++) {
        j0 = Ai[i];
        j1 = Ai[i+1];
        for(j=j0;j<j1;++j) { B[Aj[j]][i] = Av[j]; }
    }
    return B;
}
numeric.ccsTSolve = function ccsTSolve(A,b,x,bj,xj) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, max = Math.max,n=0;
    if(typeof bj === "undefined") x = numeric.rep([m],0);
    if(typeof bj === "undefined") bj = numeric.linspace(0,x.length-1);
    if(typeof xj === "undefined") xj = [];
    function dfs(j) {
        var k;
        if(x[j] !== 0) return;
        x[j] = 1;
        for(k=Ai[j];k<Ai[j+1];++k) dfs(Aj[k]);
        xj[n] = j;
        ++n;
    }
    var i,j,j0,j1,k,l,l0,l1,a;
    for(i=bj.length-1;i!==-1;--i) { dfs(bj[i]); }
    xj.length = n;
    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
    for(i=bj.length-1;i!==-1;--i) { j = bj[i]; x[j] = b[j]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        j0 = Ai[j];
        j1 = max(Ai[j+1],j0);
        for(k=j0;k!==j1;++k) { if(Aj[k] === j) { x[j] /= Av[k]; break; } }
        a = x[j];
        for(k=j0;k!==j1;++k) {
            l = Aj[k];
            if(l !== j) x[l] -= a*Av[k];
        }
    }
    return x;
}
numeric.ccsDFS = function ccsDFS(n) {
    this.k = Array(n);
    this.k1 = Array(n);
    this.j = Array(n);
}
numeric.ccsDFS.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv) {
    var m = 0,foo,n=xj.length;
    var k = this.k, k1 = this.k1, j = this.j,km,k11;
    if(x[J]!==0) return;
    x[J] = 1;
    j[0] = J;
    k[0] = km = Ai[J];
    k1[0] = k11 = Ai[J+1];
    while(1) {
        if(km >= k11) {
            xj[n] = j[m];
            if(m===0) return;
            ++n;
            --m;
            km = k[m];
            k11 = k1[m];
        } else {
            foo = Pinv[Aj[km]];
            if(x[foo] === 0) {
                x[foo] = 1;
                k[m] = km;
                ++m;
                j[m] = foo;
                km = Ai[foo];
                k1[m] = k11 = Ai[foo+1];
            } else ++km;
        }
    }
}
numeric.ccsLPSolve = function ccsLPSolve(A,B,x,xj,I,Pinv,dfs) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
    var Bi = B[0], Bj = B[1], Bv = B[2];
    
    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
    i0 = Bi[I];
    i1 = Bi[I+1];
    xj.length = 0;
    for(i=i0;i<i1;++i) { dfs.dfs(Pinv[Bj[i]],Ai,Aj,x,xj,Pinv); }
    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
    for(i=i0;i!==i1;++i) { j = Pinv[Bj[i]]; x[j] = Bv[i]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        j0 = Ai[j];
        j1 = Ai[j+1];
        for(k=j0;k<j1;++k) { if(Pinv[Aj[k]] === j) { x[j] /= Av[k]; break; } }
        a = x[j];
        for(k=j0;k<j1;++k) {
            l = Pinv[Aj[k]];
            if(l !== j) x[l] -= a*Av[k];
        }
    }
    return x;
}
numeric.ccsLUP1 = function ccsLUP1(A,threshold) {
    var m = A[0].length-1;
    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
    var x = numeric.rep([m],0), xj = numeric.rep([m],0);
    var i,j,k,j0,j1,a,e,c,d,K;
    var sol = numeric.ccsLPSolve, max = Math.max, abs = Math.abs;
    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
    var dfs = new numeric.ccsDFS(m);
    if(typeof threshold === "undefined") { threshold = 1; }
    for(i=0;i<m;++i) {
        sol(L,A,x,xj,i,Pinv,dfs);
        a = -1;
        e = -1;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            if(k <= i) continue;
            c = abs(x[k]);
            if(c > a) { e = k; a = c; }
        }
        if(abs(x[i])<threshold*a) {
            j = P[i];
            a = P[e];
            P[i] = a; Pinv[a] = i;
            P[e] = j; Pinv[j] = e;
            a = x[i]; x[i] = x[e]; x[e] = a;
        }
        a = Li[i];
        e = Ui[i];
        d = x[i];
        Lj[a] = P[i];
        Lv[a] = 1;
        ++a;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            c = x[k];
            xj[j] = 0;
            x[k] = 0;
            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
        }
        Li[i+1] = a;
        Ui[i+1] = e;
    }
    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
    return {L:L, U:U, P:P, Pinv:Pinv};
}
numeric.ccsDFS0 = function ccsDFS0(n) {
    this.k = Array(n);
    this.k1 = Array(n);
    this.j = Array(n);
}
numeric.ccsDFS0.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv,P) {
    var m = 0,foo,n=xj.length;
    var k = this.k, k1 = this.k1, j = this.j,km,k11;
    if(x[J]!==0) return;
    x[J] = 1;
    j[0] = J;
    k[0] = km = Ai[Pinv[J]];
    k1[0] = k11 = Ai[Pinv[J]+1];
    while(1) {
        if(isNaN(km)) throw new Error("Ow!");
        if(km >= k11) {
            xj[n] = Pinv[j[m]];
            if(m===0) return;
            ++n;
            --m;
            km = k[m];
            k11 = k1[m];
        } else {
            foo = Aj[km];
            if(x[foo] === 0) {
                x[foo] = 1;
                k[m] = km;
                ++m;
                j[m] = foo;
                foo = Pinv[foo];
                km = Ai[foo];
                k1[m] = k11 = Ai[foo+1];
            } else ++km;
        }
    }
}
numeric.ccsLPSolve0 = function ccsLPSolve0(A,B,y,xj,I,Pinv,P,dfs) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
    var Bi = B[0], Bj = B[1], Bv = B[2];
    
    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
    i0 = Bi[I];
    i1 = Bi[I+1];
    xj.length = 0;
    for(i=i0;i<i1;++i) { dfs.dfs(Bj[i],Ai,Aj,y,xj,Pinv,P); }
    for(i=xj.length-1;i!==-1;--i) { j = xj[i]; y[P[j]] = 0; }
    for(i=i0;i!==i1;++i) { j = Bj[i]; y[j] = Bv[i]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        l = P[j];
        j0 = Ai[j];
        j1 = Ai[j+1];
        for(k=j0;k<j1;++k) { if(Aj[k] === l) { y[l] /= Av[k]; break; } }
        a = y[l];
        for(k=j0;k<j1;++k) y[Aj[k]] -= a*Av[k];
        y[l] = a;
    }
}
numeric.ccsLUP0 = function ccsLUP0(A,threshold) {
    var m = A[0].length-1;
    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
    var y = numeric.rep([m],0), xj = numeric.rep([m],0);
    var i,j,k,j0,j1,a,e,c,d,K;
    var sol = numeric.ccsLPSolve0, max = Math.max, abs = Math.abs;
    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
    var dfs = new numeric.ccsDFS0(m);
    if(typeof threshold === "undefined") { threshold = 1; }
    for(i=0;i<m;++i) {
        sol(L,A,y,xj,i,Pinv,P,dfs);
        a = -1;
        e = -1;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            if(k <= i) continue;
            c = abs(y[P[k]]);
            if(c > a) { e = k; a = c; }
        }
        if(abs(y[P[i]])<threshold*a) {
            j = P[i];
            a = P[e];
            P[i] = a; Pinv[a] = i;
            P[e] = j; Pinv[j] = e;
        }
        a = Li[i];
        e = Ui[i];
        d = y[P[i]];
        Lj[a] = P[i];
        Lv[a] = 1;
        ++a;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            c = y[P[k]];
            xj[j] = 0;
            y[P[k]] = 0;
            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
        }
        Li[i+1] = a;
        Ui[i+1] = e;
    }
    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
    return {L:L, U:U, P:P, Pinv:Pinv};
}
numeric.ccsLUP = numeric.ccsLUP0;

numeric.ccsDim = function ccsDim(A) { return [numeric.sup(A[1])+1,A[0].length-1]; }
numeric.ccsGetBlock = function ccsGetBlock(A,i,j) {
    var s = numeric.ccsDim(A),m=s[0],n=s[1];
    if(typeof i === "undefined") { i = numeric.linspace(0,m-1); }
    else if(typeof i === "number") { i = [i]; }
    if(typeof j === "undefined") { j = numeric.linspace(0,n-1); }
    else if(typeof j === "number") { j = [j]; }
    var p,p0,p1,P = i.length,q,Q = j.length,r,jq,ip;
    var Bi = numeric.rep([n],0), Bj=[], Bv=[], B = [Bi,Bj,Bv];
    var Ai = A[0], Aj = A[1], Av = A[2];
    var x = numeric.rep([m],0),count=0,flags = numeric.rep([m],0);
    for(q=0;q<Q;++q) {
        jq = j[q];
        var q0 = Ai[jq];
        var q1 = Ai[jq+1];
        for(p=q0;p<q1;++p) {
            r = Aj[p];
            flags[r] = 1;
            x[r] = Av[p];
        }
        for(p=0;p<P;++p) {
            ip = i[p];
            if(flags[ip]) {
                Bj[count] = p;
                Bv[count] = x[i[p]];
                ++count;
            }
        }
        for(p=q0;p<q1;++p) {
            r = Aj[p];
            flags[r] = 0;
        }
        Bi[q+1] = count;
    }
    return B;
}

numeric.ccsDot = function ccsDot(A,B) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var Bi = B[0], Bj = B[1], Bv = B[2];
    var sA = numeric.ccsDim(A), sB = numeric.ccsDim(B);
    var m = sA[0], n = sA[1], o = sB[1];
    var x = numeric.rep([m],0), flags = numeric.rep([m],0), xj = Array(m);
    var Ci = numeric.rep([o],0), Cj = [], Cv = [], C = [Ci,Cj,Cv];
    var i,j,k,j0,j1,i0,i1,l,p,a,b;
    for(k=0;k!==o;++k) {
        j0 = Bi[k];
        j1 = Bi[k+1];
        p = 0;
        for(j=j0;j<j1;++j) {
            a = Bj[j];
            b = Bv[j];
            i0 = Ai[a];
            i1 = Ai[a+1];
            for(i=i0;i<i1;++i) {
                l = Aj[i];
                if(flags[l]===0) {
                    xj[p] = l;
                    flags[l] = 1;
                    p = p+1;
                }
                x[l] = x[l] + Av[i]*b;
            }
        }
        j0 = Ci[k];
        j1 = j0+p;
        Ci[k+1] = j1;
        for(j=p-1;j!==-1;--j) {
            b = j0+j;
            i = xj[j];
            Cj[b] = i;
            Cv[b] = x[i];
            flags[i] = 0;
            x[i] = 0;
        }
        Ci[k+1] = Ci[k]+p;
    }
    return C;
}

numeric.ccsLUPSolve = function ccsLUPSolve(LUP,B) {
    var L = LUP.L, U = LUP.U, P = LUP.P;
    var Bi = B[0];
    var flag = false;
    if(typeof Bi !== "object") { B = [[0,B.length],numeric.linspace(0,B.length-1),B]; Bi = B[0]; flag = true; }
    var Bj = B[1], Bv = B[2];
    var n = L[0].length-1, m = Bi.length-1;
    var x = numeric.rep([n],0), xj = Array(n);
    var b = numeric.rep([n],0), bj = Array(n);
    var Xi = numeric.rep([m+1],0), Xj = [], Xv = [];
    var sol = numeric.ccsTSolve;
    var i,j,j0,j1,k,J,N=0;
    for(i=0;i<m;++i) {
        k = 0;
        j0 = Bi[i];
        j1 = Bi[i+1];
        for(j=j0;j<j1;++j) { 
            J = LUP.Pinv[Bj[j]];
            bj[k] = J;
            b[J] = Bv[j];
            ++k;
        }
        bj.length = k;
        sol(L,b,x,bj,xj);
        for(j=bj.length-1;j!==-1;--j) b[bj[j]] = 0;
        sol(U,x,b,xj,bj);
        if(flag) return b;
        for(j=xj.length-1;j!==-1;--j) x[xj[j]] = 0;
        for(j=bj.length-1;j!==-1;--j) {
            J = bj[j];
            Xj[N] = J;
            Xv[N] = b[J];
            b[J] = 0;
            ++N;
        }
        Xi[i+1] = N;
    }
    return [Xi,Xj,Xv];
}

numeric.ccsbinop = function ccsbinop(body,setup) {
    if(typeof setup === "undefined") setup='';
    return Function('X','Y',
            'var Xi = X[0], Xj = X[1], Xv = X[2];\n'+
            'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\n'+
            'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\n'+
            'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\n'+
            'var x = numeric.rep([m],0),y = numeric.rep([m],0);\n'+
            'var xk,yk,zk;\n'+
            'var i,j,j0,j1,k,p=0;\n'+
            setup+
            'for(i=0;i<n;++i) {\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Xj[j];\n'+
            '    x[k] = 1;\n'+
            '    Zj[p] = k;\n'+
            '    ++p;\n'+
            '  }\n'+
            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Yj[j];\n'+
            '    y[k] = Yv[j];\n'+
            '    if(x[k] === 0) {\n'+
            '      Zj[p] = k;\n'+
            '      ++p;\n'+
            '    }\n'+
            '  }\n'+
            '  Zi[i+1] = p;\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n'+
            '  j0 = Zi[i]; j1 = Zi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Zj[j];\n'+
            '    xk = x[k];\n'+
            '    yk = y[k];\n'+
            body+'\n'+
            '    Zv[j] = zk;\n'+
            '  }\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n'+
            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n'+
            '}\n'+
            'return [Zi,Zj,Zv];'
            );
};

(function() {
    var k,A,B,C;
    for(k in numeric.ops2) {
        if(isFinite(eval('1'+numeric.ops2[k]+'0'))) A = '[Y[0],Y[1],numeric.'+k+'(X,Y[2])]';
        else A = 'NaN';
        if(isFinite(eval('0'+numeric.ops2[k]+'1'))) B = '[X[0],X[1],numeric.'+k+'(X[2],Y)]';
        else B = 'NaN';
        if(isFinite(eval('1'+numeric.ops2[k]+'0')) && isFinite(eval('0'+numeric.ops2[k]+'1'))) C = 'numeric.ccs'+k+'MM(X,Y)';
        else C = 'NaN';
        numeric['ccs'+k+'MM'] = numeric.ccsbinop('zk = xk '+numeric.ops2[k]+'yk;');
        numeric['ccs'+k] = Function('X','Y',
                'if(typeof X === "number") return '+A+';\n'+
                'if(typeof Y === "number") return '+B+';\n'+
                'return '+C+';\n'
                );
    }
}());

numeric.ccsScatter = function ccsScatter(A) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var n = numeric.sup(Aj)+1,m=Ai.length;
    var Ri = numeric.rep([n],0),Rj=Array(m), Rv = Array(m);
    var counts = numeric.rep([n],0),i;
    for(i=0;i<m;++i) counts[Aj[i]]++;
    for(i=0;i<n;++i) Ri[i+1] = Ri[i] + counts[i];
    var ptr = Ri.slice(0),k,Aii;
    for(i=0;i<m;++i) {
        Aii = Aj[i];
        k = ptr[Aii];
        Rj[k] = Ai[i];
        Rv[k] = Av[i];
        ptr[Aii]=ptr[Aii]+1;
    }
    return [Ri,Rj,Rv];
}

numeric.ccsGather = function ccsGather(A) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var n = Ai.length-1,m = Aj.length;
    var Ri = Array(m), Rj = Array(m), Rv = Array(m);
    var i,j,j0,j1,p;
    p=0;
    for(i=0;i<n;++i) {
        j0 = Ai[i];
        j1 = Ai[i+1];
        for(j=j0;j!==j1;++j) {
            Rj[p] = i;
            Ri[p] = Aj[j];
            Rv[p] = Av[j];
            ++p;
        }
    }
    return [Ri,Rj,Rv];
}

// The following sparse linear algebra routines are deprecated.

numeric.sdim = function dim(A,ret,k) {
    if(typeof ret === "undefined") { ret = []; }
    if(typeof A !== "object") return ret;
    if(typeof k === "undefined") { k=0; }
    if(!(k in ret)) { ret[k] = 0; }
    if(A.length > ret[k]) ret[k] = A.length;
    var i;
    for(i in A) {
        if(A.hasOwnProperty(i)) dim(A[i],ret,k+1);
    }
    return ret;
};

numeric.sclone = function clone(A,k,n) {
    if(typeof k === "undefined") { k=0; }
    if(typeof n === "undefined") { n = numeric.sdim(A).length; }
    var i,ret = Array(A.length);
    if(k === n-1) {
        for(i in A) { if(A.hasOwnProperty(i)) ret[i] = A[i]; }
        return ret;
    }
    for(i in A) {
        if(A.hasOwnProperty(i)) ret[i] = clone(A[i],k+1,n);
    }
    return ret;
}

numeric.sdiag = function diag(d) {
    var n = d.length,i,ret = Array(n),i1,i2,i3;
    for(i=n-1;i>=1;i-=2) {
        i1 = i-1;
        ret[i] = []; ret[i][i] = d[i];
        ret[i1] = []; ret[i1][i1] = d[i1];
    }
    if(i===0) { ret[0] = []; ret[0][0] = d[i]; }
    return ret;
}

numeric.sidentity = function identity(n) { return numeric.sdiag(numeric.rep([n],1)); }

numeric.stranspose = function transpose(A) {
    var ret = [], n = A.length, i,j,Ai;
    for(i in A) {
        if(!(A.hasOwnProperty(i))) continue;
        Ai = A[i];
        for(j in Ai) {
            if(!(Ai.hasOwnProperty(j))) continue;
            if(typeof ret[j] !== "object") { ret[j] = []; }
            ret[j][i] = Ai[j];
        }
    }
    return ret;
}

numeric.sLUP = function LUP(A,tol) {
    throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.");
};

numeric.sdotMM = function dotMM(A,B) {
    var p = A.length, q = B.length, BT = numeric.stranspose(B), r = BT.length, Ai, BTk;
    var i,j,k,accum;
    var ret = Array(p),reti;
    for(i=p-1;i>=0;i--) {
        reti = [];
        Ai = A[i];
        for(k=r-1;k>=0;k--) {
            accum = 0;
            BTk = BT[k];
            for(j in Ai) {
                if(!(Ai.hasOwnProperty(j))) continue;
                if(j in BTk) { accum += Ai[j]*BTk[j]; }
            }
            if(accum) reti[k] = accum;
        }
        ret[i] = reti;
    }
    return ret;
}

numeric.sdotMV = function dotMV(A,x) {
    var p = A.length, Ai, i,j;
    var ret = Array(p), accum;
    for(i=p-1;i>=0;i--) {
        Ai = A[i];
        accum = 0;
        for(j in Ai) {
            if(!(Ai.hasOwnProperty(j))) continue;
            if(x[j]) accum += Ai[j]*x[j];
        }
        if(accum) ret[i] = accum;
    }
    return ret;
}

numeric.sdotVM = function dotMV(x,A) {
    var i,j,Ai,alpha;
    var ret = [], accum;
    for(i in x) {
        if(!x.hasOwnProperty(i)) continue;
        Ai = A[i];
        alpha = x[i];
        for(j in Ai) {
            if(!Ai.hasOwnProperty(j)) continue;
            if(!ret[j]) { ret[j] = 0; }
            ret[j] += alpha*Ai[j];
        }
    }
    return ret;
}

numeric.sdotVV = function dotVV(x,y) {
    var i,ret=0;
    for(i in x) { if(x[i] && y[i]) ret+= x[i]*y[i]; }
    return ret;
}

numeric.sdot = function dot(A,B) {
    var m = numeric.sdim(A).length, n = numeric.sdim(B).length;
    var k = m*1000+n;
    switch(k) {
    case 0: return A*B;
    case 1001: return numeric.sdotVV(A,B);
    case 2001: return numeric.sdotMV(A,B);
    case 1002: return numeric.sdotVM(A,B);
    case 2002: return numeric.sdotMM(A,B);
    default: throw new Error('numeric.sdot not implemented for tensors of order '+m+' and '+n);
    }
}

numeric.sscatter = function scatter(V) {
    var n = V[0].length, Vij, i, j, m = V.length, A = [], Aj;
    for(i=n-1;i>=0;--i) {
        if(!V[m-1][i]) continue;
        Aj = A;
        for(j=0;j<m-2;j++) {
            Vij = V[j][i];
            if(!Aj[Vij]) Aj[Vij] = [];
            Aj = Aj[Vij];
        }
        Aj[V[j][i]] = V[j+1][i];
    }
    return A;
}

numeric.sgather = function gather(A,ret,k) {
    if(typeof ret === "undefined") ret = [];
    if(typeof k === "undefined") k = [];
    var n,i,Ai;
    n = k.length;
    for(i in A) {
        if(A.hasOwnProperty(i)) {
            k[n] = parseInt(i);
            Ai = A[i];
            if(typeof Ai === "number") {
                if(Ai) {
                    if(ret.length === 0) {
                        for(i=n+1;i>=0;--i) ret[i] = [];
                    }
                    for(i=n;i>=0;--i) ret[i].push(k[i]);
                    ret[n+1].push(Ai);
                }
            } else gather(Ai,ret,k);
        }
    }
    if(k.length>n) k.pop();
    return ret;
}

// 6. Coordinate matrices
numeric.cLU = function LU(A) {
    var I = A[0], J = A[1], V = A[2];
    var p = I.length, m=0, i,j,k,a,b,c;
    for(i=0;i<p;i++) if(I[i]>m) m=I[i];
    m++;
    var L = Array(m), U = Array(m), left = numeric.rep([m],Infinity), right = numeric.rep([m],-Infinity);
    var Ui, Uj,alpha;
    for(k=0;k<p;k++) {
        i = I[k];
        j = J[k];
        if(j<left[i]) left[i] = j;
        if(j>right[i]) right[i] = j;
    }
    for(i=0;i<m-1;i++) { if(right[i] > right[i+1]) right[i+1] = right[i]; }
    for(i=m-1;i>=1;i--) { if(left[i]<left[i-1]) left[i-1] = left[i]; }
    var countL = 0, countU = 0;
    for(i=0;i<m;i++) {
        U[i] = numeric.rep([right[i]-left[i]+1],0);
        L[i] = numeric.rep([i-left[i]],0);
        countL += i-left[i]+1;
        countU += right[i]-i+1;
    }
    for(k=0;k<p;k++) { i = I[k]; U[i][J[k]-left[i]] = V[k]; }
    for(i=0;i<m-1;i++) {
        a = i-left[i];
        Ui = U[i];
        for(j=i+1;left[j]<=i && j<m;j++) {
            b = i-left[j];
            c = right[i]-i;
            Uj = U[j];
            alpha = Uj[b]/Ui[a];
            if(alpha) {
                for(k=1;k<=c;k++) { Uj[k+b] -= alpha*Ui[k+a]; }
                L[j][i-left[j]] = alpha;
            }
        }
    }
    var Ui = [], Uj = [], Uv = [], Li = [], Lj = [], Lv = [];
    var p,q,foo;
    p=0; q=0;
    for(i=0;i<m;i++) {
        a = left[i];
        b = right[i];
        foo = U[i];
        for(j=i;j<=b;j++) {
            if(foo[j-a]) {
                Ui[p] = i;
                Uj[p] = j;
                Uv[p] = foo[j-a];
                p++;
            }
        }
        foo = L[i];
        for(j=a;j<i;j++) {
            if(foo[j-a]) {
                Li[q] = i;
                Lj[q] = j;
                Lv[q] = foo[j-a];
                q++;
            }
        }
        Li[q] = i;
        Lj[q] = i;
        Lv[q] = 1;
        q++;
    }
    return {U:[Ui,Uj,Uv], L:[Li,Lj,Lv]};
};

numeric.cLUsolve = function LUsolve(lu,b) {
    var L = lu.L, U = lu.U, ret = numeric.clone(b);
    var Li = L[0], Lj = L[1], Lv = L[2];
    var Ui = U[0], Uj = U[1], Uv = U[2];
    var p = Ui.length, q = Li.length;
    var m = ret.length,i,j,k;
    k = 0;
    for(i=0;i<m;i++) {
        while(Lj[k] < i) {
            ret[i] -= Lv[k]*ret[Lj[k]];
            k++;
        }
        k++;
    }
    k = p-1;
    for(i=m-1;i>=0;i--) {
        while(Uj[k] > i) {
            ret[i] -= Uv[k]*ret[Uj[k]];
            k--;
        }
        ret[i] /= Uv[k];
        k--;
    }
    return ret;
};

numeric.cgrid = function grid(n,shape) {
    if(typeof n === "number") n = [n,n];
    var ret = numeric.rep(n,-1);
    var i,j,count;
    if(typeof shape !== "function") {
        switch(shape) {
        case 'L':
            shape = function(i,j) { return (i>=n[0]/2 || j<n[1]/2); }
            break;
        default:
            shape = function(i,j) { return true; };
            break;
        }
    }
    count=0;
    for(i=1;i<n[0]-1;i++) for(j=1;j<n[1]-1;j++) 
        if(shape(i,j)) {
            ret[i][j] = count;
            count++;
        }
    return ret;
}

numeric.cdelsq = function delsq(g) {
    var dir = [[-1,0],[0,-1],[0,1],[1,0]];
    var s = numeric.dim(g), m = s[0], n = s[1], i,j,k,p,q;
    var Li = [], Lj = [], Lv = [];
    for(i=1;i<m-1;i++) for(j=1;j<n-1;j++) {
        if(g[i][j]<0) continue;
        for(k=0;k<4;k++) {
            p = i+dir[k][0];
            q = j+dir[k][1];
            if(g[p][q]<0) continue;
            Li.push(g[i][j]);
            Lj.push(g[p][q]);
            Lv.push(-1);
        }
        Li.push(g[i][j]);
        Lj.push(g[i][j]);
        Lv.push(4);
    }
    return [Li,Lj,Lv];
}

numeric.cdotMV = function dotMV(A,x) {
    var ret, Ai = A[0], Aj = A[1], Av = A[2],k,p=Ai.length,N;
    N=0;
    for(k=0;k<p;k++) { if(Ai[k]>N) N = Ai[k]; }
    N++;
    ret = numeric.rep([N],0);
    for(k=0;k<p;k++) { ret[Ai[k]]+=Av[k]*x[Aj[k]]; }
    return ret;
}

// 7. Splines

numeric.Spline = function Spline(x,yl,yr,kl,kr) { this.x = x; this.yl = yl; this.yr = yr; this.kl = kl; this.kr = kr; }
numeric.Spline.prototype._at = function _at(x1,p) {
    var x = this.x;
    var yl = this.yl;
    var yr = this.yr;
    var kl = this.kl;
    var kr = this.kr;
    var x1,a,b,t;
    var add = numeric.add, sub = numeric.sub, mul = numeric.mul;
    a = sub(mul(kl[p],x[p+1]-x[p]),sub(yr[p+1],yl[p]));
    b = add(mul(kr[p+1],x[p]-x[p+1]),sub(yr[p+1],yl[p]));
    t = (x1-x[p])/(x[p+1]-x[p]);
    var s = t*(1-t);
    return add(add(add(mul(1-t,yl[p]),mul(t,yr[p+1])),mul(a,s*(1-t))),mul(b,s*t));
}
numeric.Spline.prototype.at = function at(x0) {
    if(typeof x0 === "number") {
        var x = this.x;
        var n = x.length;
        var p,q,mid,floor = Math.floor,a,b,t;
        p = 0;
        q = n-1;
        while(q-p>1) {
            mid = floor((p+q)/2);
            if(x[mid] <= x0) p = mid;
            else q = mid;
        }
        return this._at(x0,p);
    }
    var n = x0.length, i, ret = Array(n);
    for(i=n-1;i!==-1;--i) ret[i] = this.at(x0[i]);
    return ret;
}
numeric.Spline.prototype.diff = function diff() {
    var x = this.x;
    var yl = this.yl;
    var yr = this.yr;
    var kl = this.kl;
    var kr = this.kr;
    var n = yl.length;
    var i,dx,dy;
    var zl = kl, zr = kr, pl = Array(n), pr = Array(n);
    var add = numeric.add, mul = numeric.mul, div = numeric.div, sub = numeric.sub;
    for(i=n-1;i!==-1;--i) {
        dx = x[i+1]-x[i];
        dy = sub(yr[i+1],yl[i]);
        pl[i] = div(add(mul(dy, 6),mul(kl[i],-4*dx),mul(kr[i+1],-2*dx)),dx*dx);
        pr[i+1] = div(add(mul(dy,-6),mul(kl[i], 2*dx),mul(kr[i+1], 4*dx)),dx*dx);
    }
    return new numeric.Spline(x,zl,zr,pl,pr);
}
numeric.Spline.prototype.roots = function roots() {
    function sqr(x) { return x*x; }
    function heval(y0,y1,k0,k1,x) {
        var A = k0*2-(y1-y0);
        var B = -k1*2+(y1-y0);
        var t = (x+1)*0.5;
        var s = t*(1-t);
        return (1-t)*y0+t*y1+A*s*(1-t)+B*s*t;
    }
    var ret = [];
    var x = this.x, yl = this.yl, yr = this.yr, kl = this.kl, kr = this.kr;
    if(typeof yl[0] === "number") {
        yl = [yl];
        yr = [yr];
        kl = [kl];
        kr = [kr];
    }
    var m = yl.length,n=x.length-1,i,j,k,y,s,t;
    var ai,bi,ci,di, ret = Array(m),ri,k0,k1,y0,y1,A,B,D,dx,cx,stops,z0,z1,zm,t0,t1,tm;
    var sqrt = Math.sqrt;
    for(i=0;i!==m;++i) {
        ai = yl[i];
        bi = yr[i];
        ci = kl[i];
        di = kr[i];
        ri = [];
        for(j=0;j!==n;j++) {
            if(j>0 && bi[j]*ai[j]<0) ri.push(x[j]);
            dx = (x[j+1]-x[j]);
            cx = x[j];
            y0 = ai[j];
            y1 = bi[j+1];
            k0 = ci[j]/dx;
            k1 = di[j+1]/dx;
            D = sqr(k0-k1+3*(y0-y1)) + 12*k1*y0;
            A = k1+3*y0+2*k0-3*y1;
            B = 3*(k1+k0+2*(y0-y1));
            if(D<=0) {
                z0 = A/B;
                if(z0>x[j] && z0<x[j+1]) stops = [x[j],z0,x[j+1]];
                else stops = [x[j],x[j+1]];
            } else {
                z0 = (A-sqrt(D))/B;
                z1 = (A+sqrt(D))/B;
                stops = [x[j]];
                if(z0>x[j] && z0<x[j+1]) stops.push(z0);
                if(z1>x[j] && z1<x[j+1]) stops.push(z1);
                stops.push(x[j+1]);
            }
            t0 = stops[0];
            z0 = this._at(t0,j);
            for(k=0;k<stops.length-1;k++) {
                t1 = stops[k+1];
                z1 = this._at(t1,j);
                if(z0 === 0) {
                    ri.push(t0); 
                    t0 = t1;
                    z0 = z1;
                    continue;
                }
                if(z1 === 0 || z0*z1>0) {
                    t0 = t1;
                    z0 = z1;
                    continue;
                }
                var side = 0;
                while(1) {
                    tm = (z0*t1-z1*t0)/(z0-z1);
                    if(tm <= t0 || tm >= t1) { break; }
                    zm = this._at(tm,j);
                    if(zm*z1>0) {
                        t1 = tm;
                        z1 = zm;
                        if(side === -1) z0*=0.5;
                        side = -1;
                    } else if(zm*z0>0) {
                        t0 = tm;
                        z0 = zm;
                        if(side === 1) z1*=0.5;
                        side = 1;
                    } else break;
                }
                ri.push(tm);
                t0 = stops[k+1];
                z0 = this._at(t0, j);
            }
            if(z1 === 0) ri.push(t1);
        }
        ret[i] = ri;
    }
    if(typeof this.yl[0] === "number") return ret[0];
    return ret;
}
numeric.spline = function spline(x,y,k1,kn) {
    var n = x.length, b = [], dx = [], dy = [];
    var i;
    var sub = numeric.sub,mul = numeric.mul,add = numeric.add;
    for(i=n-2;i>=0;i--) { dx[i] = x[i+1]-x[i]; dy[i] = sub(y[i+1],y[i]); }
    if(typeof k1 === "string" || typeof kn === "string") { 
        k1 = kn = "periodic";
    }
    // Build sparse tridiagonal system
    var T = [[],[],[]];
    switch(typeof k1) {
    case "undefined":
        b[0] = mul(3/(dx[0]*dx[0]),dy[0]);
        T[0].push(0,0);
        T[1].push(0,1);
        T[2].push(2/dx[0],1/dx[0]);
        break;
    case "string":
        b[0] = add(mul(3/(dx[n-2]*dx[n-2]),dy[n-2]),mul(3/(dx[0]*dx[0]),dy[0]));
        T[0].push(0,0,0);
        T[1].push(n-2,0,1);
        T[2].push(1/dx[n-2],2/dx[n-2]+2/dx[0],1/dx[0]);
        break;
    default:
        b[0] = k1;
        T[0].push(0);
        T[1].push(0);
        T[2].push(1);
        break;
    }
    for(i=1;i<n-1;i++) {
        b[i] = add(mul(3/(dx[i-1]*dx[i-1]),dy[i-1]),mul(3/(dx[i]*dx[i]),dy[i]));
        T[0].push(i,i,i);
        T[1].push(i-1,i,i+1);
        T[2].push(1/dx[i-1],2/dx[i-1]+2/dx[i],1/dx[i]);
    }
    switch(typeof kn) {
    case "undefined":
        b[n-1] = mul(3/(dx[n-2]*dx[n-2]),dy[n-2]);
        T[0].push(n-1,n-1);
        T[1].push(n-2,n-1);
        T[2].push(1/dx[n-2],2/dx[n-2]);
        break;
    case "string":
        T[1][T[1].length-1] = 0;
        break;
    default:
        b[n-1] = kn;
        T[0].push(n-1);
        T[1].push(n-1);
        T[2].push(1);
        break;
    }
    if(typeof b[0] !== "number") b = numeric.transpose(b);
    else b = [b];
    var k = Array(b.length);
    if(typeof k1 === "string") {
        for(i=k.length-1;i!==-1;--i) {
            k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)),b[i]);
            k[i][n-1] = k[i][0];
        }
    } else {
        for(i=k.length-1;i!==-1;--i) {
            k[i] = numeric.cLUsolve(numeric.cLU(T),b[i]);
        }
    }
    if(typeof y[0] === "number") k = k[0];
    else k = numeric.transpose(k);
    return new numeric.Spline(x,y,y,k,k);
}

// 8. FFT
numeric.fftpow2 = function fftpow2(x,y) {
    var n = x.length;
    if(n === 1) return;
    var cos = Math.cos, sin = Math.sin, i,j;
    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
    j = n/2;
    for(i=n-1;i!==-1;--i) {
        --j;
        xo[j] = x[i];
        yo[j] = y[i];
        --i;
        xe[j] = x[i];
        ye[j] = y[i];
    }
    fftpow2(xe,ye);
    fftpow2(xo,yo);
    j = n/2;
    var t,k = (-6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
    for(i=n-1;i!==-1;--i) {
        --j;
        if(j === -1) j = n/2-1;
        t = k*i;
        ci = cos(t);
        si = sin(t);
        x[i] = xe[j] + ci*xo[j] - si*yo[j];
        y[i] = ye[j] + ci*yo[j] + si*xo[j];
    }
}
numeric._ifftpow2 = function _ifftpow2(x,y) {
    var n = x.length;
    if(n === 1) return;
    var cos = Math.cos, sin = Math.sin, i,j;
    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
    j = n/2;
    for(i=n-1;i!==-1;--i) {
        --j;
        xo[j] = x[i];
        yo[j] = y[i];
        --i;
        xe[j] = x[i];
        ye[j] = y[i];
    }
    _ifftpow2(xe,ye);
    _ifftpow2(xo,yo);
    j = n/2;
    var t,k = (6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
    for(i=n-1;i!==-1;--i) {
        --j;
        if(j === -1) j = n/2-1;
        t = k*i;
        ci = cos(t);
        si = sin(t);
        x[i] = xe[j] + ci*xo[j] - si*yo[j];
        y[i] = ye[j] + ci*yo[j] + si*xo[j];
    }
}
numeric.ifftpow2 = function ifftpow2(x,y) {
    numeric._ifftpow2(x,y);
    numeric.diveq(x,x.length);
    numeric.diveq(y,y.length);
}
numeric.convpow2 = function convpow2(ax,ay,bx,by) {
    numeric.fftpow2(ax,ay);
    numeric.fftpow2(bx,by);
    var i,n = ax.length,axi,bxi,ayi,byi;
    for(i=n-1;i!==-1;--i) {
        axi = ax[i]; ayi = ay[i]; bxi = bx[i]; byi = by[i];
        ax[i] = axi*bxi-ayi*byi;
        ay[i] = axi*byi+ayi*bxi;
    }
    numeric.ifftpow2(ax,ay);
}
numeric.T.prototype.fft = function fft() {
    var x = this.x, y = this.y;
    var n = x.length, log = Math.log, log2 = log(2),
        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
    var k, c = (-3.141592653589793238462643383279502884197169399375105820/n),t;
    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
    for(k=0;k<n;k++) a[k] = x[k];
    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
    cx[0] = 1;
    for(k=1;k<=m/2;k++) {
        t = c*k*k;
        cx[k] = cos(t);
        cy[k] = sin(t);
        cx[m-k] = cos(t);
        cy[m-k] = sin(t)
    }
    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
    X = X.mul(Y);
    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
    X = X.mul(Y);
    X.x.length = n;
    X.y.length = n;
    return X;
}
numeric.T.prototype.ifft = function ifft() {
    var x = this.x, y = this.y;
    var n = x.length, log = Math.log, log2 = log(2),
        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
    var k, c = (3.141592653589793238462643383279502884197169399375105820/n),t;
    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
    for(k=0;k<n;k++) a[k] = x[k];
    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
    cx[0] = 1;
    for(k=1;k<=m/2;k++) {
        t = c*k*k;
        cx[k] = cos(t);
        cy[k] = sin(t);
        cx[m-k] = cos(t);
        cy[m-k] = sin(t)
    }
    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
    X = X.mul(Y);
    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
    X = X.mul(Y);
    X.x.length = n;
    X.y.length = n;
    return X.div(n);
}

//9. Unconstrained optimization
numeric.gradient = function gradient(f,x) {
    var n = x.length;
    var f0 = f(x);
    if(isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');
    var max = Math.max;
    var i,x0 = numeric.clone(x),f1,f2, J = Array(n);
    var div = numeric.div, sub = numeric.sub,errest,roundoff,max = Math.max,eps = 1e-3,abs = Math.abs, min = Math.min;
    var t0,t1,t2,it=0,d1,d2,N;
    for(i=0;i<n;i++) {
        var h = max(1e-6*f0,1e-8);
        while(1) {
            ++it;
            if(it>20) { throw new Error("Numerical gradient fails"); }
            x0[i] = x[i]+h;
            f1 = f(x0);
            x0[i] = x[i]-h;
            f2 = f(x0);
            x0[i] = x[i];
            if(isNaN(f1) || isNaN(f2)) { h/=16; continue; }
            J[i] = (f1-f2)/(2*h);
            t0 = x[i]-h;
            t1 = x[i];
            t2 = x[i]+h;
            d1 = (f1-f0)/h;
            d2 = (f0-f2)/h;
            N = max(abs(J[i]),abs(f0),abs(f1),abs(f2),abs(t0),abs(t1),abs(t2),1e-8);
            errest = min(max(abs(d1-J[i]),abs(d2-J[i]),abs(d1-d2))/N,h/N);
            if(errest>eps) { h/=16; }
            else break;
            }
    }
    return J;
}

numeric.uncmin = function uncmin(f,x0,tol,gradient,maxit,callback,options) {
    var grad = numeric.gradient;
    if(typeof options === "undefined") { options = {}; }
    if(typeof tol === "undefined") { tol = 1e-8; }
    if(typeof gradient === "undefined") { gradient = function(x) { return grad(f,x); }; }
    if(typeof maxit === "undefined") maxit = 1000;
    x0 = numeric.clone(x0);
    var n = x0.length;
    var f0 = f(x0),f1,df0;
    if(isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');
    var max = Math.max, norm2 = numeric.norm2;
    tol = max(tol,numeric.epsilon);
    var step,g0,g1,H1 = options.Hinv || numeric.identity(n);
    var dot = numeric.dot, inv = numeric.inv, sub = numeric.sub, add = numeric.add, ten = numeric.tensor, div = numeric.div, mul = numeric.mul;
    var all = numeric.all, isfinite = numeric.isFinite, neg = numeric.neg;
    var it=0,i,s,x1,y,Hy,Hs,ys,i0,t,nstep,t1,t2;
    var msg = "";
    g0 = gradient(x0);
    while(it<maxit) {
        if(typeof callback === "function") { if(callback(it,x0,f0,g0,H1)) { msg = "Callback returned true"; break; } }
        if(!all(isfinite(g0))) { msg = "Gradient has Infinity or NaN"; break; }
        step = neg(dot(H1,g0));
        if(!all(isfinite(step))) { msg = "Search direction has Infinity or NaN"; break; }
        nstep = norm2(step);
        if(nstep < tol) { msg="Newton step smaller than tol"; break; }
        t = 1;
        df0 = dot(g0,step);
        // line search
        x1 = x0;
        while(it < maxit) {
            if(t*nstep < tol) { break; }
            s = mul(step,t);
            x1 = add(x0,s);
            f1 = f(x1);
            if(f1-f0 >= 0.1*t*df0 || isNaN(f1)) {
                t *= 0.5;
                ++it;
                continue;
            }
            break;
        }
        if(t*nstep < tol) { msg = "Line search step size smaller than tol"; break; }
        if(it === maxit) { msg = "maxit reached during line search"; break; }
        g1 = gradient(x1);
        y = sub(g1,g0);
        ys = dot(y,s);
        Hy = dot(H1,y);
        H1 = sub(add(H1,
                mul(
                        (ys+dot(y,Hy))/(ys*ys),
                        ten(s,s)    )),
                div(add(ten(Hy,s),ten(s,Hy)),ys));
        x0 = x1;
        f0 = f1;
        g0 = g1;
        ++it;
    }
    return {solution: x0, f: f0, gradient: g0, invHessian: H1, iterations:it, message: msg};
}

// 10. Ode solver (Dormand-Prince)
numeric.Dopri = function Dopri(x,y,f,ymid,iterations,msg,events) {
    this.x = x;
    this.y = y;
    this.f = f;
    this.ymid = ymid;
    this.iterations = iterations;
    this.events = events;
    this.message = msg;
}
numeric.Dopri.prototype._at = function _at(xi,j) {
    function sqr(x) { return x*x; }
    var sol = this;
    var xs = sol.x;
    var ys = sol.y;
    var k1 = sol.f;
    var ymid = sol.ymid;
    var n = xs.length;
    var x0,x1,xh,y0,y1,yh,xi;
    var floor = Math.floor,h;
    var c = 0.5;
    var add = numeric.add, mul = numeric.mul,sub = numeric.sub, p,q,w;
    x0 = xs[j];
    x1 = xs[j+1];
    y0 = ys[j];
    y1 = ys[j+1];
    h  = x1-x0;
    xh = x0+c*h;
    yh = ymid[j];
    p = sub(k1[j  ],mul(y0,1/(x0-xh)+2/(x0-x1)));
    q = sub(k1[j+1],mul(y1,1/(x1-xh)+2/(x1-x0)));
    w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh),
         sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh),
         sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh),
         (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0-x1) / (x0 - xh),
         (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0-x1) / (x1 - xh)];
    return add(add(add(add(mul(y0,w[0]),
                           mul(yh,w[1])),
                           mul(y1,w[2])),
                           mul( p,w[3])),
                           mul( q,w[4]));
}
numeric.Dopri.prototype.at = function at(x) {
    var i,j,k,floor = Math.floor;
    if(typeof x !== "number") {
        var n = x.length, ret = Array(n);
        for(i=n-1;i!==-1;--i) {
            ret[i] = this.at(x[i]);
        }
        return ret;
    }
    var x0 = this.x;
    i = 0; j = x0.length-1;
    while(j-i>1) {
        k = floor(0.5*(i+j));
        if(x0[k] <= x) i = k;
        else j = k;
    }
    return this._at(x,i);
}

numeric.dopri = function dopri(x0,x1,y0,f,tol,maxit,event) {
    if(typeof tol === "undefined") { tol = 1e-6; }
    if(typeof maxit === "undefined") { maxit = 1000; }
    var xs = [x0], ys = [y0], k1 = [f(x0,y0)], k2,k3,k4,k5,k6,k7, ymid = [];
    var A2 = 1/5;
    var A3 = [3/40,9/40];
    var A4 = [44/45,-56/15,32/9];
    var A5 = [19372/6561,-25360/2187,64448/6561,-212/729];
    var A6 = [9017/3168,-355/33,46732/5247,49/176,-5103/18656];
    var b = [35/384,0,500/1113,125/192,-2187/6784,11/84];
    var bm = [0.5*6025192743/30085553152,
              0,
              0.5*51252292925/65400821598,
              0.5*-2691868925/45128329728,
              0.5*187940372067/1594534317056,
              0.5*-1776094331/19743644256,
              0.5*11237099/235043384];
    var c = [1/5,3/10,4/5,8/9,1,1];
    var e = [-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40];
    var i = 0,er,j;
    var h = (x1-x0)/10;
    var it = 0;
    var add = numeric.add, mul = numeric.mul, y1,erinf;
    var max = Math.max, min = Math.min, abs = Math.abs, norminf = numeric.norminf,pow = Math.pow;
    var any = numeric.any, lt = numeric.lt, and = numeric.and, sub = numeric.sub;
    var e0, e1, ev;
    var ret = new numeric.Dopri(xs,ys,k1,ymid,-1,"");
    if(typeof event === "function") e0 = event(x0,y0);
    while(x0<x1 && it<maxit) {
        ++it;
        if(x0+h>x1) h = x1-x0;
        k2 = f(x0+c[0]*h,                add(y0,mul(   A2*h,k1[i])));
        k3 = f(x0+c[1]*h,            add(add(y0,mul(A3[0]*h,k1[i])),mul(A3[1]*h,k2)));
        k4 = f(x0+c[2]*h,        add(add(add(y0,mul(A4[0]*h,k1[i])),mul(A4[1]*h,k2)),mul(A4[2]*h,k3)));
        k5 = f(x0+c[3]*h,    add(add(add(add(y0,mul(A5[0]*h,k1[i])),mul(A5[1]*h,k2)),mul(A5[2]*h,k3)),mul(A5[3]*h,k4)));
        k6 = f(x0+c[4]*h,add(add(add(add(add(y0,mul(A6[0]*h,k1[i])),mul(A6[1]*h,k2)),mul(A6[2]*h,k3)),mul(A6[3]*h,k4)),mul(A6[4]*h,k5)));
        y1 = add(add(add(add(add(y0,mul(k1[i],h*b[0])),mul(k3,h*b[2])),mul(k4,h*b[3])),mul(k5,h*b[4])),mul(k6,h*b[5]));
        k7 = f(x0+h,y1);
        er = add(add(add(add(add(mul(k1[i],h*e[0]),mul(k3,h*e[2])),mul(k4,h*e[3])),mul(k5,h*e[4])),mul(k6,h*e[5])),mul(k7,h*e[6]));
        if(typeof er === "number") erinf = abs(er);
        else erinf = norminf(er);
        if(erinf > tol) { // reject
            h = 0.2*h*pow(tol/erinf,0.25);
            if(x0+h === x0) {
                ret.msg = "Step size became too small";
                break;
            }
            continue;
        }
        ymid[i] = add(add(add(add(add(add(y0,
                mul(k1[i],h*bm[0])),
                mul(k3   ,h*bm[2])),
                mul(k4   ,h*bm[3])),
                mul(k5   ,h*bm[4])),
                mul(k6   ,h*bm[5])),
                mul(k7   ,h*bm[6]));
        ++i;
        xs[i] = x0+h;
        ys[i] = y1;
        k1[i] = k7;
        if(typeof event === "function") {
            var yi,xl = x0,xr = x0+0.5*h,xi;
            e1 = event(xr,ymid[i-1]);
            ev = and(lt(e0,0),lt(0,e1));
            if(!any(ev)) { xl = xr; xr = x0+h; e0 = e1; e1 = event(xr,y1); ev = and(lt(e0,0),lt(0,e1)); }
            if(any(ev)) {
                var xc, yc, en,ei;
                var side=0, sl = 1.0, sr = 1.0;
                while(1) {
                    if(typeof e0 === "number") xi = (sr*e1*xl-sl*e0*xr)/(sr*e1-sl*e0);
                    else {
                        xi = xr;
                        for(j=e0.length-1;j!==-1;--j) {
                            if(e0[j]<0 && e1[j]>0) xi = min(xi,(sr*e1[j]*xl-sl*e0[j]*xr)/(sr*e1[j]-sl*e0[j]));
                        }
                    }
                    if(xi <= xl || xi >= xr) break;
                    yi = ret._at(xi, i-1);
                    ei = event(xi,yi);
                    en = and(lt(e0,0),lt(0,ei));
                    if(any(en)) {
                        xr = xi;
                        e1 = ei;
                        ev = en;
                        sr = 1.0;
                        if(side === -1) sl *= 0.5;
                        else sl = 1.0;
                        side = -1;
                    } else {
                        xl = xi;
                        e0 = ei;
                        sl = 1.0;
                        if(side === 1) sr *= 0.5;
                        else sr = 1.0;
                        side = 1;
                    }
                }
                y1 = ret._at(0.5*(x0+xi),i-1);
                ret.f[i] = f(xi,yi);
                ret.x[i] = xi;
                ret.y[i] = yi;
                ret.ymid[i-1] = y1;
                ret.events = ev;
                ret.iterations = it;
                return ret;
            }
        }
        x0 += h;
        y0 = y1;
        e0 = e1;
        h = min(0.8*h*pow(tol/erinf,0.25),4*h);
    }
    ret.iterations = it;
    return ret;
}

// 11. Ax = b
numeric.LU = function(A, fast) {
  fast = fast || false;

  var abs = Math.abs;
  var i, j, k, absAjk, Akk, Ak, Pk, Ai;
  var max;
  var n = A.length, n1 = n-1;
  var P = new Array(n);
  if(!fast) A = numeric.clone(A);

  for (k = 0; k < n; ++k) {
    Pk = k;
    Ak = A[k];
    max = abs(Ak[k]);
    for (j = k + 1; j < n; ++j) {
      absAjk = abs(A[j][k]);
      if (max < absAjk) {
        max = absAjk;
        Pk = j;
      }
    }
    P[k] = Pk;

    if (Pk != k) {
      A[k] = A[Pk];
      A[Pk] = Ak;
      Ak = A[k];
    }

    Akk = Ak[k];

    for (i = k + 1; i < n; ++i) {
      A[i][k] /= Akk;
    }

    for (i = k + 1; i < n; ++i) {
      Ai = A[i];
      for (j = k + 1; j < n1; ++j) {
        Ai[j] -= Ai[k] * Ak[j];
        ++j;
        Ai[j] -= Ai[k] * Ak[j];
      }
      if(j===n1) Ai[j] -= Ai[k] * Ak[j];
    }
  }

  return {
    LU: A,
    P:  P
  };
}

numeric.LUsolve = function LUsolve(LUP, b) {
  var i, j;
  var LU = LUP.LU;
  var n   = LU.length;
  var x = numeric.clone(b);
  var P   = LUP.P;
  var Pi, LUi, LUii, tmp;

  for (i=n-1;i!==-1;--i) x[i] = b[i];
  for (i = 0; i < n; ++i) {
    Pi = P[i];
    if (P[i] !== i) {
      tmp = x[i];
      x[i] = x[Pi];
      x[Pi] = tmp;
    }

    LUi = LU[i];
    for (j = 0; j < i; ++j) {
      x[i] -= x[j] * LUi[j];
    }
  }

  for (i = n - 1; i >= 0; --i) {
    LUi = LU[i];
    for (j = i + 1; j < n; ++j) {
      x[i] -= x[j] * LUi[j];
    }

    x[i] /= LUi[i];
  }

  return x;
}

numeric.solve = function solve(A,b,fast) { return numeric.LUsolve(numeric.LU(A,fast), b); }

// 12. Linear programming
numeric.echelonize = function echelonize(A) {
    var s = numeric.dim(A), m = s[0], n = s[1];
    var I = numeric.identity(m);
    var P = Array(m);
    var i,j,k,l,Ai,Ii,Z,a;
    var abs = Math.abs;
    var diveq = numeric.diveq;
    A = numeric.clone(A);
    for(i=0;i<m;++i) {
        k = 0;
        Ai = A[i];
        Ii = I[i];
        for(j=1;j<n;++j) if(abs(Ai[k])<abs(Ai[j])) k=j;
        P[i] = k;
        diveq(Ii,Ai[k]);
        diveq(Ai,Ai[k]);
        for(j=0;j<m;++j) if(j!==i) {
            Z = A[j]; a = Z[k];
            for(l=n-1;l!==-1;--l) Z[l] -= Ai[l]*a;
            Z = I[j];
            for(l=m-1;l!==-1;--l) Z[l] -= Ii[l]*a;
        }
    }
    return {I:I, A:A, P:P};
}

numeric.__solveLP = function __solveLP(c,A,b,tol,maxit,x,flag) {
    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
    var m = c.length, n = b.length,y;
    var unbounded = false, cb,i0=0;
    var alpha = 1.0;
    var f0,df0,AT = numeric.transpose(A), svd = numeric.svd,transpose = numeric.transpose,leq = numeric.leq, sqrt = Math.sqrt, abs = Math.abs;
    var muleq = numeric.muleq;
    var norm = numeric.norminf, any = numeric.any,min = Math.min;
    var all = numeric.all, gt = numeric.gt;
    var p = Array(m), A0 = Array(n),e=numeric.rep([n],1), H;
    var solve = numeric.solve, z = sub(b,dot(A,x)),count;
    var dotcc = dot(c,c);
    var g;
    for(count=i0;count<maxit;++count) {
        var i,j,d;
        for(i=n-1;i!==-1;--i) A0[i] = div(A[i],z[i]);
        var A1 = transpose(A0);
        for(i=m-1;i!==-1;--i) p[i] = (/*x[i]+*/sum(A1[i]));
        alpha = 0.25*abs(dotcc/dot(c,p));
        var a1 = 100*sqrt(dotcc/dot(p,p));
        if(!isFinite(alpha) || alpha>a1) alpha = a1;
        g = add(c,mul(alpha,p));
        H = dot(A1,A0);
        for(i=m-1;i!==-1;--i) H[i][i] += 1;
        d = solve(H,div(g,alpha),true);
        var t0 = div(z,dot(A,d));
        var t = 1.0;
        for(i=n-1;i!==-1;--i) if(t0[i]<0) t = min(t,-0.999*t0[i]);
        y = sub(x,mul(d,t));
        z = sub(b,dot(A,y));
        if(!all(gt(z,0))) return { solution: x, message: "", iterations: count };
        x = y;
        if(alpha<tol) return { solution: y, message: "", iterations: count };
        if(flag) {
            var s = dot(c,g), Ag = dot(A,g);
            unbounded = true;
            for(i=n-1;i!==-1;--i) if(s*Ag[i]<0) { unbounded = false; break; }
        } else {
            if(x[m-1]>=0) unbounded = false;
            else unbounded = true;
        }
        if(unbounded) return { solution: y, message: "Unbounded", iterations: count };
    }
    return { solution: x, message: "maximum iteration count exceeded", iterations:count };
}

numeric._solveLP = function _solveLP(c,A,b,tol,maxit) {
    var m = c.length, n = b.length,y;
    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
    var c0 = numeric.rep([m],0).concat([1]);
    var J = numeric.rep([n,1],-1);
    var A0 = numeric.blockMatrix([[A                   ,   J  ]]);
    var b0 = b;
    var y = numeric.rep([m],0).concat(Math.max(0,numeric.sup(numeric.neg(b)))+1);
    var x0 = numeric.__solveLP(c0,A0,b0,tol,maxit,y,false);
    var x = numeric.clone(x0.solution);
    x.length = m;
    var foo = numeric.inf(sub(b,dot(A,x)));
    if(foo<0) { return { solution: NaN, message: "Infeasible", iterations: x0.iterations }; }
    var ret = numeric.__solveLP(c, A, b, tol, maxit-x0.iterations, x, true);
    ret.iterations += x0.iterations;
    return ret;
};

numeric.solveLP = function solveLP(c,A,b,Aeq,beq,tol,maxit) {
    if(typeof maxit === "undefined") maxit = 1000;
    if(typeof tol === "undefined") tol = numeric.epsilon;
    if(typeof Aeq === "undefined") return numeric._solveLP(c,A,b,tol,maxit);
    var m = Aeq.length, n = Aeq[0].length, o = A.length;
    var B = numeric.echelonize(Aeq);
    var flags = numeric.rep([n],0);
    var P = B.P;
    var Q = [];
    var i;
    for(i=P.length-1;i!==-1;--i) flags[P[i]] = 1;
    for(i=n-1;i!==-1;--i) if(flags[i]===0) Q.push(i);
    var g = numeric.getRange;
    var I = numeric.linspace(0,m-1), J = numeric.linspace(0,o-1);
    var Aeq2 = g(Aeq,I,Q), A1 = g(A,J,P), A2 = g(A,J,Q), dot = numeric.dot, sub = numeric.sub;
    var A3 = dot(A1,B.I);
    var A4 = sub(A2,dot(A3,Aeq2)), b4 = sub(b,dot(A3,beq));
    var c1 = Array(P.length), c2 = Array(Q.length);
    for(i=P.length-1;i!==-1;--i) c1[i] = c[P[i]];
    for(i=Q.length-1;i!==-1;--i) c2[i] = c[Q[i]];
    var c4 = sub(c2,dot(c1,dot(B.I,Aeq2)));
    var S = numeric._solveLP(c4,A4,b4,tol,maxit);
    var x2 = S.solution;
    if(x2!==x2) return S;
    var x1 = dot(B.I,sub(beq,dot(Aeq2,x2)));
    var x = Array(c.length);
    for(i=P.length-1;i!==-1;--i) x[P[i]] = x1[i];
    for(i=Q.length-1;i!==-1;--i) x[Q[i]] = x2[i];
    return { solution: x, message:S.message, iterations: S.iterations };
}

numeric.MPStoLP = function MPStoLP(MPS) {
    if(MPS instanceof String) { MPS.split('\n'); }
    var state = 0;
    var states = ['Initial state','NAME','ROWS','COLUMNS','RHS','BOUNDS','ENDATA'];
    var n = MPS.length;
    var i,j,z,N=0,rows = {}, sign = [], rl = 0, vars = {}, nv = 0;
    var name;
    var c = [], A = [], b = [];
    function err(e) { throw new Error('MPStoLP: '+e+'\nLine '+i+': '+MPS[i]+'\nCurrent state: '+states[state]+'\n'); }
    for(i=0;i<n;++i) {
        z = MPS[i];
        var w0 = z.match(/\S*/g);
        var w = [];
        for(j=0;j<w0.length;++j) if(w0[j]!=="") w.push(w0[j]);
        if(w.length === 0) continue;
        for(j=0;j<states.length;++j) if(z.substr(0,states[j].length) === states[j]) break;
        if(j<states.length) {
            state = j;
            if(j===1) { name = w[1]; }
            if(j===6) return { name:name, c:c, A:numeric.transpose(A), b:b, rows:rows, vars:vars };
            continue;
        }
        switch(state) {
        case 0: case 1: err('Unexpected line');
        case 2: 
            switch(w[0]) {
            case 'N': if(N===0) N = w[1]; else err('Two or more N rows'); break;
            case 'L': rows[w[1]] = rl; sign[rl] = 1; b[rl] = 0; ++rl; break;
            case 'G': rows[w[1]] = rl; sign[rl] = -1;b[rl] = 0; ++rl; break;
            case 'E': rows[w[1]] = rl; sign[rl] = 0;b[rl] = 0; ++rl; break;
            default: err('Parse error '+numeric.prettyPrint(w));
            }
            break;
        case 3:
            if(!vars.hasOwnProperty(w[0])) { vars[w[0]] = nv; c[nv] = 0; A[nv] = numeric.rep([rl],0); ++nv; }
            var p = vars[w[0]];
            for(j=1;j<w.length;j+=2) {
                if(w[j] === N) { c[p] = parseFloat(w[j+1]); continue; }
                var q = rows[w[j]];
                A[p][q] = (sign[q]<0?-1:1)*parseFloat(w[j+1]);
            }
            break;
        case 4:
            for(j=1;j<w.length;j+=2) b[rows[w[j]]] = (sign[rows[w[j]]]<0?-1:1)*parseFloat(w[j+1]);
            break;
        case 5: /*FIXME*/ break;
        case 6: err('Internal error');
        }
    }
    err('Reached end of file without ENDATA');
}
// seedrandom.js version 2.0.
// Author: David Bau 4/2/2011
//
// Defines a method Math.seedrandom() that, when called, substitutes
// an explicitly seeded RC4-based algorithm for Math.random().  Also
// supports automatic seeding from local or network sources of entropy.
//
// Usage:
//
//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>
//
//   Math.seedrandom('yipee'); Sets Math.random to a function that is
//                             initialized using the given explicit seed.
//
//   Math.seedrandom();        Sets Math.random to a function that is
//                             seeded using the current time, dom state,
//                             and other accumulated local entropy.
//                             The generated seed string is returned.
//
//   Math.seedrandom('yowza', true);
//                             Seeds using the given explicit seed mixed
//                             together with accumulated entropy.
//
//   <script src="http://bit.ly/srandom-512"></script>
//                             Seeds using physical random bits downloaded
//                             from random.org.
//
//   <script src="https://jsonlib.appspot.com/urandom?callback=Math.seedrandom">
//   </script>                 Seeds using urandom bits from call.jsonlib.com,
//                             which is faster than random.org.
//
// Examples:
//
//   Math.seedrandom("hello");            // Use "hello" as the seed.
//   document.write(Math.random());       // Always 0.5463663768140734
//   document.write(Math.random());       // Always 0.43973793770592234
//   var rng1 = Math.random;              // Remember the current prng.
//
//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.
//   document.write(Math.random());       // Pretty much unpredictable.
//
//   Math.random = rng1;                  // Continue "hello" prng sequence.
//   document.write(Math.random());       // Always 0.554769432473455
//
//   Math.seedrandom(autoseed);           // Restart at the previous seed.
//   document.write(Math.random());       // Repeat the 'unpredictable' value.
//
// Notes:
//
// Each time seedrandom('arg') is called, entropy from the passed seed
// is accumulated in a pool to help generate future seeds for the
// zero-argument form of Math.seedrandom, so entropy can be injected over
// time by calling seedrandom with explicit data repeatedly.
//
// On speed - This javascript implementation of Math.random() is about
// 3-10x slower than the built-in Math.random() because it is not native
// code, but this is typically fast enough anyway.  Seeding is more expensive,
// especially if you use auto-seeding.  Some details (timings on Chrome 4):
//
// Our Math.random()            - avg less than 0.002 milliseconds per call
// seedrandom('explicit')       - avg less than 0.5 milliseconds per call
// seedrandom('explicit', true) - avg less than 2 milliseconds per call
// seedrandom()                 - avg about 38 milliseconds per call
//
// LICENSE (BSD):
//
// Copyright 2010 David Bau, all rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
// 
//   3. Neither the name of this module nor the names of its contributors may
//      be used to endorse or promote products derived from this software
//      without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
/**
 * All code is in an anonymous closure to keep the global namespace clean.
 *
 * @param {number=} overflow 
 * @param {number=} startdenom
 */

// Patched by Seb so that seedrandom.js does not pollute the Math object.
// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%
// slower.
numeric.seedrandom = { pow:Math.pow, random:Math.random };

(function (pool, math, width, chunks, significance, overflow, startdenom) {


//
// seedrandom()
// This is the seedrandom function described above.
//
math['seedrandom'] = function seedrandom(seed, use_entropy) {
  var key = [];
  var arc4;

  // Flatten the seed string or build one from local entropy if needed.
  seed = mixkey(flatten(
    use_entropy ? [seed, pool] :
    arguments.length ? seed :
    [new Date().getTime(), pool, window], 3), key);

  // Use the seed to initialize an ARC4 generator.
  arc4 = new ARC4(key);

  // Mix the randomness into accumulated entropy.
  mixkey(arc4.S, pool);

  // Override Math.random

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.

  math['random'] = function random() {  // Closure to return a random double:
    var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48
    var d = startdenom;                 //   and denominator d = 2 ^ 48.
    var x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  // Return the seed that was used
  return seed;
};

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
/** @constructor */
function ARC4(key) {
  var t, u, me = this, keylen = key.length;
  var i = 0, j = me.i = me.j = me.m = 0;
  me.S = [];
  me.c = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) { me.S[i] = i++; }
  for (i = 0; i < width; i++) {
    t = me.S[i];
    j = lowbits(j + t + key[i % keylen]);
    u = me.S[j];
    me.S[i] = u;
    me.S[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  me.g = function getnext(count) {
    var s = me.S;
    var i = lowbits(me.i + 1); var t = s[i];
    var j = lowbits(me.j + t); var u = s[j];
    s[i] = u;
    s[j] = t;
    var r = s[lowbits(t + u)];
    while (--count) {
      i = lowbits(i + 1); t = s[i];
      j = lowbits(j + t); u = s[j];
      s[i] = u;
      s[j] = t;
      r = r * width + s[lowbits(t + u)];
    }
    me.i = i;
    me.j = j;
    return r;
  };
  // For robust unpredictability discard an initial batch of values.
  // See http://www.rsa.com/rsalabs/node.asp?id=2009
  me.g(width);
}

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
/** @param {Object=} result 
  * @param {string=} prop
  * @param {string=} typ */
function flatten(obj, depth, result, prop, typ) {
  result = [];
  typ = typeof(obj);
  if (depth && typ == 'object') {
    for (prop in obj) {
      if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)
        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
      }
    }
  }
  return (result.length ? result : obj + (typ != 'string' ? '\0' : ''));
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
/** @param {number=} smear 
  * @param {number=} j */
function mixkey(seed, key, smear, j) {
  seed += '';                         // Ensure the seed is a string
  smear = 0;
  for (j = 0; j < seed.length; j++) {
    key[lowbits(j)] =
      lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
  }
  seed = '';
  for (j in key) { seed += String.fromCharCode(key[j]); }
  return seed;
}

//
// lowbits()
// A quick "n mod width" for width a power of 2.
//
function lowbits(n) { return n & (width - 1); }

//
// The following constants are related to IEEE 754 limits.
//
startdenom = math.pow(width, chunks);
significance = math.pow(2, significance);
overflow = significance * 2;

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to intefere with determinstic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

// End anonymous scope, and pass initial values.
}(
  [],   // pool: entropy pool starts empty
  numeric.seedrandom, // math: package containing random, pow, and seedrandom
  256,  // width: each RC4 output is 0 <= x < 256
  6,    // chunks: at least six RC4 outputs for each double
  52    // significance: there are 52 significant digits in a double
  ));
/* This file is a slightly modified version of quadprog.js from Alberto Santini.
 * It has been slightly modified by Sébastien Loisel to make sure that it handles
 * 0-based Arrays instead of 1-based Arrays.
 * License is in resources/LICENSE.quadprog */
(function(exports) {

function base0to1(A) {
    if(typeof A !== "object") { return A; }
    var ret = [], i,n=A.length;
    for(i=0;i<n;i++) ret[i+1] = base0to1(A[i]);
    return ret;
}
function base1to0(A) {
    if(typeof A !== "object") { return A; }
    var ret = [], i,n=A.length;
    for(i=1;i<n;i++) ret[i-1] = base1to0(A[i]);
    return ret;
}

function dpori(a, lda, n) {
    var i, j, k, kp1, t;

    for (k = 1; k <= n; k = k + 1) {
        a[k][k] = 1 / a[k][k];
        t = -a[k][k];
        //~ dscal(k - 1, t, a[1][k], 1);
        for (i = 1; i < k; i = i + 1) {
            a[i][k] = t * a[i][k];
        }

        kp1 = k + 1;
        if (n < kp1) {
            break;
        }
        for (j = kp1; j <= n; j = j + 1) {
            t = a[k][j];
            a[k][j] = 0;
            //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);
            for (i = 1; i <= k; i = i + 1) {
                a[i][j] = a[i][j] + (t * a[i][k]);
            }
        }
    }

}

function dposl(a, lda, n, b) {
    var i, k, kb, t;

    for (k = 1; k <= n; k = k + 1) {
        //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);
        t = 0;
        for (i = 1; i < k; i = i + 1) {
            t = t + (a[i][k] * b[i]);
        }

        b[k] = (b[k] - t) / a[k][k];
    }

    for (kb = 1; kb <= n; kb = kb + 1) {
        k = n + 1 - kb;
        b[k] = b[k] / a[k][k];
        t = -b[k];
        //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);
        for (i = 1; i < k; i = i + 1) {
            b[i] = b[i] + (t * a[i][k]);
        }
    }
}

function dpofa(a, lda, n, info) {
    var i, j, jm1, k, t, s;

    for (j = 1; j <= n; j = j + 1) {
        info[1] = j;
        s = 0;
        jm1 = j - 1;
        if (jm1 < 1) {
            s = a[j][j] - s;
            if (s <= 0) {
                break;
            }
            a[j][j] = Math.sqrt(s);
        } else {
            for (k = 1; k <= jm1; k = k + 1) {
                //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);
                t = a[k][j];
                for (i = 1; i < k; i = i + 1) {
                    t = t - (a[i][j] * a[i][k]);
                }
                t = t / a[k][k];
                a[k][j] = t;
                s = s + t * t;
            }
            s = a[j][j] - s;
            if (s <= 0) {
                break;
            }
            a[j][j] = Math.sqrt(s);
        }
        info[1] = 0;
    }
}

function qpgen2(dmat, dvec, fddmat, n, sol, crval, amat,
    bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {

    var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv,
        temp, sum, t1, tt, gc, gs, nu,
        t1inf, t2min,
        vsmall, tmpa, tmpb,
        go;

    r = Math.min(n, q);
    l = 2 * n + (r * (r + 5)) / 2 + 2 * q + 1;

    vsmall = 1.0e-60;
    do {
        vsmall = vsmall + vsmall;
        tmpa = 1 + 0.1 * vsmall;
        tmpb = 1 + 0.2 * vsmall;
    } while (tmpa <= 1 || tmpb <= 1);

    for (i = 1; i <= n; i = i + 1) {
        work[i] = dvec[i];
    }
    for (i = n + 1; i <= l; i = i + 1) {
        work[i] = 0;
    }
    for (i = 1; i <= q; i = i + 1) {
        iact[i] = 0;
    }

    info = [];

    if (ierr[1] === 0) {
        dpofa(dmat, fddmat, n, info);
        if (info[1] !== 0) {
            ierr[1] = 2;
            return;
        }
        dposl(dmat, fddmat, n, dvec);
        dpori(dmat, fddmat, n);
    } else {
        for (j = 1; j <= n; j = j + 1) {
            sol[j] = 0;
            for (i = 1; i <= j; i = i + 1) {
                sol[j] = sol[j] + dmat[i][j] * dvec[i];
            }
        }
        for (j = 1; j <= n; j = j + 1) {
            dvec[j] = 0;
            for (i = j; i <= n; i = i + 1) {
                dvec[j] = dvec[j] + dmat[j][i] * sol[i];
            }
        }
    }

    crval[1] = 0;
    for (j = 1; j <= n; j = j + 1) {
        sol[j] = dvec[j];
        crval[1] = crval[1] + work[j] * sol[j];
        work[j] = 0;
        for (i = j + 1; i <= n; i = i + 1) {
            dmat[i][j] = 0;
        }
    }
    crval[1] = -crval[1] / 2;
    ierr[1] = 0;

    iwzv = n;
    iwrv = iwzv + n;
    iwuv = iwrv + r;
    iwrm = iwuv + r + 1;
    iwsv = iwrm + (r * (r + 1)) / 2;
    iwnbv = iwsv + q;

    for (i = 1; i <= q; i = i + 1) {
        sum = 0;
        for (j = 1; j <= n; j = j + 1) {
            sum = sum + amat[j][i] * amat[j][i];
        }
        work[iwnbv + i] = Math.sqrt(sum);
    }
    nact = 0;
    iter[1] = 0;
    iter[2] = 0;

    function fn_goto_50() {
        iter[1] = iter[1] + 1;

        l = iwsv;
        for (i = 1; i <= q; i = i + 1) {
            l = l + 1;
            sum = -bvec[i];
            for (j = 1; j <= n; j = j + 1) {
                sum = sum + amat[j][i] * sol[j];
            }
            if (Math.abs(sum) < vsmall) {
                sum = 0;
            }
            if (i > meq) {
                work[l] = sum;
            } else {
                work[l] = -Math.abs(sum);
                if (sum > 0) {
                    for (j = 1; j <= n; j = j + 1) {
                        amat[j][i] = -amat[j][i];
                    }
                    bvec[i] = -bvec[i];
                }
            }
        }

        for (i = 1; i <= nact; i = i + 1) {
            work[iwsv + iact[i]] = 0;
        }

        nvl = 0;
        temp = 0;
        for (i = 1; i <= q; i = i + 1) {
            if (work[iwsv + i] < temp * work[iwnbv + i]) {
                nvl = i;
                temp = work[iwsv + i] / work[iwnbv + i];
            }
        }
        if (nvl === 0) {
            return 999;
        }

        return 0;
    }

    function fn_goto_55() {
        for (i = 1; i <= n; i = i + 1) {
            sum = 0;
            for (j = 1; j <= n; j = j + 1) {
                sum = sum + dmat[j][i] * amat[j][nvl];
            }
            work[i] = sum;
        }

        l1 = iwzv;
        for (i = 1; i <= n; i = i + 1) {
            work[l1 + i] = 0;
        }
        for (j = nact + 1; j <= n; j = j + 1) {
            for (i = 1; i <= n; i = i + 1) {
                work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];
            }
        }

        t1inf = true;
        for (i = nact; i >= 1; i = i - 1) {
            sum = work[i];
            l = iwrm + (i * (i + 3)) / 2;
            l1 = l - i;
            for (j = i + 1; j <= nact; j = j + 1) {
                sum = sum - work[l] * work[iwrv + j];
                l = l + j;
            }
            sum = sum / work[l1];
            work[iwrv + i] = sum;
            if (iact[i] < meq) {
                // continue;
                break;
            }
            if (sum < 0) {
                // continue;
                break;
            }
            t1inf = false;
            it1 = i;
        }

        if (!t1inf) {
            t1 = work[iwuv + it1] / work[iwrv + it1];
            for (i = 1; i <= nact; i = i + 1) {
                if (iact[i] < meq) {
                    // continue;
                    break;
                }
                if (work[iwrv + i] < 0) {
                    // continue;
                    break;
                }
                temp = work[iwuv + i] / work[iwrv + i];
                if (temp < t1) {
                    t1 = temp;
                    it1 = i;
                }
            }
        }

        sum = 0;
        for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {
            sum = sum + work[i] * work[i];
        }
        if (Math.abs(sum) <= vsmall) {
            if (t1inf) {
                ierr[1] = 1;
                // GOTO 999
                return 999;
            } else {
                for (i = 1; i <= nact; i = i + 1) {
                    work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];
                }
                work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1;
                // GOTO 700
                return 700;
            }
        } else {
            sum = 0;
            for (i = 1; i <= n; i = i + 1) {
                sum = sum + work[iwzv + i] * amat[i][nvl];
            }
            tt = -work[iwsv + nvl] / sum;
            t2min = true;
            if (!t1inf) {
                if (t1 < tt) {
                    tt = t1;
                    t2min = false;
                }
            }

            for (i = 1; i <= n; i = i + 1) {
                sol[i] = sol[i] + tt * work[iwzv + i];
                if (Math.abs(sol[i]) < vsmall) {
                    sol[i] = 0;
                }
            }

            crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);
            for (i = 1; i <= nact; i = i + 1) {
                work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];
            }
            work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;

            if (t2min) {
                nact = nact + 1;
                iact[nact] = nvl;

                l = iwrm + ((nact - 1) * nact) / 2 + 1;
                for (i = 1; i <= nact - 1; i = i + 1) {
                    work[l] = work[i];
                    l = l + 1;
                }

                if (nact === n) {
                    work[l] = work[n];
                } else {
                    for (i = n; i >= nact + 1; i = i - 1) {
                        if (work[i] === 0) {
                            // continue;
                            break;
                        }
                        gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));
                        gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));
                        if (work[i - 1] >= 0) {
                            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
                        } else {
                            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
                        }
                        gc = work[i - 1] / temp;
                        gs = work[i] / temp;

                        if (gc === 1) {
                            // continue;
                            break;
                        }
                        if (gc === 0) {
                            work[i - 1] = gs * temp;
                            for (j = 1; j <= n; j = j + 1) {
                                temp = dmat[j][i - 1];
                                dmat[j][i - 1] = dmat[j][i];
                                dmat[j][i] = temp;
                            }
                        } else {
                            work[i - 1] = temp;
                            nu = gs / (1 + gc);
                            for (j = 1; j <= n; j = j + 1) {
                                temp = gc * dmat[j][i - 1] + gs * dmat[j][i];
                                dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];
                                dmat[j][i - 1] = temp;

                            }
                        }
                    }
                    work[l] = work[nact];
                }
            } else {
                sum = -bvec[nvl];
                for (j = 1; j <= n; j = j + 1) {
                    sum = sum + sol[j] * amat[j][nvl];
                }
                if (nvl > meq) {
                    work[iwsv + nvl] = sum;
                } else {
                    work[iwsv + nvl] = -Math.abs(sum);
                    if (sum > 0) {
                        for (j = 1; j <= n; j = j + 1) {
                            amat[j][nvl] = -amat[j][nvl];
                        }
                        bvec[nvl] = -bvec[nvl];
                    }
                }
                // GOTO 700
                return 700;
            }
        }

        return 0;
    }

    function fn_goto_797() {
        l = iwrm + (it1 * (it1 + 1)) / 2 + 1;
        l1 = l + it1;
        if (work[l1] === 0) {
            // GOTO 798
            return 798;
        }
        gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
        gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
        if (work[l1 - 1] >= 0) {
            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
        } else {
            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
        }
        gc = work[l1 - 1] / temp;
        gs = work[l1] / temp;

        if (gc === 1) {
            // GOTO 798
            return 798;
        }
        if (gc === 0) {
            for (i = it1 + 1; i <= nact; i = i + 1) {
                temp = work[l1 - 1];
                work[l1 - 1] = work[l1];
                work[l1] = temp;
                l1 = l1 + i;
            }
            for (i = 1; i <= n; i = i + 1) {
                temp = dmat[i][it1];
                dmat[i][it1] = dmat[i][it1 + 1];
                dmat[i][it1 + 1] = temp;
            }
        } else {
            nu = gs / (1 + gc);
            for (i = it1 + 1; i <= nact; i = i + 1) {
                temp = gc * work[l1 - 1] + gs * work[l1];
                work[l1] = nu * (work[l1 - 1] + temp) - work[l1];
                work[l1 - 1] = temp;
                l1 = l1 + i;
            }
            for (i = 1; i <= n; i = i + 1) {
                temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];
                dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];
                dmat[i][it1] = temp;
            }
        }

        return 0;
    }

    function fn_goto_798() {
        l1 = l - it1;
        for (i = 1; i <= it1; i = i + 1) {
            work[l1] = work[l];
            l = l + 1;
            l1 = l1 + 1;
        }

        work[iwuv + it1] = work[iwuv + it1 + 1];
        iact[it1] = iact[it1 + 1];
        it1 = it1 + 1;
        if (it1 < nact) {
            // GOTO 797
            return 797;
        }

        return 0;
    }

    function fn_goto_799() {
        work[iwuv + nact] = work[iwuv + nact + 1];
        work[iwuv + nact + 1] = 0;
        iact[nact] = 0;
        nact = nact - 1;
        iter[2] = iter[2] + 1;

        return 0;
    }

    go = 0;
    while (true) {
        go = fn_goto_50();
        if (go === 999) {
            return;
        }
        while (true) {
            go = fn_goto_55();
            if (go === 0) {
                break;
            }
            if (go === 999) {
                return;
            }
            if (go === 700) {
                if (it1 === nact) {
                    fn_goto_799();
                } else {
                    while (true) {
                        fn_goto_797();
                        go = fn_goto_798();
                        if (go !== 797) {
                            break;
                        }
                    }
                    fn_goto_799();
                }
            }
        }
    }

}

function solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {
    Dmat = base0to1(Dmat);
    dvec = base0to1(dvec);
    Amat = base0to1(Amat);
    var i, n, q,
        nact, r,
        crval = [], iact = [], sol = [], work = [], iter = [],
        message;

    meq = meq || 0;
    factorized = factorized ? base0to1(factorized) : [undefined, 0];
    bvec = bvec ? base0to1(bvec) : [];

    // In Fortran the array index starts from 1
    n = Dmat.length - 1;
    q = Amat[1].length - 1;

    if (!bvec) {
        for (i = 1; i <= q; i = i + 1) {
            bvec[i] = 0;
        }
    }
    for (i = 1; i <= q; i = i + 1) {
        iact[i] = 0;
    }
    nact = 0;
    r = Math.min(n, q);
    for (i = 1; i <= n; i = i + 1) {
        sol[i] = 0;
    }
    crval[1] = 0;
    for (i = 1; i <= (2 * n + (r * (r + 5)) / 2 + 2 * q + 1); i = i + 1) {
        work[i] = 0;
    }
    for (i = 1; i <= 2; i = i + 1) {
        iter[i] = 0;
    }

    qpgen2(Dmat, dvec, n, n, sol, crval, Amat,
        bvec, n, q, meq, iact, nact, iter, work, factorized);

    message = "";
    if (factorized[1] === 1) {
        message = "constraints are inconsistent, no solution!";
    }
    if (factorized[1] === 2) {
        message = "matrix D in quadratic function is not positive definite!";
    }

    return {
        solution: base1to0(sol),
        value: base1to0(crval),
        unconstrained_solution: base1to0(dvec),
        iterations: base1to0(iter),
        iact: base1to0(iact),
        message: message
    };
}
exports.solveQP = solveQP;
}(numeric));
/*
Shanti Rao sent me this routine by private email. I had to modify it
slightly to work on Arrays instead of using a Matrix object.
It is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py
*/

numeric.svd= function svd(A) {
    var temp;
//Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)
	var prec= numeric.epsilon; //Math.pow(2,-52) // assumes double prec
	var tolerance= 1.e-64/prec;
	var itmax= 50;
	var c=0;
	var i=0;
	var j=0;
	var k=0;
	var l=0;
	
	var u= numeric.clone(A);
	var m= u.length;
	
	var n= u[0].length;
	
	if (m < n) throw "Need more rows than columns"
	
	var e = new Array(n);
	var q = new Array(n);
	for (i=0; i<n; i++) e[i] = q[i] = 0.0;
	var v = numeric.rep([n,n],0);
//	v.zero();
	
 	function pythag(a,b)
 	{
		a = Math.abs(a)
		b = Math.abs(b)
		if (a > b)
			return a*Math.sqrt(1.0+(b*b/a/a))
		else if (b == 0.0) 
			return a
		return b*Math.sqrt(1.0+(a*a/b/b))
	}

	//Householder's reduction to bidiagonal form

	var f= 0.0;
	var g= 0.0;
	var h= 0.0;
	var x= 0.0;
	var y= 0.0;
	var z= 0.0;
	var s= 0.0;
	
	for (i=0; i < n; i++)
	{	
		e[i]= g;
		s= 0.0;
		l= i+1;
		for (j=i; j < m; j++) 
			s += (u[j][i]*u[j][i]);
		if (s <= tolerance)
			g= 0.0;
		else
		{	
			f= u[i][i];
			g= Math.sqrt(s);
			if (f >= 0.0) g= -g;
			h= f*g-s
			u[i][i]=f-g;
			for (j=l; j < n; j++)
			{
				s= 0.0
				for (k=i; k < m; k++) 
					s += u[k][i]*u[k][j]
				f= s/h
				for (k=i; k < m; k++) 
					u[k][j]+=f*u[k][i]
			}
		}
		q[i]= g
		s= 0.0
		for (j=l; j < n; j++) 
			s= s + u[i][j]*u[i][j]
		if (s <= tolerance)
			g= 0.0
		else
		{	
			f= u[i][i+1]
			g= Math.sqrt(s)
			if (f >= 0.0) g= -g
			h= f*g - s
			u[i][i+1] = f-g;
			for (j=l; j < n; j++) e[j]= u[i][j]/h
			for (j=l; j < m; j++)
			{	
				s=0.0
				for (k=l; k < n; k++) 
					s += (u[j][k]*u[i][k])
				for (k=l; k < n; k++) 
					u[j][k]+=s*e[k]
			}	
		}
		y= Math.abs(q[i])+Math.abs(e[i])
		if (y>x) 
			x=y
	}
	
	// accumulation of right hand gtransformations
	for (i=n-1; i != -1; i+= -1)
	{	
		if (g != 0.0)
		{
		 	h= g*u[i][i+1]
			for (j=l; j < n; j++) 
				v[j][i]=u[i][j]/h
			for (j=l; j < n; j++)
			{	
				s=0.0
				for (k=l; k < n; k++) 
					s += u[i][k]*v[k][j]
				for (k=l; k < n; k++) 
					v[k][j]+=(s*v[k][i])
			}	
		}
		for (j=l; j < n; j++)
		{
			v[i][j] = 0;
			v[j][i] = 0;
		}
		v[i][i] = 1;
		g= e[i]
		l= i
	}
	
	// accumulation of left hand transformations
	for (i=n-1; i != -1; i+= -1)
	{	
		l= i+1
		g= q[i]
		for (j=l; j < n; j++) 
			u[i][j] = 0;
		if (g != 0.0)
		{
			h= u[i][i]*g
			for (j=l; j < n; j++)
			{
				s=0.0
				for (k=l; k < m; k++) s += u[k][i]*u[k][j];
				f= s/h
				for (k=i; k < m; k++) u[k][j]+=f*u[k][i];
			}
			for (j=i; j < m; j++) u[j][i] = u[j][i]/g;
		}
		else
			for (j=i; j < m; j++) u[j][i] = 0;
		u[i][i] += 1;
	}
	
	// diagonalization of the bidiagonal form
	prec= prec*x
	for (k=n-1; k != -1; k+= -1)
	{
		for (var iteration=0; iteration < itmax; iteration++)
		{	// test f splitting
			var test_convergence = false
			for (l=k; l != -1; l+= -1)
			{	
				if (Math.abs(e[l]) <= prec)
				{	test_convergence= true
					break 
				}
				if (Math.abs(q[l-1]) <= prec)
					break 
			}
			if (!test_convergence)
			{	// cancellation of e[l] if l>0
				c= 0.0
				s= 1.0
				var l1= l-1
				for (i =l; i<k+1; i++)
				{	
					f= s*e[i]
					e[i]= c*e[i]
					if (Math.abs(f) <= prec)
						break
					g= q[i]
					h= pythag(f,g)
					q[i]= h
					c= g/h
					s= -f/h
					for (j=0; j < m; j++)
					{	
						y= u[j][l1]
						z= u[j][i]
						u[j][l1] =  y*c+(z*s)
						u[j][i] = -y*s+(z*c)
					} 
				}	
			}
			// test f convergence
			z= q[k]
			if (l== k)
			{	//convergence
				if (z<0.0)
				{	//q[k] is made non-negative
					q[k]= -z
					for (j=0; j < n; j++)
						v[j][k] = -v[j][k]
				}
				break  //break out of iteration loop and move on to next k value
			}
			if (iteration >= itmax-1)
				throw 'Error: no convergence.'
			// shift from bottom 2x2 minor
			x= q[l]
			y= q[k-1]
			g= e[k-1]
			h= e[k]
			f= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y)
			g= pythag(f,1.0)
			if (f < 0.0)
				f= ((x-z)*(x+z)+h*(y/(f-g)-h))/x
			else
				f= ((x-z)*(x+z)+h*(y/(f+g)-h))/x
			// next QR transformation
			c= 1.0
			s= 1.0
			for (i=l+1; i< k+1; i++)
			{	
				g= e[i]
				y= q[i]
				h= s*g
				g= c*g
				z= pythag(f,h)
				e[i-1]= z
				c= f/z
				s= h/z
				f= x*c+g*s
				g= -x*s+g*c
				h= y*s
				y= y*c
				for (j=0; j < n; j++)
				{	
					x= v[j][i-1]
					z= v[j][i]
					v[j][i-1] = x*c+z*s
					v[j][i] = -x*s+z*c
				}
				z= pythag(f,h)
				q[i-1]= z
				c= f/z
				s= h/z
				f= c*g+s*y
				x= -s*g+c*y
				for (j=0; j < m; j++)
				{
					y= u[j][i-1]
					z= u[j][i]
					u[j][i-1] = y*c+z*s
					u[j][i] = -y*s+z*c
				}
			}
			e[l]= 0.0
			e[k]= f
			q[k]= x
		} 
	}
		
	//vt= transpose(v)
	//return (u,q,vt)
	for (i=0;i<q.length; i++) 
	  if (q[i] < prec) q[i] = 0
	  
	//sort eigenvalues	
	for (i=0; i< n; i++)
	{	 
	//writeln(q)
	 for (j=i-1; j >= 0; j--)
	 {
	  if (q[j] < q[i])
	  {
	//  writeln(i,'-',j)
	   c = q[j]
	   q[j] = q[i]
	   q[i] = c
	   for(k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }
	   for(k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }
//	   u.swapCols(i,j)
//	   v.swapCols(i,j)
	   i = j	   
	  }
	 }	
	}
	
	return {U:u,S:q,V:v}
};


},{}],31:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.ianPacking = ianPacking;
exports.repulsorPacking = repulsorPacking;
exports.optimizationPacking = optimizationPacking;

var _numeric = require("numeric");

var numeric = _interopRequireWildcard(_numeric);

var _core = require("../gfx/core");

var gfx = _interopRequireWildcard(_core);

var _progression = require("../game/progression");

var progression = _interopRequireWildcard(_progression);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Seeded random number gen code from olsn @
 * http://indiegamr.com/generate-repeatable-random-numbers-in-js/
 */
var SEED = 6;
function seededRandom(max, min) {
    max = max || 1;
    min = min || 0;

    SEED = (SEED * 9301 + 49297) % 233280;
    var rnd = SEED / 233280;

    return min + rnd * (max - min);
};

// Ian's really inefficient packing algorithm:
// * 1. Put the expressions in random places.
// * 2. Check if they overlap.
// * --> If so, try again.
// * --> Otherwise, add to a list.
// * 3. When the list of candidates reaches a threshold #, quit.
// * 4. Select the candidate with the greatest pairwise distance between expressions.
function ianPacking(stage, bounds, nodeIds) {
    SEED = 6;

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = nodeIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var nodeId = _step.value;

            stage.views[nodeId].prepare(nodeId, nodeId, stage.getState(), stage);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    var sizeCache = {};
    var getSize = function getSize(id) {
        if (!sizeCache[id]) {
            sizeCache[id] = gfx.absoluteSize(stage.views[id]);
        }
        return sizeCache[id];
    };

    var intersects = function intersects(positions, id1, id2) {
        var pos1 = positions.get(id1);
        var sz1 = getSize(id1);
        var pos2 = positions.get(id2);
        var sz2 = getSize(id2);
        return !(pos2.x > pos1.x + sz1.w || pos2.x + sz2.w < pos1.x || pos2.y > pos1.y + sz1.h || pos2.y + sz2.h < pos1.y);
    };

    var candidates = [];
    var CANDIDATE_THRESHOLD = 10;

    var iterations = 0;

    while (candidates.length < CANDIDATE_THRESHOLD && iterations < 25000) {
        iterations += 1;

        var candidate = new Map();

        // 1. Put the expressions in random places.
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = nodeIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _nodeId = _step2.value;

                var size = getSize(_nodeId);

                var y = 0;
                while (y < 50) {
                    y = seededRandom() * (bounds.h - size.h) + bounds.y;
                }

                var x = Math.max(seededRandom() * (bounds.w - size.w) + bounds.x, bounds.x);

                var pos = { x: x, y: y };
                candidate.set(_nodeId, pos);
            }

            // 2. Check if they overlap.
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }

        var overlap = false;

        var numOverlaps = 0;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
            outerLoop: for (var _iterator3 = nodeIds[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var id1 = _step3.value;
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = nodeIds[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var id2 = _step4.value;

                        if (id1 <= id2) continue;

                        if (intersects(candidate, id1, id2)) {
                            numOverlaps += 1;

                            if (iterations < 10000 || numOverlaps > 4) {
                                overlap = true;
                                break outerLoop;
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }

        if (!overlap) {
            candidates.push(candidate);
        }
    }
    // 3. When the list of candidates reaches a threshold #, quit.

    // 4. Select the candidate with the (least seems to work better?)
    // pairwise distance between expressions.
    var pairwiseTotals = [];
    var pairwiseCalcs = [];
    var computePairwiseDist = function computePairwiseDist(a, b) {
        var sum = 0;
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
            for (var _iterator5 = a.keys()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                var _id = _step5.value;
                var _iteratorNormalCompletion6 = true;
                var _didIteratorError6 = false;
                var _iteratorError6 = undefined;

                try {
                    for (var _iterator6 = b.keys()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                        var _id2 = _step6.value;

                        var pos1 = a.get(_id);
                        var pos2 = b.get(_id2);
                        sum += Math.pow(pos1.x - pos2.x, 2) + Math.pow(pos1.y - pos2.y, 2);
                    }
                } catch (err) {
                    _didIteratorError6 = true;
                    _iteratorError6 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
                            _iterator6.return();
                        }
                    } finally {
                        if (_didIteratorError6) {
                            throw _iteratorError6;
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion5 && _iterator5.return) {
                    _iterator5.return();
                }
            } finally {
                if (_didIteratorError5) {
                    throw _iteratorError5;
                }
            }
        }

        return sum;
    };

    for (var i = 0; i < candidates.length; i++) {
        pairwiseTotals[i] = 0;
        for (var j = 0; j < candidates.length; j++) {
            if (i === j) continue;

            var key = i + " " + j;
            if (key in pairwiseCalcs) {
                pairwiseTotals[i] += pairwiseCalcs[key];
            } else {
                pairwiseCalcs[key] = computePairwiseDist(candidates[i], candidates[j]);
                pairwiseTotals[i] += pairwiseCalcs[key];
            }
        }
    }

    var maxDist = progression.currentLevel() === 0 ? 100000000 : 0;
    var maxIdx = -1;
    for (var _i = 0; _i < candidates.length; _i++) {
        if (progression.currentLevel() === 0 ? pairwiseTotals[_i] < maxDist : pairwiseTotals[_i] > maxDist) {
            maxDist = pairwiseTotals[_i];
            maxIdx = _i;
        }
    }

    if (candidates[maxIdx]) {
        return candidates[maxIdx];
    }

    return null;
}

var REPULSOR_STEPS = 30;

function repulsorPacking(stage, bounds, nodeIds) {
    nodeIds.sort();

    SEED = 6;

    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
        for (var _iterator7 = nodeIds[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var nodeId = _step7.value;

            stage.views[nodeId].prepare(nodeId, nodeId, stage.getState(), stage);
        }
    } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                _iterator7.return();
            }
        } finally {
            if (_didIteratorError7) {
                throw _iteratorError7;
            }
        }
    }

    var sizeCache = {};
    var getSize = function getSize(id) {
        if (!sizeCache[id]) {
            sizeCache[id] = gfx.absoluteSize(stage.views[id]);
        }
        return sizeCache[id];
    };

    var distance = function distance(positions, id1, id2) {
        var pos1 = positions.get(id1);
        var sz1 = getSize(id1);
        var pos2 = positions.get(id2);
        var sz2 = getSize(id2);
        var aabb1 = {
            cx: pos1.x,
            cy: pos1.y,
            w: sz1.w,
            h: sz1.h
        };
        var aabb2 = {
            cx: pos2.x,
            cy: pos2.y,
            w: sz2.w,
            h: sz2.h
        };

        var d = edgeDistance(aabb1, aabb2);
        return Math.exp(d / 2);

        // return Math.sqrt((pos1.x - pos2.x)**2 + (pos1.y - pos2.y)**2);
    };

    var positions = new Map();
    var force = 30;

    var centerX = bounds.x + bounds.w / 2;
    var centerY = bounds.y + bounds.h / 2;
    var _iteratorNormalCompletion8 = true;
    var _didIteratorError8 = false;
    var _iteratorError8 = undefined;

    try {
        for (var _iterator8 = nodeIds[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var _nodeId2 = _step8.value;

            positions.set(_nodeId2, { x: centerX, y: centerY });
        }
    } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion8 && _iterator8.return) {
                _iterator8.return();
            }
        } finally {
            if (_didIteratorError8) {
                throw _iteratorError8;
            }
        }
    }

    for (var i = 0; i < REPULSOR_STEPS; i++) {
        var forces = new Map();

        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
            for (var _iterator9 = nodeIds[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                var id1 = _step9.value;

                forces.set(id1, { x: 0, y: 0 });
            }
        } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion9 && _iterator9.return) {
                    _iterator9.return();
                }
            } finally {
                if (_didIteratorError9) {
                    throw _iteratorError9;
                }
            }
        }

        var _iteratorNormalCompletion10 = true;
        var _didIteratorError10 = false;
        var _iteratorError10 = undefined;

        try {
            for (var _iterator10 = nodeIds[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                var _id3 = _step10.value;

                var pos1 = positions.get(_id3);
                var sz1 = getSize(_id3);

                var _iteratorNormalCompletion12 = true;
                var _didIteratorError12 = false;
                var _iteratorError12 = undefined;

                try {
                    for (var _iterator12 = nodeIds[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                        var id2 = _step12.value;

                        if (_id3 <= id2) continue;

                        var _dx = 0;
                        var dy = 0;
                        var pos2 = positions.get(id2);
                        var d = Math.max(1, distance(positions, _id3, id2)) / 5;
                        var delx = pos2.x - pos1.x;
                        var dely = pos2.y - pos1.y;
                        var angle = i === 0 ? seededRandom(0, 2 * Math.PI) : Math.atan2(dely, delx);

                        _dx = -(force / d) * Math.cos(angle);
                        dy = -(force / d) * Math.sin(angle);

                        forces.get(_id3).x += _dx;
                        forces.get(_id3).y += dy;
                        forces.get(id2).x -= _dx;
                        forces.get(id2).y -= dy;
                    }

                    // Some forces to keep things away from edges
                    // forces.get(id1).x += Math.max(100, force) / (((pos1.x - (sz1.w / 2)) - bounds.x) ** 2);
                    // forces.get(id1).y += Math.max(100, force) / (((pos1.y - (sz1.h / 2)) - bounds.y) ** 2);
                } catch (err) {
                    _didIteratorError12 = true;
                    _iteratorError12 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion12 && _iterator12.return) {
                            _iterator12.return();
                        }
                    } finally {
                        if (_didIteratorError12) {
                            throw _iteratorError12;
                        }
                    }
                }

                forces.get(_id3).x -= Math.max(100, force) / Math.pow(pos1.x + sz1.w / 2 - (bounds.x + bounds.w), 2);
                forces.get(_id3).y -= Math.max(100, force) / Math.pow(pos1.y + sz1.h / 2 - (bounds.y + bounds.h), 2);
            }
        } catch (err) {
            _didIteratorError10 = true;
            _iteratorError10 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion10 && _iterator10.return) {
                    _iterator10.return();
                }
            } finally {
                if (_didIteratorError10) {
                    throw _iteratorError10;
                }
            }
        }

        var _iteratorNormalCompletion11 = true;
        var _didIteratorError11 = false;
        var _iteratorError11 = undefined;

        try {
            for (var _iterator11 = nodeIds[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                var _id4 = _step11.value;

                // Constrain positions via bounds
                var pos = positions.get(_id4);
                var sz1 = getSize(_id4);

                pos.x = Math.max(bounds.x + sz1.w / 2, pos.x + forces.get(_id4).x);
                pos.y = Math.max(bounds.y + sz1.h / 2, pos.y + forces.get(_id4).y);
                pos.x = Math.min(pos.x, bounds.x + bounds.w - sz1.w / 2);
                pos.y = Math.min(pos.y, bounds.y + bounds.h - sz1.h / 2);
            }
        } catch (err) {
            _didIteratorError11 = true;
            _iteratorError11 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion11 && _iterator11.return) {
                    _iterator11.return();
                }
            } finally {
                if (_didIteratorError11) {
                    throw _iteratorError11;
                }
            }
        }

        force = Math.max(10, force * 0.95);
    }

    // Recenter (Compute bounding box and shift things so they are centered)
    var xmin = 10000;
    var ymin = 10000;
    var xmax = 0;
    var ymax = 0;
    var _iteratorNormalCompletion13 = true;
    var _didIteratorError13 = false;
    var _iteratorError13 = undefined;

    try {
        for (var _iterator13 = positions.keys()[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
            var id = _step13.value;

            var _pos = positions.get(id);
            var sz = getSize(id);
            xmin = Math.min(xmin, _pos.x - sz.w / 2);
            ymin = Math.min(ymin, _pos.y - sz.h / 2);
            xmax = Math.max(xmax, _pos.x + sz.w / 2);
            ymax = Math.max(ymax, _pos.y + sz.h / 2);
        }
    } catch (err) {
        _didIteratorError13 = true;
        _iteratorError13 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion13 && _iterator13.return) {
                _iterator13.return();
            }
        } finally {
            if (_didIteratorError13) {
                throw _iteratorError13;
            }
        }
    }

    var dx = 0;
    if (xmax - xmin < bounds.w) {
        dx = (bounds.w - (xmax - xmin)) / 2;
        dx = dx - xmin;
    }
    var _iteratorNormalCompletion14 = true;
    var _didIteratorError14 = false;
    var _iteratorError14 = undefined;

    try {
        for (var _iterator14 = positions.keys()[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
            var _id5 = _step14.value;

            var _pos2 = positions.get(_id5);
            _pos2.x += dx;
        }
    } catch (err) {
        _didIteratorError14 = true;
        _iteratorError14 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion14 && _iterator14.return) {
                _iterator14.return();
            }
        } finally {
            if (_didIteratorError14) {
                throw _iteratorError14;
            }
        }
    }

    return positions;
}

// Helper functions for edgeDistance. Note that these all use
// center-origin AABBs!
function aabbSides(aabb) {
    var x = aabb.cx - aabb.w / 2;
    var y = aabb.cy - aabb.h / 2;
    var w = aabb.w,
        h = aabb.h;


    return [
    // Top
    [{ x: x, y: y }, { x: w, y: 0 }],
    // Left
    [{ x: x, y: y }, { x: 0, y: h }],
    // Right
    [{ x: x + w, y: y + h }, { x: 0, y: -h }],
    // Bottom
    [{ x: x + w, y: y + h }, { x: -w, y: 0 }]];
}

function aabbIntersects(aabb1, aabb2) {
    var pos1 = { x: aabb1.cx - aabb1.w / 2, y: aabb1.cy - aabb1.h / 2 };
    var sz1 = aabb1;
    var pos2 = { x: aabb2.cx - aabb2.w / 2, y: aabb2.cy - aabb2.h / 2 };
    var sz2 = aabb2;
    return !(pos2.x > pos1.x + sz1.w || pos2.x + sz2.w < pos1.x || pos2.y > pos1.y + sz1.h || pos2.y + sz2.h < pos1.y);
}

function raySegmentIntersect(p, r, q, s) {
    // https://stackoverflow.com/a/565282
    var qmp = { x: q.x - p.x, y: q.y - p.y };
    var rxs = r.x * s.y - r.y * s.x;
    var qmpxr = qmp.x * r.y - qmp.y * r.x;

    if (Math.abs(rxs) < 1e-5) {
        if (Math.abs(qmpxr) < 1e-5) {
            // Colinear
            var t0 = (qmp.x * r.x + qmp.y * r.y) / (Math.pow(r.x, 2) + Math.pow(r.y, 2));
            // const qmpps = { x: q.x + s.x - p.x, y: q.x + s.y - p.y };
            // const t1 = (qmpps.x * r.x + qpsmp.y * r.y) / (r.x**2 + r.y**2);
            if (t0 >= 0) {
                return {
                    x: p.x + t0 * r.x,
                    y: p.y + t0 * r.y,
                    t: t0
                };
            }
        }
        // Parallel and non-intersecting
        return null;
    }

    var qmpxs = qmp.x * s.y - qmp.y * s.x;
    var t = qmpxs / rxs;
    var u = qmpxr / rxs;

    if (u >= 0 && u <= 1 && t >= 0) {
        // Intersection
        return {
            x: p.x + t * r.x,
            y: p.y + t * r.y,
            t: t,
            u: u
        };
    }
    // Non-parallel and non-intersecting
    return null;
}

// Computes edge-to-edge distance between two AABBs.
function edgeDistance(aabb1, aabb2) {
    // Take the ray from the center of one box heading towards the
    // other. Determine the intersection points with the border of the
    // AABB, then compute distance between those.

    // The ray has origin p and direction r.
    var p = { x: aabb1.cx, y: aabb1.cy };
    var r = { x: aabb2.cx - aabb1.cx, y: aabb2.cy - aabb1.cy };

    if (Math.abs(r.x) < 1e-5 && Math.abs(r.y) < 1e-5) {
        // Boxes have same center
        return -Math.min(Math.abs(aabb1.w - aabb2.w), Math.abs(aabb1.h - aabb2.h));
    }

    var point1 = void 0;
    var t1 = 1000000;
    var point2 = void 0;
    var t2 = 1000000;
    var _iteratorNormalCompletion15 = true;
    var _didIteratorError15 = false;
    var _iteratorError15 = undefined;

    try {
        for (var _iterator15 = aabbSides(aabb1)[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
            var _ref = _step15.value;

            var _ref2 = _slicedToArray(_ref, 2);

            var q = _ref2[0];
            var s = _ref2[1];

            var result = raySegmentIntersect(p, r, q, s);
            if (result && result.t < t1) {
                point1 = result;
                t1 = result.t;
            }
        }
    } catch (err) {
        _didIteratorError15 = true;
        _iteratorError15 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion15 && _iterator15.return) {
                _iterator15.return();
            }
        } finally {
            if (_didIteratorError15) {
                throw _iteratorError15;
            }
        }
    }

    var _iteratorNormalCompletion16 = true;
    var _didIteratorError16 = false;
    var _iteratorError16 = undefined;

    try {
        for (var _iterator16 = aabbSides(aabb2)[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
            var _ref3 = _step16.value;

            var _ref4 = _slicedToArray(_ref3, 2);

            var _q = _ref4[0];
            var _s = _ref4[1];

            var result = raySegmentIntersect(p, r, _q, _s);
            if (result && result.t < t2) {
                point2 = result;
                t2 = result.t;
            }
        }
    } catch (err) {
        _didIteratorError16 = true;
        _iteratorError16 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion16 && _iterator16.return) {
                _iterator16.return();
            }
        } finally {
            if (_didIteratorError16) {
                throw _iteratorError16;
            }
        }
    }

    var d = gfx.distance(point1, point2);
    // If the AABBs intersect, the distance is negative.
    if (aabbIntersects(aabb1, aabb2)) {
        return -d;
    }
    return d;
}

function optimizationPacking(stage, bounds, nodeIds) {
    var initial = ianPacking(stage, bounds, nodeIds);
    var sizeCache = {};
    var getSize = function getSize(id) {
        if (!sizeCache[id]) {
            sizeCache[id] = gfx.absoluteSize(stage.views[id]);
        }
        return sizeCache[id];
    };

    var f = function f(coords) {
        var result = 0;

        for (var _i2 = 0; _i2 < nodeIds.length; _i2++) {
            var x1 = coords[2 * _i2];
            var y1 = coords[2 * _i2 + 1];
            var sz1 = getSize(nodeIds[_i2]);
            for (var j = _i2 + 1; j < nodeIds.length; j++) {
                var x2 = coords[2 * j];
                var y2 = coords[2 * j + 1];
                var sz2 = getSize(nodeIds[j]);
                // const pairwiseDistance = ((x1 - x2) ** 2) + ((y1 - y2) ** 2);
                // result += 1 / Math.exp(Math.sqrt(pairwiseDistance) / (Math.max(bounds.w, bounds.h) / 10));
                var pairwiseDistance = edgeDistance({
                    cx: x1,
                    cy: y1,
                    w: sz1.w,
                    h: sz1.h
                }, {
                    cx: x2,
                    cy: y2,
                    w: sz2.w,
                    h: sz2.h
                });
                result += 1 / Math.exp(Math.sqrt(pairwiseDistance) / (Math.max(bounds.w, bounds.h) / 5));
                // result += 1 / (1 + Math.abs(pairwiseDistance));
                // result += Math.exp(-pairwiseDistance / (Math.max(bounds.w, bounds.h) / 2));
            }

            // result += 1 / (((x1 - (sz1.w / 2)) - bounds.x) ** 2);
            // result += 1 / (((y1 - (sz1.h / 2)) - bounds.y) ** 2);
            // result += 1 / (((x1 + (sz1.w / 2)) - (bounds.x + bounds.w)) ** 2);
            // result += 1 / (((y1 + (sz1.h / 2)) - (bounds.y + bounds.h)) ** 2);
            // result += 1 / (Math.max(2.5, (x1 - (sz1.w / 2)) - bounds.x) ** 2);
            // result += 1 / (Math.max(2.5, (y1 - (sz1.h / 2)) - bounds.y) ** 2);
            // result += 1 / (Math.max(2.5, -(x1 + (sz1.w / 2)) + (bounds.x + bounds.w)) ** 2);
            // result += 1 / (Math.max(2.5, -(y1 + (sz1.h / 2)) + (bounds.y + bounds.h)) ** 2);


            result += 1 / Math.exp((x1 - sz1.w / 2 - bounds.x) / (Math.max(bounds.w, bounds.h) / 2));
            result += 1 / Math.exp((y1 - sz1.h / 2 - bounds.y) / (Math.max(bounds.w, bounds.h) / 2));
            result += Math.exp((x1 + sz1.w / 2 - (bounds.x + bounds.w)) / (Math.max(bounds.w, bounds.h) / 2));
            result += Math.exp((y1 + sz1.h / 2 - (bounds.y + bounds.h)) / (Math.max(bounds.w, bounds.h) / 2));
        }

        return result;
    };

    var initCoords = [];
    var _iteratorNormalCompletion17 = true;
    var _didIteratorError17 = false;
    var _iteratorError17 = undefined;

    try {
        for (var _iterator17 = nodeIds[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
            var id = _step17.value;

            var _initial$get = initial.get(id),
                x = _initial$get.x,
                y = _initial$get.y;

            initCoords.push(x);
            initCoords.push(y);
        }
    } catch (err) {
        _didIteratorError17 = true;
        _iteratorError17 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion17 && _iterator17.return) {
                _iterator17.return();
            }
        } finally {
            if (_didIteratorError17) {
                throw _iteratorError17;
            }
        }
    }

    console.log(f(initCoords));
    console.log(JSON.stringify(initCoords));

    var result = numeric.uncmin(f, initCoords, undefined, undefined, window.iterations || 5);
    var solution = result.solution;


    console.log(f(solution), result);
    console.log(JSON.stringify(solution));
    var positions = new Map();
    var i = 0;
    var _iteratorNormalCompletion18 = true;
    var _didIteratorError18 = false;
    var _iteratorError18 = undefined;

    try {
        for (var _iterator18 = nodeIds[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
            var _id6 = _step18.value;

            positions.set(_id6, {
                x: solution[i],
                y: solution[i + 1]
            });
            i += 2;
        }
    } catch (err) {
        _didIteratorError18 = true;
        _iteratorError18 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion18 && _iterator18.return) {
                _iterator18.return();
            }
        } finally {
            if (_didIteratorError18) {
                throw _iteratorError18;
            }
        }
    }

    return positions;
}
},{"numeric":73,"../gfx/core":4,"../game/progression":8}],7:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.startLevel = startLevel;
exports.checkVictory = checkVictory;
exports.serialize = serialize;

var _immutable = require("immutable");

var immutable = _interopRequireWildcard(_immutable);

var _progression = require("../game/progression");

var progression = _interopRequireWildcard(_progression);

var _action = require("../reducer/action");

var action = _interopRequireWildcard(_action);

var _core = require("../gfx/core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _layout = require("../ui/layout");

var layout = _interopRequireWildcard(_layout);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function startLevel(description, parse, store, stage) {
    animate.replaceDurationScales(description.animationScales);

    var macros = Object.assign({}, description.macros);

    var _loop = function _loop(macroName) {
        // Needs to be a thunk in order to allocate new ID each time
        var macro = macros[macroName];
        macros[macroName] = function () {
            return parse(macro, {});
        };
    };

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = Object.keys(macros)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var macroName = _step.value;

            _loop(macroName);
        }

        // Parse the defined names carried over from previous levels, the
        // globals added for this level, and any definitions on the board.

        // Lots of messiness because parse returns either an expression or
        // an array of expressions.
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    var prevDefinedNames = description.extraDefines.map(function (str) {
        return parse(str, macros);
    }).reduce(function (a, b) {
        return Array.isArray(b) ? a.concat(b) : a.concat([b]);
    }, []).map(function (expr) {
        return stage.semantics.parser.extractDefines(stage.semantics, expr);
    }).filter(function (name) {
        return name !== null;
    });
    var globalDefinedNames = Object.entries(description.globals).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            name = _ref2[0],
            str = _ref2[1];

        var parsed = parse(str, macros);
        if (!Array.isArray(parsed)) {
            parsed = [parsed];
        }

        var _parsed$map$filter = parsed.map(function (expr) {
            return stage.semantics.parser.extractDefines(stage.semantics, expr);
        }).filter(function (expr) {
            return expr !== null;
        });

        var _parsed$map$filter2 = _slicedToArray(_parsed$map$filter, 1);

        parsed = _parsed$map$filter2[0];

        return [name, parsed[1]];
    });
    var newDefinedNames = description.board.map(function (str) {
        return parse(str, macros);
    }).reduce(function (a, b) {
        return Array.isArray(b) ? a.concat(b) : a.concat([b]);
    }, []).map(function (expr) {
        return stage.semantics.parser.extractDefines(stage.semantics, expr);
    }).filter(function (name) {
        return name !== null;
    });

    // Turn these defines into "macros", so that the name resolution
    // system can handle lookup.
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = prevDefinedNames.concat(newDefinedNames).concat(globalDefinedNames)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _ref3 = _step2.value;

            var _ref4 = _slicedToArray(_ref3, 2);

            var name = _ref4[0];
            var expr = _ref4[1];

            macros[name] = expr;
        }

        // Actually parse the goal, board, and toolbox.
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    var goal = description.goal.map(function (str) {
        return parse(str, macros);
    });
    var board = description.board.map(function (str) {
        return parse(str, macros);
    }).reduce(function (a, b) {
        return Array.isArray(b) ? a.concat(b) : a.concat([b]);
    }, []);
    var toolbox = description.toolbox.map(function (str) {
        return parse(str, macros);
    });

    // Go back and parse the globals as well.
    var globals = {};
    description.extraDefines.map(function (str) {
        return parse(str, macros);
    }).reduce(function (a, b) {
        return Array.isArray(b) ? a.concat(b) : a.concat([b]);
    }, []).map(function (expr) {
        return stage.semantics.parser.extractGlobals(stage.semantics, expr);
    }).filter(function (name) {
        return name !== null;
    }).forEach(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            name = _ref6[0],
            val = _ref6[1];

        globals[name] = val;
    });
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = Object.entries(description.globals)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _ref7 = _step3.value;

            var _ref8 = _slicedToArray(_ref7, 2);

            var _name = _ref8[0];
            var definition = _ref8[1];

            var rawParsed = parse(definition, macros);
            if (!Array.isArray(rawParsed)) rawParsed = [rawParsed];
            var parsed = rawParsed.reduce(function (a, b) {
                return Array.isArray(b) ? a.concat(b) : a.concat([b]);
            }, []).map(function (expr) {
                return stage.semantics.parser.extractGlobals(stage.semantics, expr);
            }).filter(function (name) {
                return name !== null;
            });
            if (parsed.length !== 1) {
                console.error("level.startLevel: defining global " + _name + " as " + definition + " led to multiple parsed expressions.");
                continue;
            }
            globals[_name] = parsed[0][1];
        }

        // Update the store with the parsed data.
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    store.dispatch(action.startLevel(stage, goal, board, toolbox, globals));
    stage.startLevel(description.textgoal, description.showConcreteGoal);
    stage.registerNewDefinedNames(newDefinedNames.map(function (elem) {
        return elem[0];
    }));

    var state = stage.getState();
    var nodes = state.get("nodes");

    // Lay out the board.
    var positions = layout.repulsorPacking(stage, {
        x: 20,
        y: 120,
        w: stage.width - 40,
        h: stage.height - stage.toolbox.size.h * 1.5 - 140
    }, state.get("board").toArray().filter(function (id) {
        return nodes.get(id).get("type") !== "defineAttach";
    }));

    if (positions !== null) {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
            for (var _iterator4 = positions[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var _ref9 = _step4.value;

                var _ref10 = _slicedToArray(_ref9, 2);

                var id = _ref10[0];
                var pos = _ref10[1];

                var view = stage.views[id];
                view.pos.x = pos.x;
                view.pos.y = pos.y;
            }
        } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                    _iterator4.return();
                }
            } finally {
                if (_didIteratorError4) {
                    throw _iteratorError4;
                }
            }
        }
    }

    // TODO: semantics-specific layout algorithms. This lays out the
    // notches along the side for defines. Eventually we would want
    // this to be customizable as well.
    var notchY = 160;
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
        for (var _iterator5 = state.get("board")[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var nodeId = _step5.value;

            var node = nodes.get(nodeId);
            if (node.get("type") === "defineAttach") {
                stage.views[nodeId].pos.y = notchY;
                notchY += 160;
            }
        }

        // For anything that is fading, spawn the old node on top
    } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                _iterator5.return();
            }
        } finally {
            if (_didIteratorError5) {
                throw _iteratorError5;
            }
        }
    }

    var checkFade = function checkFade(source) {
        return function (nodeId, idx) {
            if (stage.semantics.search(state.get("nodes"), nodeId, function (_, id) {
                return progression.isFadeBorder(state.getIn(["nodes", id, "type"]));
            }).length > 0) {
                var descr = description[source][idx];

                progression.overrideFadeLevel(function () {
                    var flattened = stage.semantics.flatten(parse(descr, macros));
                    var topNode = flattened[0].id;

                    var tempNodes = state.get("nodes").withMutations(function (n) {
                        var _iteratorNormalCompletion6 = true;
                        var _didIteratorError6 = false;
                        var _iteratorError6 = undefined;

                        try {
                            for (var _iterator6 = flattened[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                var node = _step6.value;

                                n.set(node.id, immutable.Map(node));
                            }
                        } catch (err) {
                            _didIteratorError6 = true;
                            _iteratorError6 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                    _iterator6.return();
                                }
                            } finally {
                                if (_didIteratorError6) {
                                    throw _iteratorError6;
                                }
                            }
                        }
                    });

                    flattened.forEach(function (e) {
                        var node = tempNodes.get(e.id);
                        stage.views[e.id] = stage.semantics.project(stage, tempNodes, node);
                    });
                    stage.views[topNode].pos = stage.views[nodeId].pos;

                    stage.views[topNode] = gfx.custom.fadeMe(stage.views[topNode], function (tween) {
                        stage.fade(source, topNode, nodeId).then(function () {
                            return tween.stop();
                        });
                    });

                    store.dispatch(action.unfade(source, nodeId, topNode, flattened.map(function (e) {
                        return immutable.Map(e);
                    })));
                });
            }
        };
    };
    state.get("board").forEach(checkFade("board"));
    state.get("toolbox").forEach(checkFade("toolbox"));

    // "Inflate" animation.
    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
        for (var _iterator7 = stage.getState().get("board")[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var _nodeId = _step7.value;

            stage.views[_nodeId].scale = { x: 0.0, y: 0.0 };
            stage.views[_nodeId].anchor = { x: 0.5, y: 0.5 };
            animate.tween(stage.views[_nodeId].scale, { x: 1.0, y: 1.0 }, {
                duration: 500,
                easing: animate.Easing.Cubic.Out
            });
        }

        // Bump things away from edges
    } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                _iterator7.return();
            }
        } finally {
            if (_didIteratorError7) {
                throw _iteratorError7;
            }
        }
    }

    animate.after(500).then(function () {
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
            for (var _iterator8 = stage.getState().get("board")[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                var topViewId = _step8.value;

                stage.bumpAwayFromEdges(topViewId);
            }
        } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion8 && _iterator8.return) {
                    _iterator8.return();
                }
            } finally {
                if (_didIteratorError8) {
                    throw _iteratorError8;
                }
            }
        }
    });

    if (description.syntax.length > 0) {
        animate.after(500).then(function () {
            stage.learnSyntax(description.syntax);
        });
    }
}

function checkVictory(state, semantics) {
    var partial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var board = state.get("board").filter(function (n) {
        return !semantics.ignoreForVictory(state.getIn(["nodes", n]));
    });
    var goal = state.get("goal");

    if (board.size !== goal.size && !partial) {
        return false;
    }

    var used = {};
    var matching = {};
    var success = true;
    goal.forEach(function (nodeId) {
        var found = false;
        board.forEach(function (candidateId, idx) {
            if (used[idx]) return true;
            if (semantics.equal(nodeId, candidateId, state)) {
                used[idx] = true;
                matching[nodeId] = candidateId;
                found = true;
                return false;
            }
            return true;
        });
        if (!found && !partial) {
            success = false;
            return false;
        }
        return true;
    });

    if (success || partial) {
        return matching;
    }
    return {};
}

/**
 * Convert the game state back into a JSON level description.
 */
function serialize(state, semantics) {
    var board = [];
    var goal = [];
    var toolbox = [];
    var nodes = state.get("nodes");
    var _iteratorNormalCompletion9 = true;
    var _didIteratorError9 = false;
    var _iteratorError9 = undefined;

    try {
        for (var _iterator9 = state.get("board")[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var id = _step9.value;

            var result = semantics.parser.unparse(semantics.hydrate(nodes, nodes.get(id)));
            if (result !== null) {
                board.push(result);
            }
        }
    } catch (err) {
        _didIteratorError9 = true;
        _iteratorError9 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion9 && _iterator9.return) {
                _iterator9.return();
            }
        } finally {
            if (_didIteratorError9) {
                throw _iteratorError9;
            }
        }
    }

    var _iteratorNormalCompletion10 = true;
    var _didIteratorError10 = false;
    var _iteratorError10 = undefined;

    try {
        for (var _iterator10 = state.get("goal")[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
            var _id = _step10.value;

            var result = semantics.parser.unparse(semantics.hydrate(nodes, nodes.get(_id)));
            if (result !== null) {
                goal.push(result);
            }
        }
    } catch (err) {
        _didIteratorError10 = true;
        _iteratorError10 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion10 && _iterator10.return) {
                _iterator10.return();
            }
        } finally {
            if (_didIteratorError10) {
                throw _iteratorError10;
            }
        }
    }

    var _iteratorNormalCompletion11 = true;
    var _didIteratorError11 = false;
    var _iteratorError11 = undefined;

    try {
        for (var _iterator11 = state.get("toolbox")[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
            var _id2 = _step11.value;

            var result = semantics.parser.unparse(semantics.hydrate(nodes, nodes.get(_id2)));
            if (result !== null) {
                toolbox.push(result);
            }
        }
    } catch (err) {
        _didIteratorError11 = true;
        _iteratorError11 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion11 && _iterator11.return) {
                _iterator11.return();
            }
        } finally {
            if (_didIteratorError11) {
                throw _iteratorError11;
            }
        }
    }

    return { board: board, goal: goal, toolbox: toolbox };
}
},{"immutable":70,"../game/progression":8,"../reducer/action":30,"../gfx/core":4,"../gfx/animate":5,"../ui/layout":31}],32:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.genericFlatten = genericFlatten;
exports.genericMap = genericMap;
exports.genericSearch = genericSearch;
exports.genericEqual = genericEqual;
exports.genericClone = genericClone;
exports.genericBetaReduce = genericBetaReduce;
function genericFlatten(nextId, subexpressions) {
    return function flatten(expr) {
        expr.id = nextId();
        var result = [expr];

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = subexpressions(expr)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var field = _step.value;

                // Record the ID of the parent, as well as which field of
                // the parent we are stored in.

                expr[field].parent = expr.id;
                expr[field].parentField = field;
                result = result.concat(flatten(expr[field]));
                expr[field] = expr[field].id;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return result;
    };
}

function genericMap(subexpressions) {
    var innerMap = function innerMap(nodes, nodeId, f) {
        var filter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var top = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

        var currentStore = nodes;
        if (top) currentStore = currentStore.asMutable();
        var currentNode = nodes.get(nodeId);

        if (filter && !filter(currentStore, currentNode)) {
            return [currentNode, currentStore];
        }

        var node = currentNode.withMutations(function (n) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = subexpressions(n)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var field = _step2.value;

                    var _innerMap = innerMap(currentStore, n.get(field), f, filter, false),
                        _innerMap2 = _slicedToArray(_innerMap, 2),
                        newNode = _innerMap2[0],
                        newStore = _innerMap2[1];

                    currentStore = newStore.set(newNode.get("id"), newNode);
                    n.set(field, newNode.get("id"));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        });
        // Function returns new node and new store
        var result = f(currentStore.set(node.get("id"), node), node.get("id"));
        if (top) return [result[0], result[1].asImmutable()];
        return result;
    };
    return innerMap;
}

function genericSearch(subexpressions) {
    return function (nodes, nodeId, f) {
        var queue = [nodeId];
        var result = [];
        while (queue.length > 0) {
            var id = queue.pop();
            if (f(nodes, id)) {
                result.push(id);
            }

            var n = nodes.get(id);
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = subexpressions(n)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var field = _step3.value;

                    queue.push(n.get(field));
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
        return result;
    };
}

function genericEqual(subexpressions, shallowEqual) {
    return function equal(id1, id2, state) {
        var n1 = state.getIn(["nodes", id1]);
        var n2 = state.getIn(["nodes", id2]);

        if (!shallowEqual(n1, n2)) return false;
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
            for (var _iterator4 = subexpressions(n1)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var field = _step4.value;

                if (!equal(n1.get(field), n2.get(field), state)) {
                    return false;
                }
            }
        } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                    _iterator4.return();
                }
            } finally {
                if (_didIteratorError4) {
                    throw _iteratorError4;
                }
            }
        }

        return true;
    };
}

function genericClone(nextId, subexpressions) {
    return function clone(id, nodes) {
        var locked = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        var node = nodes.get(id);
        var newNodes = [];

        var currentStore = nodes;
        var result = node.withMutations(function (n) {
            var newId = nextId();
            n.set("id", newId);

            var _loop = function _loop(field) {
                var _clone = clone(node.get(field), currentStore, locked),
                    _clone2 = _slicedToArray(_clone, 3),
                    subclone = _clone2[0],
                    subclones = _clone2[1],
                    nodesStore = _clone2[2];

                currentStore = nodesStore;
                var result = subclone.withMutations(function (sc) {
                    sc.set("parent", newId);
                    sc.set("parentField", field);
                    sc.set("locked", locked);
                });
                newNodes = newNodes.concat(subclones);
                newNodes.push(result);

                n.set(field, subclone.get("id"));
                // TODO: delete any cached __missing fields
            };

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = subexpressions(node)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var field = _step5.value;

                    _loop(field);
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            currentStore = currentStore.set(newId, n);
        });

        return [result, newNodes, currentStore];
    };
}

function genericBetaReduce(semant, state, config) {
    var topNode = config.topNode,
        targetNode = config.targetNode,
        argIds = config.argIds;

    var nodes = state.get("nodes");
    // Prevent application when there are missing nodes
    var missingNodes = semant.search(nodes, topNode.get("id"), function (nodes, id) {
        return nodes.get(id).get("type") === "missing";
    }).filter(function (id) {
        var node = nodes.get(id);
        if (!node.get("parent")) return true;
        var parent = nodes.get(node.get("parent"));
        var substepFilter = semant.interpreter.substepFilter(parent.get("type"));
        return substepFilter(semant, state, parent, node.get("parentField"));
    });
    if (missingNodes.length > 0) {
        console.warn("Can't reduce missing");
        if (config.animateInvalidArg) {
            missingNodes.forEach(config.animateInvalidArg);
        }
        return null;
    }

    if (argIds.length !== 1) {
        var _ret2 = function () {
            var curState = state;
            var curTopNode = topNode;
            var curTargetNode = targetNode;

            var curResult = [];
            var allAddedNodes = [];

            var _loop2 = function _loop2(argId) {
                // Ignore "missing" args. This allows us to evaluate
                // something like `apply(repeat(2, _), addOne)`, where the
                // stepper will try to apply 2 and _ to repeat first. This
                // would be obviated if the stepFilter of a reference were
                // sophisticated enough to recognize when it is partially
                // applied.
                if (nodes.get(argId).get("type") === "missing") return "continue";

                var result = genericBetaReduce(semant, curState, Object.assign({}, config, {
                    topNode: curTopNode,
                    targetNode: curTargetNode,
                    argIds: [argId]
                }));
                if (!result) {
                    // Return partial result
                    return "break";
                }

                var _result = _slicedToArray(result, 3),
                    _ = _result[0],
                    resultNodeIds = _result[1],
                    newNodes = _result[2];

                if (resultNodeIds.length !== 1) {
                    console.warn("Can't handle multi-argument beta reduce with spilling");
                    return {
                        v: {
                            v: null
                        }
                    };
                }

                curResult = resultNodeIds;

                curState = curState.withMutations(function (cs) {
                    cs.set("nodes", cs.get("nodes").withMutations(function (nds) {
                        var _iteratorNormalCompletion7 = true;
                        var _didIteratorError7 = false;
                        var _iteratorError7 = undefined;

                        try {
                            for (var _iterator7 = newNodes[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                                var node = _step7.value;

                                allAddedNodes.push(node);
                                nds.set(node.get("id"), node);
                            }
                        } catch (err) {
                            _didIteratorError7 = true;
                            _iteratorError7 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                    _iterator7.return();
                                }
                            } finally {
                                if (_didIteratorError7) {
                                    throw _iteratorError7;
                                }
                            }
                        }
                    }));
                });

                // TODO: check if result is actually a lambda
                curTopNode = curState.getIn(["nodes", resultNodeIds[0]]);
                curTargetNode = curState.getIn(["nodes", curTopNode.get("arg")]);
            };

            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                _loop3: for (var _iterator6 = argIds[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var argId = _step6.value;

                    var _ret3 = _loop2(argId);

                    switch (_ret3) {
                        case "continue":
                            continue;

                        case "break":
                            break _loop3;

                        default:
                            if ((typeof _ret3 === "undefined" ? "undefined" : _typeof(_ret3)) === "object") return _ret3.v;
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            return {
                v: [topNode, curResult, allAddedNodes]
            };
        }();

        if ((typeof _ret2 === "undefined" ? "undefined" : _typeof(_ret2)) === "object") return _ret2.v;
    }

    // Check that arguments are complete
    var _iteratorNormalCompletion8 = true;
    var _didIteratorError8 = false;
    var _iteratorError8 = undefined;

    try {
        for (var _iterator8 = argIds[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var argId = _step8.value;

            if (nodes.get(argId).get("type") === "lambdaVar") {
                if (config.animateInvalidArg) {
                    config.animateInvalidArg(argId);
                }
                return null;
            }
            var missingArgNodes = semant.search(nodes, argId, function (nodes, id) {
                return nodes.get(id).get("type") === "missing";
            }).filter(function (id) {
                var node = nodes.get(id);
                if (!node.get("parent")) return true;
                var parent = nodes.get(node.get("parent"));
                var substepFilter = semant.interpreter.substepFilter(parent.get("type"));
                return substepFilter(semant, state, parent, node.get("parentField"));
            });
            if (missingArgNodes.length > 0) {
                if (config.animateInvalidArg) {
                    missingArgNodes.forEach(config.animateInvalidArg);
                }
                console.warn("Can't apply argument with missing nodes");
                return null;
            }

            // TODO: iron out kinks in type inference so we can use this
            // system instead
            // if (!state.getIn([ "nodes", argId, "complete" ])) {
            //     return null;
            // }
        }
    } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion8 && _iterator8.return) {
                _iterator8.return();
            }
        } finally {
            if (_didIteratorError8) {
                throw _iteratorError8;
            }
        }
    }

    var name = config.targetName(targetNode);

    var _semant$clone = semant.clone(topNode.get("body"), nodes),
        _semant$clone2 = _slicedToArray(_semant$clone, 3),
        bodyClone = _semant$clone2[0],
        newNodes = _semant$clone2[1],
        curNodes = _semant$clone2[2];

    newNodes.push(bodyClone);

    var _semant$map = semant.map(curNodes, bodyClone.get("id"), function (nodes, id) {
        var node = nodes.get(id);
        if (config.isVar(node) && config.varName(node) === name) {
            var _semant$clone3 = semant.clone(argIds[0], nodes),
                _semant$clone4 = _slicedToArray(_semant$clone3, 3),
                cloned = _semant$clone4[0],
                _resultNewNodes = _semant$clone4[1],
                _nodesStore = _semant$clone4[2];

            var _result2 = cloned.withMutations(function (n) {
                n.set("parent", node.get("parent"));
                n.set("parentField", node.get("parentField"));
                n.set("locked", true);
            });
            newNodes.push(_result2);
            newNodes = newNodes.concat(_resultNewNodes);
            return [_result2, _nodesStore.set(_result2.get("id"), _result2)];
        }

        var _semant$clone5 = semant.clone(id, nodes),
            _semant$clone6 = _slicedToArray(_semant$clone5, 3),
            result = _semant$clone6[0],
            resultNewNodes = _semant$clone6[1],
            nodesStore = _semant$clone6[2];

        newNodes.push(result);
        newNodes = newNodes.concat(resultNewNodes);
        return [result, nodesStore.set(result.get("id", result))];
    }, function (nodes, node) {
        if (config.isCapturing(node)) {
            return config.captureName(nodes, node) !== name;
        }
        return true;
    }),
        _semant$map2 = _slicedToArray(_semant$map, 1),
        newTop = _semant$map2[0];

    newTop = newTop.delete("parent").delete("parentField");

    if (newTop.get("type") === "vtuple") {
        // Spill vtuple onto the board
        // TODO: should we delete parent/parentField?
        return [topNode.get("id"), semant.subexpressions(newTop).map(function (field) {
            return newTop.get(field);
        }), newNodes.slice(1).map(function (node) {
            return node.get("parent") === newTop.get("id") ? node.delete("parent").delete("parentField") : node;
        })];
    } else {
        return [topNode.get("id"), [newTop.get("id")], newNodes.concat([newTop])];
    }
}

/**
 * Standard definition for missing expression.
 */
var missing = exports.missing = {
    kind: "placeholder",
    fields: [],
    subexpressions: [],
    locked: false,
    alwaysTargetable: true,
    type: function type() {
        return {
            types: new Map(),
            complete: false
        };
    },
    projection: {
        type: "dynamic",
        resetFields: ["padding"],
        default: {
            type: "default",
            shape: "()",
            color: "#555",
            shadowOffset: -2,
            radius: 22,
            padding: {
                left: 20,
                right: 20,
                inner: 0
            }
        },
        cases: {
            boolean: {
                type: "default",
                shape: "<>",
                color: "#555",
                shadowOffset: -2,
                padding: {
                    left: 37.5,
                    right: 37.5,
                    inner: 0
                }
            }
        }
    }
};
},{}],74:[function(require,module,exports) {
(function webpackUniversalModuleDefinition(root, factory) {
/* istanbul ignore next */
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
/* istanbul ignore next */
	else if(typeof exports === 'object')
		exports["esprima"] = factory();
	else
		root["esprima"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/* istanbul ignore if */
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/*
	  Copyright JS Foundation and other contributors, https://js.foundation/

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	var comment_handler_1 = __webpack_require__(1);
	var jsx_parser_1 = __webpack_require__(3);
	var parser_1 = __webpack_require__(8);
	var tokenizer_1 = __webpack_require__(15);
	function parse(code, options, delegate) {
	    var commentHandler = null;
	    var proxyDelegate = function (node, metadata) {
	        if (delegate) {
	            delegate(node, metadata);
	        }
	        if (commentHandler) {
	            commentHandler.visit(node, metadata);
	        }
	    };
	    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;
	    var collectComment = false;
	    if (options) {
	        collectComment = (typeof options.comment === 'boolean' && options.comment);
	        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);
	        if (collectComment || attachComment) {
	            commentHandler = new comment_handler_1.CommentHandler();
	            commentHandler.attach = attachComment;
	            options.comment = true;
	            parserDelegate = proxyDelegate;
	        }
	    }
	    var isModule = false;
	    if (options && typeof options.sourceType === 'string') {
	        isModule = (options.sourceType === 'module');
	    }
	    var parser;
	    if (options && typeof options.jsx === 'boolean' && options.jsx) {
	        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
	    }
	    else {
	        parser = new parser_1.Parser(code, options, parserDelegate);
	    }
	    var program = isModule ? parser.parseModule() : parser.parseScript();
	    var ast = program;
	    if (collectComment && commentHandler) {
	        ast.comments = commentHandler.comments;
	    }
	    if (parser.config.tokens) {
	        ast.tokens = parser.tokens;
	    }
	    if (parser.config.tolerant) {
	        ast.errors = parser.errorHandler.errors;
	    }
	    return ast;
	}
	exports.parse = parse;
	function parseModule(code, options, delegate) {
	    var parsingOptions = options || {};
	    parsingOptions.sourceType = 'module';
	    return parse(code, parsingOptions, delegate);
	}
	exports.parseModule = parseModule;
	function parseScript(code, options, delegate) {
	    var parsingOptions = options || {};
	    parsingOptions.sourceType = 'script';
	    return parse(code, parsingOptions, delegate);
	}
	exports.parseScript = parseScript;
	function tokenize(code, options, delegate) {
	    var tokenizer = new tokenizer_1.Tokenizer(code, options);
	    var tokens;
	    tokens = [];
	    try {
	        while (true) {
	            var token = tokenizer.getNextToken();
	            if (!token) {
	                break;
	            }
	            if (delegate) {
	                token = delegate(token);
	            }
	            tokens.push(token);
	        }
	    }
	    catch (e) {
	        tokenizer.errorHandler.tolerate(e);
	    }
	    if (tokenizer.errorHandler.tolerant) {
	        tokens.errors = tokenizer.errors();
	    }
	    return tokens;
	}
	exports.tokenize = tokenize;
	var syntax_1 = __webpack_require__(2);
	exports.Syntax = syntax_1.Syntax;
	// Sync with *.json manifests.
	exports.version = '4.0.0';


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var syntax_1 = __webpack_require__(2);
	var CommentHandler = (function () {
	    function CommentHandler() {
	        this.attach = false;
	        this.comments = [];
	        this.stack = [];
	        this.leading = [];
	        this.trailing = [];
	    }
	    CommentHandler.prototype.insertInnerComments = function (node, metadata) {
	        //  innnerComments for properties empty block
	        //  `function a() {/** comments **\/}`
	        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
	            var innerComments = [];
	            for (var i = this.leading.length - 1; i >= 0; --i) {
	                var entry = this.leading[i];
	                if (metadata.end.offset >= entry.start) {
	                    innerComments.unshift(entry.comment);
	                    this.leading.splice(i, 1);
	                    this.trailing.splice(i, 1);
	                }
	            }
	            if (innerComments.length) {
	                node.innerComments = innerComments;
	            }
	        }
	    };
	    CommentHandler.prototype.findTrailingComments = function (metadata) {
	        var trailingComments = [];
	        if (this.trailing.length > 0) {
	            for (var i = this.trailing.length - 1; i >= 0; --i) {
	                var entry_1 = this.trailing[i];
	                if (entry_1.start >= metadata.end.offset) {
	                    trailingComments.unshift(entry_1.comment);
	                }
	            }
	            this.trailing.length = 0;
	            return trailingComments;
	        }
	        var entry = this.stack[this.stack.length - 1];
	        if (entry && entry.node.trailingComments) {
	            var firstComment = entry.node.trailingComments[0];
	            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
	                trailingComments = entry.node.trailingComments;
	                delete entry.node.trailingComments;
	            }
	        }
	        return trailingComments;
	    };
	    CommentHandler.prototype.findLeadingComments = function (metadata) {
	        var leadingComments = [];
	        var target;
	        while (this.stack.length > 0) {
	            var entry = this.stack[this.stack.length - 1];
	            if (entry && entry.start >= metadata.start.offset) {
	                target = entry.node;
	                this.stack.pop();
	            }
	            else {
	                break;
	            }
	        }
	        if (target) {
	            var count = target.leadingComments ? target.leadingComments.length : 0;
	            for (var i = count - 1; i >= 0; --i) {
	                var comment = target.leadingComments[i];
	                if (comment.range[1] <= metadata.start.offset) {
	                    leadingComments.unshift(comment);
	                    target.leadingComments.splice(i, 1);
	                }
	            }
	            if (target.leadingComments && target.leadingComments.length === 0) {
	                delete target.leadingComments;
	            }
	            return leadingComments;
	        }
	        for (var i = this.leading.length - 1; i >= 0; --i) {
	            var entry = this.leading[i];
	            if (entry.start <= metadata.start.offset) {
	                leadingComments.unshift(entry.comment);
	                this.leading.splice(i, 1);
	            }
	        }
	        return leadingComments;
	    };
	    CommentHandler.prototype.visitNode = function (node, metadata) {
	        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
	            return;
	        }
	        this.insertInnerComments(node, metadata);
	        var trailingComments = this.findTrailingComments(metadata);
	        var leadingComments = this.findLeadingComments(metadata);
	        if (leadingComments.length > 0) {
	            node.leadingComments = leadingComments;
	        }
	        if (trailingComments.length > 0) {
	            node.trailingComments = trailingComments;
	        }
	        this.stack.push({
	            node: node,
	            start: metadata.start.offset
	        });
	    };
	    CommentHandler.prototype.visitComment = function (node, metadata) {
	        var type = (node.type[0] === 'L') ? 'Line' : 'Block';
	        var comment = {
	            type: type,
	            value: node.value
	        };
	        if (node.range) {
	            comment.range = node.range;
	        }
	        if (node.loc) {
	            comment.loc = node.loc;
	        }
	        this.comments.push(comment);
	        if (this.attach) {
	            var entry = {
	                comment: {
	                    type: type,
	                    value: node.value,
	                    range: [metadata.start.offset, metadata.end.offset]
	                },
	                start: metadata.start.offset
	            };
	            if (node.loc) {
	                entry.comment.loc = node.loc;
	            }
	            node.type = type;
	            this.leading.push(entry);
	            this.trailing.push(entry);
	        }
	    };
	    CommentHandler.prototype.visit = function (node, metadata) {
	        if (node.type === 'LineComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (node.type === 'BlockComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (this.attach) {
	            this.visitNode(node, metadata);
	        }
	    };
	    return CommentHandler;
	}());
	exports.CommentHandler = CommentHandler;


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Syntax = {
	    AssignmentExpression: 'AssignmentExpression',
	    AssignmentPattern: 'AssignmentPattern',
	    ArrayExpression: 'ArrayExpression',
	    ArrayPattern: 'ArrayPattern',
	    ArrowFunctionExpression: 'ArrowFunctionExpression',
	    AwaitExpression: 'AwaitExpression',
	    BlockStatement: 'BlockStatement',
	    BinaryExpression: 'BinaryExpression',
	    BreakStatement: 'BreakStatement',
	    CallExpression: 'CallExpression',
	    CatchClause: 'CatchClause',
	    ClassBody: 'ClassBody',
	    ClassDeclaration: 'ClassDeclaration',
	    ClassExpression: 'ClassExpression',
	    ConditionalExpression: 'ConditionalExpression',
	    ContinueStatement: 'ContinueStatement',
	    DoWhileStatement: 'DoWhileStatement',
	    DebuggerStatement: 'DebuggerStatement',
	    EmptyStatement: 'EmptyStatement',
	    ExportAllDeclaration: 'ExportAllDeclaration',
	    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
	    ExportNamedDeclaration: 'ExportNamedDeclaration',
	    ExportSpecifier: 'ExportSpecifier',
	    ExpressionStatement: 'ExpressionStatement',
	    ForStatement: 'ForStatement',
	    ForOfStatement: 'ForOfStatement',
	    ForInStatement: 'ForInStatement',
	    FunctionDeclaration: 'FunctionDeclaration',
	    FunctionExpression: 'FunctionExpression',
	    Identifier: 'Identifier',
	    IfStatement: 'IfStatement',
	    ImportDeclaration: 'ImportDeclaration',
	    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
	    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
	    ImportSpecifier: 'ImportSpecifier',
	    Literal: 'Literal',
	    LabeledStatement: 'LabeledStatement',
	    LogicalExpression: 'LogicalExpression',
	    MemberExpression: 'MemberExpression',
	    MetaProperty: 'MetaProperty',
	    MethodDefinition: 'MethodDefinition',
	    NewExpression: 'NewExpression',
	    ObjectExpression: 'ObjectExpression',
	    ObjectPattern: 'ObjectPattern',
	    Program: 'Program',
	    Property: 'Property',
	    RestElement: 'RestElement',
	    ReturnStatement: 'ReturnStatement',
	    SequenceExpression: 'SequenceExpression',
	    SpreadElement: 'SpreadElement',
	    Super: 'Super',
	    SwitchCase: 'SwitchCase',
	    SwitchStatement: 'SwitchStatement',
	    TaggedTemplateExpression: 'TaggedTemplateExpression',
	    TemplateElement: 'TemplateElement',
	    TemplateLiteral: 'TemplateLiteral',
	    ThisExpression: 'ThisExpression',
	    ThrowStatement: 'ThrowStatement',
	    TryStatement: 'TryStatement',
	    UnaryExpression: 'UnaryExpression',
	    UpdateExpression: 'UpdateExpression',
	    VariableDeclaration: 'VariableDeclaration',
	    VariableDeclarator: 'VariableDeclarator',
	    WhileStatement: 'WhileStatement',
	    WithStatement: 'WithStatement',
	    YieldExpression: 'YieldExpression'
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
/* istanbul ignore next */
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var character_1 = __webpack_require__(4);
	var JSXNode = __webpack_require__(5);
	var jsx_syntax_1 = __webpack_require__(6);
	var Node = __webpack_require__(7);
	var parser_1 = __webpack_require__(8);
	var token_1 = __webpack_require__(13);
	var xhtml_entities_1 = __webpack_require__(14);
	token_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';
	token_1.TokenName[101 /* Text */] = 'JSXText';
	// Fully qualified element name, e.g. <svg:path> returns "svg:path"
	function getQualifiedElementName(elementName) {
	    var qualifiedName;
	    switch (elementName.type) {
	        case jsx_syntax_1.JSXSyntax.JSXIdentifier:
	            var id = elementName;
	            qualifiedName = id.name;
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
	            var ns = elementName;
	            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +
	                getQualifiedElementName(ns.name);
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
	            var expr = elementName;
	            qualifiedName = getQualifiedElementName(expr.object) + '.' +
	                getQualifiedElementName(expr.property);
	            break;
	        /* istanbul ignore next */
	        default:
	            break;
	    }
	    return qualifiedName;
	}
	var JSXParser = (function (_super) {
	    __extends(JSXParser, _super);
	    function JSXParser(code, options, delegate) {
	        return _super.call(this, code, options, delegate) || this;
	    }
	    JSXParser.prototype.parsePrimaryExpression = function () {
	        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
	    };
	    JSXParser.prototype.startJSX = function () {
	        // Unwind the scanner before the lookahead token.
	        this.scanner.index = this.startMarker.index;
	        this.scanner.lineNumber = this.startMarker.line;
	        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
	    };
	    JSXParser.prototype.finishJSX = function () {
	        // Prime the next lookahead.
	        this.nextToken();
	    };
	    JSXParser.prototype.reenterJSX = function () {
	        this.startJSX();
	        this.expectJSX('}');
	        // Pop the closing '}' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	    };
	    JSXParser.prototype.createJSXNode = function () {
	        this.collectComments();
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.createJSXChildNode = function () {
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.scanXHTMLEntity = function (quote) {
	        var result = '&';
	        var valid = true;
	        var terminated = false;
	        var numeric = false;
	        var hex = false;
	        while (!this.scanner.eof() && valid && !terminated) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === quote) {
	                break;
	            }
	            terminated = (ch === ';');
	            result += ch;
	            ++this.scanner.index;
	            if (!terminated) {
	                switch (result.length) {
	                    case 2:
	                        // e.g. '&#123;'
	                        numeric = (ch === '#');
	                        break;
	                    case 3:
	                        if (numeric) {
	                            // e.g. '&#x41;'
	                            hex = (ch === 'x');
	                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
	                            numeric = numeric && !hex;
	                        }
	                        break;
	                    default:
	                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
	                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
	                        break;
	                }
	            }
	        }
	        if (valid && terminated && result.length > 2) {
	            // e.g. '&#x41;' becomes just '#x41'
	            var str = result.substr(1, result.length - 2);
	            if (numeric && str.length > 1) {
	                result = String.fromCharCode(parseInt(str.substr(1), 10));
	            }
	            else if (hex && str.length > 2) {
	                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
	            }
	            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
	                result = xhtml_entities_1.XHTMLEntities[str];
	            }
	        }
	        return result;
	    };
	    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
	    JSXParser.prototype.lexJSX = function () {
	        var cp = this.scanner.source.charCodeAt(this.scanner.index);
	        // < > / : = { }
	        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
	            var value = this.scanner.source[this.scanner.index++];
	            return {
	                type: 7 /* Punctuator */,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index - 1,
	                end: this.scanner.index
	            };
	        }
	        // " '
	        if (cp === 34 || cp === 39) {
	            var start = this.scanner.index;
	            var quote = this.scanner.source[this.scanner.index++];
	            var str = '';
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source[this.scanner.index++];
	                if (ch === quote) {
	                    break;
	                }
	                else if (ch === '&') {
	                    str += this.scanXHTMLEntity(quote);
	                }
	                else {
	                    str += ch;
	                }
	            }
	            return {
	                type: 8 /* StringLiteral */,
	                value: str,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // ... or .
	        if (cp === 46) {
	            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
	            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
	            var value = (n1 === 46 && n2 === 46) ? '...' : '.';
	            var start = this.scanner.index;
	            this.scanner.index += value.length;
	            return {
	                type: 7 /* Punctuator */,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // `
	        if (cp === 96) {
	            // Only placeholder, since it will be rescanned as a real assignment expression.
	            return {
	                type: 10 /* Template */,
	                value: '',
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index,
	                end: this.scanner.index
	            };
	        }
	        // Identifer can not contain backslash (char code 92).
	        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {
	            var start = this.scanner.index;
	            ++this.scanner.index;
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source.charCodeAt(this.scanner.index);
	                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {
	                    ++this.scanner.index;
	                }
	                else if (ch === 45) {
	                    // Hyphen (char code 45) can be part of an identifier.
	                    ++this.scanner.index;
	                }
	                else {
	                    break;
	                }
	            }
	            var id = this.scanner.source.slice(start, this.scanner.index);
	            return {
	                type: 100 /* Identifier */,
	                value: id,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        return this.scanner.lex();
	    };
	    JSXParser.prototype.nextJSXToken = function () {
	        this.collectComments();
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.line = this.scanner.lineNumber;
	        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        var token = this.lexJSX();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        if (this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.nextJSXText = function () {
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.line = this.scanner.lineNumber;
	        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        var start = this.scanner.index;
	        var text = '';
	        while (!this.scanner.eof()) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === '{' || ch === '<') {
	                break;
	            }
	            ++this.scanner.index;
	            text += ch;
	            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.scanner.lineNumber;
	                if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
	                    ++this.scanner.index;
	                }
	                this.scanner.lineStart = this.scanner.index;
	            }
	        }
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        var token = {
	            type: 101 /* Text */,
	            value: text,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: this.scanner.lineStart,
	            start: start,
	            end: this.scanner.index
	        };
	        if ((text.length > 0) && this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.peekJSXToken = function () {
	        var state = this.scanner.saveState();
	        this.scanner.scanComments();
	        var next = this.lexJSX();
	        this.scanner.restoreState(state);
	        return next;
	    };
	    // Expect the next JSX token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    JSXParser.prototype.expectJSX = function (value) {
	        var token = this.nextJSXToken();
	        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next JSX token matches the specified punctuator.
	    JSXParser.prototype.matchJSX = function (value) {
	        var next = this.peekJSXToken();
	        return next.type === 7 /* Punctuator */ && next.value === value;
	    };
	    JSXParser.prototype.parseJSXIdentifier = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== 100 /* Identifier */) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
	    };
	    JSXParser.prototype.parseJSXElementName = function () {
	        var node = this.createJSXNode();
	        var elementName = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = elementName;
	            this.expectJSX(':');
	            var name_1 = this.parseJSXIdentifier();
	            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
	        }
	        else if (this.matchJSX('.')) {
	            while (this.matchJSX('.')) {
	                var object = elementName;
	                this.expectJSX('.');
	                var property = this.parseJSXIdentifier();
	                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
	            }
	        }
	        return elementName;
	    };
	    JSXParser.prototype.parseJSXAttributeName = function () {
	        var node = this.createJSXNode();
	        var attributeName;
	        var identifier = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = identifier;
	            this.expectJSX(':');
	            var name_2 = this.parseJSXIdentifier();
	            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
	        }
	        else {
	            attributeName = identifier;
	        }
	        return attributeName;
	    };
	    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== 8 /* StringLiteral */) {
	            this.throwUnexpectedToken(token);
	        }
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    JSXParser.prototype.parseJSXExpressionAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.finishJSX();
	        if (this.match('}')) {
	            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
	        }
	        var expression = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXAttributeValue = function () {
	        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :
	            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
	    };
	    JSXParser.prototype.parseJSXNameValueAttribute = function () {
	        var node = this.createJSXNode();
	        var name = this.parseJSXAttributeName();
	        var value = null;
	        if (this.matchJSX('=')) {
	            this.expectJSX('=');
	            value = this.parseJSXAttributeValue();
	        }
	        return this.finalize(node, new JSXNode.JSXAttribute(name, value));
	    };
	    JSXParser.prototype.parseJSXSpreadAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.expectJSX('...');
	        this.finishJSX();
	        var argument = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
	    };
	    JSXParser.prototype.parseJSXAttributes = function () {
	        var attributes = [];
	        while (!this.matchJSX('/') && !this.matchJSX('>')) {
	            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :
	                this.parseJSXNameValueAttribute();
	            attributes.push(attribute);
	        }
	        return attributes;
	    };
	    JSXParser.prototype.parseJSXOpeningElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXBoundaryElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        if (this.matchJSX('/')) {
	            this.expectJSX('/');
	            var name_3 = this.parseJSXElementName();
	            this.expectJSX('>');
	            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
	        }
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXEmptyExpression = function () {
	        var node = this.createJSXChildNode();
	        this.collectComments();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        return this.finalize(node, new JSXNode.JSXEmptyExpression());
	    };
	    JSXParser.prototype.parseJSXExpressionContainer = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        var expression;
	        if (this.matchJSX('}')) {
	            expression = this.parseJSXEmptyExpression();
	            this.expectJSX('}');
	        }
	        else {
	            this.finishJSX();
	            expression = this.parseAssignmentExpression();
	            this.reenterJSX();
	        }
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXChildren = function () {
	        var children = [];
	        while (!this.scanner.eof()) {
	            var node = this.createJSXChildNode();
	            var token = this.nextJSXText();
	            if (token.start < token.end) {
	                var raw = this.getTokenRaw(token);
	                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
	                children.push(child);
	            }
	            if (this.scanner.source[this.scanner.index] === '{') {
	                var container = this.parseJSXExpressionContainer();
	                children.push(container);
	            }
	            else {
	                break;
	            }
	        }
	        return children;
	    };
	    JSXParser.prototype.parseComplexJSXElement = function (el) {
	        var stack = [];
	        while (!this.scanner.eof()) {
	            el.children = el.children.concat(this.parseJSXChildren());
	            var node = this.createJSXChildNode();
	            var element = this.parseJSXBoundaryElement();
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
	                var opening = element;
	                if (opening.selfClosing) {
	                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
	                    el.children.push(child);
	                }
	                else {
	                    stack.push(el);
	                    el = { node: node, opening: opening, closing: null, children: [] };
	                }
	            }
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
	                el.closing = element;
	                var open_1 = getQualifiedElementName(el.opening.name);
	                var close_1 = getQualifiedElementName(el.closing.name);
	                if (open_1 !== close_1) {
	                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
	                }
	                if (stack.length > 0) {
	                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
	                    el = stack[stack.length - 1];
	                    el.children.push(child);
	                    stack.pop();
	                }
	                else {
	                    break;
	                }
	            }
	        }
	        return el;
	    };
	    JSXParser.prototype.parseJSXElement = function () {
	        var node = this.createJSXNode();
	        var opening = this.parseJSXOpeningElement();
	        var children = [];
	        var closing = null;
	        if (!opening.selfClosing) {
	            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });
	            children = el.children;
	            closing = el.closing;
	        }
	        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
	    };
	    JSXParser.prototype.parseJSXRoot = function () {
	        // Pop the opening '<' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	        this.startJSX();
	        var element = this.parseJSXElement();
	        this.finishJSX();
	        return element;
	    };
	    JSXParser.prototype.isStartOfExpression = function () {
	        return _super.prototype.isStartOfExpression.call(this) || this.match('<');
	    };
	    return JSXParser;
	}(parser_1.Parser));
	exports.JSXParser = JSXParser;


/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// See also tools/generate-unicode-regex.js.
	var Regex = {
	    // Unicode v8.0.0 NonAsciiIdentifierStart:
	    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
	    // Unicode v8.0.0 NonAsciiIdentifierPart:
	    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	};
	exports.Character = {
	    /* tslint:disable:no-bitwise */
	    fromCodePoint: function (cp) {
	        return (cp < 0x10000) ? String.fromCharCode(cp) :
	            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
	                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
	    },
	    // https://tc39.github.io/ecma262/#sec-white-space
	    isWhiteSpace: function (cp) {
	        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||
	            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);
	    },
	    // https://tc39.github.io/ecma262/#sec-line-terminators
	    isLineTerminator: function (cp) {
	        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);
	    },
	    // https://tc39.github.io/ecma262/#sec-names-and-keywords
	    isIdentifierStart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));
	    },
	    isIdentifierPart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp >= 0x30 && cp <= 0x39) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));
	    },
	    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
	    isDecimalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39); // 0..9
	    },
	    isHexDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39) ||
	            (cp >= 0x41 && cp <= 0x46) ||
	            (cp >= 0x61 && cp <= 0x66); // a..f
	    },
	    isOctalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x37); // 0..7
	    }
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var jsx_syntax_1 = __webpack_require__(6);
	/* tslint:disable:max-classes-per-file */
	var JSXClosingElement = (function () {
	    function JSXClosingElement(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
	        this.name = name;
	    }
	    return JSXClosingElement;
	}());
	exports.JSXClosingElement = JSXClosingElement;
	var JSXElement = (function () {
	    function JSXElement(openingElement, children, closingElement) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXElement;
	        this.openingElement = openingElement;
	        this.children = children;
	        this.closingElement = closingElement;
	    }
	    return JSXElement;
	}());
	exports.JSXElement = JSXElement;
	var JSXEmptyExpression = (function () {
	    function JSXEmptyExpression() {
	        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
	    }
	    return JSXEmptyExpression;
	}());
	exports.JSXEmptyExpression = JSXEmptyExpression;
	var JSXExpressionContainer = (function () {
	    function JSXExpressionContainer(expression) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
	        this.expression = expression;
	    }
	    return JSXExpressionContainer;
	}());
	exports.JSXExpressionContainer = JSXExpressionContainer;
	var JSXIdentifier = (function () {
	    function JSXIdentifier(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
	        this.name = name;
	    }
	    return JSXIdentifier;
	}());
	exports.JSXIdentifier = JSXIdentifier;
	var JSXMemberExpression = (function () {
	    function JSXMemberExpression(object, property) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
	        this.object = object;
	        this.property = property;
	    }
	    return JSXMemberExpression;
	}());
	exports.JSXMemberExpression = JSXMemberExpression;
	var JSXAttribute = (function () {
	    function JSXAttribute(name, value) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
	        this.name = name;
	        this.value = value;
	    }
	    return JSXAttribute;
	}());
	exports.JSXAttribute = JSXAttribute;
	var JSXNamespacedName = (function () {
	    function JSXNamespacedName(namespace, name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
	        this.namespace = namespace;
	        this.name = name;
	    }
	    return JSXNamespacedName;
	}());
	exports.JSXNamespacedName = JSXNamespacedName;
	var JSXOpeningElement = (function () {
	    function JSXOpeningElement(name, selfClosing, attributes) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
	        this.name = name;
	        this.selfClosing = selfClosing;
	        this.attributes = attributes;
	    }
	    return JSXOpeningElement;
	}());
	exports.JSXOpeningElement = JSXOpeningElement;
	var JSXSpreadAttribute = (function () {
	    function JSXSpreadAttribute(argument) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
	        this.argument = argument;
	    }
	    return JSXSpreadAttribute;
	}());
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	var JSXText = (function () {
	    function JSXText(value, raw) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXText;
	        this.value = value;
	        this.raw = raw;
	    }
	    return JSXText;
	}());
	exports.JSXText = JSXText;


/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JSXSyntax = {
	    JSXAttribute: 'JSXAttribute',
	    JSXClosingElement: 'JSXClosingElement',
	    JSXElement: 'JSXElement',
	    JSXEmptyExpression: 'JSXEmptyExpression',
	    JSXExpressionContainer: 'JSXExpressionContainer',
	    JSXIdentifier: 'JSXIdentifier',
	    JSXMemberExpression: 'JSXMemberExpression',
	    JSXNamespacedName: 'JSXNamespacedName',
	    JSXOpeningElement: 'JSXOpeningElement',
	    JSXSpreadAttribute: 'JSXSpreadAttribute',
	    JSXText: 'JSXText'
	};


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var syntax_1 = __webpack_require__(2);
	/* tslint:disable:max-classes-per-file */
	var ArrayExpression = (function () {
	    function ArrayExpression(elements) {
	        this.type = syntax_1.Syntax.ArrayExpression;
	        this.elements = elements;
	    }
	    return ArrayExpression;
	}());
	exports.ArrayExpression = ArrayExpression;
	var ArrayPattern = (function () {
	    function ArrayPattern(elements) {
	        this.type = syntax_1.Syntax.ArrayPattern;
	        this.elements = elements;
	    }
	    return ArrayPattern;
	}());
	exports.ArrayPattern = ArrayPattern;
	var ArrowFunctionExpression = (function () {
	    function ArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	        this.async = false;
	    }
	    return ArrowFunctionExpression;
	}());
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	var AssignmentExpression = (function () {
	    function AssignmentExpression(operator, left, right) {
	        this.type = syntax_1.Syntax.AssignmentExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentExpression;
	}());
	exports.AssignmentExpression = AssignmentExpression;
	var AssignmentPattern = (function () {
	    function AssignmentPattern(left, right) {
	        this.type = syntax_1.Syntax.AssignmentPattern;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentPattern;
	}());
	exports.AssignmentPattern = AssignmentPattern;
	var AsyncArrowFunctionExpression = (function () {
	    function AsyncArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	        this.async = true;
	    }
	    return AsyncArrowFunctionExpression;
	}());
	exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;
	var AsyncFunctionDeclaration = (function () {
	    function AsyncFunctionDeclaration(id, params, body) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = false;
	        this.async = true;
	    }
	    return AsyncFunctionDeclaration;
	}());
	exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;
	var AsyncFunctionExpression = (function () {
	    function AsyncFunctionExpression(id, params, body) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = false;
	        this.async = true;
	    }
	    return AsyncFunctionExpression;
	}());
	exports.AsyncFunctionExpression = AsyncFunctionExpression;
	var AwaitExpression = (function () {
	    function AwaitExpression(argument) {
	        this.type = syntax_1.Syntax.AwaitExpression;
	        this.argument = argument;
	    }
	    return AwaitExpression;
	}());
	exports.AwaitExpression = AwaitExpression;
	var BinaryExpression = (function () {
	    function BinaryExpression(operator, left, right) {
	        var logical = (operator === '||' || operator === '&&');
	        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return BinaryExpression;
	}());
	exports.BinaryExpression = BinaryExpression;
	var BlockStatement = (function () {
	    function BlockStatement(body) {
	        this.type = syntax_1.Syntax.BlockStatement;
	        this.body = body;
	    }
	    return BlockStatement;
	}());
	exports.BlockStatement = BlockStatement;
	var BreakStatement = (function () {
	    function BreakStatement(label) {
	        this.type = syntax_1.Syntax.BreakStatement;
	        this.label = label;
	    }
	    return BreakStatement;
	}());
	exports.BreakStatement = BreakStatement;
	var CallExpression = (function () {
	    function CallExpression(callee, args) {
	        this.type = syntax_1.Syntax.CallExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return CallExpression;
	}());
	exports.CallExpression = CallExpression;
	var CatchClause = (function () {
	    function CatchClause(param, body) {
	        this.type = syntax_1.Syntax.CatchClause;
	        this.param = param;
	        this.body = body;
	    }
	    return CatchClause;
	}());
	exports.CatchClause = CatchClause;
	var ClassBody = (function () {
	    function ClassBody(body) {
	        this.type = syntax_1.Syntax.ClassBody;
	        this.body = body;
	    }
	    return ClassBody;
	}());
	exports.ClassBody = ClassBody;
	var ClassDeclaration = (function () {
	    function ClassDeclaration(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassDeclaration;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassDeclaration;
	}());
	exports.ClassDeclaration = ClassDeclaration;
	var ClassExpression = (function () {
	    function ClassExpression(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassExpression;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassExpression;
	}());
	exports.ClassExpression = ClassExpression;
	var ComputedMemberExpression = (function () {
	    function ComputedMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = true;
	        this.object = object;
	        this.property = property;
	    }
	    return ComputedMemberExpression;
	}());
	exports.ComputedMemberExpression = ComputedMemberExpression;
	var ConditionalExpression = (function () {
	    function ConditionalExpression(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.ConditionalExpression;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return ConditionalExpression;
	}());
	exports.ConditionalExpression = ConditionalExpression;
	var ContinueStatement = (function () {
	    function ContinueStatement(label) {
	        this.type = syntax_1.Syntax.ContinueStatement;
	        this.label = label;
	    }
	    return ContinueStatement;
	}());
	exports.ContinueStatement = ContinueStatement;
	var DebuggerStatement = (function () {
	    function DebuggerStatement() {
	        this.type = syntax_1.Syntax.DebuggerStatement;
	    }
	    return DebuggerStatement;
	}());
	exports.DebuggerStatement = DebuggerStatement;
	var Directive = (function () {
	    function Directive(expression, directive) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	        this.directive = directive;
	    }
	    return Directive;
	}());
	exports.Directive = Directive;
	var DoWhileStatement = (function () {
	    function DoWhileStatement(body, test) {
	        this.type = syntax_1.Syntax.DoWhileStatement;
	        this.body = body;
	        this.test = test;
	    }
	    return DoWhileStatement;
	}());
	exports.DoWhileStatement = DoWhileStatement;
	var EmptyStatement = (function () {
	    function EmptyStatement() {
	        this.type = syntax_1.Syntax.EmptyStatement;
	    }
	    return EmptyStatement;
	}());
	exports.EmptyStatement = EmptyStatement;
	var ExportAllDeclaration = (function () {
	    function ExportAllDeclaration(source) {
	        this.type = syntax_1.Syntax.ExportAllDeclaration;
	        this.source = source;
	    }
	    return ExportAllDeclaration;
	}());
	exports.ExportAllDeclaration = ExportAllDeclaration;
	var ExportDefaultDeclaration = (function () {
	    function ExportDefaultDeclaration(declaration) {
	        this.type = syntax_1.Syntax.ExportDefaultDeclaration;
	        this.declaration = declaration;
	    }
	    return ExportDefaultDeclaration;
	}());
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	var ExportNamedDeclaration = (function () {
	    function ExportNamedDeclaration(declaration, specifiers, source) {
	        this.type = syntax_1.Syntax.ExportNamedDeclaration;
	        this.declaration = declaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ExportNamedDeclaration;
	}());
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	var ExportSpecifier = (function () {
	    function ExportSpecifier(local, exported) {
	        this.type = syntax_1.Syntax.ExportSpecifier;
	        this.exported = exported;
	        this.local = local;
	    }
	    return ExportSpecifier;
	}());
	exports.ExportSpecifier = ExportSpecifier;
	var ExpressionStatement = (function () {
	    function ExpressionStatement(expression) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	    }
	    return ExpressionStatement;
	}());
	exports.ExpressionStatement = ExpressionStatement;
	var ForInStatement = (function () {
	    function ForInStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForInStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	        this.each = false;
	    }
	    return ForInStatement;
	}());
	exports.ForInStatement = ForInStatement;
	var ForOfStatement = (function () {
	    function ForOfStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForOfStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	    }
	    return ForOfStatement;
	}());
	exports.ForOfStatement = ForOfStatement;
	var ForStatement = (function () {
	    function ForStatement(init, test, update, body) {
	        this.type = syntax_1.Syntax.ForStatement;
	        this.init = init;
	        this.test = test;
	        this.update = update;
	        this.body = body;
	    }
	    return ForStatement;
	}());
	exports.ForStatement = ForStatement;
	var FunctionDeclaration = (function () {
	    function FunctionDeclaration(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	        this.async = false;
	    }
	    return FunctionDeclaration;
	}());
	exports.FunctionDeclaration = FunctionDeclaration;
	var FunctionExpression = (function () {
	    function FunctionExpression(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	        this.async = false;
	    }
	    return FunctionExpression;
	}());
	exports.FunctionExpression = FunctionExpression;
	var Identifier = (function () {
	    function Identifier(name) {
	        this.type = syntax_1.Syntax.Identifier;
	        this.name = name;
	    }
	    return Identifier;
	}());
	exports.Identifier = Identifier;
	var IfStatement = (function () {
	    function IfStatement(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.IfStatement;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return IfStatement;
	}());
	exports.IfStatement = IfStatement;
	var ImportDeclaration = (function () {
	    function ImportDeclaration(specifiers, source) {
	        this.type = syntax_1.Syntax.ImportDeclaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ImportDeclaration;
	}());
	exports.ImportDeclaration = ImportDeclaration;
	var ImportDefaultSpecifier = (function () {
	    function ImportDefaultSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportDefaultSpecifier;
	        this.local = local;
	    }
	    return ImportDefaultSpecifier;
	}());
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	var ImportNamespaceSpecifier = (function () {
	    function ImportNamespaceSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
	        this.local = local;
	    }
	    return ImportNamespaceSpecifier;
	}());
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
	var ImportSpecifier = (function () {
	    function ImportSpecifier(local, imported) {
	        this.type = syntax_1.Syntax.ImportSpecifier;
	        this.local = local;
	        this.imported = imported;
	    }
	    return ImportSpecifier;
	}());
	exports.ImportSpecifier = ImportSpecifier;
	var LabeledStatement = (function () {
	    function LabeledStatement(label, body) {
	        this.type = syntax_1.Syntax.LabeledStatement;
	        this.label = label;
	        this.body = body;
	    }
	    return LabeledStatement;
	}());
	exports.LabeledStatement = LabeledStatement;
	var Literal = (function () {
	    function Literal(value, raw) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	    }
	    return Literal;
	}());
	exports.Literal = Literal;
	var MetaProperty = (function () {
	    function MetaProperty(meta, property) {
	        this.type = syntax_1.Syntax.MetaProperty;
	        this.meta = meta;
	        this.property = property;
	    }
	    return MetaProperty;
	}());
	exports.MetaProperty = MetaProperty;
	var MethodDefinition = (function () {
	    function MethodDefinition(key, computed, value, kind, isStatic) {
	        this.type = syntax_1.Syntax.MethodDefinition;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.static = isStatic;
	    }
	    return MethodDefinition;
	}());
	exports.MethodDefinition = MethodDefinition;
	var Module = (function () {
	    function Module(body) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = 'module';
	    }
	    return Module;
	}());
	exports.Module = Module;
	var NewExpression = (function () {
	    function NewExpression(callee, args) {
	        this.type = syntax_1.Syntax.NewExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return NewExpression;
	}());
	exports.NewExpression = NewExpression;
	var ObjectExpression = (function () {
	    function ObjectExpression(properties) {
	        this.type = syntax_1.Syntax.ObjectExpression;
	        this.properties = properties;
	    }
	    return ObjectExpression;
	}());
	exports.ObjectExpression = ObjectExpression;
	var ObjectPattern = (function () {
	    function ObjectPattern(properties) {
	        this.type = syntax_1.Syntax.ObjectPattern;
	        this.properties = properties;
	    }
	    return ObjectPattern;
	}());
	exports.ObjectPattern = ObjectPattern;
	var Property = (function () {
	    function Property(kind, key, computed, value, method, shorthand) {
	        this.type = syntax_1.Syntax.Property;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.method = method;
	        this.shorthand = shorthand;
	    }
	    return Property;
	}());
	exports.Property = Property;
	var RegexLiteral = (function () {
	    function RegexLiteral(value, raw, pattern, flags) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	        this.regex = { pattern: pattern, flags: flags };
	    }
	    return RegexLiteral;
	}());
	exports.RegexLiteral = RegexLiteral;
	var RestElement = (function () {
	    function RestElement(argument) {
	        this.type = syntax_1.Syntax.RestElement;
	        this.argument = argument;
	    }
	    return RestElement;
	}());
	exports.RestElement = RestElement;
	var ReturnStatement = (function () {
	    function ReturnStatement(argument) {
	        this.type = syntax_1.Syntax.ReturnStatement;
	        this.argument = argument;
	    }
	    return ReturnStatement;
	}());
	exports.ReturnStatement = ReturnStatement;
	var Script = (function () {
	    function Script(body) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = 'script';
	    }
	    return Script;
	}());
	exports.Script = Script;
	var SequenceExpression = (function () {
	    function SequenceExpression(expressions) {
	        this.type = syntax_1.Syntax.SequenceExpression;
	        this.expressions = expressions;
	    }
	    return SequenceExpression;
	}());
	exports.SequenceExpression = SequenceExpression;
	var SpreadElement = (function () {
	    function SpreadElement(argument) {
	        this.type = syntax_1.Syntax.SpreadElement;
	        this.argument = argument;
	    }
	    return SpreadElement;
	}());
	exports.SpreadElement = SpreadElement;
	var StaticMemberExpression = (function () {
	    function StaticMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = false;
	        this.object = object;
	        this.property = property;
	    }
	    return StaticMemberExpression;
	}());
	exports.StaticMemberExpression = StaticMemberExpression;
	var Super = (function () {
	    function Super() {
	        this.type = syntax_1.Syntax.Super;
	    }
	    return Super;
	}());
	exports.Super = Super;
	var SwitchCase = (function () {
	    function SwitchCase(test, consequent) {
	        this.type = syntax_1.Syntax.SwitchCase;
	        this.test = test;
	        this.consequent = consequent;
	    }
	    return SwitchCase;
	}());
	exports.SwitchCase = SwitchCase;
	var SwitchStatement = (function () {
	    function SwitchStatement(discriminant, cases) {
	        this.type = syntax_1.Syntax.SwitchStatement;
	        this.discriminant = discriminant;
	        this.cases = cases;
	    }
	    return SwitchStatement;
	}());
	exports.SwitchStatement = SwitchStatement;
	var TaggedTemplateExpression = (function () {
	    function TaggedTemplateExpression(tag, quasi) {
	        this.type = syntax_1.Syntax.TaggedTemplateExpression;
	        this.tag = tag;
	        this.quasi = quasi;
	    }
	    return TaggedTemplateExpression;
	}());
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	var TemplateElement = (function () {
	    function TemplateElement(value, tail) {
	        this.type = syntax_1.Syntax.TemplateElement;
	        this.value = value;
	        this.tail = tail;
	    }
	    return TemplateElement;
	}());
	exports.TemplateElement = TemplateElement;
	var TemplateLiteral = (function () {
	    function TemplateLiteral(quasis, expressions) {
	        this.type = syntax_1.Syntax.TemplateLiteral;
	        this.quasis = quasis;
	        this.expressions = expressions;
	    }
	    return TemplateLiteral;
	}());
	exports.TemplateLiteral = TemplateLiteral;
	var ThisExpression = (function () {
	    function ThisExpression() {
	        this.type = syntax_1.Syntax.ThisExpression;
	    }
	    return ThisExpression;
	}());
	exports.ThisExpression = ThisExpression;
	var ThrowStatement = (function () {
	    function ThrowStatement(argument) {
	        this.type = syntax_1.Syntax.ThrowStatement;
	        this.argument = argument;
	    }
	    return ThrowStatement;
	}());
	exports.ThrowStatement = ThrowStatement;
	var TryStatement = (function () {
	    function TryStatement(block, handler, finalizer) {
	        this.type = syntax_1.Syntax.TryStatement;
	        this.block = block;
	        this.handler = handler;
	        this.finalizer = finalizer;
	    }
	    return TryStatement;
	}());
	exports.TryStatement = TryStatement;
	var UnaryExpression = (function () {
	    function UnaryExpression(operator, argument) {
	        this.type = syntax_1.Syntax.UnaryExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = true;
	    }
	    return UnaryExpression;
	}());
	exports.UnaryExpression = UnaryExpression;
	var UpdateExpression = (function () {
	    function UpdateExpression(operator, argument, prefix) {
	        this.type = syntax_1.Syntax.UpdateExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = prefix;
	    }
	    return UpdateExpression;
	}());
	exports.UpdateExpression = UpdateExpression;
	var VariableDeclaration = (function () {
	    function VariableDeclaration(declarations, kind) {
	        this.type = syntax_1.Syntax.VariableDeclaration;
	        this.declarations = declarations;
	        this.kind = kind;
	    }
	    return VariableDeclaration;
	}());
	exports.VariableDeclaration = VariableDeclaration;
	var VariableDeclarator = (function () {
	    function VariableDeclarator(id, init) {
	        this.type = syntax_1.Syntax.VariableDeclarator;
	        this.id = id;
	        this.init = init;
	    }
	    return VariableDeclarator;
	}());
	exports.VariableDeclarator = VariableDeclarator;
	var WhileStatement = (function () {
	    function WhileStatement(test, body) {
	        this.type = syntax_1.Syntax.WhileStatement;
	        this.test = test;
	        this.body = body;
	    }
	    return WhileStatement;
	}());
	exports.WhileStatement = WhileStatement;
	var WithStatement = (function () {
	    function WithStatement(object, body) {
	        this.type = syntax_1.Syntax.WithStatement;
	        this.object = object;
	        this.body = body;
	    }
	    return WithStatement;
	}());
	exports.WithStatement = WithStatement;
	var YieldExpression = (function () {
	    function YieldExpression(argument, delegate) {
	        this.type = syntax_1.Syntax.YieldExpression;
	        this.argument = argument;
	        this.delegate = delegate;
	    }
	    return YieldExpression;
	}());
	exports.YieldExpression = YieldExpression;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var assert_1 = __webpack_require__(9);
	var error_handler_1 = __webpack_require__(10);
	var messages_1 = __webpack_require__(11);
	var Node = __webpack_require__(7);
	var scanner_1 = __webpack_require__(12);
	var syntax_1 = __webpack_require__(2);
	var token_1 = __webpack_require__(13);
	var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';
	var Parser = (function () {
	    function Parser(code, options, delegate) {
	        if (options === void 0) { options = {}; }
	        this.config = {
	            range: (typeof options.range === 'boolean') && options.range,
	            loc: (typeof options.loc === 'boolean') && options.loc,
	            source: null,
	            tokens: (typeof options.tokens === 'boolean') && options.tokens,
	            comment: (typeof options.comment === 'boolean') && options.comment,
	            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant
	        };
	        if (this.config.loc && options.source && options.source !== null) {
	            this.config.source = String(options.source);
	        }
	        this.delegate = delegate;
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = this.config.tolerant;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = this.config.comment;
	        this.operatorPrecedence = {
	            ')': 0,
	            ';': 0,
	            ',': 0,
	            '=': 0,
	            ']': 0,
	            '||': 1,
	            '&&': 2,
	            '|': 3,
	            '^': 4,
	            '&': 5,
	            '==': 6,
	            '!=': 6,
	            '===': 6,
	            '!==': 6,
	            '<': 7,
	            '>': 7,
	            '<=': 7,
	            '>=': 7,
	            '<<': 8,
	            '>>': 8,
	            '>>>': 8,
	            '+': 9,
	            '-': 9,
	            '*': 11,
	            '/': 11,
	            '%': 11
	        };
	        this.lookahead = {
	            type: 2 /* EOF */,
	            value: '',
	            lineNumber: this.scanner.lineNumber,
	            lineStart: 0,
	            start: 0,
	            end: 0
	        };
	        this.hasLineTerminator = false;
	        this.context = {
	            isModule: false,
	            await: false,
	            allowIn: true,
	            allowStrictDirective: true,
	            allowYield: true,
	            firstCoverInitializedNameError: null,
	            isAssignmentTarget: false,
	            isBindingElement: false,
	            inFunctionBody: false,
	            inIteration: false,
	            inSwitch: false,
	            labelSet: {},
	            strict: false
	        };
	        this.tokens = [];
	        this.startMarker = {
	            index: 0,
	            line: this.scanner.lineNumber,
	            column: 0
	        };
	        this.lastMarker = {
	            index: 0,
	            line: this.scanner.lineNumber,
	            column: 0
	        };
	        this.nextToken();
	        this.lastMarker = {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    }
	    Parser.prototype.throwError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.lastMarker.line;
	        var column = this.lastMarker.column + 1;
	        throw this.errorHandler.createError(index, line, column, msg);
	    };
	    Parser.prototype.tolerateError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.scanner.lineNumber;
	        var column = this.lastMarker.column + 1;
	        this.errorHandler.tolerateError(index, line, column, msg);
	    };
	    // Throw an exception because of the token.
	    Parser.prototype.unexpectedTokenError = function (token, message) {
	        var msg = message || messages_1.Messages.UnexpectedToken;
	        var value;
	        if (token) {
	            if (!message) {
	                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :
	                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :
	                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :
	                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :
	                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :
	                                    messages_1.Messages.UnexpectedToken;
	                if (token.type === 4 /* Keyword */) {
	                    if (this.scanner.isFutureReservedWord(token.value)) {
	                        msg = messages_1.Messages.UnexpectedReserved;
	                    }
	                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
	                        msg = messages_1.Messages.StrictReservedWord;
	                    }
	                }
	            }
	            value = token.value;
	        }
	        else {
	            value = 'ILLEGAL';
	        }
	        msg = msg.replace('%0', value);
	        if (token && typeof token.lineNumber === 'number') {
	            var index = token.start;
	            var line = token.lineNumber;
	            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
	            var column = token.start - lastMarkerLineStart + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	        else {
	            var index = this.lastMarker.index;
	            var line = this.lastMarker.line;
	            var column = this.lastMarker.column + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	    };
	    Parser.prototype.throwUnexpectedToken = function (token, message) {
	        throw this.unexpectedTokenError(token, message);
	    };
	    Parser.prototype.tolerateUnexpectedToken = function (token, message) {
	        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
	    };
	    Parser.prototype.collectComments = function () {
	        if (!this.config.comment) {
	            this.scanner.scanComments();
	        }
	        else {
	            var comments = this.scanner.scanComments();
	            if (comments.length > 0 && this.delegate) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var node = void 0;
	                    node = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: this.scanner.source.slice(e.slice[0], e.slice[1])
	                    };
	                    if (this.config.range) {
	                        node.range = e.range;
	                    }
	                    if (this.config.loc) {
	                        node.loc = e.loc;
	                    }
	                    var metadata = {
	                        start: {
	                            line: e.loc.start.line,
	                            column: e.loc.start.column,
	                            offset: e.range[0]
	                        },
	                        end: {
	                            line: e.loc.end.line,
	                            column: e.loc.end.column,
	                            offset: e.range[1]
	                        }
	                    };
	                    this.delegate(node, metadata);
	                }
	            }
	        }
	    };
	    // From internal representation to an external structure
	    Parser.prototype.getTokenRaw = function (token) {
	        return this.scanner.source.slice(token.start, token.end);
	    };
	    Parser.prototype.convertToken = function (token) {
	        var t = {
	            type: token_1.TokenName[token.type],
	            value: this.getTokenRaw(token)
	        };
	        if (this.config.range) {
	            t.range = [token.start, token.end];
	        }
	        if (this.config.loc) {
	            t.loc = {
	                start: {
	                    line: this.startMarker.line,
	                    column: this.startMarker.column
	                },
	                end: {
	                    line: this.scanner.lineNumber,
	                    column: this.scanner.index - this.scanner.lineStart
	                }
	            };
	        }
	        if (token.type === 9 /* RegularExpression */) {
	            var pattern = token.pattern;
	            var flags = token.flags;
	            t.regex = { pattern: pattern, flags: flags };
	        }
	        return t;
	    };
	    Parser.prototype.nextToken = function () {
	        var token = this.lookahead;
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        this.collectComments();
	        if (this.scanner.index !== this.startMarker.index) {
	            this.startMarker.index = this.scanner.index;
	            this.startMarker.line = this.scanner.lineNumber;
	            this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        }
	        var next = this.scanner.lex();
	        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);
	        if (next && this.context.strict && next.type === 3 /* Identifier */) {
	            if (this.scanner.isStrictModeReservedWord(next.value)) {
	                next.type = 4 /* Keyword */;
	            }
	        }
	        this.lookahead = next;
	        if (this.config.tokens && next.type !== 2 /* EOF */) {
	            this.tokens.push(this.convertToken(next));
	        }
	        return token;
	    };
	    Parser.prototype.nextRegexToken = function () {
	        this.collectComments();
	        var token = this.scanner.scanRegExp();
	        if (this.config.tokens) {
	            // Pop the previous token, '/' or '/='
	            // This is added from the lookahead token.
	            this.tokens.pop();
	            this.tokens.push(this.convertToken(token));
	        }
	        // Prime the next lookahead.
	        this.lookahead = token;
	        this.nextToken();
	        return token;
	    };
	    Parser.prototype.createNode = function () {
	        return {
	            index: this.startMarker.index,
	            line: this.startMarker.line,
	            column: this.startMarker.column
	        };
	    };
	    Parser.prototype.startNode = function (token) {
	        return {
	            index: token.start,
	            line: token.lineNumber,
	            column: token.start - token.lineStart
	        };
	    };
	    Parser.prototype.finalize = function (marker, node) {
	        if (this.config.range) {
	            node.range = [marker.index, this.lastMarker.index];
	        }
	        if (this.config.loc) {
	            node.loc = {
	                start: {
	                    line: marker.line,
	                    column: marker.column,
	                },
	                end: {
	                    line: this.lastMarker.line,
	                    column: this.lastMarker.column
	                }
	            };
	            if (this.config.source) {
	                node.loc.source = this.config.source;
	            }
	        }
	        if (this.delegate) {
	            var metadata = {
	                start: {
	                    line: marker.line,
	                    column: marker.column,
	                    offset: marker.index
	                },
	                end: {
	                    line: this.lastMarker.line,
	                    column: this.lastMarker.column,
	                    offset: this.lastMarker.index
	                }
	            };
	            this.delegate(node, metadata);
	        }
	        return node;
	    };
	    // Expect the next token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    Parser.prototype.expect = function (value) {
	        var token = this.nextToken();
	        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
	    Parser.prototype.expectCommaSeparator = function () {
	        if (this.config.tolerant) {
	            var token = this.lookahead;
	            if (token.type === 7 /* Punctuator */ && token.value === ',') {
	                this.nextToken();
	            }
	            else if (token.type === 7 /* Punctuator */ && token.value === ';') {
	                this.nextToken();
	                this.tolerateUnexpectedToken(token);
	            }
	            else {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
	            }
	        }
	        else {
	            this.expect(',');
	        }
	    };
	    // Expect the next token to match the specified keyword.
	    // If not, an exception will be thrown.
	    Parser.prototype.expectKeyword = function (keyword) {
	        var token = this.nextToken();
	        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next token matches the specified punctuator.
	    Parser.prototype.match = function (value) {
	        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;
	    };
	    // Return true if the next token matches the specified keyword
	    Parser.prototype.matchKeyword = function (keyword) {
	        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;
	    };
	    // Return true if the next token matches the specified contextual keyword
	    // (where an identifier is sometimes a keyword depending on the context)
	    Parser.prototype.matchContextualKeyword = function (keyword) {
	        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;
	    };
	    // Return true if the next token is an assignment operator
	    Parser.prototype.matchAssign = function () {
	        if (this.lookahead.type !== 7 /* Punctuator */) {
	            return false;
	        }
	        var op = this.lookahead.value;
	        return op === '=' ||
	            op === '*=' ||
	            op === '**=' ||
	            op === '/=' ||
	            op === '%=' ||
	            op === '+=' ||
	            op === '-=' ||
	            op === '<<=' ||
	            op === '>>=' ||
	            op === '>>>=' ||
	            op === '&=' ||
	            op === '^=' ||
	            op === '|=';
	    };
	    // Cover grammar support.
	    //
	    // When an assignment expression position starts with an left parenthesis, the determination of the type
	    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
	    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
	    //
	    // There are three productions that can be parsed in a parentheses pair that needs to be determined
	    // after the outermost pair is closed. They are:
	    //
	    //   1. AssignmentExpression
	    //   2. BindingElements
	    //   3. AssignmentTargets
	    //
	    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
	    // binding element or assignment target.
	    //
	    // The three productions have the relationship:
	    //
	    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
	    //
	    // with a single exception that CoverInitializedName when used directly in an Expression, generates
	    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
	    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
	    //
	    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
	    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
	    // the CoverInitializedName check is conducted.
	    //
	    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
	    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
	    // pattern. The CoverInitializedName check is deferred.
	    Parser.prototype.isolateCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        if (this.context.firstCoverInitializedNameError !== null) {
	            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
	        }
	        this.context.isBindingElement = previousIsBindingElement;
	        this.context.isAssignmentTarget = previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.inheritCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
	        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.consumeSemicolon = function () {
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else if (!this.hasLineTerminator) {
	            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.lastMarker.index = this.startMarker.index;
	            this.lastMarker.line = this.startMarker.line;
	            this.lastMarker.column = this.startMarker.column;
	        }
	    };
	    // https://tc39.github.io/ecma262/#sec-primary-expression
	    Parser.prototype.parsePrimaryExpression = function () {
	        var node = this.createNode();
	        var expr;
	        var token, raw;
	        switch (this.lookahead.type) {
	            case 3 /* Identifier */:
	                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {
	                    this.tolerateUnexpectedToken(this.lookahead);
	                }
	                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
	                break;
	            case 6 /* NumericLiteral */:
	            case 8 /* StringLiteral */:
	                if (this.context.strict && this.lookahead.octal) {
	                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
	                }
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case 1 /* BooleanLiteral */:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));
	                break;
	            case 5 /* NullLiteral */:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(null, raw));
	                break;
	            case 10 /* Template */:
	                expr = this.parseTemplateLiteral();
	                break;
	            case 7 /* Punctuator */:
	                switch (this.lookahead.value) {
	                    case '(':
	                        this.context.isBindingElement = false;
	                        expr = this.inheritCoverGrammar(this.parseGroupExpression);
	                        break;
	                    case '[':
	                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);
	                        break;
	                    case '{':
	                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);
	                        break;
	                    case '/':
	                    case '/=':
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                        this.scanner.index = this.startMarker.index;
	                        token = this.nextRegexToken();
	                        raw = this.getTokenRaw(token);
	                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
	                        break;
	                    default:
	                        expr = this.throwUnexpectedToken(this.nextToken());
	                }
	                break;
	            case 4 /* Keyword */:
	                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
	                    expr = this.parseIdentifierName();
	                }
	                else if (!this.context.strict && this.matchKeyword('let')) {
	                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
	                }
	                else {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    if (this.matchKeyword('function')) {
	                        expr = this.parseFunctionExpression();
	                    }
	                    else if (this.matchKeyword('this')) {
	                        this.nextToken();
	                        expr = this.finalize(node, new Node.ThisExpression());
	                    }
	                    else if (this.matchKeyword('class')) {
	                        expr = this.parseClassExpression();
	                    }
	                    else {
	                        expr = this.throwUnexpectedToken(this.nextToken());
	                    }
	                }
	                break;
	            default:
	                expr = this.throwUnexpectedToken(this.nextToken());
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-array-initializer
	    Parser.prototype.parseSpreadElement = function () {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
	        return this.finalize(node, new Node.SpreadElement(arg));
	    };
	    Parser.prototype.parseArrayInitializer = function () {
	        var node = this.createNode();
	        var elements = [];
	        this.expect('[');
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else if (this.match('...')) {
	                var element = this.parseSpreadElement();
	                if (!this.match(']')) {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    this.expect(',');
	                }
	                elements.push(element);
	            }
	            else {
	                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayExpression(elements));
	    };
	    // https://tc39.github.io/ecma262/#sec-object-initializer
	    Parser.prototype.parsePropertyMethod = function (params) {
	        this.context.isAssignmentTarget = false;
	        this.context.isBindingElement = false;
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = params.simple;
	        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
	        if (this.context.strict && params.firstRestricted) {
	            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
	        }
	        if (this.context.strict && params.stricted) {
	            this.tolerateUnexpectedToken(params.stricted, params.message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        return body;
	    };
	    Parser.prototype.parsePropertyMethodFunction = function () {
	        var isGenerator = false;
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = false;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    Parser.prototype.parsePropertyMethodAsyncFunction = function () {
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        var previousAwait = this.context.await;
	        this.context.allowYield = false;
	        this.context.await = true;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        this.context.await = previousAwait;
	        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
	    };
	    Parser.prototype.parseObjectPropertyKey = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        var key;
	        switch (token.type) {
	            case 8 /* StringLiteral */:
	            case 6 /* NumericLiteral */:
	                if (this.context.strict && token.octal) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
	                }
	                var raw = this.getTokenRaw(token);
	                key = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case 3 /* Identifier */:
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 4 /* Keyword */:
	                key = this.finalize(node, new Node.Identifier(token.value));
	                break;
	            case 7 /* Punctuator */:
	                if (token.value === '[') {
	                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    this.expect(']');
	                }
	                else {
	                    key = this.throwUnexpectedToken(token);
	                }
	                break;
	            default:
	                key = this.throwUnexpectedToken(token);
	        }
	        return key;
	    };
	    Parser.prototype.isPropertyKey = function (key, value) {
	        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||
	            (key.type === syntax_1.Syntax.Literal && key.value === value);
	    };
	    Parser.prototype.parseObjectProperty = function (hasProto) {
	        var node = this.createNode();
	        var token = this.lookahead;
	        var kind;
	        var key = null;
	        var value = null;
	        var computed = false;
	        var method = false;
	        var shorthand = false;
	        var isAsync = false;
	        if (token.type === 3 /* Identifier */) {
	            var id = token.value;
	            this.nextToken();
	            computed = this.match('[');
	            isAsync = !this.hasLineTerminator && (id === 'async') &&
	                !this.match(':') && !this.match('(') && !this.match('*');
	            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
	        }
	        else if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {
	            kind = 'get';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.context.allowYield = false;
	            value = this.parseGetterMethod();
	        }
	        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {
	            kind = 'set';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseSetterMethod();
	        }
	        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        else {
	            if (!key) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            kind = 'init';
	            if (this.match(':') && !isAsync) {
	                if (!computed && this.isPropertyKey(key, '__proto__')) {
	                    if (hasProto.value) {
	                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
	                    }
	                    hasProto.value = true;
	                }
	                this.nextToken();
	                value = this.inheritCoverGrammar(this.parseAssignmentExpression);
	            }
	            else if (this.match('(')) {
	                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
	                method = true;
	            }
	            else if (token.type === 3 /* Identifier */) {
	                var id = this.finalize(node, new Node.Identifier(token.value));
	                if (this.match('=')) {
	                    this.context.firstCoverInitializedNameError = this.lookahead;
	                    this.nextToken();
	                    shorthand = true;
	                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    value = this.finalize(node, new Node.AssignmentPattern(id, init));
	                }
	                else {
	                    shorthand = true;
	                    value = id;
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectInitializer = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var properties = [];
	        var hasProto = { value: false };
	        while (!this.match('}')) {
	            properties.push(this.parseObjectProperty(hasProto));
	            if (!this.match('}')) {
	                this.expectCommaSeparator();
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectExpression(properties));
	    };
	    // https://tc39.github.io/ecma262/#sec-template-literals
	    Parser.prototype.parseTemplateHead = function () {
	        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
	        var node = this.createNode();
	        var token = this.nextToken();
	        var raw = token.value;
	        var cooked = token.cooked;
	        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
	    };
	    Parser.prototype.parseTemplateElement = function () {
	        if (this.lookahead.type !== 10 /* Template */) {
	            this.throwUnexpectedToken();
	        }
	        var node = this.createNode();
	        var token = this.nextToken();
	        var raw = token.value;
	        var cooked = token.cooked;
	        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
	    };
	    Parser.prototype.parseTemplateLiteral = function () {
	        var node = this.createNode();
	        var expressions = [];
	        var quasis = [];
	        var quasi = this.parseTemplateHead();
	        quasis.push(quasi);
	        while (!quasi.tail) {
	            expressions.push(this.parseExpression());
	            quasi = this.parseTemplateElement();
	            quasis.push(quasi);
	        }
	        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
	    };
	    // https://tc39.github.io/ecma262/#sec-grouping-operator
	    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	            case syntax_1.Syntax.MemberExpression:
	            case syntax_1.Syntax.RestElement:
	            case syntax_1.Syntax.AssignmentPattern:
	                break;
	            case syntax_1.Syntax.SpreadElement:
	                expr.type = syntax_1.Syntax.RestElement;
	                this.reinterpretExpressionAsPattern(expr.argument);
	                break;
	            case syntax_1.Syntax.ArrayExpression:
	                expr.type = syntax_1.Syntax.ArrayPattern;
	                for (var i = 0; i < expr.elements.length; i++) {
	                    if (expr.elements[i] !== null) {
	                        this.reinterpretExpressionAsPattern(expr.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectExpression:
	                expr.type = syntax_1.Syntax.ObjectPattern;
	                for (var i = 0; i < expr.properties.length; i++) {
	                    this.reinterpretExpressionAsPattern(expr.properties[i].value);
	                }
	                break;
	            case syntax_1.Syntax.AssignmentExpression:
	                expr.type = syntax_1.Syntax.AssignmentPattern;
	                delete expr.operator;
	                this.reinterpretExpressionAsPattern(expr.left);
	                break;
	            default:
	                // Allow other node type for tolerant parsing.
	                break;
	        }
	    };
	    Parser.prototype.parseGroupExpression = function () {
	        var expr;
	        this.expect('(');
	        if (this.match(')')) {
	            this.nextToken();
	            if (!this.match('=>')) {
	                this.expect('=>');
	            }
	            expr = {
	                type: ArrowParameterPlaceHolder,
	                params: [],
	                async: false
	            };
	        }
	        else {
	            var startToken = this.lookahead;
	            var params = [];
	            if (this.match('...')) {
	                expr = this.parseRestElement(params);
	                this.expect(')');
	                if (!this.match('=>')) {
	                    this.expect('=>');
	                }
	                expr = {
	                    type: ArrowParameterPlaceHolder,
	                    params: [expr],
	                    async: false
	                };
	            }
	            else {
	                var arrow = false;
	                this.context.isBindingElement = true;
	                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                if (this.match(',')) {
	                    var expressions = [];
	                    this.context.isAssignmentTarget = false;
	                    expressions.push(expr);
	                    while (this.lookahead.type !== 2 /* EOF */) {
	                        if (!this.match(',')) {
	                            break;
	                        }
	                        this.nextToken();
	                        if (this.match(')')) {
	                            this.nextToken();
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions,
	                                async: false
	                            };
	                        }
	                        else if (this.match('...')) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            expressions.push(this.parseRestElement(params));
	                            this.expect(')');
	                            if (!this.match('=>')) {
	                                this.expect('=>');
	                            }
	                            this.context.isBindingElement = false;
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions,
	                                async: false
	                            };
	                        }
	                        else {
	                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        if (arrow) {
	                            break;
	                        }
	                    }
	                    if (!arrow) {
	                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	                    }
	                }
	                if (!arrow) {
	                    this.expect(')');
	                    if (this.match('=>')) {
	                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: [expr],
	                                async: false
	                            };
	                        }
	                        if (!arrow) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            if (expr.type === syntax_1.Syntax.SequenceExpression) {
	                                for (var i = 0; i < expr.expressions.length; i++) {
	                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);
	                                }
	                            }
	                            else {
	                                this.reinterpretExpressionAsPattern(expr);
	                            }
	                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: parameters,
	                                async: false
	                            };
	                        }
	                    }
	                    this.context.isBindingElement = false;
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions
	    Parser.prototype.parseArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAssignmentExpression);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.isIdentifierName = function (token) {
	        return token.type === 3 /* Identifier */ ||
	            token.type === 4 /* Keyword */ ||
	            token.type === 1 /* BooleanLiteral */ ||
	            token.type === 5 /* NullLiteral */;
	    };
	    Parser.prototype.parseIdentifierName = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (!this.isIdentifierName(token)) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseNewExpression = function () {
	        var node = this.createNode();
	        var id = this.parseIdentifierName();
	        assert_1.assert(id.name === 'new', 'New expression must start with `new`');
	        var expr;
	        if (this.match('.')) {
	            this.nextToken();
	            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {
	                var property = this.parseIdentifierName();
	                expr = new Node.MetaProperty(id, property);
	            }
	            else {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
	            var args = this.match('(') ? this.parseArguments() : [];
	            expr = new Node.NewExpression(callee, args);
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return this.finalize(node, expr);
	    };
	    Parser.prototype.parseAsyncArgument = function () {
	        var arg = this.parseAssignmentExpression();
	        this.context.firstCoverInitializedNameError = null;
	        return arg;
	    };
	    Parser.prototype.parseAsyncArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAsyncArgument);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
	        var startToken = this.lookahead;
	        var maybeAsync = this.matchContextualKeyword('async');
	        var previousAllowIn = this.context.allowIn;
	        this.context.allowIn = true;
	        var expr;
	        if (this.matchKeyword('super') && this.context.inFunctionBody) {
	            expr = this.createNode();
	            this.nextToken();
	            expr = this.finalize(expr, new Node.Super());
	            if (!this.match('(') && !this.match('.') && !this.match('[')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        }
	        while (true) {
	            if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.match('(')) {
	                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = false;
	                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
	                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
	                if (asyncArrow && this.match('=>')) {
	                    for (var i = 0; i < args.length; ++i) {
	                        this.reinterpretExpressionAsPattern(args[i]);
	                    }
	                    expr = {
	                        type: ArrowParameterPlaceHolder,
	                        params: args,
	                        async: true
	                    };
	                }
	            }
	            else if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        this.context.allowIn = previousAllowIn;
	        return expr;
	    };
	    Parser.prototype.parseSuper = function () {
	        var node = this.createNode();
	        this.expectKeyword('super');
	        if (!this.match('[') && !this.match('.')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        return this.finalize(node, new Node.Super());
	    };
	    Parser.prototype.parseLeftHandSideExpression = function () {
	        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
	        var node = this.startNode(this.lookahead);
	        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :
	            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        while (true) {
	            if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-update-expressions
	    Parser.prototype.parseUpdateExpression = function () {
	        var expr;
	        var startToken = this.lookahead;
	        if (this.match('++') || this.match('--')) {
	            var node = this.startNode(startToken);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                this.tolerateError(messages_1.Messages.StrictLHSPrefix);
	            }
	            if (!this.context.isAssignmentTarget) {
	                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	            }
	            var prefix = true;
	            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {
	                if (this.match('++') || this.match('--')) {
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);
	                    }
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    var operator = this.nextToken().value;
	                    var prefix = false;
	                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-unary-operators
	    Parser.prototype.parseAwaitExpression = function () {
	        var node = this.createNode();
	        this.nextToken();
	        var argument = this.parseUnaryExpression();
	        return this.finalize(node, new Node.AwaitExpression(argument));
	    };
	    Parser.prototype.parseUnaryExpression = function () {
	        var expr;
	        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||
	            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
	            var node = this.startNode(this.lookahead);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
	            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
	                this.tolerateError(messages_1.Messages.StrictDelete);
	            }
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else if (this.context.await && this.matchContextualKeyword('await')) {
	            expr = this.parseAwaitExpression();
	        }
	        else {
	            expr = this.parseUpdateExpression();
	        }
	        return expr;
	    };
	    Parser.prototype.parseExponentiationExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-exp-operator
	    // https://tc39.github.io/ecma262/#sec-multiplicative-operators
	    // https://tc39.github.io/ecma262/#sec-additive-operators
	    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
	    // https://tc39.github.io/ecma262/#sec-relational-operators
	    // https://tc39.github.io/ecma262/#sec-equality-operators
	    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
	    // https://tc39.github.io/ecma262/#sec-binary-logical-operators
	    Parser.prototype.binaryPrecedence = function (token) {
	        var op = token.value;
	        var precedence;
	        if (token.type === 7 /* Punctuator */) {
	            precedence = this.operatorPrecedence[op] || 0;
	        }
	        else if (token.type === 4 /* Keyword */) {
	            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;
	        }
	        else {
	            precedence = 0;
	        }
	        return precedence;
	    };
	    Parser.prototype.parseBinaryExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
	        var token = this.lookahead;
	        var prec = this.binaryPrecedence(token);
	        if (prec > 0) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var markers = [startToken, this.lookahead];
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            var stack = [left, token.value, right];
	            var precedences = [prec];
	            while (true) {
	                prec = this.binaryPrecedence(this.lookahead);
	                if (prec <= 0) {
	                    break;
	                }
	                // Reduce: make a binary expression from the three topmost entries.
	                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {
	                    right = stack.pop();
	                    var operator = stack.pop();
	                    precedences.pop();
	                    left = stack.pop();
	                    markers.pop();
	                    var node = this.startNode(markers[markers.length - 1]);
	                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
	                }
	                // Shift.
	                stack.push(this.nextToken().value);
	                precedences.push(prec);
	                markers.push(this.lookahead);
	                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
	            }
	            // Final reduce to clean-up the stack.
	            var i = stack.length - 1;
	            expr = stack[i];
	            markers.pop();
	            while (i > 1) {
	                var node = this.startNode(markers.pop());
	                var operator = stack[i - 1];
	                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
	                i -= 2;
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-conditional-operator
	    Parser.prototype.parseConditionalExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
	        if (this.match('?')) {
	            this.nextToken();
	            var previousAllowIn = this.context.allowIn;
	            this.context.allowIn = true;
	            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowIn = previousAllowIn;
	            this.expect(':');
	            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-assignment-operators
	    Parser.prototype.checkPatternParam = function (options, param) {
	        switch (param.type) {
	            case syntax_1.Syntax.Identifier:
	                this.validateParam(options, param, param.name);
	                break;
	            case syntax_1.Syntax.RestElement:
	                this.checkPatternParam(options, param.argument);
	                break;
	            case syntax_1.Syntax.AssignmentPattern:
	                this.checkPatternParam(options, param.left);
	                break;
	            case syntax_1.Syntax.ArrayPattern:
	                for (var i = 0; i < param.elements.length; i++) {
	                    if (param.elements[i] !== null) {
	                        this.checkPatternParam(options, param.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectPattern:
	                for (var i = 0; i < param.properties.length; i++) {
	                    this.checkPatternParam(options, param.properties[i].value);
	                }
	                break;
	            default:
	                break;
	        }
	        options.simple = options.simple && (param instanceof Node.Identifier);
	    };
	    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
	        var params = [expr];
	        var options;
	        var asyncArrow = false;
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	                break;
	            case ArrowParameterPlaceHolder:
	                params = expr.params;
	                asyncArrow = expr.async;
	                break;
	            default:
	                return null;
	        }
	        options = {
	            simple: true,
	            paramSet: {}
	        };
	        for (var i = 0; i < params.length; ++i) {
	            var param = params[i];
	            if (param.type === syntax_1.Syntax.AssignmentPattern) {
	                if (param.right.type === syntax_1.Syntax.YieldExpression) {
	                    if (param.right.argument) {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                    param.right.type = syntax_1.Syntax.Identifier;
	                    param.right.name = 'yield';
	                    delete param.right.argument;
	                    delete param.right.delegate;
	                }
	            }
	            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.checkPatternParam(options, param);
	            params[i] = param;
	        }
	        if (this.context.strict || !this.context.allowYield) {
	            for (var i = 0; i < params.length; ++i) {
	                var param = params[i];
	                if (param.type === syntax_1.Syntax.YieldExpression) {
	                    this.throwUnexpectedToken(this.lookahead);
	                }
	            }
	        }
	        if (options.message === messages_1.Messages.StrictParamDupe) {
	            var token = this.context.strict ? options.stricted : options.firstRestricted;
	            this.throwUnexpectedToken(token, options.message);
	        }
	        return {
	            simple: options.simple,
	            params: params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.parseAssignmentExpression = function () {
	        var expr;
	        if (!this.context.allowYield && this.matchKeyword('yield')) {
	            expr = this.parseYieldExpression();
	        }
	        else {
	            var startToken = this.lookahead;
	            var token = startToken;
	            expr = this.parseConditionalExpression();
	            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {
	                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {
	                    var arg = this.parsePrimaryExpression();
	                    this.reinterpretExpressionAsPattern(arg);
	                    expr = {
	                        type: ArrowParameterPlaceHolder,
	                        params: [arg],
	                        async: true
	                    };
	                }
	            }
	            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
	                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                var isAsync = expr.async;
	                var list = this.reinterpretAsCoverFormalsList(expr);
	                if (list) {
	                    if (this.hasLineTerminator) {
	                        this.tolerateUnexpectedToken(this.lookahead);
	                    }
	                    this.context.firstCoverInitializedNameError = null;
	                    var previousStrict = this.context.strict;
	                    var previousAllowStrictDirective = this.context.allowStrictDirective;
	                    this.context.allowStrictDirective = list.simple;
	                    var previousAllowYield = this.context.allowYield;
	                    var previousAwait = this.context.await;
	                    this.context.allowYield = true;
	                    this.context.await = isAsync;
	                    var node = this.startNode(startToken);
	                    this.expect('=>');
	                    var body = void 0;
	                    if (this.match('{')) {
	                        var previousAllowIn = this.context.allowIn;
	                        this.context.allowIn = true;
	                        body = this.parseFunctionSourceElements();
	                        this.context.allowIn = previousAllowIn;
	                    }
	                    else {
	                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    }
	                    var expression = body.type !== syntax_1.Syntax.BlockStatement;
	                    if (this.context.strict && list.firstRestricted) {
	                        this.throwUnexpectedToken(list.firstRestricted, list.message);
	                    }
	                    if (this.context.strict && list.stricted) {
	                        this.tolerateUnexpectedToken(list.stricted, list.message);
	                    }
	                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :
	                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
	                    this.context.strict = previousStrict;
	                    this.context.allowStrictDirective = previousAllowStrictDirective;
	                    this.context.allowYield = previousAllowYield;
	                    this.context.await = previousAwait;
	                }
	            }
	            else {
	                if (this.matchAssign()) {
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
	                        var id = expr;
	                        if (this.scanner.isRestrictedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
	                        }
	                        if (this.scanner.isStrictModeReservedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	                        }
	                    }
	                    if (!this.match('=')) {
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                    }
	                    else {
	                        this.reinterpretExpressionAsPattern(expr);
	                    }
	                    token = this.nextToken();
	                    var operator = token.value;
	                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
	                    this.context.firstCoverInitializedNameError = null;
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-comma-operator
	    Parser.prototype.parseExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        if (this.match(',')) {
	            var expressions = [];
	            expressions.push(expr);
	            while (this.lookahead.type !== 2 /* EOF */) {
	                if (!this.match(',')) {
	                    break;
	                }
	                this.nextToken();
	                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	            }
	            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-block
	    Parser.prototype.parseStatementListItem = function () {
	        var statement;
	        this.context.isAssignmentTarget = true;
	        this.context.isBindingElement = true;
	        if (this.lookahead.type === 4 /* Keyword */) {
	            switch (this.lookahead.value) {
	                case 'export':
	                    if (!this.context.isModule) {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
	                    }
	                    statement = this.parseExportDeclaration();
	                    break;
	                case 'import':
	                    if (!this.context.isModule) {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
	                    }
	                    statement = this.parseImportDeclaration();
	                    break;
	                case 'const':
	                    statement = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'function':
	                    statement = this.parseFunctionDeclaration();
	                    break;
	                case 'class':
	                    statement = this.parseClassDeclaration();
	                    break;
	                case 'let':
	                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
	                    break;
	                default:
	                    statement = this.parseStatement();
	                    break;
	            }
	        }
	        else {
	            statement = this.parseStatement();
	        }
	        return statement;
	    };
	    Parser.prototype.parseBlock = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var block = [];
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            block.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.BlockStatement(block));
	    };
	    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations
	    Parser.prototype.parseLexicalBinding = function (kind, options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, kind);
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(id.name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (kind === 'const') {
	            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
	                if (this.match('=')) {
	                    this.nextToken();
	                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                }
	                else {
	                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');
	                }
	            }
	        }
	        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {
	            this.expect('=');
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseBindingList = function (kind, options) {
	        var list = [this.parseLexicalBinding(kind, options)];
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseLexicalBinding(kind, options));
	        }
	        return list;
	    };
	    Parser.prototype.isLexicalDeclaration = function () {
	        var state = this.scanner.saveState();
	        this.scanner.scanComments();
	        var next = this.scanner.lex();
	        this.scanner.restoreState(state);
	        return (next.type === 3 /* Identifier */) ||
	            (next.type === 7 /* Punctuator */ && next.value === '[') ||
	            (next.type === 7 /* Punctuator */ && next.value === '{') ||
	            (next.type === 4 /* Keyword */ && next.value === 'let') ||
	            (next.type === 4 /* Keyword */ && next.value === 'yield');
	    };
	    Parser.prototype.parseLexicalDeclaration = function (options) {
	        var node = this.createNode();
	        var kind = this.nextToken().value;
	        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
	        var declarations = this.parseBindingList(kind, options);
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
	    };
	    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns
	    Parser.prototype.parseBindingRestElement = function (params, kind) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params, kind);
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseArrayPattern = function (params, kind) {
	        var node = this.createNode();
	        this.expect('[');
	        var elements = [];
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else {
	                if (this.match('...')) {
	                    elements.push(this.parseBindingRestElement(params, kind));
	                    break;
	                }
	                else {
	                    elements.push(this.parsePatternWithDefault(params, kind));
	                }
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayPattern(elements));
	    };
	    Parser.prototype.parsePropertyPattern = function (params, kind) {
	        var node = this.createNode();
	        var computed = false;
	        var shorthand = false;
	        var method = false;
	        var key;
	        var value;
	        if (this.lookahead.type === 3 /* Identifier */) {
	            var keyToken = this.lookahead;
	            key = this.parseVariableIdentifier();
	            var init = this.finalize(node, new Node.Identifier(keyToken.value));
	            if (this.match('=')) {
	                params.push(keyToken);
	                shorthand = true;
	                this.nextToken();
	                var expr = this.parseAssignmentExpression();
	                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
	            }
	            else if (!this.match(':')) {
	                params.push(keyToken);
	                shorthand = true;
	                value = init;
	            }
	            else {
	                this.expect(':');
	                value = this.parsePatternWithDefault(params, kind);
	            }
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.expect(':');
	            value = this.parsePatternWithDefault(params, kind);
	        }
	        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectPattern = function (params, kind) {
	        var node = this.createNode();
	        var properties = [];
	        this.expect('{');
	        while (!this.match('}')) {
	            properties.push(this.parsePropertyPattern(params, kind));
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectPattern(properties));
	    };
	    Parser.prototype.parsePattern = function (params, kind) {
	        var pattern;
	        if (this.match('[')) {
	            pattern = this.parseArrayPattern(params, kind);
	        }
	        else if (this.match('{')) {
	            pattern = this.parseObjectPattern(params, kind);
	        }
	        else {
	            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
	                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
	            }
	            params.push(this.lookahead);
	            pattern = this.parseVariableIdentifier(kind);
	        }
	        return pattern;
	    };
	    Parser.prototype.parsePatternWithDefault = function (params, kind) {
	        var startToken = this.lookahead;
	        var pattern = this.parsePattern(params, kind);
	        if (this.match('=')) {
	            this.nextToken();
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = true;
	            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowYield = previousAllowYield;
	            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
	        }
	        return pattern;
	    };
	    // https://tc39.github.io/ecma262/#sec-variable-statement
	    Parser.prototype.parseVariableIdentifier = function (kind) {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (token.type === 4 /* Keyword */ && token.value === 'yield') {
	            if (this.context.strict) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else if (!this.context.allowYield) {
	                this.throwUnexpectedToken(token);
	            }
	        }
	        else if (token.type !== 3 /* Identifier */) {
	            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else {
	                if (this.context.strict || token.value !== 'let' || kind !== 'var') {
	                    this.throwUnexpectedToken(token);
	                }
	            }
	        }
	        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {
	            this.tolerateUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseVariableDeclaration = function (options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, 'var');
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(id.name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (this.match('=')) {
	            this.nextToken();
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
	            this.expect('=');
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseVariableDeclarationList = function (options) {
	        var opt = { inFor: options.inFor };
	        var list = [];
	        list.push(this.parseVariableDeclaration(opt));
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseVariableDeclaration(opt));
	        }
	        return list;
	    };
	    Parser.prototype.parseVariableStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('var');
	        var declarations = this.parseVariableDeclarationList({ inFor: false });
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
	    };
	    // https://tc39.github.io/ecma262/#sec-empty-statement
	    Parser.prototype.parseEmptyStatement = function () {
	        var node = this.createNode();
	        this.expect(';');
	        return this.finalize(node, new Node.EmptyStatement());
	    };
	    // https://tc39.github.io/ecma262/#sec-expression-statement
	    Parser.prototype.parseExpressionStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ExpressionStatement(expr));
	    };
	    // https://tc39.github.io/ecma262/#sec-if-statement
	    Parser.prototype.parseIfClause = function () {
	        if (this.context.strict && this.matchKeyword('function')) {
	            this.tolerateError(messages_1.Messages.StrictFunction);
	        }
	        return this.parseStatement();
	    };
	    Parser.prototype.parseIfStatement = function () {
	        var node = this.createNode();
	        var consequent;
	        var alternate = null;
	        this.expectKeyword('if');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            consequent = this.parseIfClause();
	            if (this.matchKeyword('else')) {
	                this.nextToken();
	                alternate = this.parseIfClause();
	            }
	        }
	        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
	    };
	    // https://tc39.github.io/ecma262/#sec-do-while-statement
	    Parser.prototype.parseDoWhileStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('do');
	        var previousInIteration = this.context.inIteration;
	        this.context.inIteration = true;
	        var body = this.parseStatement();
	        this.context.inIteration = previousInIteration;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	        }
	        else {
	            this.expect(')');
	            if (this.match(';')) {
	                this.nextToken();
	            }
	        }
	        return this.finalize(node, new Node.DoWhileStatement(body, test));
	    };
	    // https://tc39.github.io/ecma262/#sec-while-statement
	    Parser.prototype.parseWhileStatement = function () {
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.parseStatement();
	            this.context.inIteration = previousInIteration;
	        }
	        return this.finalize(node, new Node.WhileStatement(test, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-for-statement
	    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
	    Parser.prototype.parseForStatement = function () {
	        var init = null;
	        var test = null;
	        var update = null;
	        var forIn = true;
	        var left, right;
	        var node = this.createNode();
	        this.expectKeyword('for');
	        this.expect('(');
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else {
	            if (this.matchKeyword('var')) {
	                init = this.createNode();
	                this.nextToken();
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                var declarations = this.parseVariableDeclarationList({ inFor: true });
	                this.context.allowIn = previousAllowIn;
	                if (declarations.length === 1 && this.matchKeyword('in')) {
	                    var decl = declarations[0];
	                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
	                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
	                    }
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.expect(';');
	                }
	            }
	            else if (this.matchKeyword('const') || this.matchKeyword('let')) {
	                init = this.createNode();
	                var kind = this.nextToken().value;
	                if (!this.context.strict && this.lookahead.value === 'in') {
	                    init = this.finalize(init, new Node.Identifier(kind));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else {
	                    var previousAllowIn = this.context.allowIn;
	                    this.context.allowIn = false;
	                    var declarations = this.parseBindingList(kind, { inFor: true });
	                    this.context.allowIn = previousAllowIn;
	                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseExpression();
	                        init = null;
	                    }
	                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseAssignmentExpression();
	                        init = null;
	                        forIn = false;
	                    }
	                    else {
	                        this.consumeSemicolon();
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                    }
	                }
	            }
	            else {
	                var initStartToken = this.lookahead;
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                init = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                this.context.allowIn = previousAllowIn;
	                if (this.matchKeyword('in')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (this.matchContextualKeyword('of')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    if (this.match(',')) {
	                        var initSeq = [init];
	                        while (this.match(',')) {
	                            this.nextToken();
	                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
	                    }
	                    this.expect(';');
	                }
	            }
	        }
	        if (typeof left === 'undefined') {
	            if (!this.match(';')) {
	                test = this.parseExpression();
	            }
	            this.expect(';');
	            if (!this.match(')')) {
	                update = this.parseExpression();
	            }
	        }
	        var body;
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.isolateCoverGrammar(this.parseStatement);
	            this.context.inIteration = previousInIteration;
	        }
	        return (typeof left === 'undefined') ?
	            this.finalize(node, new Node.ForStatement(init, test, update, body)) :
	            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :
	                this.finalize(node, new Node.ForOfStatement(left, right, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-continue-statement
	    Parser.prototype.parseContinueStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('continue');
	        var label = null;
	        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
	            var id = this.parseVariableIdentifier();
	            label = id;
	            var key = '$' + id.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, id.name);
	            }
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration) {
	            this.throwError(messages_1.Messages.IllegalContinue);
	        }
	        return this.finalize(node, new Node.ContinueStatement(label));
	    };
	    // https://tc39.github.io/ecma262/#sec-break-statement
	    Parser.prototype.parseBreakStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('break');
	        var label = null;
	        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
	            var id = this.parseVariableIdentifier();
	            var key = '$' + id.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, id.name);
	            }
	            label = id;
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration && !this.context.inSwitch) {
	            this.throwError(messages_1.Messages.IllegalBreak);
	        }
	        return this.finalize(node, new Node.BreakStatement(label));
	    };
	    // https://tc39.github.io/ecma262/#sec-return-statement
	    Parser.prototype.parseReturnStatement = function () {
	        if (!this.context.inFunctionBody) {
	            this.tolerateError(messages_1.Messages.IllegalReturn);
	        }
	        var node = this.createNode();
	        this.expectKeyword('return');
	        var hasArgument = !this.match(';') && !this.match('}') &&
	            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */;
	        var argument = hasArgument ? this.parseExpression() : null;
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ReturnStatement(argument));
	    };
	    // https://tc39.github.io/ecma262/#sec-with-statement
	    Parser.prototype.parseWithStatement = function () {
	        if (this.context.strict) {
	            this.tolerateError(messages_1.Messages.StrictModeWith);
	        }
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('with');
	        this.expect('(');
	        var object = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            body = this.parseStatement();
	        }
	        return this.finalize(node, new Node.WithStatement(object, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-switch-statement
	    Parser.prototype.parseSwitchCase = function () {
	        var node = this.createNode();
	        var test;
	        if (this.matchKeyword('default')) {
	            this.nextToken();
	            test = null;
	        }
	        else {
	            this.expectKeyword('case');
	            test = this.parseExpression();
	        }
	        this.expect(':');
	        var consequent = [];
	        while (true) {
	            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
	                break;
	            }
	            consequent.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.SwitchCase(test, consequent));
	    };
	    Parser.prototype.parseSwitchStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('switch');
	        this.expect('(');
	        var discriminant = this.parseExpression();
	        this.expect(')');
	        var previousInSwitch = this.context.inSwitch;
	        this.context.inSwitch = true;
	        var cases = [];
	        var defaultFound = false;
	        this.expect('{');
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            var clause = this.parseSwitchCase();
	            if (clause.test === null) {
	                if (defaultFound) {
	                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
	                }
	                defaultFound = true;
	            }
	            cases.push(clause);
	        }
	        this.expect('}');
	        this.context.inSwitch = previousInSwitch;
	        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
	    };
	    // https://tc39.github.io/ecma262/#sec-labelled-statements
	    Parser.prototype.parseLabelledStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var statement;
	        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {
	            this.nextToken();
	            var id = expr;
	            var key = '$' + id.name;
	            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
	            }
	            this.context.labelSet[key] = true;
	            var body = void 0;
	            if (this.matchKeyword('class')) {
	                this.tolerateUnexpectedToken(this.lookahead);
	                body = this.parseClassDeclaration();
	            }
	            else if (this.matchKeyword('function')) {
	                var token = this.lookahead;
	                var declaration = this.parseFunctionDeclaration();
	                if (this.context.strict) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
	                }
	                else if (declaration.generator) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
	                }
	                body = declaration;
	            }
	            else {
	                body = this.parseStatement();
	            }
	            delete this.context.labelSet[key];
	            statement = new Node.LabeledStatement(id, body);
	        }
	        else {
	            this.consumeSemicolon();
	            statement = new Node.ExpressionStatement(expr);
	        }
	        return this.finalize(node, statement);
	    };
	    // https://tc39.github.io/ecma262/#sec-throw-statement
	    Parser.prototype.parseThrowStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('throw');
	        if (this.hasLineTerminator) {
	            this.throwError(messages_1.Messages.NewlineAfterThrow);
	        }
	        var argument = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ThrowStatement(argument));
	    };
	    // https://tc39.github.io/ecma262/#sec-try-statement
	    Parser.prototype.parseCatchClause = function () {
	        var node = this.createNode();
	        this.expectKeyword('catch');
	        this.expect('(');
	        if (this.match(')')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        var params = [];
	        var param = this.parsePattern(params);
	        var paramMap = {};
	        for (var i = 0; i < params.length; i++) {
	            var key = '$' + params[i].value;
	            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
	                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
	            }
	            paramMap[key] = true;
	        }
	        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(param.name)) {
	                this.tolerateError(messages_1.Messages.StrictCatchVariable);
	            }
	        }
	        this.expect(')');
	        var body = this.parseBlock();
	        return this.finalize(node, new Node.CatchClause(param, body));
	    };
	    Parser.prototype.parseFinallyClause = function () {
	        this.expectKeyword('finally');
	        return this.parseBlock();
	    };
	    Parser.prototype.parseTryStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('try');
	        var block = this.parseBlock();
	        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
	        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;
	        if (!handler && !finalizer) {
	            this.throwError(messages_1.Messages.NoCatchOrFinally);
	        }
	        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
	    };
	    // https://tc39.github.io/ecma262/#sec-debugger-statement
	    Parser.prototype.parseDebuggerStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('debugger');
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.DebuggerStatement());
	    };
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations
	    Parser.prototype.parseStatement = function () {
	        var statement;
	        switch (this.lookahead.type) {
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 6 /* NumericLiteral */:
	            case 8 /* StringLiteral */:
	            case 10 /* Template */:
	            case 9 /* RegularExpression */:
	                statement = this.parseExpressionStatement();
	                break;
	            case 7 /* Punctuator */:
	                var value = this.lookahead.value;
	                if (value === '{') {
	                    statement = this.parseBlock();
	                }
	                else if (value === '(') {
	                    statement = this.parseExpressionStatement();
	                }
	                else if (value === ';') {
	                    statement = this.parseEmptyStatement();
	                }
	                else {
	                    statement = this.parseExpressionStatement();
	                }
	                break;
	            case 3 /* Identifier */:
	                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
	                break;
	            case 4 /* Keyword */:
	                switch (this.lookahead.value) {
	                    case 'break':
	                        statement = this.parseBreakStatement();
	                        break;
	                    case 'continue':
	                        statement = this.parseContinueStatement();
	                        break;
	                    case 'debugger':
	                        statement = this.parseDebuggerStatement();
	                        break;
	                    case 'do':
	                        statement = this.parseDoWhileStatement();
	                        break;
	                    case 'for':
	                        statement = this.parseForStatement();
	                        break;
	                    case 'function':
	                        statement = this.parseFunctionDeclaration();
	                        break;
	                    case 'if':
	                        statement = this.parseIfStatement();
	                        break;
	                    case 'return':
	                        statement = this.parseReturnStatement();
	                        break;
	                    case 'switch':
	                        statement = this.parseSwitchStatement();
	                        break;
	                    case 'throw':
	                        statement = this.parseThrowStatement();
	                        break;
	                    case 'try':
	                        statement = this.parseTryStatement();
	                        break;
	                    case 'var':
	                        statement = this.parseVariableStatement();
	                        break;
	                    case 'while':
	                        statement = this.parseWhileStatement();
	                        break;
	                    case 'with':
	                        statement = this.parseWithStatement();
	                        break;
	                    default:
	                        statement = this.parseExpressionStatement();
	                        break;
	                }
	                break;
	            default:
	                statement = this.throwUnexpectedToken(this.lookahead);
	        }
	        return statement;
	    };
	    // https://tc39.github.io/ecma262/#sec-function-definitions
	    Parser.prototype.parseFunctionSourceElements = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var body = this.parseDirectivePrologues();
	        var previousLabelSet = this.context.labelSet;
	        var previousInIteration = this.context.inIteration;
	        var previousInSwitch = this.context.inSwitch;
	        var previousInFunctionBody = this.context.inFunctionBody;
	        this.context.labelSet = {};
	        this.context.inIteration = false;
	        this.context.inSwitch = false;
	        this.context.inFunctionBody = true;
	        while (this.lookahead.type !== 2 /* EOF */) {
	            if (this.match('}')) {
	                break;
	            }
	            body.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        this.context.labelSet = previousLabelSet;
	        this.context.inIteration = previousInIteration;
	        this.context.inSwitch = previousInSwitch;
	        this.context.inFunctionBody = previousInFunctionBody;
	        return this.finalize(node, new Node.BlockStatement(body));
	    };
	    Parser.prototype.validateParam = function (options, param, name) {
	        var key = '$' + name;
	        if (this.context.strict) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        else if (!options.firstRestricted) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            else if (this.scanner.isStrictModeReservedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictReservedWord;
	            }
	            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        /* istanbul ignore next */
	        if (typeof Object.defineProperty === 'function') {
	            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });
	        }
	        else {
	            options.paramSet[key] = true;
	        }
	    };
	    Parser.prototype.parseRestElement = function (params) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params);
	        if (this.match('=')) {
	            this.throwError(messages_1.Messages.DefaultRestParameter);
	        }
	        if (!this.match(')')) {
	            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
	        }
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseFormalParameter = function (options) {
	        var params = [];
	        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);
	        for (var i = 0; i < params.length; i++) {
	            this.validateParam(options, params[i], params[i].value);
	        }
	        options.simple = options.simple && (param instanceof Node.Identifier);
	        options.params.push(param);
	    };
	    Parser.prototype.parseFormalParameters = function (firstRestricted) {
	        var options;
	        options = {
	            simple: true,
	            params: [],
	            firstRestricted: firstRestricted
	        };
	        this.expect('(');
	        if (!this.match(')')) {
	            options.paramSet = {};
	            while (this.lookahead.type !== 2 /* EOF */) {
	                this.parseFormalParameter(options);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expect(',');
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return {
	            simple: options.simple,
	            params: options.params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.matchAsyncFunction = function () {
	        var match = this.matchContextualKeyword('async');
	        if (match) {
	            var state = this.scanner.saveState();
	            this.scanner.scanComments();
	            var next = this.scanner.lex();
	            this.scanner.restoreState(state);
	            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');
	        }
	        return match;
	    };
	    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var isAsync = this.matchContextualKeyword('async');
	        if (isAsync) {
	            this.nextToken();
	        }
	        this.expectKeyword('function');
	        var isGenerator = isAsync ? false : this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted = null;
	        if (!identifierIsOptional || !this.match('(')) {
	            var token = this.lookahead;
	            id = this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var previousAllowAwait = this.context.await;
	        var previousAllowYield = this.context.allowYield;
	        this.context.await = isAsync;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = formalParameters.simple;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        this.context.await = previousAllowAwait;
	        this.context.allowYield = previousAllowYield;
	        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :
	            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
	    };
	    Parser.prototype.parseFunctionExpression = function () {
	        var node = this.createNode();
	        var isAsync = this.matchContextualKeyword('async');
	        if (isAsync) {
	            this.nextToken();
	        }
	        this.expectKeyword('function');
	        var isGenerator = isAsync ? false : this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted;
	        var previousAllowAwait = this.context.await;
	        var previousAllowYield = this.context.allowYield;
	        this.context.await = isAsync;
	        this.context.allowYield = !isGenerator;
	        if (!this.match('(')) {
	            var token = this.lookahead;
	            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = formalParameters.simple;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        this.context.await = previousAllowAwait;
	        this.context.allowYield = previousAllowYield;
	        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :
	            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
	    };
	    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
	    Parser.prototype.parseDirective = function () {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;
	        this.consumeSemicolon();
	        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
	    };
	    Parser.prototype.parseDirectivePrologues = function () {
	        var firstRestricted = null;
	        var body = [];
	        while (true) {
	            var token = this.lookahead;
	            if (token.type !== 8 /* StringLiteral */) {
	                break;
	            }
	            var statement = this.parseDirective();
	            body.push(statement);
	            var directive = statement.directive;
	            if (typeof directive !== 'string') {
	                break;
	            }
	            if (directive === 'use strict') {
	                this.context.strict = true;
	                if (firstRestricted) {
	                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
	                }
	                if (!this.context.allowStrictDirective) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
	                }
	            }
	            else {
	                if (!firstRestricted && token.octal) {
	                    firstRestricted = token;
	                }
	            }
	        }
	        return body;
	    };
	    // https://tc39.github.io/ecma262/#sec-method-definitions
	    Parser.prototype.qualifiedPropertyName = function (token) {
	        switch (token.type) {
	            case 3 /* Identifier */:
	            case 8 /* StringLiteral */:
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 6 /* NumericLiteral */:
	            case 4 /* Keyword */:
	                return true;
	            case 7 /* Punctuator */:
	                return token.value === '[';
	            default:
	                break;
	        }
	        return false;
	    };
	    Parser.prototype.parseGetterMethod = function () {
	        var node = this.createNode();
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = false;
	        var formalParameters = this.parseFormalParameters();
	        if (formalParameters.params.length > 0) {
	            this.tolerateError(messages_1.Messages.BadGetterArity);
	        }
	        var method = this.parsePropertyMethod(formalParameters);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
	    };
	    Parser.prototype.parseSetterMethod = function () {
	        var node = this.createNode();
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = false;
	        var formalParameters = this.parseFormalParameters();
	        if (formalParameters.params.length !== 1) {
	            this.tolerateError(messages_1.Messages.BadSetterArity);
	        }
	        else if (formalParameters.params[0] instanceof Node.RestElement) {
	            this.tolerateError(messages_1.Messages.BadSetterRestParameter);
	        }
	        var method = this.parsePropertyMethod(formalParameters);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
	    };
	    Parser.prototype.parseGeneratorMethod = function () {
	        var node = this.createNode();
	        var isGenerator = true;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        this.context.allowYield = false;
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    // https://tc39.github.io/ecma262/#sec-generator-function-definitions
	    Parser.prototype.isStartOfExpression = function () {
	        var start = true;
	        var value = this.lookahead.value;
	        switch (this.lookahead.type) {
	            case 7 /* Punctuator */:
	                start = (value === '[') || (value === '(') || (value === '{') ||
	                    (value === '+') || (value === '-') ||
	                    (value === '!') || (value === '~') ||
	                    (value === '++') || (value === '--') ||
	                    (value === '/') || (value === '/='); // regular expression literal
	                break;
	            case 4 /* Keyword */:
	                start = (value === 'class') || (value === 'delete') ||
	                    (value === 'function') || (value === 'let') || (value === 'new') ||
	                    (value === 'super') || (value === 'this') || (value === 'typeof') ||
	                    (value === 'void') || (value === 'yield');
	                break;
	            default:
	                break;
	        }
	        return start;
	    };
	    Parser.prototype.parseYieldExpression = function () {
	        var node = this.createNode();
	        this.expectKeyword('yield');
	        var argument = null;
	        var delegate = false;
	        if (!this.hasLineTerminator) {
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = false;
	            delegate = this.match('*');
	            if (delegate) {
	                this.nextToken();
	                argument = this.parseAssignmentExpression();
	            }
	            else if (this.isStartOfExpression()) {
	                argument = this.parseAssignmentExpression();
	            }
	            this.context.allowYield = previousAllowYield;
	        }
	        return this.finalize(node, new Node.YieldExpression(argument, delegate));
	    };
	    // https://tc39.github.io/ecma262/#sec-class-definitions
	    Parser.prototype.parseClassElement = function (hasConstructor) {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var kind = '';
	        var key = null;
	        var value = null;
	        var computed = false;
	        var method = false;
	        var isStatic = false;
	        var isAsync = false;
	        if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            var id = key;
	            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
	                token = this.lookahead;
	                isStatic = true;
	                computed = this.match('[');
	                if (this.match('*')) {
	                    this.nextToken();
	                }
	                else {
	                    key = this.parseObjectPropertyKey();
	                }
	            }
	            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {
	                var punctuator = this.lookahead.value;
	                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {
	                    isAsync = true;
	                    token = this.lookahead;
	                    key = this.parseObjectPropertyKey();
	                    if (token.type === 3 /* Identifier */) {
	                        if (token.value === 'get' || token.value === 'set') {
	                            this.tolerateUnexpectedToken(token);
	                        }
	                        else if (token.value === 'constructor') {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
	                        }
	                    }
	                }
	            }
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === 3 /* Identifier */) {
	            if (token.value === 'get' && lookaheadPropertyKey) {
	                kind = 'get';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                this.context.allowYield = false;
	                value = this.parseGetterMethod();
	            }
	            else if (token.value === 'set' && lookaheadPropertyKey) {
	                kind = 'set';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                value = this.parseSetterMethod();
	            }
	        }
	        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        if (!kind && key && this.match('(')) {
	            kind = 'init';
	            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
	            method = true;
	        }
	        if (!kind) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        if (kind === 'init') {
	            kind = 'method';
	        }
	        if (!computed) {
	            if (isStatic && this.isPropertyKey(key, 'prototype')) {
	                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
	            }
	            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
	                if (kind !== 'method' || !method || (value && value.generator)) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
	                }
	                if (hasConstructor.value) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
	                }
	                else {
	                    hasConstructor.value = true;
	                }
	                kind = 'constructor';
	            }
	        }
	        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
	    };
	    Parser.prototype.parseClassElementList = function () {
	        var body = [];
	        var hasConstructor = { value: false };
	        this.expect('{');
	        while (!this.match('}')) {
	            if (this.match(';')) {
	                this.nextToken();
	            }
	            else {
	                body.push(this.parseClassElement(hasConstructor));
	            }
	        }
	        this.expect('}');
	        return body;
	    };
	    Parser.prototype.parseClassBody = function () {
	        var node = this.createNode();
	        var elementList = this.parseClassElementList();
	        return this.finalize(node, new Node.ClassBody(elementList));
	    };
	    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
	    };
	    Parser.prototype.parseClassExpression = function () {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
	    };
	    // https://tc39.github.io/ecma262/#sec-scripts
	    // https://tc39.github.io/ecma262/#sec-modules
	    Parser.prototype.parseModule = function () {
	        this.context.strict = true;
	        this.context.isModule = true;
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.lookahead.type !== 2 /* EOF */) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Module(body));
	    };
	    Parser.prototype.parseScript = function () {
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.lookahead.type !== 2 /* EOF */) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Script(body));
	    };
	    // https://tc39.github.io/ecma262/#sec-imports
	    Parser.prototype.parseModuleSpecifier = function () {
	        var node = this.createNode();
	        if (this.lookahead.type !== 8 /* StringLiteral */) {
	            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
	        }
	        var token = this.nextToken();
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    // import {<foo as bar>} ...;
	    Parser.prototype.parseImportSpecifier = function () {
	        var node = this.createNode();
	        var imported;
	        var local;
	        if (this.lookahead.type === 3 /* Identifier */) {
	            imported = this.parseVariableIdentifier();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	        }
	        else {
	            imported = this.parseIdentifierName();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.ImportSpecifier(local, imported));
	    };
	    // {foo, bar as bas}
	    Parser.prototype.parseNamedImports = function () {
	        this.expect('{');
	        var specifiers = [];
	        while (!this.match('}')) {
	            specifiers.push(this.parseImportSpecifier());
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return specifiers;
	    };
	    // import <foo> ...;
	    Parser.prototype.parseImportDefaultSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportDefaultSpecifier(local));
	    };
	    // import <* as foo> ...;
	    Parser.prototype.parseImportNamespaceSpecifier = function () {
	        var node = this.createNode();
	        this.expect('*');
	        if (!this.matchContextualKeyword('as')) {
	            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
	        }
	        this.nextToken();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
	    };
	    Parser.prototype.parseImportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalImportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('import');
	        var src;
	        var specifiers = [];
	        if (this.lookahead.type === 8 /* StringLiteral */) {
	            // import 'foo';
	            src = this.parseModuleSpecifier();
	        }
	        else {
	            if (this.match('{')) {
	                // import {bar}
	                specifiers = specifiers.concat(this.parseNamedImports());
	            }
	            else if (this.match('*')) {
	                // import * as foo
	                specifiers.push(this.parseImportNamespaceSpecifier());
	            }
	            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
	                // import foo
	                specifiers.push(this.parseImportDefaultSpecifier());
	                if (this.match(',')) {
	                    this.nextToken();
	                    if (this.match('*')) {
	                        // import foo, * as foo
	                        specifiers.push(this.parseImportNamespaceSpecifier());
	                    }
	                    else if (this.match('{')) {
	                        // import foo, {bar}
	                        specifiers = specifiers.concat(this.parseNamedImports());
	                    }
	                    else {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            src = this.parseModuleSpecifier();
	        }
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
	    };
	    // https://tc39.github.io/ecma262/#sec-exports
	    Parser.prototype.parseExportSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        var exported = local;
	        if (this.matchContextualKeyword('as')) {
	            this.nextToken();
	            exported = this.parseIdentifierName();
	        }
	        return this.finalize(node, new Node.ExportSpecifier(local, exported));
	    };
	    Parser.prototype.parseExportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalExportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('export');
	        var exportDeclaration;
	        if (this.matchKeyword('default')) {
	            // export default ...
	            this.nextToken();
	            if (this.matchKeyword('function')) {
	                // export default function foo () {}
	                // export default function () {}
	                var declaration = this.parseFunctionDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchKeyword('class')) {
	                // export default class foo {}
	                var declaration = this.parseClassDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchContextualKeyword('async')) {
	                // export default async function f () {}
	                // export default async function () {}
	                // export default async x => x
	                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else {
	                if (this.matchContextualKeyword('from')) {
	                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
	                }
	                // export default {};
	                // export default [];
	                // export default (1 + 2);
	                var declaration = this.match('{') ? this.parseObjectInitializer() :
	                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
	                this.consumeSemicolon();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	        }
	        else if (this.match('*')) {
	            // export * from 'foo';
	            this.nextToken();
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            var src = this.parseModuleSpecifier();
	            this.consumeSemicolon();
	            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
	        }
	        else if (this.lookahead.type === 4 /* Keyword */) {
	            // export var f = 1;
	            var declaration = void 0;
	            switch (this.lookahead.value) {
	                case 'let':
	                case 'const':
	                    declaration = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'var':
	                case 'class':
	                case 'function':
	                    declaration = this.parseStatementListItem();
	                    break;
	                default:
	                    this.throwUnexpectedToken(this.lookahead);
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else if (this.matchAsyncFunction()) {
	            var declaration = this.parseFunctionDeclaration();
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else {
	            var specifiers = [];
	            var source = null;
	            var isExportFromIdentifier = false;
	            this.expect('{');
	            while (!this.match('}')) {
	                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
	                specifiers.push(this.parseExportSpecifier());
	                if (!this.match('}')) {
	                    this.expect(',');
	                }
	            }
	            this.expect('}');
	            if (this.matchContextualKeyword('from')) {
	                // export {default} from 'foo';
	                // export {foo} from 'foo';
	                this.nextToken();
	                source = this.parseModuleSpecifier();
	                this.consumeSemicolon();
	            }
	            else if (isExportFromIdentifier) {
	                // export {default}; // missing fromClause
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            else {
	                // export {foo};
	                this.consumeSemicolon();
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
	        }
	        return exportDeclaration;
	    };
	    return Parser;
	}());
	exports.Parser = Parser;


/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";
	// Ensure the condition is true, otherwise throw an error.
	// This is only to have a better contract semantic, i.e. another safety net
	// to catch a logic error. The condition shall be fulfilled in normal case.
	// Do NOT use this to enforce a certain condition on any user input.
	Object.defineProperty(exports, "__esModule", { value: true });
	function assert(condition, message) {
	    /* istanbul ignore if */
	    if (!condition) {
	        throw new Error('ASSERT: ' + message);
	    }
	}
	exports.assert = assert;


/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";
	/* tslint:disable:max-classes-per-file */
	Object.defineProperty(exports, "__esModule", { value: true });
	var ErrorHandler = (function () {
	    function ErrorHandler() {
	        this.errors = [];
	        this.tolerant = false;
	    }
	    ErrorHandler.prototype.recordError = function (error) {
	        this.errors.push(error);
	    };
	    ErrorHandler.prototype.tolerate = function (error) {
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    ErrorHandler.prototype.constructError = function (msg, column) {
	        var error = new Error(msg);
	        try {
	            throw error;
	        }
	        catch (base) {
	            /* istanbul ignore else */
	            if (Object.create && Object.defineProperty) {
	                error = Object.create(base);
	                Object.defineProperty(error, 'column', { value: column });
	            }
	        }
	        /* istanbul ignore next */
	        return error;
	    };
	    ErrorHandler.prototype.createError = function (index, line, col, description) {
	        var msg = 'Line ' + line + ': ' + description;
	        var error = this.constructError(msg, col);
	        error.index = index;
	        error.lineNumber = line;
	        error.description = description;
	        return error;
	    };
	    ErrorHandler.prototype.throwError = function (index, line, col, description) {
	        throw this.createError(index, line, col, description);
	    };
	    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
	        var error = this.createError(index, line, col, description);
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    return ErrorHandler;
	}());
	exports.ErrorHandler = ErrorHandler;


/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// Error messages should be identical to V8.
	exports.Messages = {
	    BadGetterArity: 'Getter must not have any formal parameters',
	    BadSetterArity: 'Setter must have exactly one formal parameter',
	    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',
	    ConstructorIsAsync: 'Class constructor may not be an async method',
	    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
	    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',
	    DefaultRestParameter: 'Unexpected token =',
	    DuplicateBinding: 'Duplicate binding %0',
	    DuplicateConstructor: 'A class may only have one constructor',
	    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
	    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',
	    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',
	    IllegalBreak: 'Illegal break statement',
	    IllegalContinue: 'Illegal continue statement',
	    IllegalExportDeclaration: 'Unexpected token',
	    IllegalImportDeclaration: 'Unexpected token',
	    IllegalLanguageModeDirective: 'Illegal \'use strict\' directive in function with non-simple parameter list',
	    IllegalReturn: 'Illegal return statement',
	    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',
	    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',
	    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
	    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
	    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
	    InvalidModuleSpecifier: 'Unexpected token',
	    InvalidRegExp: 'Invalid regular expression',
	    LetInLexicalBinding: 'let is disallowed as a lexically bound name',
	    MissingFromClause: 'Unexpected token',
	    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
	    NewlineAfterThrow: 'Illegal newline after throw',
	    NoAsAfterImportNamespace: 'Unexpected token',
	    NoCatchOrFinally: 'Missing catch or finally after try',
	    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
	    Redeclaration: '%0 \'%1\' has already been declared',
	    StaticPrototype: 'Classes may not have static property named prototype',
	    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
	    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
	    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',
	    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
	    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
	    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictModeWith: 'Strict mode code may not include a with statement',
	    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
	    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
	    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
	    StrictReservedWord: 'Use of future reserved word in strict mode',
	    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
	    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
	    UnexpectedEOS: 'Unexpected end of input',
	    UnexpectedIdentifier: 'Unexpected identifier',
	    UnexpectedNumber: 'Unexpected number',
	    UnexpectedReserved: 'Unexpected reserved word',
	    UnexpectedString: 'Unexpected string',
	    UnexpectedTemplate: 'Unexpected quasi %0',
	    UnexpectedToken: 'Unexpected token %0',
	    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
	    UnknownLabel: 'Undefined label \'%0\'',
	    UnterminatedRegExp: 'Invalid regular expression: missing /'
	};


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var assert_1 = __webpack_require__(9);
	var character_1 = __webpack_require__(4);
	var messages_1 = __webpack_require__(11);
	function hexValue(ch) {
	    return '0123456789abcdef'.indexOf(ch.toLowerCase());
	}
	function octalValue(ch) {
	    return '01234567'.indexOf(ch);
	}
	var Scanner = (function () {
	    function Scanner(code, handler) {
	        this.source = code;
	        this.errorHandler = handler;
	        this.trackComment = false;
	        this.length = code.length;
	        this.index = 0;
	        this.lineNumber = (code.length > 0) ? 1 : 0;
	        this.lineStart = 0;
	        this.curlyStack = [];
	    }
	    Scanner.prototype.saveState = function () {
	        return {
	            index: this.index,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart
	        };
	    };
	    Scanner.prototype.restoreState = function (state) {
	        this.index = state.index;
	        this.lineNumber = state.lineNumber;
	        this.lineStart = state.lineStart;
	    };
	    Scanner.prototype.eof = function () {
	        return this.index >= this.length;
	    };
	    Scanner.prototype.throwUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    Scanner.prototype.tolerateUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    // https://tc39.github.io/ecma262/#sec-comments
	    Scanner.prototype.skipSingleLineComment = function (offset) {
	        var comments = [];
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - offset;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - offset
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            ++this.index;
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (this.trackComment) {
	                    loc.end = {
	                        line: this.lineNumber,
	                        column: this.index - this.lineStart - 1
	                    };
	                    var entry = {
	                        multiLine: false,
	                        slice: [start + offset, this.index - 1],
	                        range: [start, this.index - 1],
	                        loc: loc
	                    };
	                    comments.push(entry);
	                }
	                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                return comments;
	            }
	        }
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: false,
	                slice: [start + offset, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        return comments;
	    };
	    Scanner.prototype.skipMultiLineComment = function () {
	        var comments = [];
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - 2;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - 2
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                ++this.index;
	                this.lineStart = this.index;
	            }
	            else if (ch === 0x2A) {
	                // Block comment ends with '*/'.
	                if (this.source.charCodeAt(this.index + 1) === 0x2F) {
	                    this.index += 2;
	                    if (this.trackComment) {
	                        loc.end = {
	                            line: this.lineNumber,
	                            column: this.index - this.lineStart
	                        };
	                        var entry = {
	                            multiLine: true,
	                            slice: [start + 2, this.index - 2],
	                            range: [start, this.index],
	                            loc: loc
	                        };
	                        comments.push(entry);
	                    }
	                    return comments;
	                }
	                ++this.index;
	            }
	            else {
	                ++this.index;
	            }
	        }
	        // Ran off the end of the file - the whole thing is a comment
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: true,
	                slice: [start + 2, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        this.tolerateUnexpectedToken();
	        return comments;
	    };
	    Scanner.prototype.scanComments = function () {
	        var comments;
	        if (this.trackComment) {
	            comments = [];
	        }
	        var start = (this.index === 0);
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isWhiteSpace(ch)) {
	                ++this.index;
	            }
	            else if (character_1.Character.isLineTerminator(ch)) {
	                ++this.index;
	                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                start = true;
	            }
	            else if (ch === 0x2F) {
	                ch = this.source.charCodeAt(this.index + 1);
	                if (ch === 0x2F) {
	                    this.index += 2;
	                    var comment = this.skipSingleLineComment(2);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                    start = true;
	                }
	                else if (ch === 0x2A) {
	                    this.index += 2;
	                    var comment = this.skipMultiLineComment();
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (start && ch === 0x2D) {
	                // U+003E is '>'
	                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {
	                    // '-->' is a single-line comment
	                    this.index += 3;
	                    var comment = this.skipSingleLineComment(3);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (ch === 0x3C) {
	                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
	                    this.index += 4; // `<!--`
	                    var comment = this.skipSingleLineComment(4);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else {
	                break;
	            }
	        }
	        return comments;
	    };
	    // https://tc39.github.io/ecma262/#sec-future-reserved-words
	    Scanner.prototype.isFutureReservedWord = function (id) {
	        switch (id) {
	            case 'enum':
	            case 'export':
	            case 'import':
	            case 'super':
	                return true;
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.isStrictModeReservedWord = function (id) {
	        switch (id) {
	            case 'implements':
	            case 'interface':
	            case 'package':
	            case 'private':
	            case 'protected':
	            case 'public':
	            case 'static':
	            case 'yield':
	            case 'let':
	                return true;
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.isRestrictedWord = function (id) {
	        return id === 'eval' || id === 'arguments';
	    };
	    // https://tc39.github.io/ecma262/#sec-keywords
	    Scanner.prototype.isKeyword = function (id) {
	        switch (id.length) {
	            case 2:
	                return (id === 'if') || (id === 'in') || (id === 'do');
	            case 3:
	                return (id === 'var') || (id === 'for') || (id === 'new') ||
	                    (id === 'try') || (id === 'let');
	            case 4:
	                return (id === 'this') || (id === 'else') || (id === 'case') ||
	                    (id === 'void') || (id === 'with') || (id === 'enum');
	            case 5:
	                return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                    (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                    (id === 'class') || (id === 'super');
	            case 6:
	                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                    (id === 'switch') || (id === 'export') || (id === 'import');
	            case 7:
	                return (id === 'default') || (id === 'finally') || (id === 'extends');
	            case 8:
	                return (id === 'function') || (id === 'continue') || (id === 'debugger');
	            case 10:
	                return (id === 'instanceof');
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.codePointAt = function (i) {
	        var cp = this.source.charCodeAt(i);
	        if (cp >= 0xD800 && cp <= 0xDBFF) {
	            var second = this.source.charCodeAt(i + 1);
	            if (second >= 0xDC00 && second <= 0xDFFF) {
	                var first = cp;
	                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	            }
	        }
	        return cp;
	    };
	    Scanner.prototype.scanHexEscape = function (prefix) {
	        var len = (prefix === 'u') ? 4 : 2;
	        var code = 0;
	        for (var i = 0; i < len; ++i) {
	            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                code = code * 16 + hexValue(this.source[this.index++]);
	            }
	            else {
	                return null;
	            }
	        }
	        return String.fromCharCode(code);
	    };
	    Scanner.prototype.scanUnicodeCodePointEscape = function () {
	        var ch = this.source[this.index];
	        var code = 0;
	        // At least, one hex digit is required.
	        if (ch === '}') {
	            this.throwUnexpectedToken();
	        }
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
	                break;
	            }
	            code = code * 16 + hexValue(ch);
	        }
	        if (code > 0x10FFFF || ch !== '}') {
	            this.throwUnexpectedToken();
	        }
	        return character_1.Character.fromCodePoint(code);
	    };
	    Scanner.prototype.getIdentifier = function () {
	        var start = this.index++;
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (ch === 0x5C) {
	                // Blackslash (U+005C) marks Unicode escape sequence.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            else if (ch >= 0xD800 && ch < 0xDFFF) {
	                // Need to handle surrogate pairs.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            if (character_1.Character.isIdentifierPart(ch)) {
	                ++this.index;
	            }
	            else {
	                break;
	            }
	        }
	        return this.source.slice(start, this.index);
	    };
	    Scanner.prototype.getComplexIdentifier = function () {
	        var cp = this.codePointAt(this.index);
	        var id = character_1.Character.fromCodePoint(cp);
	        this.index += id.length;
	        // '\u' (U+005C, U+0075) denotes an escaped character.
	        var ch;
	        if (cp === 0x5C) {
	            if (this.source.charCodeAt(this.index) !== 0x75) {
	                this.throwUnexpectedToken();
	            }
	            ++this.index;
	            if (this.source[this.index] === '{') {
	                ++this.index;
	                ch = this.scanUnicodeCodePointEscape();
	            }
	            else {
	                ch = this.scanHexEscape('u');
	                if (ch === null || ch === '\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken();
	                }
	            }
	            id = ch;
	        }
	        while (!this.eof()) {
	            cp = this.codePointAt(this.index);
	            if (!character_1.Character.isIdentifierPart(cp)) {
	                break;
	            }
	            ch = character_1.Character.fromCodePoint(cp);
	            id += ch;
	            this.index += ch.length;
	            // '\u' (U+005C, U+0075) denotes an escaped character.
	            if (cp === 0x5C) {
	                id = id.substr(0, id.length - 1);
	                if (this.source.charCodeAt(this.index) !== 0x75) {
	                    this.throwUnexpectedToken();
	                }
	                ++this.index;
	                if (this.source[this.index] === '{') {
	                    ++this.index;
	                    ch = this.scanUnicodeCodePointEscape();
	                }
	                else {
	                    ch = this.scanHexEscape('u');
	                    if (ch === null || ch === '\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                        this.throwUnexpectedToken();
	                    }
	                }
	                id += ch;
	            }
	        }
	        return id;
	    };
	    Scanner.prototype.octalToDecimal = function (ch) {
	        // \0 is not octal escape sequence
	        var octal = (ch !== '0');
	        var code = octalValue(ch);
	        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	            octal = true;
	            code = code * 8 + octalValue(this.source[this.index++]);
	            // 3 digits are only allowed when string starts
	            // with 0, 1, 2, 3
	            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                code = code * 8 + octalValue(this.source[this.index++]);
	            }
	        }
	        return {
	            code: code,
	            octal: octal
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-names-and-keywords
	    Scanner.prototype.scanIdentifier = function () {
	        var type;
	        var start = this.index;
	        // Backslash (U+005C) starts an escaped character.
	        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();
	        // There is no keyword or literal with only one character.
	        // Thus, it must be an identifier.
	        if (id.length === 1) {
	            type = 3 /* Identifier */;
	        }
	        else if (this.isKeyword(id)) {
	            type = 4 /* Keyword */;
	        }
	        else if (id === 'null') {
	            type = 5 /* NullLiteral */;
	        }
	        else if (id === 'true' || id === 'false') {
	            type = 1 /* BooleanLiteral */;
	        }
	        else {
	            type = 3 /* Identifier */;
	        }
	        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {
	            var restore = this.index;
	            this.index = start;
	            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
	            this.index = restore;
	        }
	        return {
	            type: type,
	            value: id,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-punctuators
	    Scanner.prototype.scanPunctuator = function () {
	        var start = this.index;
	        // Check for most common single-character punctuators.
	        var str = this.source[this.index];
	        switch (str) {
	            case '(':
	            case '{':
	                if (str === '{') {
	                    this.curlyStack.push('{');
	                }
	                ++this.index;
	                break;
	            case '.':
	                ++this.index;
	                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
	                    // Spread operator: ...
	                    this.index += 2;
	                    str = '...';
	                }
	                break;
	            case '}':
	                ++this.index;
	                this.curlyStack.pop();
	                break;
	            case ')':
	            case ';':
	            case ',':
	            case '[':
	            case ']':
	            case ':':
	            case '?':
	            case '~':
	                ++this.index;
	                break;
	            default:
	                // 4-character punctuator.
	                str = this.source.substr(this.index, 4);
	                if (str === '>>>=') {
	                    this.index += 4;
	                }
	                else {
	                    // 3-character punctuators.
	                    str = str.substr(0, 3);
	                    if (str === '===' || str === '!==' || str === '>>>' ||
	                        str === '<<=' || str === '>>=' || str === '**=') {
	                        this.index += 3;
	                    }
	                    else {
	                        // 2-character punctuators.
	                        str = str.substr(0, 2);
	                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
	                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
	                            str === '++' || str === '--' || str === '<<' || str === '>>' ||
	                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
	                            str === '<=' || str === '>=' || str === '=>' || str === '**') {
	                            this.index += 2;
	                        }
	                        else {
	                            // 1-character punctuators.
	                            str = this.source[this.index];
	                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
	                                ++this.index;
	                            }
	                        }
	                    }
	                }
	        }
	        if (this.index === start) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 7 /* Punctuator */,
	            value: str,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
	    Scanner.prototype.scanHexLiteral = function (start) {
	        var num = '';
	        while (!this.eof()) {
	            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (num.length === 0) {
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt('0x' + num, 16),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.scanBinaryLiteral = function (start) {
	        var num = '';
	        var ch;
	        while (!this.eof()) {
	            ch = this.source[this.index];
	            if (ch !== '0' && ch !== '1') {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (num.length === 0) {
	            // only 0b or 0B
	            this.throwUnexpectedToken();
	        }
	        if (!this.eof()) {
	            ch = this.source.charCodeAt(this.index);
	            /* istanbul ignore else */
	            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
	                this.throwUnexpectedToken();
	            }
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt(num, 2),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.scanOctalLiteral = function (prefix, start) {
	        var num = '';
	        var octal = false;
	        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
	            octal = true;
	            num = '0' + this.source[this.index++];
	        }
	        else {
	            ++this.index;
	        }
	        while (!this.eof()) {
	            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (!octal && num.length === 0) {
	            // only 0o or 0O
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt(num, 8),
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.isImplicitOctalLiteral = function () {
	        // Implicit octal, unless there is a non-octal digit.
	        // (Annex B.1.1 on Numeric Literals)
	        for (var i = this.index + 1; i < this.length; ++i) {
	            var ch = this.source[i];
	            if (ch === '8' || ch === '9') {
	                return false;
	            }
	            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                return true;
	            }
	        }
	        return true;
	    };
	    Scanner.prototype.scanNumericLiteral = function () {
	        var start = this.index;
	        var ch = this.source[start];
	        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');
	        var num = '';
	        if (ch !== '.') {
	            num = this.source[this.index++];
	            ch = this.source[this.index];
	            // Hex number starts with '0x'.
	            // Octal number starts with '0'.
	            // Octal number in ES6 starts with '0o'.
	            // Binary number in ES6 starts with '0b'.
	            if (num === '0') {
	                if (ch === 'x' || ch === 'X') {
	                    ++this.index;
	                    return this.scanHexLiteral(start);
	                }
	                if (ch === 'b' || ch === 'B') {
	                    ++this.index;
	                    return this.scanBinaryLiteral(start);
	                }
	                if (ch === 'o' || ch === 'O') {
	                    return this.scanOctalLiteral(ch, start);
	                }
	                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                    if (this.isImplicitOctalLiteral()) {
	                        return this.scanOctalLiteral(ch, start);
	                    }
	                }
	            }
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                num += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === '.') {
	            num += this.source[this.index++];
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                num += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === 'e' || ch === 'E') {
	            num += this.source[this.index++];
	            ch = this.source[this.index];
	            if (ch === '+' || ch === '-') {
	                num += this.source[this.index++];
	            }
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                    num += this.source[this.index++];
	                }
	            }
	            else {
	                this.throwUnexpectedToken();
	            }
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseFloat(num),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-string-literals
	    Scanner.prototype.scanStringLiteral = function () {
	        var start = this.index;
	        var quote = this.source[start];
	        assert_1.assert((quote === '\'' || quote === '"'), 'String literal must starts with a quote');
	        ++this.index;
	        var octal = false;
	        var str = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === quote) {
	                quote = '';
	                break;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'u':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                str += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var unescaped_1 = this.scanHexEscape(ch);
	                                if (unescaped_1 === null) {
	                                    this.throwUnexpectedToken();
	                                }
	                                str += unescaped_1;
	                            }
	                            break;
	                        case 'x':
	                            var unescaped = this.scanHexEscape(ch);
	                            if (unescaped === null) {
	                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
	                            }
	                            str += unescaped;
	                            break;
	                        case 'n':
	                            str += '\n';
	                            break;
	                        case 'r':
	                            str += '\r';
	                            break;
	                        case 't':
	                            str += '\t';
	                            break;
	                        case 'b':
	                            str += '\b';
	                            break;
	                        case 'f':
	                            str += '\f';
	                            break;
	                        case 'v':
	                            str += '\x0B';
	                            break;
	                        case '8':
	                        case '9':
	                            str += ch;
	                            this.tolerateUnexpectedToken();
	                            break;
	                        default:
	                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                var octToDec = this.octalToDecimal(ch);
	                                octal = octToDec.octal || octal;
	                                str += String.fromCharCode(octToDec.code);
	                            }
	                            else {
	                                str += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                break;
	            }
	            else {
	                str += ch;
	            }
	        }
	        if (quote !== '') {
	            this.index = start;
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 8 /* StringLiteral */,
	            value: str,
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components
	    Scanner.prototype.scanTemplate = function () {
	        var cooked = '';
	        var terminated = false;
	        var start = this.index;
	        var head = (this.source[start] === '`');
	        var tail = false;
	        var rawOffset = 2;
	        ++this.index;
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === '`') {
	                rawOffset = 1;
	                tail = true;
	                terminated = true;
	                break;
	            }
	            else if (ch === '$') {
	                if (this.source[this.index] === '{') {
	                    this.curlyStack.push('${');
	                    ++this.index;
	                    terminated = true;
	                    break;
	                }
	                cooked += ch;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'n':
	                            cooked += '\n';
	                            break;
	                        case 'r':
	                            cooked += '\r';
	                            break;
	                        case 't':
	                            cooked += '\t';
	                            break;
	                        case 'u':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                cooked += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var restore = this.index;
	                                var unescaped_2 = this.scanHexEscape(ch);
	                                if (unescaped_2 !== null) {
	                                    cooked += unescaped_2;
	                                }
	                                else {
	                                    this.index = restore;
	                                    cooked += ch;
	                                }
	                            }
	                            break;
	                        case 'x':
	                            var unescaped = this.scanHexEscape(ch);
	                            if (unescaped === null) {
	                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
	                            }
	                            cooked += unescaped;
	                            break;
	                        case 'b':
	                            cooked += '\b';
	                            break;
	                        case 'f':
	                            cooked += '\f';
	                            break;
	                        case 'v':
	                            cooked += '\v';
	                            break;
	                        default:
	                            if (ch === '0') {
	                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                                    // Illegal: \01 \02 and so on
	                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                                }
	                                cooked += '\0';
	                            }
	                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                // Illegal: \1 \2
	                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                            }
	                            else {
	                                cooked += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.lineNumber;
	                if (ch === '\r' && this.source[this.index] === '\n') {
	                    ++this.index;
	                }
	                this.lineStart = this.index;
	                cooked += '\n';
	            }
	            else {
	                cooked += ch;
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken();
	        }
	        if (!head) {
	            this.curlyStack.pop();
	        }
	        return {
	            type: 10 /* Template */,
	            value: this.source.slice(start + 1, this.index - rawOffset),
	            cooked: cooked,
	            head: head,
	            tail: tail,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
	    Scanner.prototype.testRegExp = function (pattern, flags) {
	        // The BMP character to use as a replacement for astral symbols when
	        // translating an ES6 "u"-flagged pattern to an ES5-compatible
	        // approximation.
	        // Note: replacing with '\uFFFF' enables false positives in unlikely
	        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
	        // pattern that would not be detected by this substitution.
	        var astralSubstitute = '\uFFFF';
	        var tmp = pattern;
	        var self = this;
	        if (flags.indexOf('u') >= 0) {
	            tmp = tmp
	                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
	                var codePoint = parseInt($1 || $2, 16);
	                if (codePoint > 0x10FFFF) {
	                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	                }
	                if (codePoint <= 0xFFFF) {
	                    return String.fromCharCode(codePoint);
	                }
	                return astralSubstitute;
	            })
	                .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
	        }
	        // First, detect invalid regular expressions.
	        try {
	            RegExp(tmp);
	        }
	        catch (e) {
	            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	        }
	        // Return a regular expression object for this pattern-flag pair, or
	        // `null` in case the current environment doesn't support the flags it
	        // uses.
	        try {
	            return new RegExp(pattern, flags);
	        }
	        catch (exception) {
	            /* istanbul ignore next */
	            return null;
	        }
	    };
	    Scanner.prototype.scanRegExpBody = function () {
	        var ch = this.source[this.index];
	        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
	        var str = this.source[this.index++];
	        var classMarker = false;
	        var terminated = false;
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            str += ch;
	            if (ch === '\\') {
	                ch = this.source[this.index++];
	                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
	                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	                }
	                str += ch;
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	            }
	            else if (classMarker) {
	                if (ch === ']') {
	                    classMarker = false;
	                }
	            }
	            else {
	                if (ch === '/') {
	                    terminated = true;
	                    break;
	                }
	                else if (ch === '[') {
	                    classMarker = true;
	                }
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	        }
	        // Exclude leading and trailing slash.
	        return str.substr(1, str.length - 2);
	    };
	    Scanner.prototype.scanRegExpFlags = function () {
	        var str = '';
	        var flags = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index];
	            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                break;
	            }
	            ++this.index;
	            if (ch === '\\' && !this.eof()) {
	                ch = this.source[this.index];
	                if (ch === 'u') {
	                    ++this.index;
	                    var restore = this.index;
	                    var char = this.scanHexEscape('u');
	                    if (char !== null) {
	                        flags += char;
	                        for (str += '\\u'; restore < this.index; ++restore) {
	                            str += this.source[restore];
	                        }
	                    }
	                    else {
	                        this.index = restore;
	                        flags += 'u';
	                        str += '\\u';
	                    }
	                    this.tolerateUnexpectedToken();
	                }
	                else {
	                    str += '\\';
	                    this.tolerateUnexpectedToken();
	                }
	            }
	            else {
	                flags += ch;
	                str += ch;
	            }
	        }
	        return flags;
	    };
	    Scanner.prototype.scanRegExp = function () {
	        var start = this.index;
	        var pattern = this.scanRegExpBody();
	        var flags = this.scanRegExpFlags();
	        var value = this.testRegExp(pattern, flags);
	        return {
	            type: 9 /* RegularExpression */,
	            value: '',
	            pattern: pattern,
	            flags: flags,
	            regex: value,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.lex = function () {
	        if (this.eof()) {
	            return {
	                type: 2 /* EOF */,
	                value: '',
	                lineNumber: this.lineNumber,
	                lineStart: this.lineStart,
	                start: this.index,
	                end: this.index
	            };
	        }
	        var cp = this.source.charCodeAt(this.index);
	        if (character_1.Character.isIdentifierStart(cp)) {
	            return this.scanIdentifier();
	        }
	        // Very common: ( and ) and ;
	        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
	            return this.scanPunctuator();
	        }
	        // String literal starts with single quote (U+0027) or double quote (U+0022).
	        if (cp === 0x27 || cp === 0x22) {
	            return this.scanStringLiteral();
	        }
	        // Dot (.) U+002E can also start a floating-point number, hence the need
	        // to check the next character.
	        if (cp === 0x2E) {
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
	                return this.scanNumericLiteral();
	            }
	            return this.scanPunctuator();
	        }
	        if (character_1.Character.isDecimalDigit(cp)) {
	            return this.scanNumericLiteral();
	        }
	        // Template literals start with ` (U+0060) for template head
	        // or } (U+007D) for template middle or template tail.
	        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {
	            return this.scanTemplate();
	        }
	        // Possible identifier start in a surrogate pair.
	        if (cp >= 0xD800 && cp < 0xDFFF) {
	            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
	                return this.scanIdentifier();
	            }
	        }
	        return this.scanPunctuator();
	    };
	    return Scanner;
	}());
	exports.Scanner = Scanner;


/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TokenName = {};
	exports.TokenName[1 /* BooleanLiteral */] = 'Boolean';
	exports.TokenName[2 /* EOF */] = '<end>';
	exports.TokenName[3 /* Identifier */] = 'Identifier';
	exports.TokenName[4 /* Keyword */] = 'Keyword';
	exports.TokenName[5 /* NullLiteral */] = 'Null';
	exports.TokenName[6 /* NumericLiteral */] = 'Numeric';
	exports.TokenName[7 /* Punctuator */] = 'Punctuator';
	exports.TokenName[8 /* StringLiteral */] = 'String';
	exports.TokenName[9 /* RegularExpression */] = 'RegularExpression';
	exports.TokenName[10 /* Template */] = 'Template';


/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";
	// Generated by generate-xhtml-entities.js. DO NOT MODIFY!
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.XHTMLEntities = {
	    quot: '\u0022',
	    amp: '\u0026',
	    apos: '\u0027',
	    gt: '\u003E',
	    nbsp: '\u00A0',
	    iexcl: '\u00A1',
	    cent: '\u00A2',
	    pound: '\u00A3',
	    curren: '\u00A4',
	    yen: '\u00A5',
	    brvbar: '\u00A6',
	    sect: '\u00A7',
	    uml: '\u00A8',
	    copy: '\u00A9',
	    ordf: '\u00AA',
	    laquo: '\u00AB',
	    not: '\u00AC',
	    shy: '\u00AD',
	    reg: '\u00AE',
	    macr: '\u00AF',
	    deg: '\u00B0',
	    plusmn: '\u00B1',
	    sup2: '\u00B2',
	    sup3: '\u00B3',
	    acute: '\u00B4',
	    micro: '\u00B5',
	    para: '\u00B6',
	    middot: '\u00B7',
	    cedil: '\u00B8',
	    sup1: '\u00B9',
	    ordm: '\u00BA',
	    raquo: '\u00BB',
	    frac14: '\u00BC',
	    frac12: '\u00BD',
	    frac34: '\u00BE',
	    iquest: '\u00BF',
	    Agrave: '\u00C0',
	    Aacute: '\u00C1',
	    Acirc: '\u00C2',
	    Atilde: '\u00C3',
	    Auml: '\u00C4',
	    Aring: '\u00C5',
	    AElig: '\u00C6',
	    Ccedil: '\u00C7',
	    Egrave: '\u00C8',
	    Eacute: '\u00C9',
	    Ecirc: '\u00CA',
	    Euml: '\u00CB',
	    Igrave: '\u00CC',
	    Iacute: '\u00CD',
	    Icirc: '\u00CE',
	    Iuml: '\u00CF',
	    ETH: '\u00D0',
	    Ntilde: '\u00D1',
	    Ograve: '\u00D2',
	    Oacute: '\u00D3',
	    Ocirc: '\u00D4',
	    Otilde: '\u00D5',
	    Ouml: '\u00D6',
	    times: '\u00D7',
	    Oslash: '\u00D8',
	    Ugrave: '\u00D9',
	    Uacute: '\u00DA',
	    Ucirc: '\u00DB',
	    Uuml: '\u00DC',
	    Yacute: '\u00DD',
	    THORN: '\u00DE',
	    szlig: '\u00DF',
	    agrave: '\u00E0',
	    aacute: '\u00E1',
	    acirc: '\u00E2',
	    atilde: '\u00E3',
	    auml: '\u00E4',
	    aring: '\u00E5',
	    aelig: '\u00E6',
	    ccedil: '\u00E7',
	    egrave: '\u00E8',
	    eacute: '\u00E9',
	    ecirc: '\u00EA',
	    euml: '\u00EB',
	    igrave: '\u00EC',
	    iacute: '\u00ED',
	    icirc: '\u00EE',
	    iuml: '\u00EF',
	    eth: '\u00F0',
	    ntilde: '\u00F1',
	    ograve: '\u00F2',
	    oacute: '\u00F3',
	    ocirc: '\u00F4',
	    otilde: '\u00F5',
	    ouml: '\u00F6',
	    divide: '\u00F7',
	    oslash: '\u00F8',
	    ugrave: '\u00F9',
	    uacute: '\u00FA',
	    ucirc: '\u00FB',
	    uuml: '\u00FC',
	    yacute: '\u00FD',
	    thorn: '\u00FE',
	    yuml: '\u00FF',
	    OElig: '\u0152',
	    oelig: '\u0153',
	    Scaron: '\u0160',
	    scaron: '\u0161',
	    Yuml: '\u0178',
	    fnof: '\u0192',
	    circ: '\u02C6',
	    tilde: '\u02DC',
	    Alpha: '\u0391',
	    Beta: '\u0392',
	    Gamma: '\u0393',
	    Delta: '\u0394',
	    Epsilon: '\u0395',
	    Zeta: '\u0396',
	    Eta: '\u0397',
	    Theta: '\u0398',
	    Iota: '\u0399',
	    Kappa: '\u039A',
	    Lambda: '\u039B',
	    Mu: '\u039C',
	    Nu: '\u039D',
	    Xi: '\u039E',
	    Omicron: '\u039F',
	    Pi: '\u03A0',
	    Rho: '\u03A1',
	    Sigma: '\u03A3',
	    Tau: '\u03A4',
	    Upsilon: '\u03A5',
	    Phi: '\u03A6',
	    Chi: '\u03A7',
	    Psi: '\u03A8',
	    Omega: '\u03A9',
	    alpha: '\u03B1',
	    beta: '\u03B2',
	    gamma: '\u03B3',
	    delta: '\u03B4',
	    epsilon: '\u03B5',
	    zeta: '\u03B6',
	    eta: '\u03B7',
	    theta: '\u03B8',
	    iota: '\u03B9',
	    kappa: '\u03BA',
	    lambda: '\u03BB',
	    mu: '\u03BC',
	    nu: '\u03BD',
	    xi: '\u03BE',
	    omicron: '\u03BF',
	    pi: '\u03C0',
	    rho: '\u03C1',
	    sigmaf: '\u03C2',
	    sigma: '\u03C3',
	    tau: '\u03C4',
	    upsilon: '\u03C5',
	    phi: '\u03C6',
	    chi: '\u03C7',
	    psi: '\u03C8',
	    omega: '\u03C9',
	    thetasym: '\u03D1',
	    upsih: '\u03D2',
	    piv: '\u03D6',
	    ensp: '\u2002',
	    emsp: '\u2003',
	    thinsp: '\u2009',
	    zwnj: '\u200C',
	    zwj: '\u200D',
	    lrm: '\u200E',
	    rlm: '\u200F',
	    ndash: '\u2013',
	    mdash: '\u2014',
	    lsquo: '\u2018',
	    rsquo: '\u2019',
	    sbquo: '\u201A',
	    ldquo: '\u201C',
	    rdquo: '\u201D',
	    bdquo: '\u201E',
	    dagger: '\u2020',
	    Dagger: '\u2021',
	    bull: '\u2022',
	    hellip: '\u2026',
	    permil: '\u2030',
	    prime: '\u2032',
	    Prime: '\u2033',
	    lsaquo: '\u2039',
	    rsaquo: '\u203A',
	    oline: '\u203E',
	    frasl: '\u2044',
	    euro: '\u20AC',
	    image: '\u2111',
	    weierp: '\u2118',
	    real: '\u211C',
	    trade: '\u2122',
	    alefsym: '\u2135',
	    larr: '\u2190',
	    uarr: '\u2191',
	    rarr: '\u2192',
	    darr: '\u2193',
	    harr: '\u2194',
	    crarr: '\u21B5',
	    lArr: '\u21D0',
	    uArr: '\u21D1',
	    rArr: '\u21D2',
	    dArr: '\u21D3',
	    hArr: '\u21D4',
	    forall: '\u2200',
	    part: '\u2202',
	    exist: '\u2203',
	    empty: '\u2205',
	    nabla: '\u2207',
	    isin: '\u2208',
	    notin: '\u2209',
	    ni: '\u220B',
	    prod: '\u220F',
	    sum: '\u2211',
	    minus: '\u2212',
	    lowast: '\u2217',
	    radic: '\u221A',
	    prop: '\u221D',
	    infin: '\u221E',
	    ang: '\u2220',
	    and: '\u2227',
	    or: '\u2228',
	    cap: '\u2229',
	    cup: '\u222A',
	    int: '\u222B',
	    there4: '\u2234',
	    sim: '\u223C',
	    cong: '\u2245',
	    asymp: '\u2248',
	    ne: '\u2260',
	    equiv: '\u2261',
	    le: '\u2264',
	    ge: '\u2265',
	    sub: '\u2282',
	    sup: '\u2283',
	    nsub: '\u2284',
	    sube: '\u2286',
	    supe: '\u2287',
	    oplus: '\u2295',
	    otimes: '\u2297',
	    perp: '\u22A5',
	    sdot: '\u22C5',
	    lceil: '\u2308',
	    rceil: '\u2309',
	    lfloor: '\u230A',
	    rfloor: '\u230B',
	    loz: '\u25CA',
	    spades: '\u2660',
	    clubs: '\u2663',
	    hearts: '\u2665',
	    diams: '\u2666',
	    lang: '\u27E8',
	    rang: '\u27E9'
	};


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var error_handler_1 = __webpack_require__(10);
	var scanner_1 = __webpack_require__(12);
	var token_1 = __webpack_require__(13);
	var Reader = (function () {
	    function Reader() {
	        this.values = [];
	        this.curly = this.paren = -1;
	    }
	    // A function following one of those tokens is an expression.
	    Reader.prototype.beforeFunctionExpression = function (t) {
	        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
	            'return', 'case', 'delete', 'throw', 'void',
	            // assignment operators
	            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',
	            '&=', '|=', '^=', ',',
	            // binary/unary operators
	            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
	            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
	            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
	    };
	    // Determine if forward slash (/) is an operator or part of a regular expression
	    // https://github.com/mozilla/sweet.js/wiki/design
	    Reader.prototype.isRegexStart = function () {
	        var previous = this.values[this.values.length - 1];
	        var regex = (previous !== null);
	        switch (previous) {
	            case 'this':
	            case ']':
	                regex = false;
	                break;
	            case ')':
	                var keyword = this.values[this.paren - 1];
	                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');
	                break;
	            case '}':
	                // Dividing a function by anything makes little sense,
	                // but we have to check for that.
	                regex = false;
	                if (this.values[this.curly - 3] === 'function') {
	                    // Anonymous function, e.g. function(){} /42
	                    var check = this.values[this.curly - 4];
	                    regex = check ? !this.beforeFunctionExpression(check) : false;
	                }
	                else if (this.values[this.curly - 4] === 'function') {
	                    // Named function, e.g. function f(){} /42/
	                    var check = this.values[this.curly - 5];
	                    regex = check ? !this.beforeFunctionExpression(check) : true;
	                }
	                break;
	            default:
	                break;
	        }
	        return regex;
	    };
	    Reader.prototype.push = function (token) {
	        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {
	            if (token.value === '{') {
	                this.curly = this.values.length;
	            }
	            else if (token.value === '(') {
	                this.paren = this.values.length;
	            }
	            this.values.push(token.value);
	        }
	        else {
	            this.values.push(null);
	        }
	    };
	    return Reader;
	}());
	var Tokenizer = (function () {
	    function Tokenizer(code, config) {
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;
	        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;
	        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;
	        this.buffer = [];
	        this.reader = new Reader();
	    }
	    Tokenizer.prototype.errors = function () {
	        return this.errorHandler.errors;
	    };
	    Tokenizer.prototype.getNextToken = function () {
	        if (this.buffer.length === 0) {
	            var comments = this.scanner.scanComments();
	            if (this.scanner.trackComment) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
	                    var comment = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: value
	                    };
	                    if (this.trackRange) {
	                        comment.range = e.range;
	                    }
	                    if (this.trackLoc) {
	                        comment.loc = e.loc;
	                    }
	                    this.buffer.push(comment);
	                }
	            }
	            if (!this.scanner.eof()) {
	                var loc = void 0;
	                if (this.trackLoc) {
	                    loc = {
	                        start: {
	                            line: this.scanner.lineNumber,
	                            column: this.scanner.index - this.scanner.lineStart
	                        },
	                        end: {}
	                    };
	                }
	                var startRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();
	                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
	                this.reader.push(token);
	                var entry = {
	                    type: token_1.TokenName[token.type],
	                    value: this.scanner.source.slice(token.start, token.end)
	                };
	                if (this.trackRange) {
	                    entry.range = [token.start, token.end];
	                }
	                if (this.trackLoc) {
	                    loc.end = {
	                        line: this.scanner.lineNumber,
	                        column: this.scanner.index - this.scanner.lineStart
	                    };
	                    entry.loc = loc;
	                }
	                if (token.type === 9 /* RegularExpression */) {
	                    var pattern = token.pattern;
	                    var flags = token.flags;
	                    entry.regex = { pattern: pattern, flags: flags };
	                }
	                this.buffer.push(entry);
	            }
	        }
	        return this.buffer.shift();
	    };
	    return Tokenizer;
	}());
	exports.Tokenizer = Tokenizer;


/***/ }
/******/ ])
});
;
},{}],33:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.makeParser = makeParser;
exports.makeUnparser = makeUnparser;

var _esprima = require("esprima");

var esprima = _interopRequireWildcard(_esprima);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function modifier(ast) {
    if (ast.body.length !== 2) return null;
    if (ast.body[0].type !== "ExpressionStatement") return null;

    if (ast.body[0].expression.type === "CallExpression" && ast.body[0].expression.callee.type === "Identifier") {
        return [{
            name: ast.body[0].expression.callee.name,
            params: ast.body[0].expression.arguments.map(function (x) {
                return x.name;
            })
        }, ast.body[1]];
    }

    if (ast.body[0].expression.type !== "Identifier") return null;
    return [ast.body[0].expression.name, ast.body[1]];
}

function makeParser(jssemant) {
    return function parseES6(program, macros) {
        var ast = esprima.parse(program);

        var mod = modifier(ast);

        if (ast.body.length === 1) {
            var result = parseNode(ast.body[0], macros);
            if (result === null) {
                return fail("Cannot parse program.", program);
            }

            return result;
        } else if (mod !== null) {
            var _mod = _slicedToArray(mod, 2),
                modName = _mod[0],
                node = _mod[1];

            var _result = parseNode(node, macros);
            if (_result === null) {
                return fail("Cannot parse node.", program);
            }

            if (modName === "__unlimited") {
                _result.__meta = new jssemant.meta.Meta({
                    toolbox: jssemant.meta.ToolboxMeta({
                        unlimited: true
                    })
                });
            } else if (modName === "__targetable") {
                _result.__meta = new jssemant.meta.Meta({
                    toolbox: jssemant.meta.ToolboxMeta({
                        targetable: true
                    })
                });
            } else if (modName === "__argumentAnnotated") {
                _result.body = jssemant.missing();
            } else if (modName.name === "__argumentAnnotated") {
                _result.params = modName.params;
            } else {
                return fail("Unrecognized expression modifier " + modName, program);
            }

            return _result;
        } else {
            return fail("Cannot parse multi-statement programs at the moment.", program);
        }
    };

    function parseNode(node, macros) {
        switch (node.type) {
            case "ExpressionStatement":
                return parseNode(node.expression, macros);

            case "ReturnStatement":
                return parseNode(node.argument, macros);

            case "BlockStatement":
                {
                    if (node.body.length !== 1) {
                        return fail("Cannot parse multi-statement programs.", node);
                    }
                    return parseNode(node.body[0], macros);
                }

            case "Identifier":
                {
                    if (node.name === "_") return jssemant.missing();

                    if (node.name === "__defineAttach") return jssemant.defineAttach();

                    // Each macro is a thunk
                    var macroName = jssemant.parser.templatizeName(node.name);
                    if (macros && macros[macroName]) return macros[macroName]();

                    if (node.name === "xx") {
                        return jssemant.vtuple([jssemant.lambdaVar("x"), jssemant.lambdaVar("x")]);
                    } else if (node.name === "xxx") {
                        return jssemant.vtuple([jssemant.lambdaVar("x"), jssemant.lambdaVar("x"), jssemant.lambdaVar("x")]);
                    } else if (node.name.slice(0, 9) === "__variant") {
                        var _node$name$slice$spli = node.name.slice(10).split("_"),
                            _node$name$slice$spli2 = _slicedToArray(_node$name$slice$spli, 2),
                            variant = _node$name$slice$spli2[0],
                            value = _node$name$slice$spli2[1];

                        if (!variant || !value) {
                            throw "Invalid dynamic variant " + node.name;
                        }

                        return jssemant.dynamicVariant(variant, value);
                    }

                    return jssemant.lambdaVar(macroName);
                }

            case "Literal":
                {
                    if (typeof node.value === "number") return jssemant.number(node.value);
                    if (typeof node.value === "boolean") return jssemant.bool(node.value);

                    if (node.value === "star" || node.value === "circle" || node.value === "triangle" || node.value === "rect") {
                        return jssemant.symbol(node.value);
                    }

                    return fail("parsers.es6: Unrecognized value " + node.value, node);
                }

            case "ArrowFunctionExpression":
                {
                    if (node.params.length === 1 && node.params[0].type === "Identifier") {
                        // Implement capture of bindings
                        var argName = node.params[0].name;
                        var newMacros = {};
                        newMacros[argName] = function () {
                            return jssemant.lambdaVar(argName);
                        };
                        var body = parseNode(node.body, Object.assign(macros, newMacros));
                        return jssemant.lambda(jssemant.lambdaArg(argName), body);
                    }
                    return fail("Lambda expessions with more than one input are currently undefined.", node);
                }

            case "BinaryExpression":
                // TODO: need ExprManager
                return jssemant.binop(parseNode(node.left, macros), jssemant.op(node.operator), parseNode(node.right, macros));

            case "CallExpression":
                {
                    if (node.callee.type === "Identifier" && node.callee.name === "__tests") {
                        var testCases = node.arguments.map(function (arg) {
                            return parseNode(arg, macros);
                        });
                        // TODO: better way to figure out name
                        var name = node.arguments[0].type === "CallExpression" ? node.arguments[0].callee.name : "f";
                        return jssemant.lambda(jssemant.lambdaArg(name, true), jssemant.vtuple(testCases));
                    }

                    if (node.arguments.length === 0) {
                        return fail("Call expressions with zero arguments are currently unsupported", node);
                    }

                    // If the thunk can take arguments (i.e. it's a reference-with-holes), use that
                    if (macros && node.callee.type === "Identifier" && macros[node.callee.name] && macros[node.callee.name].takesArgs) {
                        return macros[node.callee.name].apply(macros, _toConsumableArray(node.arguments.map(function (n) {
                            return parseNode(n, macros);
                        })));
                    }

                    var result = jssemant.apply(parseNode(node.callee, macros), parseNode(node.arguments[0], macros));

                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = node.arguments.slice(1)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var arg = _step.value;

                            result = jssemant.apply(result, parseNode(arg, macros));
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    return result;
                }

            case "ConditionalExpression":
                {
                    return jssemant.conditional(parseNode(node.test, macros), parseNode(node.consequent, macros), parseNode(node.alternate, macros));
                }

            case "FunctionDeclaration":
                {
                    var _name = jssemant.parser.templatizeName(node.id.name);
                    if (node.params.length === 0) {
                        return jssemant.define(_name, [], parseNode(node.body, macros));
                    }

                    var _result2 = parseNode(node.body, macros);
                    var args = [];
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                        for (var _iterator2 = node.params.slice().reverse()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var _arg = _step2.value;

                            var _argName = jssemant.parser.templatizeName(_arg.name);
                            args.push(_argName);
                            _result2 = jssemant.lambda(jssemant.lambdaArg(_argName), _result2);
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }

                    args.reverse();
                    return jssemant.define(_name, args, _result2);
                }

            case "VariableDeclaration":
                {
                    if (node.kind !== "let") {
                        return fail("parsers.es6: Unrecognized '" + node.kind + "' declaration", node);
                    } else if (node.declarations.length !== 1) {
                        return fail("parsers.es6: Only declaring 1 item at a time is supported", node);
                    }

                    var _name2 = jssemant.parser.templatizeName(node.declarations[0].id.name);
                    var _body = parseNode(node.declarations[0].init, macros);

                    return jssemant.define(_name2, [], _body);
                }

            default:
                return fail("parsers.es6: Unrecognized ES6 node type " + node.type, node);
        }
    }
}

function makeUnparser(jssemant) {
    var unparseES6 = function unparseES6(node) {
        switch (node.type) {
            case "missing":
                {
                    return "_";
                }
            case "symbol":
                {
                    return "\"" + node.name + "\"";
                }
            case "lambda":
                {
                    if (node.body.type === "vtuple") {
                        if (node.body.child0.type === "lambdaVar") {
                            // Unparse replicator block
                            var replicator = [];
                            for (var i = 0; i < node.body.numChildren; i++) {
                                replicator.push(node.body.child0.name);
                            }
                            return "(" + unparseES6(node.arg) + ") => " + replicator.join("");
                        } else {
                            var cases = [];
                            for (var _i = 0; _i < node.body.numChildren; _i++) {
                                cases.push(unparseES6(node.body["child" + _i]));
                            }
                            return "__tests(" + cases.join(", ") + ")";
                        }
                    }
                    return "(" + unparseES6(node.arg) + ") => " + unparseES6(node.body);
                }
            case "reference":
                {
                    if (node.params && node.params.some(function (name) {
                        return node["arg_" + name].type !== "missing";
                    })) {
                        var args = node.params.map(function (name) {
                            return unparseES6(node["arg_" + name]);
                        }).join(", ");
                        return node.name + "(" + args + ")";
                    }
                    return "" + node.name;
                }
            case "lambdaArg":
            case "lambdaVar":
                {
                    return "" + node.name;
                }
            case "binop":
                {
                    return "(" + unparseES6(node.left) + ") " + node.op.name + " (" + unparseES6(node.right) + ")";
                }
            case "apply":
                {
                    return "(" + unparseES6(node.callee) + ")(" + unparseES6(node.argument) + ")";
                }
            case "number":
                {
                    return "" + node.value;
                }
            case "bool":
                {
                    return "" + node.value;
                }
            case "dynamicVariant":
                {
                    return "__variant_" + node.variant + "_" + node.value;
                }
            case "conditional":
                {
                    return "(" + unparseES6(node.condition) + ") ? (" + unparseES6(node.positive) + ") : (" + unparseES6(node.negative) + ")";
                }
            case "define":
                {
                    // Make sure we accurately capture what exactly the user
                    // defined, in a way that can be re-parsed. We don't use
                    // the params, even if present. This avoids situations
                    // like the following: the definition is annotated with
                    // the argument name "x", but has no body. The user
                    // instead places (y) => y.
                    var _args = "";
                    var body = node.body;
                    return "function " + node.name + "(" + _args + ") { return " + unparseES6(body) + "; }";
                }
            case "defineAttach":
                {
                    // TODO: don't hardcode this
                    if (node.notch0) {
                        return "__defineAttach(" + unparseES6(node.notch0) + ")";
                    }
                    return "__defineAttach";
                }
            default:
                console.error("unparsers.es6: Unrecognized ES6 node type " + node.type, node);
                return null;
        }
    };
    return unparseES6;
}

function fail(message, node) {
    console.warn(message, node);
    throw { message: message, node: node };
}
},{"esprima":74}],75:[function(require,module,exports) {
var global = (1,eval)("this");
(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(["module"], factory);
	} else if (typeof exports !== "undefined") {
		factory(module);
	} else {
		var mod = {
			exports: {}
		};
		factory(mod);
		global.FileSaver = mod.exports;
	}
})(this, function (module) {
	"use strict";

	/* FileSaver.js
  * A saveAs() FileSaver implementation.
  * 1.3.2
  * 2016-06-16 18:25:19
  *
  * By Eli Grey, http://eligrey.com
  * License: MIT
  *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
  */

	/*global self */
	/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

	/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

	var saveAs = saveAs || function (view) {
		"use strict";
		// IE <10 is explicitly unsupported

		if (typeof view === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
			return;
		}
		var doc = view.document
		// only get URL when necessary in case Blob.js hasn't overridden it yet
		,
		    get_URL = function get_URL() {
			return view.URL || view.webkitURL || view;
		},
		    save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a"),
		    can_use_save_link = "download" in save_link,
		    click = function click(node) {
			var event = new MouseEvent("click");
			node.dispatchEvent(event);
		},
		    is_safari = /constructor/i.test(view.HTMLElement) || view.safari,
		    is_chrome_ios = /CriOS\/[\d]+/.test(navigator.userAgent),
		    throw_outside = function throw_outside(ex) {
			(view.setImmediate || view.setTimeout)(function () {
				throw ex;
			}, 0);
		},
		    force_saveable_type = "application/octet-stream"
		// the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
		,
		    arbitrary_revoke_timeout = 1000 * 40 // in ms
		,
		    revoke = function revoke(file) {
			var revoker = function revoker() {
				if (typeof file === "string") {
					// file is an object URL
					get_URL().revokeObjectURL(file);
				} else {
					// file is a File
					file.remove();
				}
			};
			setTimeout(revoker, arbitrary_revoke_timeout);
		},
		    dispatch = function dispatch(filesaver, event_types, event) {
			event_types = [].concat(event_types);
			var i = event_types.length;
			while (i--) {
				var listener = filesaver["on" + event_types[i]];
				if (typeof listener === "function") {
					try {
						listener.call(filesaver, event || filesaver);
					} catch (ex) {
						throw_outside(ex);
					}
				}
			}
		},
		    auto_bom = function auto_bom(blob) {
			// prepend BOM for UTF-8 XML and text/* types (including HTML)
			// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
			if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
				return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type });
			}
			return blob;
		},
		    FileSaver = function FileSaver(blob, name, no_auto_bom) {
			if (!no_auto_bom) {
				blob = auto_bom(blob);
			}
			// First try a.download, then web filesystem, then object URLs
			var filesaver = this,
			    type = blob.type,
			    force = type === force_saveable_type,
			    object_url,
			    dispatch_all = function dispatch_all() {
				dispatch(filesaver, "writestart progress write writeend".split(" "));
			}
			// on any filesys errors revert to saving with object URLs
			,
			    fs_error = function fs_error() {
				if ((is_chrome_ios || force && is_safari) && view.FileReader) {
					// Safari doesn't allow downloading of blob urls
					var reader = new FileReader();
					reader.onloadend = function () {
						var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
						var popup = view.open(url, '_blank');
						if (!popup) view.location.href = url;
						url = undefined; // release reference before dispatching
						filesaver.readyState = filesaver.DONE;
						dispatch_all();
					};
					reader.readAsDataURL(blob);
					filesaver.readyState = filesaver.INIT;
					return;
				}
				// don't create more object URLs than needed
				if (!object_url) {
					object_url = get_URL().createObjectURL(blob);
				}
				if (force) {
					view.location.href = object_url;
				} else {
					var opened = view.open(object_url, "_blank");
					if (!opened) {
						// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
						view.location.href = object_url;
					}
				}
				filesaver.readyState = filesaver.DONE;
				dispatch_all();
				revoke(object_url);
			};
			filesaver.readyState = filesaver.INIT;

			if (can_use_save_link) {
				object_url = get_URL().createObjectURL(blob);
				setTimeout(function () {
					save_link.href = object_url;
					save_link.download = name;
					click(save_link);
					dispatch_all();
					revoke(object_url);
					filesaver.readyState = filesaver.DONE;
				});
				return;
			}

			fs_error();
		},
		    FS_proto = FileSaver.prototype,
		    saveAs = function saveAs(blob, name, no_auto_bom) {
			return new FileSaver(blob, name || blob.name || "download", no_auto_bom);
		};
		// IE 10+ (native saveAs)
		if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
			return function (blob, name, no_auto_bom) {
				name = name || blob.name || "download";

				if (!no_auto_bom) {
					blob = auto_bom(blob);
				}
				return navigator.msSaveOrOpenBlob(blob, name);
			};
		}

		FS_proto.abort = function () {};
		FS_proto.readyState = FS_proto.INIT = 0;
		FS_proto.WRITING = 1;
		FS_proto.DONE = 2;

		FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;

		return saveAs;
	}(typeof self !== "undefined" && self || typeof window !== "undefined" && window || undefined.content);
	// `self` is undefined in Firefox for Android content script context
	// while `this` is nsIContentFrameMessageManager
	// with an attribute `content` that corresponds to the window

	if (typeof module !== "undefined" && module.exports) {
		module.exports.saveAs = saveAs;
	} else if (typeof define !== "undefined" && define !== null && define.amd !== null) {
		define("FileSaver.js", function () {
			return saveAs;
		});
	}
});
},{}],15:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DEVELOPMENT_BUILD = exports.VICTORY_LEVEL_ID = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* TODO:
ser ID tracking: sync with GDIAC server

pt-out

tatic logging: events are serialized to localStorage, and can be
downloaded as a blob


var _fileSaver = require("file-saver");

var _fileSaver2 = _interopRequireDefault(_fileSaver);

var _level = require("../game/level");

var level = _interopRequireWildcard(_level);

var _action = require("../reducer/action");

var action = _interopRequireWildcard(_action);

var _undo = require("../reducer/undo");

var undoAction = _interopRequireWildcard(_undo);

var _ajax = require("../util/ajax");

var ajax = _interopRequireWildcard(_ajax);

var _random = require("../util/random");

var random = _interopRequireWildcard(_random);

var _version = require("../version");

var _version2 = _interopRequireDefault(_version);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GAME_ID = 7017019;
var IS_LOCAL = window.location.hostname === "localhost" || window.location.hostname === "127.0.0.1";

var REMOTE_LOGGER_URL = "https://gdiac.cs.cornell.edu/research_games/php/reduct/";
var LOCAL_LOGGER_URL = "//localhost:3333";
var URLS = {
    PAGE_LOAD: "page_load.php",
    QUEST_START: "player_quest.php",
    QUEST_END: "player_quest_end.php",
    ACTION: "player_action.php"
};

var VICTORY_LEVEL_ID = exports.VICTORY_LEVEL_ID = -1;

var params = new URL(window.location).searchParams;
var DEVELOPMENT_BUILD = exports.DEVELOPMENT_BUILD = typeof params.get("nodev") !== "string" && (typeof params.get("dev") === "string" || "development" !== "production");

var Logger = function () {
    function Logger() {
        var _this = this;

        _classCallCheck(this, Logger);

        this.resetConfig();
        this.loadConfig();

        this.info("reduct-redux v" + _version2.default + " (debug: " + DEVELOPMENT_BUILD + ")");
        this.info("Environment: " + "development");
        this.config("debug", DEVELOPMENT_BUILD);

        // GDIAC server variables
        this.currentUserId = null;
        this.currentSessionId = null;
        this.currentTaskId = null;
        this.dynamicTaskId = null;
        this.taskSequenceId = 0;
        this.actionSequenceId = 1;
        this.isOfflineSession = false;

        this.loadState();

        this.staticLog = [];

        if (this.config("static")) {
            // Before closing page, save the static log
            window.onbeforeunload = function () {
                window.localStorage["static_log"] = JSON.stringify(_this.staticLog);
            };

            // Deserialize static log
            if (window.localStorage["static_log"]) {
                this.staticLog = JSON.parse(window.localStorage["static_log"]);
                this.info("Loaded prior play data from localStorage.");
            }
        }

        this.VICTORY_LEVEL_ID = VICTORY_LEVEL_ID;
    }

    _createClass(Logger, [{
        key: "toggle",
        value: function toggle() {
            return this.config("enabled", !this.config("enabled"));
        }
    }, {
        key: "clearStaticLog",
        value: function clearStaticLog() {
            delete window.localStorage["static_log"];
            this.staticLog = [];
            console.log("Cleared prior play data from localStorage.");
        }
    }, {
        key: "startSession",
        value: function startSession() {
            var _this2 = this;

            if (!this.enabled) {
                this.info("Starting session with no logging.");
                return Promise.resolve();
            }

            if (this.currentUserId === null) {
                this.currentUserId = random.getRandString(40);
            }
            this.currentSessionId = random.getRandString(36);

            var params = this.makeBaseParams();
            params.user_id = this.currentUserId;
            params.session_id = this.currentSessionId;

            this.info("Starting " + (this.config("offline") ? "offline" : "online") + " session with user ID " + this.currentUserId + ".");

            var offline = this.startOfflineSession(params);
            if (this.config("offline")) {
                return offline;
            }

            return ajax.jsonp(this.getUrl("PAGE_LOAD"), params).then(function (response) {
                // TODO: also accept server UID?
                _this2.currentSessionId = response.session_id || _this2.currentSessionId;
                _this2.info("Starting offline session with user ID " + _this2.currentUserId + ".");
                _this2.saveState();

                return {
                    user_id: _this2.currentUserId,
                    session_id: _this2.currentSessionid
                };
            }).catch(function () {
                return offline;
            });
        }
    }, {
        key: "startTask",
        value: function startTask(taskId) {
            var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            this.debug("Start task: " + taskId + "%c " + JSON.stringify(data));

            if (!this.enabled) {
                return Promise.resolve();
            }

            if (!this.isSessionStarted) {
                this.warn("@ Logging#startTask: unknown user ID or session ID!");
                return Promise.reject();
            }
            if (this.isTaskStarted) {
                this.warn("@ Logging#startTask: task " + this.currentTaskId + " already running!");
                return Promise.reject();
            }

            this.info("Starting task " + taskId + " (sequence " + this.taskSequenceId + ").");
            this.actionSequenceId = 1;
            this.currentTaskId = taskId;
            // TODO: validate that the server echoes our task ID
            this.dynamicTaskId = Date.now();

            var params = this.makeSessionParams();
            params.quest_id = taskId;
            if (data) params.quest_detail = JSON.stringify(data);

            this.logStatic("startTask", params, false);
            if (this.config("offline")) {
                return Promise.resolve();
            }
            // Don't wait for server response (especially since we're
            // generating our own task ID)
            ajax.jsonp(this.getUrl("QUEST_START"), params).catch(function () {
                return null;
            });
            return Promise.resolve();
        }
    }, {
        key: "endTask",
        value: function endTask(taskId) {
            if (!this.enabled) {
                return Promise.resolve();
            }

            if (!this.isTaskStarted) {
                this.warn("@ Logging#endTask: no task was begun.");
                return Promise.reject();
            }

            this.info("Ending task " + taskId + " (sequence " + this.taskSequenceId + ").");

            var params = this.makeSessionParams();
            params.quest_id = taskId;

            this.currentTaskId = null;
            this.dynamicTaskId = null;
            this.actionSequenceId = 1;
            this.taskSequenceId++;

            this.logStatic("endTask", params, false);
            if (this.config("offline")) {
                return Promise.resolve();
            }
            ajax.jsonp(this.getUrl("QUEST_END"), params).catch(function () {
                return null;
            });
            return Promise.resolve();
        }
    }, {
        key: "transitionToTask",
        value: function transitionToTask(taskId) {
            var _this3 = this;

            var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (this.isTaskStarted) {
                return this.endTask(this.currentTaskId).finally(function () {
                    return _this3.startTask(taskId, data);
                });
            }
            return this.startTask(taskId, data);
        }
    }, {
        key: "log",
        value: function log(actionId, data) {
            this.debug("Action: " + actionId + " (" + this.ACTIONS[actionId] + ")%c " + JSON.stringify(data));
            if (!this.enabled) {
                return Promise.resolve();
            }

            data = JSON.stringify(data);

            var params = this.makeActionParams();
            this.actionSequenceId++;

            var numericActionId = actionId;
            if (typeof actionId === "string") {
                if (actionId in this.ACTIONS) {
                    numericActionId = this.ACTIONS[actionId];
                } else {
                    this.warn("@ Logging#log: unknown action " + actionId);
                    numericActionId = 10000; // Unknown action
                }
            }

            params.action_detail = data;
            var staticParams = Object.assign({
                action_id: actionId
            }, params);
            var remoteParams = Object.assign({
                action_id: numericActionId
            }, params);

            this.logStatic("action", staticParams, false);
            if (!this.isTaskStarted) {
                return Promise.reject();
            }

            if (this.config("offline")) {
                return Promise.resolve();
            }
            ajax.jsonp(this.getUrl("ACTION"), remoteParams).catch(function () {
                return null;
            });
            return Promise.resolve();
        }
    }, {
        key: "logMiddleware",
        value: function logMiddleware(getState, saveState, pushState, saveNode, semantics) {
            var _this4 = this;

            return function () {
                return function (next) {
                    return function (act) {
                        if (act.type === action.RAISE) {
                            return next(act);
                        }

                        var beforeState = getState();
                        var before = level.serialize(beforeState, semantics);
                        var returnValue = next(act);
                        var afterState = getState();
                        var after = level.serialize(afterState, semantics);

                        if (act.type === action.DETACH) {
                            _this4.log("detached-expr", {
                                before: before,
                                after: after,
                                item: saveNode(act.nodeId)
                            });
                        } else if (act.type === undoAction.UNDO) {
                            _this4.log("undo", {
                                before: before,
                                after: after
                            });
                        } else if (act.type === undoAction.REDO) {
                            _this4.log("redo", {
                                before: before,
                                after: after
                            });
                        } else if (act.type === action.FILL_HOLE) {
                            var parent = act.holeId;
                            var nodes = beforeState.get("nodes");
                            while (nodes.get(parent).has("parent")) {
                                parent = nodes.get(parent).get("parent");
                            }

                            var savedParent = saveNode(parent, nodes);

                            _this4.log("placed-expr", {
                                before: before,
                                after: after,
                                field: nodes.get(act.holeId).get("parentField"),
                                item: saveNode(act.childId),
                                target: savedParent
                            });
                        } else if (act.type === action.ATTACH_NOTCH) {
                            _this4.log("attached-expr", {
                                before: before,
                                after: after,
                                parent: saveNode(act.parentId, beforeState.get("nodes")),
                                item: saveNode(act.childId),
                                parentNotchIdx: act.notchIdx,
                                childNotchIdx: act.childNotchIdx
                            });
                        } else if (act.type === action.VICTORY) {
                            pushState("victory", "victory");
                            return returnValue;
                        } else if (act.type === action.FADE) {
                            _this4.log("fade", {
                                item: saveNode(act.fadedId),
                                fromLevel: beforeState.getIn(["nodes", act.unfadedId, "fadeLevel"]),
                                toLevel: afterState.getIn(["nodes", act.fadedId, "fadeLevel"])
                            });
                        } else if (act.type === action.UNFOLD) {
                            _this4.log("unfold", {
                                before: before,
                                after: after,
                                item: saveNode(act.nodeId),
                                replacement: saveNode(act.newNodeId)
                            });
                        } else if (act.type === action.DEFINE) {
                            _this4.log("define", {
                                name: act.name,
                                body: saveNode(act.id)
                            });
                        }

                        // Put action as edge data
                        // TODO: how to deal with all the intermediate states??
                        // TODO: dummy action that just indicates player clicked on
                        // something, and dummy action to indicate reduction finished
                        saveState(act.type);

                        return returnValue;
                    };
                };
            };
        }
    }, {
        key: "downloadStaticLog",
        value: function downloadStaticLog() {
            var blob = new window.Blob([JSON.stringify(this.staticLog, null, 2)], {
                type: "application/json;charset=utf-8"
            });
            _fileSaver2.default.saveAs(blob, "log_" + new Date().getTime().toString() + ".json");
        }
    }, {
        key: "toggleStateGraph",
        value: function toggleStateGraph() {
            this.config("stateGraph", !this.config("stateGraph"));
            this.saveConfig();
        }

        /* ~~~~~~~~~ PRIVATE METHODS ~~~~~~~~~ */

    }, {
        key: "getUrl",
        value: function getUrl(key) {
            if (this.config("local")) {
                return LOCAL_LOGGER_URL + "/" + URLS[key];
            }
            return REMOTE_LOGGER_URL + "/" + URLS[key];
        }
    }, {
        key: "startOfflineSession",
        value: function startOfflineSession(params) {
            this.isOfflineSession = true;
            // TODO: choose condition if not present

            this.logStatic("startSession", Object.assign({}, params, {
                session_id: this.currentSessionId,
                message: "static_session"
            }), false);

            this.saveState();

            return Promise.resolve({
                user_id: this.currentUserId,
                session_id: this.currentSessionid
            });
        }
    }, {
        key: "makeActionParams",
        value: function makeActionParams() {
            var params = this.makeSessionParams();
            params.quest_id = this.currentTaskId;
            params.session_seq_id = this.taskSequenceId;
            params.quest_seq_id = this.actionSequenceId;
            params.dynamic_quest_id = this.dynamicTaskId;
            return params;
        }
    }, {
        key: "makeSessionParams",
        value: function makeSessionParams() {
            var params = this.makeBaseParams();
            params.user_id = this.currentUserId;
            params.session_id = this.currentSessionId;
            params.session_seq_id = this.taskSequenceId;
            params.dynamic_quest_id = this.dynamicTaskId;
            return params;
        }
    }, {
        key: "makeBaseParams",
        value: function makeBaseParams() {
            return { game_id: GAME_ID, client_timestamp: Date.now(), version_id: _version2.default };
        }
    }, {
        key: "info",
        value: function info(text) {
            console.info("%c" + text, "background: darkgreen; color: #eee");
        }
    }, {
        key: "debug",
        value: function debug(text) {
            if (!this.config("debug")) return;

            console.debug("%c" + text, "background: purple; color: #eee", "background: inherit; color: inherit");
        }
    }, {
        key: "warn",
        value: function warn(text) {
            console.warn("%c" + text, "background: #dd6b00; color: #eee");
        }
    }, {
        key: "logStatic",
        value: function logStatic(funcname, data, uploaded) {
            if (!uploaded) {
                data.error_message = "This log failed to upload to the server.";
            }

            this.staticLog.push([funcname, data]);

            if (this.config("local")) {
                ajax.postJSON(LOCAL_LOGGER_URL, [funcname, data]);
            }
        }
    }, {
        key: "config",
        value: function config(key) {
            var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            if (typeof value !== "undefined") {
                this._config[key] = value;
                this.saveConfig();
            }
            return this._config[key];
        }
    }, {
        key: "resetConfig",
        value: function resetConfig() {
            this._config = {
                enabled: true, // Is logging even enabled?
                debug: true, // Print debug messages?
                local: false, // Are we logging to a local server?
                static: true, // Are we saving events to the in-browser cache?
                offline: false, // Are we only saving events offline?
                stateGraph: false // Are we displaying a dynamic state graph?
            };
        }
    }, {
        key: "loadConfig",
        value: function loadConfig() {
            if (window.localStorage["loggingConfig"]) {
                this._config = Object.assign(this._config, JSON.parse(window.localStorage["loggingConfig"]));
            }
        }
    }, {
        key: "saveConfig",
        value: function saveConfig() {
            window.localStorage["loggingConfig"] = JSON.stringify(this._config);
        }
    }, {
        key: "loadState",
        value: function loadState() {
            if (window.localStorage["userId"]) {
                this.currentUserId = JSON.parse(window.localStorage["userId"]);
            }
        }
    }, {
        key: "saveState",
        value: function saveState() {
            window.localStorage["userId"] = JSON.stringify(this.currentUserId);
        }
    }, {
        key: "resetState",
        value: function resetState() {
            this.currentUserId = null;
        }
    }, {
        key: "enabled",
        get: function get() {
            return this.config("enabled");
        }
    }, {
        key: "isSessionStarted",
        get: function get() {
            return !this.enabled || this.currentUserId !== null && this.currentSessionId !== null;
        }
    }, {
        key: "isTaskStarted",
        get: function get() {
            return !this.enabled || this.currentTaskId !== null && this.dynamicTaskId !== null;
        }
    }]);

    return Logger;
}();

Logger.prototype.ACTIONS = {
    "state-save": 1,
    "state-restore": 2,
    "victory": 3,
    "bag-spill": 4,
    "clicked-to-continue": 5,
    "reduction-lambda": 6,
    "reduction": 7,
    "faded-expr": 8,
    "detached-expr": 9,
    "detach-commit": 10,
    "toolbox-dragout": 11,
    "toolbox-remove": 12,
    "moved": 13,
    "placed-expr": 14,
    "bag-add": 15,
    "toolbox-reject": 16,
    "toolbox-addback": 17,
    "game-complete": 18,
    // NEW ACTIONS FOR REDUCT-REDUX
    "state-path-save": 99,
    "undo": 100,
    "redo": 101,
    "reduction-error": 102,
    "reduction-lambda-failed": 103,
    "tutorial-state-next": 104,
    "attached-expr": 105,
    "attached-expr-failed": 106,
    "fade": 107,
    "unfold": 108,
    "unfold-start": 109,
    "unfold-cancel": 110,
    // State graph quickly grows beyond what we can store in one
    // logging call, so we split it up and log a record at the end
    "state-path-save-nodes": 111,
    "state-path-save-edges": 112,
    "state-path-save-graph": 113,
    "dead-end": 114,
    "define": 115,
    "define-failed": 115
};

var Logging = new Logger();

exports.default = Logging;
},{"file-saver":75,"../game/level":7,"../reducer/action":30,"../reducer/undo":14,"../util/ajax":18,"../util/random":54,"../version":19}],55:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * Projectors transform a JSON-ish view specification into a gfx view.
                                                                                                                                                                                                                                                                               */


exports.default = projector;

var _core = require("./core");

var gfx = _interopRequireWildcard(_core);

var _loader = require("../loader");

var _loader2 = _interopRequireDefault(_loader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var optionFields = ["color", "strokeWhenChild", "shadowOffset", "radius", "padding", "notches", "subexpScale", "shadow", "shadowColor", "horizontalAlign", "stroke", "highlightColor", "ellipsize"];

function shapeToProjection(shape, options) {
    var baseProjection = gfx.roundedRect;
    if (shape === "<>") {
        baseProjection = gfx.hexaRect;
    } else if (shape === "none") {
        baseProjection = gfx.baseProjection;
    } else if (shape === "notch") {
        baseProjection = gfx.notchProjection;
    }

    return baseProjection;
}

/**
 * The default projector lays out children in a horizontal box with a
 * rounded or hexagonal background.
 */
function defaultProjector(definition) {
    var options = {};
    var baseProjection = shapeToProjection(definition.projection.shape, options);

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = optionFields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var field = _step.value;

            if (typeof definition.projection[field] !== "undefined") {
                options[field] = definition.projection[field];
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return function defaultProjectorFactory(stage, nodes, expr) {
        var childrenFunc = function childrenFunc(id, state) {
            return definition.subexpressions.map(function (field) {
                return state.getIn(["nodes", id, field]);
            });
        };

        if (definition.projection.fields) {
            var fields = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = definition.projection.fields[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _field = _step2.value;

                    if ((typeof _field === "undefined" ? "undefined" : _typeof(_field)) === "object") {
                        // TODO: more extensible
                        var textOptions = {};
                        if (_field.color) textOptions.color = _field.color;

                        if (_field.field) {
                            fields.push(stage.allocate(gfx.text(expr.get(_field.field), textOptions)));
                        } else if (_field.text) {
                            fields.push(stage.allocate(gfx.text(_field.text, textOptions)));
                        } else {
                            throw "Cannot parse field specification: " + JSON.stringify(_field);
                        }
                    } else {
                        var match = _field.match(/'(.+)'/);
                        if (match) {
                            fields.push(stage.allocate(gfx.text(match[1])));
                        } else if (definition.fields.indexOf(_field) > -1) {
                            fields.push(stage.allocate(gfx.text(expr.get(_field))));
                        } else {
                            fields.push(_field);
                        }
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            childrenFunc = function childrenFunc(id, state) {
                return fields.map(function (field) {
                    if (typeof field === "number") return field;
                    return state.getIn(["nodes", id, field]);
                });
            };
        }

        return gfx.layout.hbox(childrenFunc, options, baseProjection);
    };
}

function textProjector(definition) {
    var options = {};

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = optionFields[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var field = _step3.value;

            if (typeof definition.projection[field] !== "undefined") {
                options[field] = definition.projection[field];
            }
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    return function textProjectorFactory(stage, nodes, expr) {
        var textDefn = definition.projection.text;
        var text = typeof textDefn === "function" ? textDefn : textDefn.replace(/\{([a-zA-Z0-9]+)\}/, function (match, field) {
            return expr.get(field);
        });
        return gfx.text(text, options);
    };
}

function casesProjector(definition) {
    var cases = {};
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
        for (var _iterator4 = Object.entries(definition.projection.cases)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _ref = _step4.value;

            var _ref2 = _slicedToArray(_ref, 2);

            var caseName = _ref2[0];
            var defn = _ref2[1];

            cases[caseName] = projector(Object.assign({}, definition, {
                projection: defn
            }));
        }
    } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
            }
        } finally {
            if (_didIteratorError4) {
                throw _iteratorError4;
            }
        }
    }

    return function casesProjectorFactory(stage, nodes, expr) {
        // TODO: better error handling if not found
        var key = expr.get(definition.projection.on);
        if (definition.projection.key) {
            key = definition.projection.key(nodes, expr);
        }
        if (typeof cases[key] === "undefined") {
            throw "Unrecognized case " + key + " for projection of " + definition;
        }
        return cases[key](stage, expr);
    };
}

function symbolProjector(definition) {
    switch (definition.projection.symbol) {
        case "star":
            return function () {
                return gfx.shapes.star();
            };
        case "rect":
            return function () {
                return gfx.shapes.rectangle();
            };
        case "circle":
            return function () {
                return gfx.shapes.circle();
            };
        case "triangle":
            return function () {
                return gfx.shapes.triangle();
            };
        default:
            throw "Undefined symbol type " + definition.symbol + ".";
    }
}

function dynamicProjector(definition) {
    var fieldName = definition.projection.field || "ty";
    var cases = {};
    cases["__default__"] = projector(Object.assign({}, definition, {
        projection: definition.projection.default
    }));
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
        for (var _iterator5 = Object.entries(definition.projection.cases)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var _ref3 = _step5.value;

            var _ref4 = _slicedToArray(_ref3, 2);

            var caseName = _ref4[0];
            var defn = _ref4[1];

            cases[caseName] = projector(Object.assign({}, definition, {
                projection: defn
            }));
        }
    } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                _iterator5.return();
            }
        } finally {
            if (_didIteratorError5) {
                throw _iteratorError5;
            }
        }
    }

    return function dynamicProjectorFactory(stage, nodes, expr) {
        var projections = {};
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
            for (var _iterator6 = Object.entries(cases)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                var _ref5 = _step6.value;

                var _ref6 = _slicedToArray(_ref5, 2);

                var key = _ref6[0];
                var subprojector = _ref6[1];

                projections[key] = subprojector(stage, nodes, expr);
            }
        } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion6 && _iterator6.return) {
                    _iterator6.return();
                }
            } finally {
                if (_didIteratorError6) {
                    throw _iteratorError6;
                }
            }
        }

        return gfx.dynamic(projections, fieldName, definition.projection);
    };
}

function dynamicPropertyProjector(definition) {
    var fieldName = definition.projection.field || "ty";
    definition.projection.projection.notches = definition.projection.notches;
    var subprojector = projector(Object.assign({}, definition, {
        projection: definition.projection.projection
    }));
    return function dynamicPropertyProjectorFactory(stage, nodes, expr) {
        var subprojection = subprojector(stage, nodes, expr);
        return gfx.dynamicProperty(subprojection, fieldName, definition.projection.fields);
    };
}

function hboxProjector(definition) {
    var options = {};
    var subprojectors = [];
    var baseProjection = shapeToProjection(definition.projection.shape, options);

    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
        for (var _iterator7 = definition.projection.children[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var subprojection = _step7.value;

            subprojectors.push(projector(Object.assign({}, definition, {
                projection: subprojection
            })));
        }
    } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                _iterator7.return();
            }
        } finally {
            if (_didIteratorError7) {
                throw _iteratorError7;
            }
        }
    }

    var _iteratorNormalCompletion8 = true;
    var _didIteratorError8 = false;
    var _iteratorError8 = undefined;

    try {
        for (var _iterator8 = optionFields[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var field = _step8.value;

            if (typeof definition.projection[field] !== "undefined") {
                options[field] = definition.projection[field];
            }
        }
    } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion8 && _iterator8.return) {
                _iterator8.return();
            }
        } finally {
            if (_didIteratorError8) {
                throw _iteratorError8;
            }
        }
    }

    return function hboxProjectorFactory(stage, nodes, expr) {
        var subprojections = [];
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
            for (var _iterator9 = subprojectors[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                var subproj = _step9.value;

                subprojections.push(stage.allocate(subproj(stage, nodes, expr)));
            }
        } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion9 && _iterator9.return) {
                    _iterator9.return();
                }
            } finally {
                if (_didIteratorError9) {
                    throw _iteratorError9;
                }
            }
        }

        var childrenFunc = function childrenFunc(id, _state) {
            return subprojections.map(function (projId) {
                return [projId, id];
            });
        };
        return gfx.layout.hbox(childrenFunc, options, baseProjection);
    };
}

function vboxProjector(definition) {
    var options = {};
    var subprojectors = [];
    var _iteratorNormalCompletion10 = true;
    var _didIteratorError10 = false;
    var _iteratorError10 = undefined;

    try {
        for (var _iterator10 = definition.projection.rows[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
            var subprojection = _step10.value;

            subprojectors.push(projector(Object.assign({}, definition, {
                projection: subprojection
            })));
        }
    } catch (err) {
        _didIteratorError10 = true;
        _iteratorError10 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion10 && _iterator10.return) {
                _iterator10.return();
            }
        } finally {
            if (_didIteratorError10) {
                throw _iteratorError10;
            }
        }
    }

    var _iteratorNormalCompletion11 = true;
    var _didIteratorError11 = false;
    var _iteratorError11 = undefined;

    try {
        for (var _iterator11 = optionFields[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
            var field = _step11.value;

            if (typeof definition.projection[field] !== "undefined") {
                options[field] = definition.projection[field];
            }
        }
    } catch (err) {
        _didIteratorError11 = true;
        _iteratorError11 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion11 && _iterator11.return) {
                _iterator11.return();
            }
        } finally {
            if (_didIteratorError11) {
                throw _iteratorError11;
            }
        }
    }

    return function vboxProjectorFactory(stage, nodes, expr) {
        var subprojections = [];
        var _iteratorNormalCompletion12 = true;
        var _didIteratorError12 = false;
        var _iteratorError12 = undefined;

        try {
            for (var _iterator12 = subprojectors[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                var subproj = _step12.value;

                subprojections.push(stage.allocate(subproj(stage, nodes, expr)));
            }
        } catch (err) {
            _didIteratorError12 = true;
            _iteratorError12 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion12 && _iterator12.return) {
                    _iterator12.return();
                }
            } finally {
                if (_didIteratorError12) {
                    throw _iteratorError12;
                }
            }
        }

        var childrenFunc = function childrenFunc(id, _state) {
            return subprojections.map(function (projId) {
                return [projId, id];
            });
        };
        return gfx.layout.vbox(childrenFunc, options);
    };
}

function stickyProjector(definition) {
    for (var field in definition.projection) {
        if (field !== "type" && field !== "content" && field !== "side") {
            definition.projection.content[field] = definition.projection[field];
        }
    }
    var subprojector = projector(Object.assign({}, definition, {
        projection: definition.projection.content
    }));

    return function stickyProjectorFactory(stage, nodes, expr) {
        var inner = subprojector(stage, nodes, expr);
        return gfx.layout.sticky(inner, definition.projection.side);
    };
}

// TODO: generalize all these projectors?
function decalProjector(definition) {
    var subprojector = projector(Object.assign({}, definition, {
        projection: definition.projection.content
    }));

    return function decalProjectorFactory(stage, nodes, expr) {
        var inner = subprojector(stage, nodes, expr);
        return gfx.decal(inner);
    };
}

function previewProjector(definition) {
    var subprojector = projector(Object.assign({}, definition, {
        projection: definition.projection.content
    }));

    return function previewProjectorFactory(stage, nodes, expr) {
        var inner = subprojector(stage, nodes, expr);
        return gfx.layout.previewer(inner);
    };
}

function genericProjector(definition) {
    return function genericProjectorFactory(stage, nodes, expr) {
        var path = definition.projection.view.slice();
        var view = gfx;
        while (path.length > 0) {
            view = view[path.shift()];
        }
        return view(definition.projection.options);
    };
}

function spriteProjector(definition) {
    return function spriteProjectorFactory(stage, nodes, expr) {
        var image = _loader2.default.images[definition.projection.image];
        var w = image.naturalWidth;
        var h = image.naturalHeight;

        if (definition.projection.scale) {
            w *= definition.projection.scale;
            h *= definition.projection.scale;
        } else if (definition.projection.size) {
            w = definition.projection.size.w;
            h = definition.projection.size.h;
            if (typeof h === "undefined") {
                h = image.naturalHeight / image.naturalWidth * w;
            } else if (typeof w === "undefined") {
                w = image.naturalWidth / image.naturalHeight * h;
            }
        }

        var size = { w: w, h: h };

        return gfx.exprify(gfx.sprite({
            image: image,
            size: size
        }));
    };
}

function projector(definition) {
    switch (definition.projection.type) {
        case "default":
            return defaultProjector(definition);
        case "case":
        case "cases":
            return casesProjector(definition);
        case "text":
            return textProjector(definition);
        case "symbol":
            return symbolProjector(definition);
        case "dynamic":
            return dynamicProjector(definition);
        case "dynamicProperty":
            return dynamicPropertyProjector(definition);
        case "hbox":
            return hboxProjector(definition);
        case "vbox":
            return vboxProjector(definition);
        case "sticky":
            return stickyProjector(definition);
        case "decal":
            return decalProjector(definition);
        case "preview":
            return previewProjector(definition);
        case "generic":
            return genericProjector(definition);
        case "sprite":
            return spriteProjector(definition);
        default:
            throw "Unrecognized projection type " + definition.type;
    }
}
},{"./core":4,"../loader":3}],56:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Meta = exports.ToolboxMeta = undefined;

var _immutable = require("immutable");

var immutable = _interopRequireWildcard(_immutable);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var ToolboxMeta = exports.ToolboxMeta = immutable.Record({
    unlimited: false,
    targetable: false
});

var Meta = exports.Meta = immutable.Record({
    toolbox: new ToolboxMeta()
});
},{"immutable":70}],57:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = function (module) {
    /**
     * Take a small step on this expression.
     *
     * Requires that pertinent subexpressions (as defined by
     * substepFilter) have been reduced first.
     *
     * @returns {Array} The ID of the original expression, a list of
     * IDs of resulting nodes, and a list of added nodes (which have
     * IDs assigned and are immutable already).
     */
    module.interpreter.smallStep = function smallStep(stage, state, expr) {
        var type = expr.type || expr.get("type");
        var stepper = module.definitionOf(type).smallStep;
        if (stepper) {
            var result = stepper(module, stage, state, expr);

            if (!result) return null;

            if (Array.isArray(result)) return result;

            if (immutable.Map.isMap(result)) {
                // TODO: is this quite correct?
                return [expr.get("id"), [result.get("id")], [result]];
            }

            // Return [topLevelNodeId, newNodeIds[], addedNodes[]]
            result.id = (0, _reducer.nextId)();
            var addedNodes = module.flatten(result).map(immutable.Map);
            return [expr.get("id"), [addedNodes[0].get("id")], addedNodes];
        }
        return null;
    };

    /**
     * Apply a list of expressions to another expression.
     */
    module.interpreter.betaReduce = function (stage, state, exprId, argIds) {
        var target = state.get("nodes").get(exprId);
        var reducer = module.definitionOf(target).betaReduce;
        if (!reducer) {
            console.warn("Expression type " + target.get("type") + " was beta-reduced, but has no reducer.");
            return null;
        }

        return reducer(module, stage, state, target, argIds);
    };

    /**
     * Construct the animation for the small-step that the given
     * expression would take.
     */
    module.interpreter.animateStep = function animateStep(stage, state, exp) {
        var defn = module.definitionOf(exp.get("type"));
        if (defn && defn.stepSound) {
            if (typeof defn.stepSound === "function") {
                var sequence = defn.stepSound(module, state, exp);
                _audio2.default.playSeries(sequence);
            } else {
                _audio2.default.play(defn.stepSound);
            }
        }
        if (defn && defn.stepAnimation) {
            return defn.stepAnimation(module, stage, state, exp);
        }

        var scaleCategory = "expr-" + exp.get("type");
        return animate.fx.shatter(stage, stage.views[exp.get("id")], {
            introDuration: animate.scaleDuration(600, scaleCategory),
            outroDuration: animate.scaleDuration(600, scaleCategory)
        });
    };

    var __substepFilter = function __substepFilter() {
        return true;
    };
    module.interpreter.substepFilter = function getSubstepFilter(type) {
        var defn = module.definitionOf(type);
        if (defn && defn.substepFilter) {
            return defn.substepFilter;
        }
        return __substepFilter;
    };

    /**
     * Given an expression, find the first child that needs to have a
     * step taken, or the first child that is blocking evaluation.
     */
    module.interpreter.singleStep = function singleStep(state, expr) {
        var exprFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        var nodes = state.get("nodes");
        var kind = module.kind(expr);
        if (kind !== "expression") {
            console.debug("semant.interpreter.singleStep: could not step since " + expr.get("id") + " is '" + kind + "', not 'expression'");
            return ["error", expr.get("id")];
        }

        if (exprFilter === null) exprFilter = function exprFilter() {
            return false;
        };
        var substepFilter = module.interpreter.substepFilter(expr.get("type"));

        if (!exprFilter(state, expr)) {
            var _loop = function _loop(field) {
                var subexprId = expr.get(field);
                var subexpr = nodes.get(subexprId);
                var subexprKind = module.kind(subexpr);

                if (!substepFilter(module, state, expr, field)) {
                    return "continue";
                }

                // Hardcoded: delay expansion of references until
                // absolutely necessary (when they're being applied)
                if (subexpr.get("type") === "reference") {
                    if (expr.get("type") !== "apply" && (!subexpr.get("params") || module.subexpressions(subexpr).every(function (f) {
                        return nodes.get(subexpr.get(f)).get("type") === "missing";
                    }))) {
                        return "continue";
                    }
                }

                if (subexprKind !== "value" && subexprKind !== "syntax") {
                    return {
                        v: module.interpreter.singleStep(state, subexpr, exprFilter)
                    };
                }
            };

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = module.subexpressions(expr)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var field = _step.value;

                    var _ret = _loop(field);

                    switch (_ret) {
                        case "continue":
                            continue;

                        default:
                            if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }

        var errorExpId = module.interpreter.validateStep(state, expr);
        if (errorExpId !== null) {
            console.debug("semant.interpreter.singleStep: could not step due to " + errorExpId);
            return ["error", errorExpId];
        }

        return ["success", expr.get("id")];
    };

    function nullToError(exprId, callback) {
        return function (result) {
            if (result === null) {
                callback(exprId);
                return Promise.reject(exprId);
            }
            return result;
        };
    }

    /**
     * A submodule containing evaluation strategies.
     */
    module.interpreter.reducers = {};
    module.interpreter.reducers.single = function singleStepReducer(stage, state, exp, callbacks) {
        var recordUndo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

        // Single-step mode

        var _module$interpreter$s = module.interpreter.singleStep(state, exp),
            _module$interpreter$s2 = _slicedToArray(_module$interpreter$s, 2),
            result = _module$interpreter$s2[0],
            exprId = _module$interpreter$s2[1];

        if (result === "error") {
            callbacks.error(exprId);
            return Promise.reject(exprId);
        }

        var nodes = state.get("nodes");
        exp = nodes.get(exprId);
        return module.interpreter.animateStep(stage, state, exp).then(function () {
            return module.interpreter.smallStep(stage, state, exp);
        }).then(nullToError(exprId, callbacks.error)).then(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 3),
                topNodeId = _ref2[0],
                newNodeIds = _ref2[1],
                addedNodes = _ref2[2];

            callbacks.update(topNodeId, newNodeIds, addedNodes, recordUndo);
            // TODO: handle multiple new nodes
            return newNodeIds[0];
        });
    };

    module.interpreter.reducers.over = function stepOverReducer(stage, state, exp, callbacks) {
        var recordUndo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

        // Step over previously defined names

        // Return true if we are at an apply expression where the
        // callee is a previously defined function
        var shouldStepOver = function shouldStepOver(state, expr) {
            if (expr.get("type") === "reference" && expr.get("params") && expr.get("params").length > 0) {
                if (stage.newDefinedNames.includes(expr.get("name"))) {
                    return false;
                }

                // If reference with holes, step over so long as all
                // args are not references or applications

                var _loop2 = function _loop2(subexprField) {
                    var subexpr = state.getIn(["nodes", expr.get(subexprField)]);
                    var kind = module.kind(subexpr);
                    if (kind === "expression") {
                        if (subexpr.get("type") === "reference") {
                            return {
                                v: !subexpr.get("params") || subexpr.get("params").length === 0 || module.subexpressions(subexpr).every(function (p) {
                                    return state.getIn(["nodes", subexpr.get(p)]).get("type") === "missing";
                                })
                            };
                        }
                        return {
                            v: false
                        };
                    } else if (kind === "missing") {
                        return {
                            v: false
                        };
                    }
                };

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = module.subexpressions(expr)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var subexprField = _step2.value;

                        var _ret2 = _loop2(subexprField);

                        if ((typeof _ret2 === "undefined" ? "undefined" : _typeof(_ret2)) === "object") return _ret2.v;
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                return true;
            }

            if (expr.get("type") !== "apply") {
                return false;
            }
            var callee = state.getIn(["nodes", expr.get("callee")]);
            if (callee.get("type") !== "reference") {
                return false;
            }
            if (stage.newDefinedNames.includes(callee.get("name"))) {
                return false;
            }

            var _loop3 = function _loop3(_subexprField) {
                var subexpr = state.getIn(["nodes", expr.get(_subexprField)]);
                if (subexpr.get("type") === "reference") {
                    return {
                        v: !(subexpr.get("params") && subexpr.get("params").some(function (p) {
                            return state.getIn(["nodes", subexpr.get("arg_" + p), "type"]) !== "missing";
                        }))
                    };
                } else if (module.kind(subexpr) === "expression" && subexpr.get("type") !== "reference") {
                    return {
                        v: false
                    };
                }
            };

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = module.subexpressions(expr)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _subexprField = _step3.value;

                    var _ret3 = _loop3(_subexprField);

                    if ((typeof _ret3 === "undefined" ? "undefined" : _typeof(_ret3)) === "object") return _ret3.v;
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return true;
        };

        var _module$interpreter$s3 = module.interpreter.singleStep(state, exp, shouldStepOver),
            _module$interpreter$s4 = _slicedToArray(_module$interpreter$s3, 2),
            result = _module$interpreter$s4[0],
            exprId = _module$interpreter$s4[1];

        if (result === "error") {
            callbacks.error(exprId);
            return Promise.reject(exprId);
        }

        var nodes = state.get("nodes");
        exp = nodes.get(exprId);

        if (shouldStepOver(state, exp)) {
            var name = exp.get("type") === "reference" ? exp.get("name") : "subcall " + nodes.get(exp.get("callee")).get("name");
            console.debug("semant.interpreter.reducers.over: stepping over call to " + name);
            return module.interpreter.reducers.big(stage, state, exp, callbacks);
        }
        return module.interpreter.animateStep(stage, state, exp).then(function () {
            return module.interpreter.smallStep(stage, state, exp);
        }).then(nullToError(exprId, callbacks.error)).then(function (_ref3) {
            var _ref4 = _slicedToArray(_ref3, 3),
                topNodeId = _ref4[0],
                newNodeIds = _ref4[1],
                addedNodes = _ref4[2];

            callbacks.update(topNodeId, newNodeIds, addedNodes, recordUndo);
            // TODO: handle multiple new nodes
            return newNodeIds[0];
        });
    };

    module.interpreter.reducers.multi = function multiStepReducer(stage, state, exp, callbacks) {
        var animated = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
        var recordUndo = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

        var firstStep = true;

        var takeStep = function takeStep(innerState, topExpr) {
            var _module$interpreter$s5 = module.interpreter.singleStep(innerState, topExpr),
                _module$interpreter$s6 = _slicedToArray(_module$interpreter$s5, 2),
                result = _module$interpreter$s6[0],
                exprId = _module$interpreter$s6[1];

            if (result === "error") {
                callbacks.error(exprId);
                return Promise.reject();
            }

            var innerExpr = innerState.get("nodes").get(exprId);
            var nextStep = function nextStep() {
                var result = module.interpreter.smallStep(stage, innerState, innerExpr);
                if (result === null) {
                    callbacks.error(exprId);
                    return Promise.reject(topExpr.get("id"));
                }

                var _result = _slicedToArray(result, 3),
                    topNodeId = _result[0],
                    newNodeIds = _result[1],
                    addedNodes = _result[2];

                return callbacks.update(topNodeId, newNodeIds, addedNodes, recordUndo || firstStep).then(function (newState) {
                    firstStep = false;
                    if (topExpr.get("id") === topNodeId) {
                        // TODO: handle multiple newNodeIds
                        topExpr = newState.getIn(["nodes", newNodeIds[0]]);
                    } else {
                        topExpr = newState.getIn(["nodes", topExpr.get("id")]);
                    }

                    if (callbacks.stop && callbacks.stop(newState, topExpr) || module.kind(topExpr) !== "expression") {
                        return Promise.reject(topExpr.get("id"));
                    }
                    return [newState, topExpr];
                });
            };

            if (animated) {
                return module.interpreter.animateStep(stage, innerState, innerExpr).then(function () {
                    return nextStep();
                });
            }
            return nextStep();
        };

        var fuel = 200;
        var loop = function loop(innerState, topExpr) {
            if (fuel <= 0) return Promise.resolve(topExpr.get("id"));
            fuel -= 1;

            return takeStep(innerState, topExpr).then(function (_ref5) {
                var _ref6 = _slicedToArray(_ref5, 2),
                    newState = _ref6[0],
                    innerExpr = _ref6[1];

                if (animated) {
                    return animate.after(800).then(function () {
                        return loop(newState, innerExpr);
                    });
                }
                return loop(newState, innerExpr);
            }, function (finalId) {
                console.debug("semant.interpreter.reducers.multi: " + fuel + " fuel remaining");
                return Promise.resolve(finalId);
            });
        };

        return loop(state, exp);
    };

    module.interpreter.reducers.big = function bigStepReducer(stage, state, exp, callbacks) {
        // Only play animation if we actually take any sort of
        // small-step
        var playedAnim = false;
        return module.interpreter.reducers.multi(stage, state, exp, Object.assign({}, callbacks, {
            update: function update() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                if (!playedAnim) {
                    playedAnim = true;
                    return module.interpreter.animateStep(stage, state, exp).then(function () {
                        return callbacks.update.apply(callbacks, args);
                    });
                }
                return callbacks.update.apply(callbacks, args);
            }
        }), false, false);
    };

    module.interpreter.reducers.medium = function mediumStepReducer(stage, state, exp, callbacks) {
        // Only play animation if we actually take any sort of
        // small-step
        var playedAnim = false;
        return module.interpreter.reducers.multi(stage, state, exp, Object.assign({}, callbacks, {
            update: function update() {
                for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2];
                }

                if (!playedAnim) {
                    playedAnim = true;
                    return module.interpreter.animateStep(stage, state, exp).then(function () {
                        return callbacks.update.apply(callbacks, args);
                    });
                }
                return callbacks.update.apply(callbacks, args);
            },
            stop: function stop(state, topExpr) {
                var curExpr = topExpr;
                var rhs = [];
                var nodes = state.get("nodes");
                var repeated = null;
                while (curExpr.get("type") === "apply") {
                    var callee = nodes.get(curExpr.get("callee"));
                    if (callee.get("type") === "reference") {
                        rhs.push(callee.get("name"));
                        curExpr = nodes.get(curExpr.get("argument"));
                        if (callee.get("name") === "repeat") break;
                    } else if (callee.get("type") === "apply") {
                        curExpr = callee;
                        if (!repeated) {
                            repeated = nodes.get(callee.get("argument"));
                            if (repeated.get("type") !== "reference") return false;
                        }
                    } else {
                        return false;
                    }
                }

                if (curExpr.get("type") === "number") return true;
                if (!repeated) return false;
                if (curExpr.get("type") !== "number") return false;
                if (rhs[rhs.length - 1].get("name") !== "repeat") return false;

                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = rhs.slice(0, -1)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var name = _step4.value;

                        if (name !== repeated.get("name")) return false;
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }

                return true;
            }
        }), false, false);
    };

    module.interpreter.reducers.hybrid = function multiStepReducer(stage, state, exp, callbacks) {
        var takeStep = function takeStep(innerState, topExpr) {
            var _module$interpreter$s7 = module.interpreter.singleStep(innerState, topExpr),
                _module$interpreter$s8 = _slicedToArray(_module$interpreter$s7, 2),
                result = _module$interpreter$s8[0],
                exprId = _module$interpreter$s8[1];

            if (result === "error") {
                callbacks.error(exprId);
                return Promise.reject();
            }

            var innerExpr = innerState.get("nodes").get(exprId);
            if (innerExpr.get("type") === "reference" && !stage.newDefinedNames.includes(innerExpr.get("name"))) {
                return module.interpreter.reducers.over(stage, innerState, topExpr, callbacks).then(function (topId) {
                    var newState = stage.getState();

                    var node = newState.getIn(["nodes", topId]);
                    while (node.has("parent")) {
                        node = newState.getIn(["nodes", node.get("parent")]);
                    }

                    if (module.kind(node) !== "expression") {
                        return Promise.reject(topId);
                    }
                    return [newState, node];
                });
            }

            var nextStep = function nextStep() {
                var _module$interpreter$s9 = module.interpreter.smallStep(stage, innerState, innerExpr),
                    _module$interpreter$s10 = _slicedToArray(_module$interpreter$s9, 3),
                    topNodeId = _module$interpreter$s10[0],
                    newNodeIds = _module$interpreter$s10[1],
                    addedNodes = _module$interpreter$s10[2];

                return callbacks.update(topNodeId, newNodeIds, addedNodes, true).then(function (newState) {
                    if (topExpr.get("id") === topNodeId) {
                        // TODO: handle multiple newNodeIds
                        topExpr = newState.getIn(["nodes", newNodeIds[0]]);
                    } else {
                        topExpr = newState.getIn(["nodes", topExpr.get("id")]);
                    }

                    if (module.kind(topExpr) !== "expression" || stage.mode !== "hybrid") {
                        return Promise.reject(topExpr.get("id"));
                    }
                    return [newState, topExpr];
                });
            };

            return module.interpreter.animateStep(stage, innerState, innerExpr).then(function () {
                return nextStep();
            });
        };

        var fuel = 50;
        var loop = function loop(innerState, topExpr) {
            if (fuel <= 0) return Promise.resolve(topExpr.get("id"));
            fuel -= 1;

            return takeStep(innerState, topExpr).then(function (_ref7) {
                var _ref8 = _slicedToArray(_ref7, 2),
                    newState = _ref8[0],
                    innerExpr = _ref8[1];

                var duration = animate.scaleDuration(800, "multi-step", "expr-" + topExpr.get("type"));
                return animate.after(duration).then(function () {
                    return loop(newState, innerExpr);
                });
            }, function (finalId) {
                console.debug("semant.interpreter.reducers.hybrid: " + fuel + " fuel remaining");
                return Promise.resolve(finalId);
            });
        };

        return loop(state, exp);
    };

    /**
     * A helper function that should abstract over big-step, small-step,
     * multi-step, and any necessary animation.
     *
     * TODO: it needs to also insert intermediate states into the
     * undo/redo stack, and mark which undo/redo states are big-steps,
     * small-steps, etc. to allow fine-grained undo/redo.
     */
    module.interpreter.reduce = function reduce(stage, state, exp, mode, callbacks) {
        switch (mode) {
            case "small":
                return module.interpreter.reducers.single(stage, state, exp, callbacks);
            case "over":
                return module.interpreter.reducers.over(stage, state, exp, callbacks);
            case "multi":
                return module.interpreter.reducers.multi(stage, state, exp, callbacks);
            case "big":
                return module.interpreter.reducers.big(stage, state, exp, callbacks);
            case "medium":
                return module.interpreter.reducers.medium(stage, state, exp, callbacks);
            case "hybrid":
            default:
                return module.interpreter.reducers.hybrid(stage, state, exp, callbacks);
        }
    };

    /**
     * Validate that the given expression can take a single step.
     */
    module.interpreter.validateStep = function (state, expr) {
        var defn = module.definitionOf(expr);
        if (!defn) return null;

        var validator = defn.validateStep;
        if (!validator) return null;

        return validator(module, state, expr);
    };
};

var _immutable = require("immutable");

var immutable = _interopRequireWildcard(_immutable);

var _audio = require("../resource/audio");

var _audio2 = _interopRequireDefault(_audio);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _reducer = require("../reducer/reducer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
},{"immutable":70,"../resource/audio":36,"../gfx/animate":5,"../reducer/reducer":6}],34:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = transform;

var _immutable = require("immutable");

var immutable = _interopRequireWildcard(_immutable);

var _progression = require("../game/progression");

var progression = _interopRequireWildcard(_progression);

var _audio = require("../resource/audio");

var _audio2 = _interopRequireDefault(_audio);

var _logging = require("../logging/logging");

var _logging2 = _interopRequireDefault(_logging);

var _core = require("../gfx/core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _projector = require("../gfx/projector");

var _projector2 = _interopRequireDefault(_projector);

var _core2 = require("./core");

var core = _interopRequireWildcard(_core2);

var _meta = require("./meta");

var meta = _interopRequireWildcard(_meta);

var _interpreter = require("./interpreter");

var _interpreter2 = _interopRequireDefault(_interpreter);

var _reducer = require("../reducer/reducer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var NotchRecord = immutable.Record({
    side: "left",
    shape: "wedge",
    type: "inset"
});

/**
 * This module turns a JSON-plus-functions specification of language
 * semantics and builds a module for the rest of Reduct to interact
 * with the semantics.
 */
function transform(definition) {
    var module = {};
    module.definition = definition;
    module.projections = {};

    module.definitionOf = function getDefinition(exprOrType) {
        var fadeLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        var type = exprOrType.get ? exprOrType.get("type") : exprOrType.type || exprOrType;
        var result = module.definition.expressions[type];
        if (Array.isArray(result)) {
            return result[typeof fadeLevel === "number" ? fadeLevel : progression.getFadeLevel(type)];
        }
        return result;
    };

    // Add default definitions for vtuple
    /**
     * A "virtual tuple" which kind of bleeds presentation into the
     * semantics. Represents a set of values that go together, but spill
     * onto the board when they are the top-level node.
     */
    module.vtuple = function vtuple(children) {
        var result = { type: "vtuple", locked: true, numChildren: children.length };
        var i = 0;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var child = _step.value;

                result["child" + i] = child;
                i += 1;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return result;
    };

    module.projections.vtuple = [function (_stage, _expr) {
        return gfx.layout.vbox(function (id, state) {
            var node = state.getIn(["nodes", id]);
            var result = [];
            for (var i = 0; i < node.get("numChildren"); i++) {
                result.push(node.get("child" + i));
            }
            return result;
        }, {
            padding: {
                top: 0,
                inner: 5,
                bottom: 0,
                left: 0,
                right: 0
            },
            strokeWhenChild: false,
            subexpScale: 1
        });
    }];

    module.constructors = {};

    var _loop = function _loop(exprName, exprDefinitions) {
        module.constructors[exprName] = [];
        module.projections[exprName] = [];

        var defns = Array.isArray(exprDefinitions) ? exprDefinitions : [exprDefinitions];

        var fadeLevel = 0;

        var _loop3 = function _loop3(exprDefinition) {
            var innerFadeLevel = fadeLevel; // Capture value inside loop body
            fadeLevel += 1;
            var ctor = function ctor() {
                var result = { type: exprName, locked: true };
                if (typeof exprDefinition.locked !== "undefined") {
                    result.locked = exprDefinition.locked;
                }
                if (typeof exprDefinition.notches !== "undefined") {
                    result.notches = immutable.List(exprDefinition.notches.map(function (n) {
                        return new NotchRecord(n);
                    }));
                }

                var argPointer = 0;
                var _iteratorNormalCompletion9 = true;
                var _didIteratorError9 = false;
                var _iteratorError9 = undefined;

                try {
                    for (var _iterator9 = exprDefinition.fields[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                        var _ref3;

                        var fieldName = _step9.value;

                        result[fieldName] = (_ref3 = argPointer++, arguments.length <= _ref3 ? undefined : arguments[_ref3]);
                    }
                } catch (err) {
                    _didIteratorError9 = true;
                    _iteratorError9 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion9 && _iterator9.return) {
                            _iterator9.return();
                        }
                    } finally {
                        if (_didIteratorError9) {
                            throw _iteratorError9;
                        }
                    }
                }

                var subexprs = typeof exprDefinition.subexpressions === "function" ? exprDefinition.subexpressions(module, immutable.Map(result)) : exprDefinition.subexpressions;
                var _iteratorNormalCompletion10 = true;
                var _didIteratorError10 = false;
                var _iteratorError10 = undefined;

                try {
                    for (var _iterator10 = subexprs[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                        var _ref4;

                        var _fieldName = _step10.value;

                        result[_fieldName] = (_ref4 = argPointer++, arguments.length <= _ref4 ? undefined : arguments[_ref4]);
                    }
                } catch (err) {
                    _didIteratorError10 = true;
                    _iteratorError10 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion10 && _iterator10.return) {
                            _iterator10.return();
                        }
                    } finally {
                        if (_didIteratorError10) {
                            throw _iteratorError10;
                        }
                    }
                }

                result.fadeLevel = innerFadeLevel;
                return result;
            };
            Object.defineProperty(ctor, "name", { value: exprName });
            module.constructors[exprName].push(ctor);

            if (typeof exprDefinition.notches !== "undefined") {
                exprDefinition.projection.notches = exprDefinition.notches;
            }

            module.projections[exprName].push((0, _projector2.default)(exprDefinition));
        };

        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
            for (var _iterator8 = defns[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                var exprDefinition = _step8.value;

                _loop3(exprDefinition);
            }
        } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion8 && _iterator8.return) {
                    _iterator8.return();
                }
            } finally {
                if (_didIteratorError8) {
                    throw _iteratorError8;
                }
            }
        }

        module[exprName] = function () {
            var ctors = module.constructors[exprName];
            return ctors[progression.getFadeLevel(exprName)].apply(ctors, arguments);
        };
        Object.defineProperty(module[exprName], "name", { value: exprName });
    };

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = Object.entries(definition.expressions)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _ref = _step2.value;

            var _ref2 = _slicedToArray(_ref, 2);

            var exprName = _ref2[0];
            var exprDefinitions = _ref2[1];

            _loop(exprName, exprDefinitions);
        }

        /**
         * Return a list of field names containing subexpressions of an expression.
         */
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    module.subexpressions = function subexpressions(expr) {
        var type = expr.type || expr.get("type");
        if (type === "vtuple") {
            var result = [];
            var nc = expr.get ? expr.get("numChildren") : expr.numChildren;
            for (var i = 0; i < nc; i++) {
                result.push("child" + i);
            }
            return result;
        }

        var fadeLevel = expr.get ? expr.get("fadeLevel") : expr.fadeLevel;

        var defn = module.definitionOf(type, fadeLevel);
        if (!defn) throw "semantics.subexpressions: Unrecognized expression type " + type;

        var subexprBase = defn.reductionOrder || defn.subexpressions;
        var subexprs = typeof subexprBase === "function" ? subexprBase(module, expr) : defn.reductionOrder || defn.subexpressions;
        // Handle notches
        if (defn.notches && defn.notches.length > 0) {
            var _result = subexprs.slice();
            for (var _i = 0; _i < defn.notches.length; _i++) {
                var field = "notch" + _i;
                if (expr[field] || expr.get && expr.get(field)) {
                    _result.push(field);
                }
            }
            return _result;
        }
        return subexprs;
    };

    /**
     * Construct the gfx view for a node.
     *
     * @param nodes - We have to provide the node map since the store
     * won't have been updated yet.
     */
    module.project = function project(stage, nodes, expr) {
        var type = expr.get("type");
        if (!module.projections[type]) throw "semantics.project: Unrecognized expression type " + type;
        return module.projections[type][progression.getFadeLevel(type)](stage, nodes, expr);
    };

    module.searchNoncapturing = function (nodes, targetName, exprId) {
        var result = [];
        module.map(nodes, exprId, function (nodes, id) {
            var node = nodes.get(id);
            if (node.get("type") === "lambdaVar" && node.get("name") === targetName) {
                result.push(id);
                return [node, nodes];
            }
            return [node, nodes];
        }, function (nodes, node) {
            return node.get("type") !== "lambda" || nodes.get(node.get("arg")).get("name") !== targetName;
        });
        return result;
    };

    module.mightBeCompleted = function (state, checkVictory) {
        var nodes = state.get("nodes");
        var board = state.get("board");
        var toolbox = state.get("toolbox");

        var remainingNodes = board.concat(toolbox);

        var containsReducableExpr = remainingNodes.some(function (id) {
            var node = nodes.get(id);
            var kind = module.kind(node);
            return kind === "expression" || kind === "statement" || node.get("type") === "lambda";
        });

        if (containsReducableExpr) {
            return true;
        }

        // Level is not yet completed, no reducible expressions, and
        // nothing in toolbox -> level can't be completed
        if (toolbox.size === 0) {
            return false;
        }

        // Only one thing in toolbox - does using it complete the level?
        if (toolbox.size === 1) {
            return checkVictory(state.withMutations(function (s) {
                s.set("toolbox", immutable.List());
                s.set("board", remainingNodes);
            }));
        }

        // Try adding any combination of toolbox items to the board -
        // does using them complete the level?

        // Thanks to Nina Scholz @ SO:
        // https://stackoverflow.com/a/42774126
        // Generates all array subsets (its powerset).
        var powerset = function powerset(array) {
            var fork = function fork(i, t) {
                if (i === array.length) {
                    result.push(t);
                    return;
                }
                fork(i + 1, t.concat([array[i]]));
                fork(i + 1, t);
            };

            var result = [];
            fork(0, []);
            return result;
        };

        var _loop2 = function _loop2(subset) {
            var matching = checkVictory(state.withMutations(function (s) {
                s.set("toolbox", toolbox.filter(function (i) {
                    return subset.indexOf(i) === -1;
                }));
                s.set("board", board.concat(immutable.List(subset)));
            }));
            if (matching && Object.keys(matching).length > 0) {
                return {
                    v: true
                };
            }
        };

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
            for (var _iterator3 = powerset(board.toArray())[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var subset = _step3.value;

                var _ret2 = _loop2(subset);

                if ((typeof _ret2 === "undefined" ? "undefined" : _typeof(_ret2)) === "object") return _ret2.v;
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }

        return false;
    };

    /**
     * Submodule for evaluating expressions.
     */
    module.interpreter = {};

    (0, _interpreter2.default)(module);

    module.shallowEqual = function shallowEqual(n1, n2) {
        if (n1.get("type") !== n2.get("type")) return false;

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
            for (var _iterator4 = module.definitionOf(n1).fields[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var field = _step4.value;

                if (n1.get(field) !== n2.get(field)) return false;
            }
        } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                    _iterator4.return();
                }
            } finally {
                if (_didIteratorError4) {
                    throw _iteratorError4;
                }
            }
        }

        return true;
    };

    /**
     * Can an expression have something dropped into it?
     */
    module.droppable = function (state, itemId, targetId) {
        // TODO: don't hardcode these checks
        var item = state.getIn(["nodes", itemId]);
        var target = state.getIn(["nodes", targetId]);

        if (item.get("type") === "define") {
            return false;
        } else if (target.get("type") === "missing") {
            // Use type inference to decide whether hole can be filled
            var holeType = target.get("ty");
            var exprType = item.get("ty");
            if (!holeType || !exprType || holeType === exprType) {
                return "hole";
            }
        } else if (target.get("type") === "lambdaArg" && !state.getIn(["nodes", target.get("parent"), "parent"]) &&
        // Lambda vars can't be dropped into lambda args
        item.get("type") !== "lambdaVar") {
            return "arg";
        }
        return false;
    };

    /**
     * Is an expression selectable/hoverable by the mouse?
     */
    module.targetable = function (state, expr) {
        var defn = module.definitionOf(expr);
        if (defn && defn.targetable && typeof defn.targetable === "function") {
            return defn.targetable(module, state, expr);
        }
        return !expr.get("parent") || !expr.get("locked") || defn && defn.alwaysTargetable;
    };

    module.kind = function (expr) {
        switch (expr.get("type")) {
            case "vtuple":
                // TODO: This isn't quite right - depends on the children
                return "expression";
            default:
                return module.definitionOf(expr).kind;
        }
    };

    module.hydrate = function (nodes, expr) {
        return expr.withMutations(function (e) {
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = module.subexpressions(e)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var field = _step5.value;

                    e.set(field, module.hydrate(nodes, nodes.get(e.get(field))));
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }
        }).toJS();
    };

    module.collectTypes = function collectTypes(state, rootExpr) {
        var result = new Map();
        var completeness = new Map();
        var nodes = state.get("nodes");

        // Update the type map with the type for the expression.
        var update = function update(id, ty) {
            if (!result.has(id)) {
                result.set(id, ty);
            } else {
                var prevTy = result.get(id);
                if (prevTy === "unknown") {
                    result.set(id, ty);
                } else if (prevTy !== ty) {
                    result.set(id, "error");
                }
            }
        };

        var completeKind = function completeKind(kind) {
            return kind !== "expression" && kind !== "placeholder";
        };

        var step = function step(expr) {
            var id = expr.get("id");

            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = module.subexpressions(expr)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var field = _step6.value;

                    step(nodes.get(expr.get(field)));
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            var type = expr.get("type");
            var exprDefn = module.definitionOf(type);
            if (!exprDefn) {
                if (type !== "vtuple") console.warn("No expression definition for " + type);
            } else {
                var typeDefn = exprDefn.type;
                if (typeof typeDefn === "function") {
                    var _typeDefn = typeDefn(module, state, result, expr),
                        types = _typeDefn.types,
                        complete = _typeDefn.complete;

                    completeness.set(id, complete && module.subexpressions(expr).map(function (field) {
                        return completeness.get(expr.get(field)) || module.kind(nodes.get(expr.get(field))) !== "expression";
                    }).every(function (x) {
                        return x;
                    }));
                    var _iteratorNormalCompletion7 = true;
                    var _didIteratorError7 = false;
                    var _iteratorError7 = undefined;

                    try {
                        for (var _iterator7 = types.entries()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                            var entry = _step7.value;

                            update.apply(undefined, _toConsumableArray(entry));
                        }
                    } catch (err) {
                        _didIteratorError7 = true;
                        _iteratorError7 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                _iterator7.return();
                            }
                        } finally {
                            if (_didIteratorError7) {
                                throw _iteratorError7;
                            }
                        }
                    }
                } else if (typeof typeDefn === "undefined") {
                    // TODO: define constants/typing module
                    // result[id].add("unknown");
                    completeness.set(id, module.subexpressions(expr).map(function (field) {
                        return completeness.get(expr.get(field)) || completeKind(module.kind(nodes.get(expr.get(field))));
                    }).every(function (x) {
                        return x;
                    }));
                } else {
                    completeness.set(id, true);
                    update(id, typeDefn);
                }
            }
        };

        step(rootExpr);

        return { types: result, completeness: completeness };
    };

    module.hasNotches = function (node) {
        return node.get("notches");
    };

    module.notchesCompatible = function (node1, node2) {
        var notches1 = node1.get("notches");
        var notches2 = node2.get("notches");
        var result = [];
        if (notches1 && notches2) {
            for (var i = 0; i < notches1.size; i++) {
                for (var j = 0; j < notches2.size; j++) {
                    var notch1 = notches1.get(i);
                    var notch2 = notches2.get(j);
                    if (notch1.shape !== notch2.shape) continue;
                    if (notch1.type === "inset" && notch2.type !== "outset") continue;
                    if (notch1.type === "outset" && notch2.type !== "inset") continue;

                    if (notch1.side === "left" && notch2.side === "right" || notch1.side === "right" && notch2.side === "left" || notch1.side === "top" && notch2.side === "bottom" || notch1.side === "bottom" && notch2.side === "top") {
                        result.push([i, j]);
                    }
                }
            }
        }
        return result;
    };

    module.notchesAttachable = function (stage, state, parentId, childId, notchPair) {
        var nodes = state.get("nodes");
        var parent = nodes.get(parentId);

        // Prevent double-attaching
        if (parent.has("notch" + notchPair[0])) return false;

        var defn = module.definitionOf(parent);

        if (defn && defn.notches && defn.notches[notchPair[0]]) {
            var notchDefn = defn.notches[notchPair[0]];
            if (notchDefn.canAttach) {
                var _notchDefn$canAttach = notchDefn.canAttach(module, state, parentId, childId, notchPair),
                    _notchDefn$canAttach2 = _slicedToArray(_notchDefn$canAttach, 2),
                    canAttach = _notchDefn$canAttach2[0],
                    blockingNodes = _notchDefn$canAttach2[1];

                if (!canAttach) {
                    _logging2.default.log("attached-expr-failed", {
                        parent: stage.saveNode(parentId),
                        item: stage.saveNode(childId),
                        parentNotchIdx: notchPair[0],
                        childNotchIdx: notchPair[1],
                        blocking: blockingNodes.map(function (id) {
                            return stage.saveNode(id);
                        })
                    });
                    blockingNodes.forEach(function (id) {
                        animate.fx.error(stage, stage.views[id]);
                    });
                    return false;
                }
            }
        }
        return true;
    };

    module.detachable = function (state, parentId, childId) {
        var nodes = state.get("nodes");
        var defn = module.definitionOf(nodes.get(parentId));
        var parentField = nodes.get(childId).get("parentField");
        if (parentField.slice(0, 5) !== "notch") {
            return true;
        }
        var notchIdx = window.parseInt(parentField.slice(5), 10);
        if (defn && defn.notches && defn.notches[notchIdx]) {
            var notchDefn = defn.notches[notchIdx];
            if (notchDefn.canDetach) {
                return notchDefn.canDetach(module, state, parentId, childId);
            }
        }
        return true;
    };

    /**
     * Check whether we should ignore the given node when matching
     * nodes to determine victory.
     */
    module.ignoreForVictory = function (node) {
        var defn = module.definitionOf(node);
        return module.kind(node) === "syntax" || defn && defn.ignoreForVictory;
    };

    module.equal = core.genericEqual(module.subexpressions, module.shallowEqual);
    module.flatten = core.genericFlatten(_reducer.nextId, module.subexpressions);
    module.map = core.genericMap(module.subexpressions);
    module.search = core.genericSearch(module.subexpressions);
    module.clone = core.genericClone(_reducer.nextId, module.subexpressions);

    module.parser = {};
    module.parser.templatizeName = function (name) {
        return definition.parser.templatizeName(module, name);
    };
    module.parser.parse = definition.parser.parse(module);
    module.parser.unparse = definition.parser.unparse(module);
    module.parser.postParse = definition.parser.postParse;
    module.parser.extractDefines = definition.parser.extractDefines;
    module.parser.extractGlobals = definition.parser.extractGlobals;
    module.parser.extractGlobalNames = definition.parser.extractGlobalNames;

    module.meta = meta;

    return module;
}
},{"immutable":70,"../game/progression":8,"../resource/audio":36,"../logging/logging":15,"../gfx/core":4,"../gfx/animate":5,"../gfx/projector":55,"./core":32,"./meta":56,"./interpreter":57,"../reducer/reducer":6}],47:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _core = require("../core");

var core = _interopRequireWildcard(_core);

var _core2 = require("../../gfx/core");

var gfx = _interopRequireWildcard(_core2);

var _animate = require("../../gfx/animate");

var animate = _interopRequireWildcard(_animate);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.default = {
    apply: {
        kind: "expression",
        fields: [],
        subexpressions: ["callee", "argument"],
        reductionOrder: ["argument", "callee"],
        projection: {
            type: "decal",
            content: {
                type: "default",
                shape: "()",
                fields: ["callee", "'('", "argument", "')'"]
            }
        },
        stepAnimation: function stepAnimation(semant, stage, state, expr) {
            var callee = state.getIn(["nodes", expr.get("callee")]);
            var isCalleeLambda = callee.get("type") === "lambda";

            var introDuration = animate.scaleDuration(400, "expr-apply");
            var outroDuration = animate.scaleDuration(400, "expr-apply");
            var duration = animate.scaleDuration(700, "expr-apply");
            var totalTime = duration + animate.scaleDuration(50, "expr-apply");
            // How long to wait before clearing the 'animating' flag
            var restTime = totalTime + introDuration + outroDuration;

            var argView = stage.views[expr.get("argument")];
            var applyView = stage.views[expr.get("id")];

            // List of tweens to reset at end
            var reset = [];

            // Fade out arrow
            reset.push(animate.tween(applyView, { arrowOpacity: [1.0, 0.0] }, {
                duration: animate.scaleDuration(200, "expr-apply"),
                easing: animate.Easing.Cubic.InOut
            }));

            // Scale down argument
            reset.push(animate.tween(argView, { scale: { x: 0.4, y: 0.4 } }, {
                duration: animate.scaleDuration(300, "expr-apply"),
                easing: animate.Easing.Cubic.Out
            }));

            // Jump argument to hole
            var calleeView = stage.views[expr.get("callee")];
            var lambdaBody = isCalleeLambda ? callee.get("body") : null;
            var lambdaView = isCalleeLambda ? stage.views[callee.get("id")] : null;

            var centerX = gfx.centerPos(calleeView).x - gfx.absolutePos(applyView).x;
            if (isCalleeLambda) {
                centerX = gfx.centerPos(stage.views[callee.get("arg")]).x - gfx.absolutePos(lambdaView).x;
            }

            var jumpTween = animate.tween(argView, {
                pos: {
                    x: [centerX, animate.Easing.Linear],
                    y: [argView.pos.y - 75, animate.Easing.Projectile(animate.Easing.Linear)]
                }
            }, {
                duration: animate.scaleDuration(500, "expr-apply"),
                restTime: restTime
            });

            if (!isCalleeLambda) {
                return jumpTween.then(function () {
                    return animate.fx.shatter(stage, stage.getView(expr.get("id")), {
                        introDuration: introDuration,
                        outroDuration: outroDuration
                    });
                }).then(function () {
                    reset.forEach(function (tween) {
                        return tween.undo();
                    });
                    argView.opacity = 1;
                });
            }

            var clearPreview = [];
            return jumpTween.then(function () {
                // Replace arg hole with preview
                animate.tween(argView, {
                    scale: { x: 0, y: 0 },
                    opacity: 0
                }, {
                    duration: duration,
                    easing: animate.Easing.Cubic.Out
                });

                reset.push(animate.tween(lambdaView, {
                    subexpScale: 1.0,
                    padding: {
                        inner: 0,
                        right: 0,
                        left: 0
                    },
                    backgroundOpacity: 0
                }, {
                    duration: duration,
                    restTime: restTime,
                    easing: animate.Easing.Cubic.InOut
                }));

                lambdaView.strokeWhenChild = false;

                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = lambdaView.children(callee.get("id"), state)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _ref = _step.value;

                        var _ref2 = _slicedToArray(_ref, 2);

                        var childId = _ref2[0];
                        var exprId = _ref2[1];

                        if (exprId !== callee.get("body")) {
                            reset.push(animate.tween(stage.views[childId], {
                                scale: { x: 0 },
                                opacity: 0
                            }, {
                                duration: duration,
                                restTime: restTime,
                                easing: animate.Easing.Cubic.InOut
                            }));

                            reset.push(animate.tween(stage.views[childId], {
                                opacity: 0
                            }, {
                                duration: duration / 16,
                                restTime: restTime,
                                easing: animate.Easing.Cubic.InOut
                            }));
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                var targetName = state.getIn(["nodes", callee.get("arg"), "name"]);
                stage.semantics.searchNoncapturing(state.get("nodes"), targetName, lambdaBody).forEach(function (id) {
                    if (stage.views[id]) {
                        stage.views[id].previewOptions = {
                            duration: duration
                        };
                        stage.views[id].preview = expr.get("argument");
                        clearPreview.push(stage.views[id]);
                    }
                });

                reset.push(animate.tween(applyView, {
                    subexpScale: 1.0,
                    padding: {
                        inner: 0,
                        left: 0,
                        right: 0
                    },
                    backgroundOpacity: 0
                }, {
                    duration: duration,
                    restTime: restTime,
                    easing: animate.Easing.Cubic.InOut
                }));

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = applyView.children(expr.get("id"), state)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var _ref3 = _step2.value;

                        var _ref4 = _slicedToArray(_ref3, 2);

                        var _childId = _ref4[0];
                        var _exprId = _ref4[1];

                        if (_exprId !== expr.get("callee") && _exprId !== expr.get("argument")) {
                            reset.push(animate.tween(stage.views[_childId], {
                                scale: { x: 0 },
                                opacity: 0
                            }, {
                                duration: duration / 4,
                                restTime: restTime,
                                easing: animate.Easing.Cubic.InOut
                            }));
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                reset.push(animate.tween(argView, { x: 0 }, {
                    duration: duration / 4,
                    restTime: restTime,
                    easing: animate.Easing.Cubic.InOut
                }));

                return animate.after(totalTime).then(function () {
                    reset.forEach(function (tween) {
                        return tween.undo();
                    });
                    clearPreview.forEach(function (view) {
                        view.preview = null;
                        delete view.previewOptions;
                    });
                    argView.opacity = 1;
                    lambdaView.strokeWhenChild = true;
                });
            });
        },
        stepSound: "heatup",
        validateStep: function validateStep(semant, state, expr) {
            var callee = state.getIn(["nodes", expr.get("callee")]);
            var kind = semant.kind(callee);
            if (kind === "value" && callee.get("type") !== "lambda") {
                return expr.get("callee");
            }
            return null;
        },
        smallStep: function smallStep(semant, stage, state, expr) {
            var _semant$interpreter$b = semant.interpreter.betaReduce(stage, state, expr.get("callee"), [expr.get("argument")]),
                _semant$interpreter$b2 = _slicedToArray(_semant$interpreter$b, 3),
                topNodeId = _semant$interpreter$b2[0],
                newNodeIds = _semant$interpreter$b2[1],
                addedNodes = _semant$interpreter$b2[2];

            return [expr.get("id"), newNodeIds, addedNodes];
        },
        substepFilter: function substepFilter(semant, state, expr, field) {
            // Don't force evaluation of reference-with-holes that
            // has unfilled holes, so that it can be used in
            // argument position. However, force evaluation if it
            // doesn't have holes or has filled holes.
            if (field === "argument" && state.getIn(["nodes", expr.get(field), "type"]) === "reference") {
                var ref = state.getIn(["nodes", expr.get(field)]);

                if (!ref.has("params") || ref.get("params").length === 0) return true;

                if (ref.get("params").some(function (p) {
                    return state.getIn(["nodes", ref.get("arg_" + p), "type"]) !== "missing";
                })) {
                    return true;
                }

                return false;
            }
            return true;
        }
    }
};
},{"../core":32,"../../gfx/core":4,"../../gfx/animate":5}],48:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    op: {
        kind: "syntax",
        fields: ["name"],
        subexpressions: [],
        projection: {
            type: "text",
            text: "{name}"
        }
    },

    binop: {
        kind: "expression",
        fields: [],
        subexpressions: ["left", "op", "right"],
        projection: {
            type: "case",
            key: function key(nodes, expr) {
                return nodes.get(expr.get("op")).get("name");
            },
            cases: {
                "+": {
                    type: "default",
                    shape: "()",
                    color: "#ffcc00"
                },
                "-": {
                    type: "default",
                    shape: "()",
                    color: "#ffcc00"
                },
                "==": {
                    type: "default",
                    shape: "<>",
                    color: "hotpink",
                    padding: {
                        left: 25,
                        right: 25,
                        inner: 10,
                        top: 0,
                        bottom: 0
                    }
                }
            }
        },
        stepSound: function stepSound(semant, state, expr) {
            var op = state.get("nodes").get(expr.get("op"));
            if (op.get("name") === "==") {
                return ["shatter1", "heatup"];
            }
            return ["heatup"];
        },
        type: function type(semant, state, types, expr) {
            var nodes = state.get("nodes");
            var opExpr = nodes.get(expr.get("op"));
            var id = expr.get("id");
            var result = new Map();
            if (!opExpr) {
                result.set(id, "unknown");
            }

            var op = opExpr.get("name");
            if (op === "==") {
                result.set(id, "boolean");
            } else {
                result.set(id, "number");
                result.set(expr.get("left"), "number");
                result.set(expr.get("right"), "number");
            }

            return {
                types: result,
                // TODO: less ad-hoc
                complete: (types.get(expr.get("left")) === "number" || nodes.get(expr.get("left")).get("type") === "lambdaVar") && (types.get(expr.get("right")) === "number" || nodes.get(expr.get("right")).get("type") === "lambdaVar")
            };
        },
        // Invariant: all subexpressions are values or syntax;
        // none are missing. Return the first subexpression, if
        // any, that is blocking evaluation.
        validateStep: function validateStep(semant, state, expr) {
            var nodes = state.get("nodes");
            var left = expr.get("left");
            var leftExpr = nodes.get(left);
            var right = expr.get("right");
            var rightExpr = nodes.get(right);
            var op = nodes.get(expr.get("op")).get("name");

            if (op === "+" || op === "-") {
                if (leftExpr.get("ty") !== "number") {
                    return left;
                } else if (rightExpr.get("ty") !== "number") {
                    return right;
                }
            } else if (op === "==") {
                if (leftExpr.get("ty") !== rightExpr.get("ty")) {
                    return right;
                }
            }

            return null;
        },
        // TODO: switch to Immutable.Record to clean this up
        smallStep: function smallStep(semant, stage, state, expr) {
            var nodes = state.get("nodes");
            var op = nodes.get(expr.get("op")).get("name");
            if (op === "+") {
                return semant.number(nodes.get(expr.get("left")).get("value") + nodes.get(expr.get("right")).get("value"));
            } else if (op === "-") {
                return semant.number(nodes.get(expr.get("left")).get("value") - nodes.get(expr.get("right")).get("value"));
            } else if (op === "==") {
                return semant.bool(semant.shallowEqual(nodes.get(expr.get("left")), nodes.get(expr.get("right"))));
            }
            throw "Unrecognized operator " + op;
        }
    }
};
},{}],49:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _core = require("../core");

var core = _interopRequireWildcard(_core);

var _core2 = require("../../gfx/core");

var gfx = _interopRequireWildcard(_core2);

var _animate = require("../../gfx/animate");

var animate = _interopRequireWildcard(_animate);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.default = {
    conditional: {
        kind: "expression",
        fields: [],
        subexpressions: ["condition", "positive", "negative"],
        // projection: {
        //     type: "default",
        //     shape: "()",
        //     color: "lightblue",
        //     fields: ["'if'", "condition", "'then'", "positive", "'else'", "negative"],
        // },
        projection: {
            type: "vbox",
            horizontalAlign: 0.0,
            color: "lightblue",
            subexpScale: 1.0,
            ellipsize: true,
            rows: [{
                type: "default",
                shape: "none",
                fields: ["'if'", "condition", "'then'"],
                subexpScale: 1.0
            }, {
                type: "default",
                shape: "none",
                fields: ["'    '", "positive"],
                subexpScale: 1.0
            }, {
                type: "default",
                shape: "none",
                fields: ["'else'"],
                subexpScale: 1.0
            }, {
                type: "default",
                shape: "none",
                fields: ["'    '", "negative"],
                subexpScale: 1.0
            }]
        },
        type: function type(semant, state, types, expr) {
            var result = new Map();
            var positiveTy = types.get(expr.get("positive"));
            var branchesMatch = positiveTy === types.get(expr.get("negative")) && positiveTy !== null && typeof positiveTy !== "undefined";
            if (branchesMatch) {
                result.set(expr.get("id"), types.get(expr.get("positive")));
            }
            result.set(expr.get("condition"), "boolean");

            return {
                types: result,
                complete: branchesMatch && types.get(expr.get("condition")) === "boolean"
            };
        },
        validateStep: function validateStep(semant, state, expr) {
            var nodes = state.get("nodes");
            var condition = expr.get("condition");
            if (nodes.get(condition).get("ty") !== "boolean") {
                return condition;
            }

            var positive = expr.get("positive");
            var negative = expr.get("negative");
            var posType = nodes.get(positive).get("ty");
            var negType = nodes.get(negative).get("ty");
            if (posType && negType && posType !== negType) {
                return negative;
            }
            return null;
        },
        smallStep: function smallStep(semant, stage, state, expr) {
            var nodes = state.get("nodes");
            var cond = nodes.get(expr.get("condition")).get("value");
            // TODO: do this cleanup in evaluation?
            if (cond) {
                return nodes.get(expr.get("positive")).delete("parent").delete("parentField");
            }
            return nodes.get(expr.get("negative")).delete("parent").delete("parentField");
        },
        // Filter to determine which subexpressions to evaluate
        // before stepping the overall expression.
        substepFilter: function substepFilter(semant, state, expr, field) {
            return field === "condition";
        },
        stepPosition: function stepPosition(semant, stage, state, expr) {
            var nodes = state.get("nodes");
            var cond = nodes.get(expr.get("condition")).get("value");
            var view = stage.getView(expr.get(cond ? "positive" : "negative"));
            return {
                x: gfx.centerPos(view).x,
                y: gfx.centerPos(view).y
            };
        },
        stepAnimation: function stepAnimation(semant, stage, state, expr) {
            var nodes = state.get("nodes");
            var cond = nodes.get(expr.get("condition")).get("value");
            var color = cond ? "#00F" : "#F00";
            var branchId = cond ? expr.get("positive") : expr.get("negative");
            var branch = stage.getView(branchId);

            var view = stage.getView(expr.get("condition"));

            view.stroke = { lineWidth: 1, color: color };
            var reset = [];
            var speed = animate.scaleDuration(300, "expr-conditional");
            var pauseTime = animate.scaleDuration(700, "expr-conditional");
            var totalDuration = speed * 3;
            var restTime = totalDuration + pauseTime;

            return animate.tween(view, { stroke: { lineWidth: 4 } }, {
                duration: animate.scaleDuration(700, "expr-conditional"),
                easing: animate.Easing.Cubic.In
            }).then(function () {
                branch.stroke = { lineWidth: 1, color: color };
                return animate.tween(branch, { stroke: { lineWidth: 4 } }, {
                    duration: animate.scaleDuration(700, "expr-conditional"),
                    easing: animate.Easing.Cubic.In
                });
            }).then(function () {
                return animate.after(pauseTime);
            }).then(function () {
                var condView = stage.getView(expr.get("id"));

                // Animate away the parts that are not the chosen branch
                var ctr = 0;
                var safe = cond ? 1 : 3;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = condView.children(expr.get("id"), state)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _ref = _step.value;

                        var _ref2 = _slicedToArray(_ref, 1);

                        var childId = _ref2[0];

                        if (ctr !== safe) {
                            reset.push(animate.tween(stage.getView(childId), {
                                scale: { y: 0 }
                            }, {
                                duration: totalDuration,
                                restTime: restTime,
                                easing: animate.Easing.Cubic.InOut
                            }));
                            reset.push(animate.tween(stage.getView(childId), {
                                opacity: 0
                            }, {
                                duration: totalDuration / 8,
                                easing: animate.Easing.Cubic.In
                            }));
                        }
                        ctr += 1;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                reset.push(animate.tween(condView, {
                    padding: {
                        top: 0,
                        bottom: 0,
                        inner: 0,
                        right: 0,
                        left: 0
                    },
                    backgroundOpacity: 0,
                    subexpScale: 1
                }, {
                    duration: totalDuration,
                    restTime: restTime,
                    easing: animate.Easing.Cubic.InOut
                }));

                return Promise.all(reset);
            }).then(function () {
                return animate.after(pauseTime);
            }).then(function () {
                view.stroke = null;
                branch.stroke = null;
                reset.forEach(function (tween) {
                    return tween.undo();
                });
            });
        }
    }
};
},{"../core":32,"../../gfx/core":4,"../../gfx/animate":5}],50:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _core = require("../core");

var core = _interopRequireWildcard(_core);

var _core2 = require("../../gfx/core");

var gfx = _interopRequireWildcard(_core2);

var _animate = require("../../gfx/animate");

var animate = _interopRequireWildcard(_animate);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.default = {
    define: {
        kind: "statement",
        fields: ["name", "params"],
        subexpressions: ["body"],
        targetable: function targetable(semant, state, expr) {
            return !expr.has("parent");
        },
        notches: [{
            side: "left",
            type: "inset",
            shape: "wedge",
            relpos: 0.8
        }],
        projection: {
            type: "dynamicProperty",
            field: function field(state, exprId) {
                var node = state.getIn(["nodes", exprId]);
                if (node.has("parent")) {
                    return "attached";
                }
                return "default";
            },
            fields: {
                default: {
                    color: function color(projection) {
                        return animate.tween(projection, {
                            color: "OrangeRed"
                        }, {
                            duration: 500,
                            easing: animate.Easing.Color(animate.Easing.Cubic.Out, projection.color, "OrangeRed")
                        });
                    }
                },
                attached: {
                    color: function color(projection) {
                        return animate.tween(projection, {
                            color: "#594764"
                        }, {
                            duration: 500,
                            easing: animate.Easing.Color(animate.Easing.Cubic.Out, projection.color, "#594764")
                        });
                    }
                }
            },
            projection: {
                type: "vbox",
                horizontalAlign: 0.0,
                color: "OrangeRed",
                padding: {
                    top: 10,
                    left: 15,
                    inner: 5,
                    right: 10,
                    bottom: 10
                },
                rows: [{
                    type: "hbox",
                    shape: "none",
                    subexpScale: 1.0,
                    padding: {
                        left: 0, right: 0
                    },
                    children: [{
                        type: "text",
                        text: "def "
                    }, {
                        type: "hbox",
                        shape: "()",
                        radius: 0,
                        color: "salmon",
                        shadow: false,
                        shadowColor: "rgba(0,0,0,0)",
                        shadowOffset: 0,
                        stroke: {
                            lineWidth: 0,
                            color: "rgba(0,0,0,0)"
                        },
                        strokeWhenChild: false,
                        padding: {
                            left: 5,
                            right: 5,
                            inner: 0
                        },
                        children: [{ type: "text", text: "{name} " }, {
                            type: "generic",
                            view: ["custom", "argumentBar"],
                            options: {}
                        }]
                    }]
                }, {
                    type: "default",
                    shape: "none",
                    fields: ["'   '", "body"],
                    subexpScale: 1.0
                }]
            }
        }
    },

    defineAttach: {
        kind: "syntax",
        fields: [],
        subexpressions: [],
        targetable: function targetable() {
            return false;
        },
        notches: [{
            side: "right",
            type: "outset",
            shape: "wedge",
            relpos: 0.5,
            canAttach: function canAttach(semant, state, selfId, otherId, notchPair) {
                var nodes = state.get("nodes");
                var missingNodes = semant.search(nodes, otherId, function (nodes, id) {
                    return nodes.get(id).get("type") === "missing";
                }).filter(function (id) {
                    var node = nodes.get(id);
                    if (!node.get("parent")) return true;
                    var parent = nodes.get(node.get("parent"));
                    var substepFilter = semant.interpreter.substepFilter(parent.get("type"));
                    return substepFilter(semant, state, parent, node.get("parentField"));
                });

                return [missingNodes.length === 0, missingNodes];
            },
            canDetach: function canDetach() {
                return false;
            },
            onAttach: function onAttach(semant, state, selfId, otherId) {
                var name = state.getIn(["nodes", otherId, "name"]);
                state.set("globals", state.get("globals").set(name, otherId));
            },
            onDetach: function onDetach(semant, state, selfId, otherId) {
                var name = state.getIn(["nodes", otherId, "name"]);
                state.set("globals", state.get("globals").delete(name));
            }
        }],
        projection: {
            type: "sticky",
            side: "left",
            content: {
                type: "default",
                shape: "notch",
                color: "#594764",
                shadow: true,
                shadowColor: "#000",
                shadowOffset: 4
            }
        }
    }
};
},{"../core":32,"../../gfx/core":4,"../../gfx/animate":5}],51:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _core = require("../core");

var core = _interopRequireWildcard(_core);

var _core2 = require("../../gfx/core");

var gfx = _interopRequireWildcard(_core2);

var _animate = require("../../gfx/animate");

var animate = _interopRequireWildcard(_animate);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.default = {
    lambda: {
        kind: "value",
        type: function type(semant, state, types, expr) {
            return {
                types: new Map([[expr.get("id"), "lambda"]]),
                complete: typeof types.get(expr.get("body")) !== "undefined"
            };
        },
        fields: [],
        subexpressions: ["arg", "body"],
        projection: {
            type: "default",
            shape: "()",
            fields: ["arg", "'=>'", "body"],
            subexpScale: 1.0,
            padding: {
                top: 3.5,
                bottom: 3.5,
                left: 10,
                right: 10,
                inner: 5
            }
        },
        betaReduce: function betaReduce(semant, stage, state, expr, argIds) {
            return core.genericBetaReduce(semant, state, {
                topNode: expr,
                targetNode: state.get("nodes").get(expr.get("arg")),
                argIds: argIds,
                targetName: function targetName(node) {
                    return node.get("name");
                },
                isVar: function isVar(node) {
                    return node.get("type") === "lambdaVar";
                },
                varName: function varName(node) {
                    return node.get("name");
                },
                isCapturing: function isCapturing(node) {
                    return node.get("type") === "lambda";
                },
                captureName: function captureName(nodes, node) {
                    return nodes.get(node.get("arg")).get("name");
                },
                animateInvalidArg: function animateInvalidArg(id) {
                    animate.fx.error(stage, stage.views[id]);
                }
            });
        }
    },

    lambdaArg: {
        fields: ["name", "functionHole"],
        subexpressions: [],
        targetable: function targetable(semant, state, expr) {
            var nodes = state.get("nodes");
            var lambdaParent = nodes.get(expr.get("parent"));
            return !lambdaParent.has("parent");
        },
        projection: {
            type: "preview",
            content: {
                type: "dynamic",
                resetFields: ["text", "color"],
                field: function field(state, exprId) {
                    var isFunctionHole = !!state.getIn(["nodes", exprId, "functionHole"]);
                    if (isFunctionHole) return "functionHole";
                    return "default";
                },
                default: {
                    type: "text",
                    text: "({name})"
                },
                cases: {
                    functionHole: {
                        type: "default",
                        shape: "()",
                        radius: 0,
                        fields: ["name"]
                    }
                }
            }
        },
        betaReduce: function betaReduce(semant, stage, state, expr, argIds) {
            if (expr.get("parent")) {
                return semant.interpreter.betaReduce(stage, state, expr.get("parent"), argIds);
            }
            return null;
        }
    },

    lambdaVar: {
        fields: ["name"],
        subexpressions: [],
        projection: {
            type: "dynamic",
            field: function field(state, exprId) {
                var nodes = state.get("nodes");
                var current = nodes.get(exprId);
                var myName = current.get("name");
                while (current.get("parent")) {
                    current = nodes.get(current.get("parent"));
                    if (current.get("type") === "lambda" && nodes.get(current.get("arg")).get("name") === myName) {
                        return "enabled";
                    }
                }
                return "default";
            },
            onKeyChange: function onKeyChange(view, id, exprId, state, stage) {
                if (view.dynamicKey === "enabled") {
                    animate.fx.blink(stage, view, {
                        times: 3,
                        speed: 100,
                        color: "#6df902"
                    });

                    var nodes = state.get("nodes");
                    var current = nodes.get(exprId);
                    var myName = current.get("name");
                    while (current.get("parent")) {
                        current = nodes.get(current.get("parent"));
                        if (current.get("type") === "lambda" && nodes.get(current.get("arg")).get("name") === myName) {
                            animate.fx.blink(stage, stage.getView(current.get("arg")), {
                                times: 3,
                                speed: 100,
                                color: "#6df902",
                                field: "outerStroke"
                            });

                            break;
                        }
                    }
                }
            },
            default: {
                type: "hbox",
                shape: "()",
                strokeWhenChild: false,
                children: [{
                    type: "text",
                    text: "{name}",
                    color: "gray"
                }]
            },
            cases: {
                enabled: {
                    type: "preview",
                    content: {
                        type: "default",
                        shape: "()",
                        strokeWhenChild: false,
                        fields: ["name"]
                    }
                }
            }
        }
    }
};
},{"../core":32,"../../gfx/core":4,"../../gfx/animate":5}],52:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _immutable = require("immutable");

var immutable = _interopRequireWildcard(_immutable);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var baseReference = {
    kind: "expression",
    fields: ["name"],
    subexpressions: [],
    stepSound: "heatup",
    type: function type(semant, state, types, expr) {
        return {
            types: new Map(),
            complete: state.get("globals").has(expr.get("name"))
        };
    },
    targetable: function targetable(semant, state, expr) {
        if (expr.has("__meta") && expr.get("__meta").toolbox.targetable) {
            return true;
        }
        if (state.get("toolbox").includes(expr.get("id"))) {
            // If in toolbox, only targetable if defined
            return state.get("globals").has(expr.get("name"));
        }
        return !expr.get("parent") || !expr.get("locked");
    },
    smallStep: function smallStep(semant, stage, state, expr) {
        var res = state.get("globals").get(expr.get("name"));
        if (!res) return null;

        var resNode = state.get("nodes").get(res);
        if (resNode.get("type") === "define") {
            res = resNode.get("body");
        }

        var result = semant.clone(res, state.get("nodes"));
        return [expr.get("id"), [result[0].get("id")], [result[0].delete("parent").delete("parentField")].concat(result[1])];
    },
    validateStep: function validateStep(semant, state, expr) {
        if (!state.get("globals").has(expr.get("name"))) {
            return expr.get("id");
        }
        return null;
    },
    projection: {
        type: "dynamic",
        field: function field(state, exprId) {
            var name = state.getIn(["nodes", exprId, "name"]);
            if (state.get("globals").has(name)) {
                return "enabled";
            }
            return "default";
        },
        default: {
            type: "hbox",
            color: "OrangeRed",
            radius: 0,
            shape: "()",
            strokeWhenChild: true,
            children: [{
                type: "text",
                text: "{name}",
                color: "gray"
            }]
        },
        cases: {
            enabled: {
                type: "hbox",
                color: "OrangeRed",
                radius: 0,
                shape: "()",
                strokeWhenChild: true,
                children: [{
                    type: "text",
                    text: "{name}"
                }]
            }
        }
    }
};

exports.default = {
    reference: [baseReference, Object.assign({}, baseReference, {
        fields: ["name", "params"],
        subexpressions: function subexpressions(semant, expr) {
            var params = (expr.get ? expr.get("params") : expr.params) || [];
            return params.map(function (name) {
                return "arg_" + name;
            });
        },
        smallStep: function smallStep(semant, stage, state, expr) {
            // TODO: reuse orig smallStep somehow
            var res = state.get("globals").get(expr.get("name"));
            if (!res) return null;

            var resNode = state.get("nodes").get(res);
            if (resNode.get("type") === "define") {
                res = resNode.get("body");
            }

            if (expr.get("name") === "repeat") {
                // Black-box repeat
                var times = state.get("nodes").get(expr.get("arg_n"));
                var fn = state.get("nodes").get(expr.get("arg_f"));
                if (times.get("type") !== "number") return null;

                var resultExpr = semant.lambdaVar("x");
                for (var i = 0; i < times.get("value"); i++) {
                    // Rehydrate each time to get a new copy
                    var hydratedFn = semant.hydrate(state.get("nodes"), fn);
                    delete hydratedFn["parent"];
                    delete hydratedFn["parentField"];
                    // If hydrated function is a
                    // reference-with-holes, apply directly
                    if (Array.isArray(hydratedFn.params) && hydratedFn.params.length > 0) {
                        var arg = {};
                        arg["arg_" + hydratedFn.params[0]] = resultExpr;
                        resultExpr = Object.assign(hydratedFn, arg);
                    } else {
                        resultExpr = semant.apply(hydratedFn, resultExpr);
                    }
                    hydratedFn.locked = true;
                    delete resultExpr["parent"];
                    delete resultExpr["parentField"];
                    resultExpr.locked = true;
                }
                resultExpr = semant.lambda(semant.lambdaArg("x"), resultExpr);
                var newNodes = semant.flatten(resultExpr).map(function (n) {
                    return immutable.Map(n);
                });
                return [expr.get("id"), [newNodes[0].get("id")], newNodes];
            }

            if (!(expr.has("parent") && state.getIn(["nodes", expr.get("parent"), "type"]) === "define") && expr.get("params") && expr.get("params").length > 0 && expr.get("params").some(function (field) {
                return state.getIn(["nodes", expr.get("arg_" + field), "type"]) !== "missing";
            })) {
                var params = expr.get("params");
                var _result = semant.interpreter.betaReduce(stage, state, res, params.map(function (name) {
                    return expr.get("arg_" + name);
                }));
                if (_result) {
                    var _result2 = _slicedToArray(_result, 3),
                        _ = _result2[0],
                        newNodeIds = _result2[1],
                        addedNodes = _result2[2];

                    return [expr.get("id"), newNodeIds, addedNodes];
                }
                return null;
            }

            var result = semant.clone(res, state.get("nodes"));
            return [expr.get("id"), [result[0].get("id")], [result[0].delete("parent").delete("parentField")].concat(result[1])];
        },
        // Only care about arguments if partially filled
        substepFilter: function substepFilter(semant, state, expr, field) {
            var params = expr.get("params");
            if (!params || params.length === 0) {
                // wait, wtf?
                console.warn("es6.reference#substepFilter: No params, but asked about field " + field + "?");
                return true;
            }

            return !params.every(function (p) {
                return state.getIn(["nodes", expr.get("arg_" + p), "type"]) === "missing";
            });
        },
        projection: {
            type: "dynamic",
            field: function field(state, exprId) {
                var name = state.getIn(["nodes", exprId, "name"]);
                if (state.get("globals").has(name)) {
                    return "enabled";
                }
                return "default";
            },
            default: {
                type: "hbox",
                color: "OrangeRed",
                radius: 0,
                shape: "()",
                strokeWhenChild: true,
                children: [{
                    type: "text",
                    text: "{name}",
                    color: "gray"
                }, {
                    type: "generic",
                    view: ["custom", "argumentBar"],
                    options: {}
                }]
            },
            cases: {
                enabled: {
                    type: "hbox",
                    color: "OrangeRed",
                    radius: 0,
                    shape: "()",
                    strokeWhenChild: true,
                    children: [{
                        type: "text",
                        text: "{name}"
                    }, {
                        type: "generic",
                        view: ["custom", "argumentBar"],
                        options: {}
                    }]
                }
            }
        }
    })]
};
},{"immutable":70}],53:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    number: {
        kind: "value",
        type: "number",
        fields: ["value"],
        subexpressions: [],
        projection: {
            type: "default",
            shape: "()",
            color: "cornsilk",
            highlightColor: "orangered",
            fields: ["value"]
        }
    },

    dynamicVariant: {
        kind: "value",
        type: function type(semant, state, types, expr) {
            return {
                types: new Map([[expr.get("id"), expr.get("variant")]]),
                // TODO: this isn't true if it's a variant with
                // fields
                complete: true
            };
        },
        fields: ["variant", "value"],
        subexpressions: [],
        projection: {
            type: "default",
            shape: "()",
            color: "cornsilk",
            fields: ["value"]
        }
    },

    symbol: [{
        kind: "value",
        type: "symbol",
        fields: ["name"],
        subexpressions: [],
        goalNames: {
            "star": ["star", "a star", "stars"],
            "circle": ["circle", "a circle", "circles"],
            "triangle": ["triangle", "a triangle", "triangles"],
            "square": ["square", "a square", "squares"]
        },
        projection: {
            type: "case",
            on: "name",
            cases: {
                star: {
                    type: "symbol",
                    symbol: "star"
                },
                circle: {
                    type: "symbol",
                    symbol: "circle"
                },
                triangle: {
                    type: "symbol",
                    symbol: "triangle"
                },
                rect: {
                    type: "symbol",
                    symbol: "rect"
                }
            }
        }
    }, {
        kind: "value",
        type: "symbol",
        fields: ["name"],
        subexpressions: [],
        goalNames: {
            "star": ["burger", "a burger", "burgers"],
            "circle": ["lollipop", "a lollipop", "lollipops"],
            "triangle": ["fries", "some fries", "bags of fries"],
            "square": ["candy", "a piece of candy", "pieces of candy"]
        },
        nameReplacements: [["trianglify", "gimmeFries"], ["starify", "gimmeBurger"], ["squarify", "gimmeCandy"], ["makeStar", "makeBurger"], ["star", "burger"], ["rect", "candy"], ["triangle", "fries"]],
        projection: {
            type: "case",
            on: "name",
            cases: {
                star: {
                    type: "sprite",
                    image: "food_1",
                    size: { w: 50 }
                },
                circle: {
                    type: "sprite",
                    image: "food_2",
                    size: { h: 50 }
                },
                triangle: {
                    type: "sprite",
                    image: "food_3",
                    size: { w: 50 }
                },
                rect: {
                    type: "sprite",
                    image: "food_4",
                    size: { w: 50 }
                }
            }
        }
    }],

    bool: {
        kind: "value",
        type: "boolean",
        fields: ["value"],
        subexpressions: [],
        projection: {
            type: "default",
            shape: "<>",
            color: "hotpink",
            fields: ["value"],
            padding: {
                left: 25,
                right: 25,
                inner: 10,
                top: 0,
                bottom: 0
            }
        }
    }
};
},{}],9:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _core = require("./core");

var core = _interopRequireWildcard(_core);

var _core2 = require("../gfx/core");

var gfx = _interopRequireWildcard(_core2);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _es = require("../syntax/es6");

var _transform = require("./transform");

var _transform2 = _interopRequireDefault(_transform);

var _apply = require("./es6/apply");

var _apply2 = _interopRequireDefault(_apply);

var _binop = require("./es6/binop");

var _binop2 = _interopRequireDefault(_binop);

var _conditional = require("./es6/conditional");

var _conditional2 = _interopRequireDefault(_conditional);

var _define = require("./es6/define");

var _define2 = _interopRequireDefault(_define);

var _lambda = require("./es6/lambda");

var _lambda2 = _interopRequireDefault(_lambda);

var _reference = require("./es6/reference");

var _reference2 = _interopRequireDefault(_reference);

var _value = require("./es6/value");

var _value2 = _interopRequireDefault(_value);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

exports.default = (0, _transform2.default)({
    name: "ECMAScript 6",
    parser: {
        parse: _es.makeParser,
        unparse: _es.makeUnparser,

        templatizeName: function templatizeName(semant, name) {
            var defn = semant.definitionOf("symbol");
            var replacements = defn.nameReplacements || [];

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = replacements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _ref = _step.value;

                    var _ref2 = _slicedToArray(_ref, 2);

                    var key = _ref2[0];
                    var replacement = _ref2[1];

                    name = name.replace(new RegExp(key, "g"), replacement);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return name;
        },

        extractDefines: function extractDefines(semant, expr) {
            if (expr.type !== "define") {
                return null;
            }
            // needs to be a thunk
            var thunk = null;
            // we have access to expr.params, so generate a thunk that
            // can take arguments
            if (expr.params) {
                var params = expr.params;
                thunk = function thunk() {
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    var missing = params.map(function (_, idx) {
                        if (args[idx]) {
                            return args[idx];
                        }
                        // TODO: why is locked not respected?
                        var a = semant.missing();
                        a.locked = false;
                        return a;
                    });
                    return semant.reference.apply(semant, [expr.name, params].concat(_toConsumableArray(missing)));
                };
                // Flag to the parser that this thunk can take arguments
                thunk.takesArgs = true;
            } else {
                thunk = function thunk() {
                    return semant.reference(expr.name, []);
                };
            }
            return [expr.name, thunk];
        },

        extractGlobals: function extractGlobals(semant, expr) {
            if (expr.type !== "define") {
                return null;
            }
            // We have access to expr.params
            return [expr.name, expr];
        },

        extractGlobalNames: function extractGlobalNames(semant, name, expr) {
            // We have access to expr.params
            if (expr.params) {
                var params = expr.params;
                var thunk = function thunk() {
                    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                        args[_key2] = arguments[_key2];
                    }

                    var missing = params.map(function (_, idx) {
                        if (args[idx]) {
                            return args[idx];
                        }
                        // TODO: why is locked not respected?
                        var a = semant.missing();
                        a.locked = false;
                        return a;
                    });
                    return semant.reference.apply(semant, [expr.name, params].concat(_toConsumableArray(missing)));
                };
                // Flag to the parser that this thunk can take arguments
                thunk.takesArgs = true;
                return [name, thunk];
            }
            return [name, function () {
                return semant.reference(name);
            }];
        },

        postParse: function postParse(nodes, goal, board, toolbox, globals) {
            return {
                nodes: nodes,
                goal: goal,
                board: board,
                toolbox: toolbox,
                globals: globals
            };
        }
    },

    expressions: Object.assign({
        missing: core.missing

    }, _apply2.default, _binop2.default, _conditional2.default, _define2.default, _lambda2.default, _reference2.default, _value2.default)
});
},{"./core":32,"../gfx/core":4,"../gfx/animate":5,"../syntax/es6":33,"./transform":34,"./es6/apply":47,"./es6/binop":48,"./es6/conditional":49,"./es6/define":50,"./es6/lambda":51,"./es6/reference":52,"./es6/value":53}],35:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.templateText = templateText;

var _core = require("../gfx/core");

var gfx = _interopRequireWildcard(_core);

var _progression = require("../game/progression");

var progression = _interopRequireWildcard(_progression);

var _loader = require("../loader");

var _loader2 = _interopRequireDefault(_loader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Replace references to objects like stars with the correct name
 */
function templateText(semantics, text) {
    return text.replace(/\{([\w\s]+)\}/g, function (wholeMatch, groupMatch) {
        var defn = semantics.definitionOf("symbol");
        var matchParts = groupMatch.split(" ");
        var key = matchParts[matchParts.length - 1];
        var offset = matchParts.length > 1 ? 1 : 0;
        if (!defn.goalNames[key] && key.endsWith("s")) {
            key = key.slice(0, -1);
            offset = 2;
        }
        return defn.goalNames[key][offset];
    });
}

var Goal = function () {
    function Goal(stage) {
        _classCallCheck(this, Goal);

        this.stage = stage;

        var chapter = progression.currentChapter();
        var alienIndex = Math.floor((progression.currentLevel() - chapter.startIdx) / (chapter.endIdx - chapter.startIdx + 1) * chapter.resources.aliens.length);
        var image = _loader2.default.images[chapter.resources.aliens[alienIndex]];
        var alien = stage.allocate(gfx.sprite({
            image: image,
            size: { h: 80, w: 80 * (image.frame.w / image.frame.h) }
        }));
        this.stage.views[alien].pos = { x: 5, y: 5 };

        this.alien = alien;

        var container = stage.allocate(gfx.layout.hbox(function (_id, state) {
            return state.get("goal");
        }, {
            subexpScale: 1
        }, gfx.baseProjection));
        this.container = stage.allocate(gfx.patch3(gfx.constant(container), {
            left: _loader2.default.images["caption-long-left"],
            middle: _loader2.default.images["caption-long-mid"],
            right: _loader2.default.images["caption-long-right"]
        }));

        this.textGoal = null;
    }

    _createClass(Goal, [{
        key: "startLevel",
        value: function startLevel(textGoal) {
            var showConcreteGoal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (textGoal) {
                textGoal = templateText(this.stage.semantics, textGoal);

                this.text = this.stage.allocate(gfx.text(textGoal, {
                    fontSize: 20,
                    font: gfx.text.sans
                }));
                var container = null;
                if (showConcreteGoal) {
                    var goalLabel = this.stage.allocate(gfx.text("Goal: ", {
                        fontSize: 20,
                        font: gfx.text.sans
                    }));

                    var contents = function contents(_id, state) {
                        var result = [goalLabel];
                        return result.concat(state.get("goal").toArray());
                    };
                    container = this.stage.allocate(gfx.layout.vbox(gfx.constant(this.text, this.stage.allocate(gfx.layout.hbox(contents, {
                        subexpScale: 1
                    }, gfx.baseProjection))), {
                        subexpScale: 1
                    }, gfx.baseProjection));
                } else {
                    var _contents = gfx.constant(this.text);
                    container = this.stage.allocate(gfx.layout.hbox(_contents, {
                        subexpScale: 1
                    }, gfx.baseProjection));
                }

                this.container = this.stage.allocate(gfx.patch3(gfx.constant(container), {
                    left: _loader2.default.images["caption-long-left"],
                    middle: _loader2.default.images["caption-long-mid"],
                    right: _loader2.default.images["caption-long-right"]
                }));
            }

            this.stage.getView(this.container).pos = {
                x: this.stage.getView(this.alien).size.w,
                y: 5
            };

            if (textGoal) {
                this.stage.getView(this.container).pos.x -= 20;
            }
        }
    }, {
        key: "drawImpl",
        value: function drawImpl(state) {
            var alien = this.stage.views[this.alien];
            alien.prepare(null, null, state, this.stage);

            var ctx = this.stage.ctx;

            var shadowSize = 3;
            var padding = 20;
            ctx.save();
            ctx.beginPath();
            ctx.fillStyle = "#000";
            ctx.moveTo(0, padding + shadowSize + alien.pos.y + alien.size.h);
            ctx.quadraticCurveTo(padding + alien.pos.x + alien.size.w, padding + shadowSize + alien.pos.y + alien.size.h, padding + alien.pos.x + alien.size.w, 0);
            ctx.lineTo(0, 0);
            ctx.fill();

            ctx.beginPath();
            ctx.fillStyle = "#594764";
            ctx.moveTo(0, padding + alien.pos.y + alien.size.h);
            ctx.quadraticCurveTo(padding + alien.pos.x + alien.size.w, padding + alien.pos.y + alien.size.h, padding + alien.pos.x + alien.size.w, 0);
            ctx.lineTo(0, 0);
            ctx.fill();
            ctx.restore();

            alien.draw(null, null, state, this.stage, this.stage.makeBaseOffset());

            var view = this.stage.views[this.container];
            view.prepare(null, null, state, this.stage);
            view.draw(null, null, state, this.stage, this.stage.makeBaseOffset());
        }
    }, {
        key: "animatedNodes",
        value: function animatedNodes() {
            if (this.textGoal) {
                return [this.text];
            }
            return [];
        }
    }, {
        key: "victory",
        value: function victory() {
            if (this.text) {
                this.stage.views[this.text].text = "";
                this.stage.getView(this.container).opacity = 0;
            }
        }
    }]);

    return Goal;
}();

exports.default = Goal;
},{"../gfx/core":4,"../game/progression":8,"../loader":3}],37:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _core = require("../gfx/core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _loader = require("../loader");

var _loader2 = _interopRequireDefault(_loader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TOOLBOX_ROW_HEIGHT = 90;
var TOOLBOX_LEFT_MARGIN = 40;
var TOOLBOX_RIGHT_MARGIN = 90;
var TOOLBOX_INNER_MARGIN = 20;

var Toolbox = function () {
    function Toolbox(stage) {
        _classCallCheck(this, Toolbox);

        this.stage = stage;
        this.bg = stage.allocateInternal(gfx.layout.sticky(gfx.layout.hexpand(gfx.sprite({
            image: _loader2.default.images["toolbox-bg"],
            size: { h: TOOLBOX_ROW_HEIGHT }
        })), "bottom"));

        this._firstRender = true;
        this.rows = 1;
    }

    _createClass(Toolbox, [{
        key: "containsPoint",
        value: function containsPoint(pos) {
            return pos.y >= this.stage.internalViews[this.bg].pos.y;
        }
    }, {
        key: "getNodeAtPos",
        value: function getNodeAtPos(state, pos) {
            if (!this.containsPoint(pos)) return [null, null];

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = state.get("toolbox")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var nodeId = _step.value;

                    if (!this.stage.semantics.targetable(state, state.get("nodes").get(nodeId))) {
                        continue;
                    }
                    var projection = this.stage.views[nodeId];

                    if (projection.containsPoint(pos, this.stage.makeBaseOffset())) {
                        return [nodeId, nodeId];
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return [null, null];
        }
    }, {
        key: "reset",
        value: function reset() {}
    }, {
        key: "startLevel",
        value: function startLevel(state) {
            this._firstRender = true;
            this.resizeRows(state);
        }
    }, {
        key: "resizeRows",
        value: function resizeRows(state) {
            // Figure out how many rows to use
            var x = TOOLBOX_LEFT_MARGIN;
            var rows = 1;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = state.get("toolbox")[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var nodeId = _step2.value;

                    var projection = this.stage.views[nodeId];
                    projection.scale = { x: 1, y: 1 };
                    projection.prepare(nodeId, nodeId, state, this.stage);

                    if (x + projection.size.w >= this.stage.width - TOOLBOX_RIGHT_MARGIN) {
                        rows += 1;
                        x = TOOLBOX_LEFT_MARGIN;
                    }
                    x += projection.size.w + TOOLBOX_INNER_MARGIN;
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.rows = rows;
            this.stage.internalViews[this.bg].size.h = this.rowHeight * this.rows;
        }
    }, {
        key: "drawBase",
        value: function drawBase(state) {
            this.stage.internalViews[this.bg].prepare(null, null, state, this.stage);
            this.stage.internalViews[this.bg].draw(null, null, state, this.stage, {
                x: 0,
                y: 0,
                sx: 1,
                sy: 1
            });
        }
    }, {
        key: "drawImpl",
        value: function drawImpl(state) {
            var x = TOOLBOX_LEFT_MARGIN;
            var y = this.stage.internalViews[this.bg].pos.y;

            var curRow = 0;
            x = TOOLBOX_LEFT_MARGIN;
            var i = 0;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = state.get("toolbox")[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var nodeId = _step3.value;

                    var projection = this.stage.views[nodeId];
                    if (x + projection.size.w >= this.stage.width - TOOLBOX_RIGHT_MARGIN) {
                        curRow += 1;
                        x = TOOLBOX_LEFT_MARGIN;
                        i = 0;
                    }

                    var nodeY = y + curRow * this.rowHeight + this.rowHeight / 2;

                    if (this.stage.isSelected(nodeId)) {
                        // Do nothing - don't override position
                    } else if (this._firstRender) {
                        projection.pos.x = x + this.stage.width / 3;
                        projection.pos.y = nodeY;
                        projection.scale.x = 0;
                        projection.scale.y = 0;
                        projection.anchor = { x: 0, y: 0.5 };
                        animate.tween(projection, {
                            pos: { x: x },
                            scale: { x: 1, y: 1 }
                        }, {
                            easing: animate.Easing.Cubic.Out,
                            duration: 400
                        }).delay(200 * Math.log(2 + i));
                    } else if (projection.pos.x !== x && !projection.animating && !this._firstRender) {
                        animate.tween(projection, { pos: { x: x, y: nodeY }, anchor: { x: 0, y: 0.5 } }, {
                            duration: 400,
                            easing: animate.Easing.Cubic.Out
                        });
                    } else if (!projection.animating) {
                        projection.pos.x = x;
                        projection.pos.y = nodeY;
                        projection.anchor = { x: 0, y: 0.5 };
                    }

                    x += projection.size.w + TOOLBOX_INNER_MARGIN;

                    projection.prepare(nodeId, nodeId, state, this.stage);

                    var node = state.get("nodes").get(nodeId);
                    if (node.has("__meta") && node.get("__meta").toolbox.unlimited) {
                        projection.draw(nodeId, nodeId, state, this.stage, this.stage.makeBaseOffset({
                            x: 2,
                            y: 6
                        }));
                    }

                    projection.draw(nodeId, nodeId, state, this.stage, this.stage.makeBaseOffset());

                    if (node.has("__meta") && node.get("__meta").toolbox.unlimited) {
                        projection.draw(nodeId, nodeId, state, this.stage, this.stage.makeBaseOffset({
                            x: -2,
                            y: -6
                        }));
                    }

                    i++;
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            this._firstRender = false;
        }
    }, {
        key: "size",
        get: function get() {
            return {
                w: this.stage.internalViews[this.bg].size.w,
                h: this.stage.internalViews[this.bg].size.h
            };
        }
    }, {
        key: "pos",
        get: function get() {
            return this.stage.internalViews[this.bg].pos;
        }
    }, {
        key: "rowHeight",
        get: function get() {
            return this.rows <= 1 ? TOOLBOX_ROW_HEIGHT : 70;
        }
    }]);

    return Toolbox;
}();

exports.default = Toolbox;
},{"../gfx/core":4,"../gfx/animate":5,"../loader":3}],38:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _core = require("../gfx/core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _progression = require("../game/progression");

var progression = _interopRequireWildcard(_progression);

var _loader = require("../loader");

var _loader2 = _interopRequireDefault(_loader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Sidebar = function () {
    function Sidebar(stage) {
        _classCallCheck(this, Sidebar);

        this.stage = stage;

        this.color = "#594764";

        this.viewMap = new Map();
        this.fullWidth = 250;

        this._tween = null;
        this.status = "closed";

        var gradient = stage.ctx.createLinearGradient(0, 0, 15, 0);
        gradient.addColorStop(0, "rgba(0,0,0,0)");
        gradient.addColorStop(1, "#594764");
        this.gradient = gradient;

        // Make a dashed-outline to serve as a placeholder indicator
        this.indicator = this.stage.allocate(gfx.layout.hbox(function () {
            return [];
        }, {
            notches: [{
                side: "left",
                type: "inset",
                shape: "wedge",
                relpos: 0.8
            }],
            stroke: {
                lineWidth: 5,
                color: "#000",
                lineDash: [10, 5]
            },
            padding: {
                top: 0,
                bottom: 0,
                left: 100,
                right: 100
            },
            color: null,
            opacity: 0,
            minHeight: 0
        }));

        this.showing = false;
    }

    _createClass(Sidebar, [{
        key: "resetIndicator",
        value: function resetIndicator() {
            var indicator = this.stage.getView(this.indicator);
            if (indicator.tween) {
                indicator.tween.completed();
                indicator.tween = null;
            }
            indicator.stroke.color = "#000";
            indicator.opacity = 0;
            indicator.padding.top = 0;
            indicator.padding.bottom = 0;
        }
    }, {
        key: "startLevel",
        value: function startLevel(state) {
            var _this = this;

            // Only show globals if they have a reference on the board
            var nodes = state.get("nodes");
            var globals = state.get("globals");

            var names = new Set();

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = state.get("toolbox").concat(state.get("board"))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var id = _step.value;

                    this.stage.semantics.search(nodes, id, function (_, nid) {
                        var expr = nodes.get(nid);
                        if (expr.get("type") === "reference" && globals.has(expr.get("name"))) {
                            names.add(expr.get("name"));
                        }
                    });
                }

                // Recursively add referenced names
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var newNames = names;
            var count = 0;

            var _loop = function _loop() {
                var nextNames = new Set();
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = newNames[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var _name = _step3.value;

                        var _id = state.get("globals").get(_name);
                        _this.stage.semantics.search(nodes, _id, function (_, nid) {
                            var expr = nodes.get(nid);
                            if (expr.get("type") === "reference" && globals.has(expr.get("name"))) {
                                var _name2 = expr.get("name");
                                if (!names.has(_name2)) {
                                    names.add(_name2);
                                    nextNames.add(_name2);
                                }
                            }
                        });
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                newNames = nextNames;
                count += 1;
            };

            while (newNames.size > 0 && count < 5) {
                _loop();
            }

            // TODO: don't hardcode repeat (also see stage/stage.js)
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = names[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var name = _step2.value;

                    if (name === "repeat") continue;
                    var viewId = this.project(state, name, globals.get(name));
                    this.viewMap.set(name, viewId);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.showing = names.size > 0 || state.get("board").some(function (id) {
                return state.getIn(["nodes", id, "type"]) === "define";
            });
            return this.showing;
        }
    }, {
        key: "addGlobal",
        value: function addGlobal(state, name) {
            var nodeId = state.getIn(["globals", name]);
            var viewId = nodeId;
            if (this.stage.getView(nodeId)) {
                var view = this.stage.getView(viewId);
                view.anchor = { x: 0, y: 0 };
                view.pos.x += this.stage.sidebarWidth;
            } else {
                viewId = this.project(state, name, nodeId);
            }
            this.viewMap.set(name, viewId);
            animate.fx.blink(this.stage, this.stage.getView(viewId), {
                times: 2,
                color: "magenta",
                speed: 300,
                lineWidth: 5
            });
        }
    }, {
        key: "toggle",
        value: function toggle() {
            if (this._tween) {
                this._tween.cancel();
            }

            if (!this.showing) {
                // No entries/defines, don't appear
                this.stage.sidebarWidth = 0;
                return;
            }

            if (this.status === "closed") {
                this.status = "open";
                this._tween = animate.tween(this.stage, { sidebarWidth: this.fullWidth }, {
                    duration: 500,
                    easing: animate.Easing.Cubic.Out
                });
            } else {
                this.status = "closed";
                this._tween = animate.tween(this.stage, { sidebarWidth: 250 }, {
                    duration: 500,
                    easing: animate.Easing.Cubic.Out
                });
            }
        }
    }, {
        key: "drawImpl",
        value: function drawImpl(state) {
            var _stage = this.stage,
                ctx = _stage.ctx,
                sidebarWidth = _stage.sidebarWidth;

            ctx.save();

            ctx.fillStyle = this.color;
            ctx.fillRect(0, 0, sidebarWidth, this.stage.height);

            var offset = this.stage.makeBaseOffset();

            var curY = 10;

            this.stage.getView(this.indicator).pos = {
                x: 10,
                y: curY
            };
            this.stage.drawProjection(state, this.indicator, offset);
            curY += gfx.absoluteSize(this.stage.getView(this.indicator)).h + 10;

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = state.get("globals")[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var _ref = _step4.value;

                    var _ref2 = _slicedToArray(_ref, 1);

                    var key = _ref2[0];

                    if (!this.viewMap.has(key)) {
                        continue;
                    }
                    var viewId = this.viewMap.get(key);
                    var view = this.stage.views[viewId];
                    view.pos.x = 10;
                    view.pos.y = curY;
                    this.stage.drawProjection(state, viewId, offset);
                    var size = gfx.absoluteSize(view);
                    curY += size.h + 10;
                    this.fullWidth = Math.max(this.fullWidth, size.w + 20);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            ctx.translate(sidebarWidth - 15, 0);
            ctx.fillStyle = this.gradient;
            ctx.fillRect(0, 0, 15, this.stage.height);

            ctx.restore();
        }
    }, {
        key: "project",
        value: function project(state, name, id) {
            var nodes = state.get("nodes");

            var result = null;
            var queue = [id];
            while (queue.length > 0) {
                var subId = queue.pop();
                if (result === null) result = subId;
                var expr = nodes.get(subId);

                this.stage.views[subId] = this.stage.semantics.project(this.stage, nodes, expr);

                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = this.stage.semantics.subexpressions(expr)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var field = _step5.value;

                        queue.push(expr.get(field));
                    }
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }
            }

            return id;
        }
    }]);

    return Sidebar;
}();

exports.default = Sidebar;
},{"../gfx/core":4,"../gfx/animate":5,"../game/progression":8,"../loader":3}],39:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _level = require("../game/level");

var level = _interopRequireWildcard(_level);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StuckEffect = function () {
    function StuckEffect(stage) {
        var _this = this;

        _classCallCheck(this, StuckEffect);

        this.stage = stage;
        this.opacity = 0.0;

        animate.tween(this, {
            opacity: 0.5
        }, {
            duration: 1000,
            easing: animate.Easing.Cubic.Out
        }).then(function () {
            return _this.highlightMismatches();
        });
    }

    _createClass(StuckEffect, [{
        key: "highlightMismatches",
        value: function highlightMismatches() {
            var _this2 = this;

            // Get a partial matching between board/goal
            var state = this.stage.getState();
            var matching = level.checkVictory(state, this.stage.semantics, true);
            var reverseMatching = {};
            Object.keys(matching).forEach(function (id) {
                reverseMatching[matching[id]] = id;
            });

            var board = state.get("board").filter(function (n) {
                return !_this2.stage.semantics.ignoreForVictory(state.getIn(["nodes", n]));
            });
            var goal = state.get("goal");

            var blinkers = [];

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var id = _step.value;

                    if (typeof reverseMatching[id] === "undefined") {
                        blinkers.push(id);
                        this.stage.getView(id).stroke = { color: "#F00", lineWidth: 0 };
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = goal[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _id = _step2.value;

                    if (typeof matching[_id] === "undefined") {
                        blinkers.push(_id);
                        this.stage.getView(_id).stroke = { color: "#F00", lineWidth: 0 };
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            var time = 0;
            animate.infinite(function (dt) {
                time += dt;
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = blinkers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var _id2 = _step3.value;

                        _this2.stage.getView(_id2).stroke.lineWidth = 2 * (1 + Math.sin(time / 100));
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            });
        }
    }, {
        key: "prepare",
        value: function prepare() {}
    }, {
        key: "draw",
        value: function draw() {
            var ctx = this.stage.ctx;


            ctx.fillStyle = "#000";
            ctx.globalAlpha = this.opacity;
            ctx.fillRect(0, 0, this.stage.width, this.stage.height);
        }
    }]);

    return StuckEffect;
}();

exports.default = StuckEffect;
},{"../gfx/animate":5,"../game/level":7}],40:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _core = require("../gfx/core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _progression = require("../game/progression");

var progression = _interopRequireWildcard(_progression);

var _loader = require("../loader");

var _loader2 = _interopRequireDefault(_loader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SyntaxJournal = function () {
    function SyntaxJournal(stage) {
        var _this = this;

        _classCallCheck(this, SyntaxJournal);

        this.stage = stage;

        var syntaxJournal = gfx.layout.sticky(gfx.ui.imageButton({
            normal: _loader2.default.images["journal-default"],
            hover: _loader2.default.images["journal-hover"],
            active: _loader2.default.images["journal-mousedown"]
        }, {
            click: function click() {
                return _this.stage.syntaxJournal.toggle();
            }
        }), "bottom", {
            align: "right"
        });
        syntaxJournal.size = { w: 79, h: 78 };
        this.button = stage.allocateInternal(syntaxJournal);

        this.overlay = stage.allocateInternal(gfx.layout.expand(gfx.rect({
            color: "#000",
            opacity: 0.7
        }), {
            horizontal: true,
            vertical: true
        }));

        this.background = stage.allocateInternal(gfx.layout.sticky(gfx.sprite({
            image: _loader2.default.images["journal-bg"],
            size: { w: 558, h: 534 }
        }), "center"));

        this.next = stage.allocateInternal(gfx.layout.sticky(gfx.ui.imageButton({
            normal: _loader2.default.images["btn-next-default"],
            hover: _loader2.default.images["btn-next-hover"],
            active: _loader2.default.images["btn-next-down"]
        }, {
            click: function click() {
                return _this.currentSyntax++;
            }
        }), "center", {
            marginX: 270
        }));

        this.prev = stage.allocateInternal(gfx.layout.sticky(gfx.ui.imageButton({
            normal: _loader2.default.images["btn-back-default"],
            hover: _loader2.default.images["btn-back-hover"],
            active: _loader2.default.images["btn-back-down"]
        }, {
            click: function click() {
                return _this.currentSyntax--;
            }
        }), "center", {
            marginX: -250
        }));

        this.state = "closed";

        this.syntaxes = {};
        this.currentSyntax = 0;
    }

    _createClass(SyntaxJournal, [{
        key: "getNodeAtPos",
        value: function getNodeAtPos(state, pos) {
            if (this.state === "closed") {
                var journal = this.stage.internalViews[this.button];
                if (journal.containsPoint(pos, { x: 0, y: 0, sx: 1, sy: 1 })) {
                    return [this.button, this.button];
                }
            } else {
                var prev = this.stage.getView(this.prev);
                var next = this.stage.getView(this.next);
                if (this.showBack && prev.containsPoint(pos, { x: 0, y: 0, sx: 1, sy: 1 })) {
                    return [this.prev, this.prev];
                } else if (this.showForward && next.containsPoint(pos, { x: 0, y: 0, sx: 1, sy: 1 })) {
                    return [this.next, this.next];
                }
            }
            return [null, null];
        }
    }, {
        key: "drawBase",
        value: function drawBase(state) {
            this.stage.internalViews[this.button].prepare(null, null, state, this.stage);
            this.stage.internalViews[this.button].draw(null, null, state, this.stage, {
                x: 0,
                y: 0,
                sx: 1,
                sy: 1
            });
        }
    }, {
        key: "drawImpl",
        value: function drawImpl(state) {
            if (this.isOpen) {
                var bg = this.stage.getView(this.background);
                var offset = {
                    x: 0,
                    y: 0,
                    sx: 1,
                    sy: 1,
                    opacity: bg.opacity
                };

                this.stage.drawInternalProjection(state, this.overlay);
                this.stage.drawInternalProjection(state, this.background);
                if (this.showBack) {
                    this.stage.drawInternalProjection(state, this.prev, null, offset);
                }
                if (this.showForward) {
                    this.stage.drawInternalProjection(state, this.next, null, offset);
                }

                var y = bg.pos.y + 40;

                var ctx = this.stage.ctx;

                ctx.save();
                ctx.globalCompositeOperation = "multiply";

                this.project();
                var syntax = progression.getLearnedSyntaxes()[this.currentSyntax];

                if (syntax) {
                    var view = this.stage.getView(this.syntaxes[syntax]);
                    view.pos.x = this.stage.width / 2;
                    view.pos.y = y;
                    y += view.size.h + 10;
                    this.stage.drawProjection(state, this.syntaxes[syntax], offset);
                }

                ctx.restore();
            }
        }
    }, {
        key: "open",
        value: function open() {
            this.state = "open";

            var overlay = this.stage.getView(this.overlay);
            var bg = this.stage.getView(this.background);
            overlay.opacity = 0;
            bg.opacity = 0;

            animate.tween(overlay, { opacity: 0.7 }, {
                duration: 500,
                easing: animate.Easing.Cubic.In
            });
            animate.tween(bg, { opacity: 1.0 }, {
                duration: 500,
                easing: animate.Easing.Cubic.In
            }).delay(300);
        }
    }, {
        key: "close",
        value: function close() {
            var _this2 = this;

            var overlay = this.stage.getView(this.overlay);
            var bg = this.stage.getView(this.background);

            animate.tween(overlay, { opacity: 0 }, {
                duration: 500,
                easing: animate.Easing.Cubic.Out
            });
            animate.tween(bg, { opacity: 0 }, {
                duration: 500,
                easing: animate.Easing.Cubic.Out
            }).then(function () {
                _this2.state = "closed";
            });
        }
    }, {
        key: "toggle",
        value: function toggle() {
            if (this.state === "open") {
                this.close();
            } else {
                this.open();
            }
        }
    }, {
        key: "project",
        value: function project() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = progression.getLearnedSyntaxes()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var syntax = _step.value;

                    if (!this.syntaxes[syntax]) {
                        var defn = progression.getSyntaxDefinition(syntax);

                        var children = [];

                        var image = _loader2.default.images[defn.header];
                        var sprite = gfx.sprite({
                            image: image,
                            size: { w: image.naturalWidth, h: image.naturalHeight }
                        });
                        children.push(this.stage.allocate(sprite));

                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = defn.contents[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var item = _step2.value;

                                if (typeof item === "string") {
                                    children.push(this.stage.allocate(gfx.text(item, {
                                        font: gfx.text.script
                                    })));
                                } else if (item.image) {
                                    var img = _loader2.default.images[item.image];
                                    var itemSprite = gfx.sprite({
                                        image: img,
                                        size: { w: img.naturalWidth, h: img.naturalHeight }
                                    });
                                    children.push(this.stage.allocate(itemSprite));
                                }
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }

                        var container = gfx.layout.vbox(gfx.constant.apply(gfx, children), {
                            subexpScale: 1,
                            padding: {
                                top: 0,
                                left: 0,
                                right: 0,
                                bottom: 0,
                                inner: 10
                            }
                        }, gfx.baseProjection);
                        container.anchor = { x: 0.5, y: 0 };
                        this.syntaxes[syntax] = this.stage.allocate(container);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "showBack",
        get: function get() {
            return this.currentSyntax > 0;
        }
    }, {
        key: "showForward",
        get: function get() {
            return this.currentSyntax < Object.keys(this.syntaxes).length - 1;
        }
    }, {
        key: "isOpen",
        get: function get() {
            return this.state === "open";
        }
    }]);

    return SyntaxJournal;
}();

exports.default = SyntaxJournal;
},{"../gfx/core":4,"../gfx/animate":5,"../game/progression":8,"../loader":3}],41:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _core = require("../gfx/core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FunctionDef = function () {
    function FunctionDef(stage, name, nodeId, referenceId) {
        var _this = this;

        var delay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 500;

        _classCallCheck(this, FunctionDef);

        this.stage = stage;
        this.name = name;
        this.id = nodeId;
        this.referenceId = referenceId;
        this.view = this.project();
        var referenceView = this.stage.getView(this.referenceId);
        var centerPos = gfx.centerPos(referenceView);
        var absSize = gfx.absoluteSize(referenceView);

        animate.after(delay).then(function () {
            return animate.tween(_this.view, { opacity: 0.8 }, {
                duration: 350,
                easing: animate.Easing.Cubic.In
            });
        }).then(function () {
            return animate.tween(_this.view, {
                pos: {
                    x: centerPos.x,
                    y: centerPos.y + absSize.h / 2 + 5
                },
                scale: { x: 1.0, y: 1.0 }
            }, {
                duration: 2000,
                easing: animate.Easing.Cubic.InOut
            }).delay(100);
        });
    }

    _createClass(FunctionDef, [{
        key: "project",
        value: function project() {
            var view = Object.assign({}, this.stage.views[this.id]);
            view.shadow = false;
            view.stroke = { lineWidth: 1, color: "gray" };
            view.opacity = 0;
            view.scale = { x: 0.5, y: 0.5 };
            view.pos = { x: 0, y: 0 };
            // Adjust for sidebar position
            view.pos.x = gfx.centerPos(this.stage.getView(this.id)).x - this.stage.sidebarWidth;
            view.pos.y = gfx.absolutePos(this.stage.getView(this.id)).y;
            view.anchor = { x: 0.5, y: 0 };
            return view;
        }
    }, {
        key: "makeOffset",
        value: function makeOffset() {
            return {
                x: 0,
                y: 0,
                sx: 1,
                sy: 1,
                opacity: 1
            };
        }
    }, {
        key: "drawImpl",
        value: function drawImpl(state) {
            this.view.draw(this.id, this.id, state, this.stage, this.makeOffset());
        }
    }, {
        key: "containsPoint",
        value: function containsPoint(state, pos) {
            return this.view.containsPoint(pos, this.makeOffset());
        }
    }]);

    return FunctionDef;
}();

exports.default = FunctionDef;
},{"../gfx/core":4,"../gfx/animate":5}],42:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _vis = require('vis');

var _vis2 = _interopRequireDefault(_vis);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Compares arrays like sets.
function setCompare(arr1, arr2, compareFunc) {
    if (arr1.length !== arr2.length) return false;

    var a1 = arr1.slice();
    var a2 = arr2.slice();

    while (a1.length > 0) {

        var e = a1.pop();

        var matching_idx = -1;
        for (var i = 0; i < a2.length; i++) {
            if (compareFunc(a2[i], e)) {
                matching_idx = i;
                break;
            }
        }

        if (matching_idx === -1) return false;else {
            a2.splice(matching_idx, 1); // remove this element
            continue;
        }
    }
    return true;
}

var Network = function () {
    function Network() {
        _classCallCheck(this, Network);

        // Objects, each with 'id' and 'data' elements.
        this.nodes = [];

        // Objects with 'from' and 'to' as node ids,
        // and an optional 'data' tag explaining the transition (e.g. reductions).
        this.edges = [];

        // The last state 'pushed' onto the network graph.
        this.lastNodeId = null;

        // The next available node id. (they must all be unique)
        this.unusedNodeId = 0;

        // For internal ordering purposes.
        // (e.g. to trace the player's moves precisely)
        this.unusedEdgeId = 0;
        this.lastEdgeId = 0;

        this.startTS = Date.now();
    }

    _createClass(Network, [{
        key: 'addEdge',


        // Where 'from' and 'to' are node ids.
        value: function addEdge(from, to) {
            var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            if (!this.hasEdge(from, to, data)) {
                var new_edge = { from: from, to: to, uid: this.unusedEdgeId, ts: Date.now() - this.startTS };
                if (data !== null) new_edge.data = data;
                this.edges.push(new_edge);
                this.lastEdgeId = this.unusedEdgeId;
                this.unusedEdgeId += 1;
            }
        }
    }, {
        key: 'setEdgeData',
        value: function setEdgeData(uid, data) {
            for (var i = 0; i < this.edges.length; i++) {
                if (this.edges[i].uid === uid) {
                    this.edges[i].data = data;
                    break;
                }
            }
        }
        // * Note that this will return 'false' if data differs.
        // * This is to allow for a multigraph, in case it arises.
        // * I.e., Players might use different ways to
        // * transition from two of the same states.

    }, {
        key: 'hasEdge',
        value: function hasEdge(from, to) {
            var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            for (var i = 0; i < this.edges.length; i++) {
                var e = this.edges[i];
                if (e.from === from && e.to === to) {
                    if (data === null || e.data === data) return true; // match
                }
            }
            return false;
        }

        // Set-compare objects.

    }, {
        key: 'compare',
        value: function compare(x, y) {
            var _this = this;

            var typeX = typeof x === 'undefined' ? 'undefined' : _typeof(x);
            var typeY = typeof y === 'undefined' ? 'undefined' : _typeof(y);
            if (Array.isArray(x)) {
                if (Array.isArray(y)) {
                    return setCompare(x, y, function (a, b) {
                        return _this.compare(a, b);
                    });
                } else {
                    return false;
                }
            } else if (typeX === 'string' && typeY === 'string' || typeX === 'number' && typeY === 'number') {
                return x === y;
            } else if (typeX === 'object' && typeY === 'object') {
                if (Object.keys(x).length !== Object.keys(y).length) return false;
                for (var key in x) {
                    if (!(key in y) || !this.compare(x[key], y[key])) return false;
                }
                return true;
            } else if (typeX !== typeY) return false;else {
                console.warn('Cannot compare ', x, y, '. Types are odd: ', typeX, typeY);
                return false;
            }
        }

        // Where pattern is a semi-description of a node,
        // e.g. { id:2 } for node with id 2,
        // or { data:"x == star" } for all
        // nodes with data matching "x == star".

    }, {
        key: 'nodesMatching',
        value: function nodesMatching(pattern) {
            var matches = [];
            for (var i = 0; i < this.nodes.length; i++) {
                var n = this.nodes[i];
                for (var key in pattern) {
                    if (key in n) {
                        if (_typeof(n[key]) === 'object') {
                            // TODO: This must be set comparison, not sequences.
                            if (this.compare(n[key], pattern[key])) matches.push(n);
                        } else if (n[key] === pattern[key]) {
                            matches.push(n);
                        }
                    }
                }
            }
            return matches;
        }
    }, {
        key: 'has',
        value: function has(pattern) {
            return this.nodesMatching(pattern).length > 0;
        }
    }, {
        key: 'nodeIdFor',
        value: function nodeIdFor(pattern) {
            var ns = this.nodesMatching(pattern);
            if (ns.length === 0) return -1;else return ns[0].id;
        }
    }, {
        key: 'nodeForId',
        value: function nodeForId(id) {
            if (id === null || typeof id === 'undefined') return null;
            var ns = this.nodesMatching({ id: id });
            if (ns.length === 0) return null;else return ns[0];
        }
    }, {
        key: 'push',


        // Push new node onto the graph,
        // checking for existing match,
        // defaulting to this.lastNode for previous node,
        //  and adding an appropriate edge.
        value: function push(stateData) {
            var changeData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var prevNodeId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            if (prevNodeId === null) prevNodeId = this.lastNodeId;

            // If we already have this node...
            var dup_id = this.nodeIdFor({ data: stateData });
            if (dup_id > -1) {
                // If we've already seen this state...
                // console.log('dup state');
                if (dup_id === prevNodeId) {
                    // We haven't actually moved, so do nothing.
                    if (changeData !== null) {
                        this.setEdgeData(this.lastEdgeId, changeData); // belated setting of edge data
                        return true;
                    } else return false;
                } else {
                    // We've gone back to a previous state, so add an edge.
                    // console.log('went back to ', dup_id);
                    this.addEdge(prevNodeId, dup_id, changeData);
                    this.lastNodeId = dup_id; // This is the id of the 'current node' (state) in the 'stack'...
                }
            } else {
                // This is a new state.
                var nid = this.unusedNodeId;
                this.nodes.push({ id: nid, data: stateData, ts: Date.now() - this.startTS }); // Add a new node.
                if (prevNodeId !== null) // Add an edge going from prev. node to new one, if prev. node exists.
                    this.addEdge(prevNodeId, nid, changeData);
                this.unusedNodeId += 1; // This id has been used, so increment to the next.
                this.lastNodeId = nid;
            }

            return true;
        }

        // For logging minor changes that occur _within_ the current game-state.

    }, {
        key: 'pushAddendumToCurrentState',
        value: function pushAddendumToCurrentState(data) {
            var currentNode = this.lastAddedNode;
            if ('subchanges' in currentNode) currentNode.subchanges.push(data);else currentNode.subchanges = [data];
        }

        // Exporting methods

    }, {
        key: 'serialize',
        value: function serialize() {
            return {
                nodes: this.nodes,
                edges: this.edges
            };
        }
    }, {
        key: 'toString',
        value: function toString() {
            return JSON.stringify(this.serialize());
        }
    }, {
        key: 'toVisJSNetworkData',
        value: function toVisJSNetworkData(toLabel) {
            var _this2 = this;

            var clean = function clean(s) {
                return s.replace(/__(star|rect|tri|triangle|diamond|circle|dot)/g, '');
            };
            var toEdgeLabel = function toEdgeLabel(e) {
                var d = e.data;
                if ((typeof d === 'undefined' ? 'undefined' : _typeof(d)) === 'object') {
                    if ('before' in d && 'after' in d) {
                        if ('item' in d) return '(' + clean(d.before) + ') (' + clean(d.item) + ') -> ' + clean(d.after);else return clean(d.before) + ' -> ' + clean(d.after);
                    } else if ('item' in d && 'name' in d) return d.name + ': ' + clean(d.item);else return JSON.stringify(d);
                } else return d;
            };

            if (typeof toLabel === 'undefined') toLabel = function toLabel(n) {
                if (typeof n.data === 'string') return n.data;
                var s = n.data.board.map(clean).join(') (');
                if (n.data.board.length > 1) s = '(' + s + ')';
                return s;
            };

            var lastNodeId = this.lastNodeId;
            var nodes = new _vis2.default.DataSet(this.nodes.map(function (n) {
                var v = { id: n.id,
                    label: toLabel(n) };
                if (n.data === 'reset' || n.data === 'prev' || n.data === 'next' || n.data === 'change-chapter') {
                    // Mark reset state.
                    v.reset = true;
                    v.color = {
                        background: '#BDAEC6',
                        border: '#732C7B',
                        highlight: {
                            background: '#BDAEC6',
                            border: 'Indigo'
                        }
                    };
                } else if (n.data === "victory" || // Check for victory state.
                n.id === lastNodeId && n.data && _this2.compare(n.data.goal, n.data.board)) {
                    v.final = true;
                    v.color = {
                        background: 'Gold',
                        border: 'Orange',
                        highlight: {
                            background: 'Yellow',
                            border: 'OrangeRed'
                        }
                    };
                } else if (n.id === 0) {
                    // Mark initial state.
                    v.initial = true;
                    v.color = {
                        background: 'LightGreen',
                        border: 'green',
                        highlight: {
                            background: 'Aquamarine',
                            border: 'LightSeaGreen'
                        }
                    };
                }
                return v;
            }));
            var edges = new _vis2.default.DataSet(this.edges.map(function (e) {
                return { from: e.from,
                    to: e.to,
                    label: e.data && e.data !== null ? toEdgeLabel(e) : undefined };
            }));
            return {
                nodes: nodes,
                edges: edges
            };
        }
    }, {
        key: 'length',
        get: function get() {
            return this.nodes.length;
        }
    }, {
        key: 'lastAddedNode',
        get: function get() {
            return this.nodeForId(this.lastNodeId);
        }
    }]);

    return Network;
}();

exports.default = Network;
},{"vis":59}],46:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BaseTouchRecord = function () {
    function BaseTouchRecord(stage, topNode, targetNode, fromToolbox, dragAnchor, dragStart) {
        _classCallCheck(this, BaseTouchRecord);

        this.stage = stage;
        this.topNode = topNode;
        this.targetNode = targetNode;
        this.fromToolbox = fromToolbox;
        this.dragAnchor = dragAnchor;
        this.dragStart = dragStart;
        this.dragged = false;
        this.hoverNode = null;
        this.prevHoverNode = null;
        this.isExpr = false;
        this.currTime = Date.now();
    }

    _createClass(BaseTouchRecord, [{
        key: "findHoverNode",
        value: function findHoverNode(pos) {
            var before = this.hoverNode;
            this.prevHoverNode = before;

            var _stage$getNodeAtPos = this.stage.getNodeAtPos(pos, this.topNode),
                _stage$getNodeAtPos2 = _slicedToArray(_stage$getNodeAtPos, 2),
                _ = _stage$getNodeAtPos2[0],
                target = _stage$getNodeAtPos2[1];

            this.hoverNode = target;
            this.hoverSidebar = pos.sidebar;
            this.stage.draw();
        }
    }, {
        key: "onstart",
        value: function onstart(mousePos) {
            this.currTime = Date.now();
        }
    }, {
        key: "onmove",
        value: function onmove(mouseDown, mousePos) {
            this.findHoverNode(mousePos);
        }
    }, {
        key: "onend",
        value: function onend(state, mousePos) {
            this.findHoverNode(mousePos);
        }
    }, {
        key: "reset",
        value: function reset() {
            this.topNode = null;
            this.hoverNode = null;
            this.prevHoverNode = null;
            this.targetNode = null;
            this.dragged = false;
            this.fromToolbox = false;
            this.isExpr = false;
            this.currTime = Date.now();
        }
    }]);

    return BaseTouchRecord;
}();

exports.default = BaseTouchRecord;
},{}],43:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _core = require("../gfx/core");

var gfxCore = _interopRequireWildcard(_core);

var _reducer = require("../reducer/reducer");

var _touchrecord = require("./touchrecord");

var _touchrecord2 = _interopRequireDefault(_touchrecord);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Handle drawing responsibilites for Reduct.
 */
var BaseStage = function () {
    function BaseStage(canvas, width, height, store, views, semantics) {
        _classCallCheck(this, BaseStage);

        this.store = store;
        this.views = views;
        // A set of views for the toolbox, etc. that aren't cleared
        // when changing levels.
        this.internalViews = {};
        this.semantics = semantics;

        this.effects = {};

        this._width = width;
        this._height = height;

        this.canvas = canvas;
        this.canvas.setAttribute("width", this.width);
        this.canvas.setAttribute("height", this.height);

        this.ctx = this.canvas.getContext("2d");

        this.computeDimensions();

        this.color = "#EEEEEE";

        this._redrawPending = false;
        this._drawFunc = null;

        this._touches = new Map();

        this._touches.set("mouse", new this.touchRecordClass(this, null, null, false, { dx: 0, dy: 0 }, { x: 0, y: 0 }));
    }

    _createClass(BaseStage, [{
        key: "computeDimensions",
        value: function computeDimensions() {
            this.ctx.scale(1.0, 1.0);
            this._height = window.innerHeight - 40;
            if (window.matchMedia("only screen and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 1.5)").matches) {
                this._width = window.innerWidth - 150;
            } else if (window.matchMedia("only screen and (max-device-width: 1366px) and (-webkit-min-device-pixel-ratio: 1.5)").matches) {
                this._width = 0.9 * window.innerWidth;
            } else {
                this._width = Math.max(window.innerWidth, 1200);
                this._height = Math.max(this._height, 600);
            }
            this.canvas.setAttribute("width", this._width);
            this.canvas.setAttribute("height", this._height);
        }
    }, {
        key: "resize",
        value: function resize() {
            this.computeDimensions();
            this.draw();
        }

        /**
         * Allocate an ID for the given projection.
         *
         * Used for projections that don't directly correspond to nodes
         * and are static (e.g. the text view for the arow in a lambda),
         * but still need an ID.
         */

    }, {
        key: "allocate",
        value: function allocate(projection) {
            var id = (0, _reducer.nextId)();
            this.views[id] = projection;
            return id;
        }
    }, {
        key: "allocateInternal",
        value: function allocateInternal(projection) {
            var id = (0, _reducer.nextId)();
            this.internalViews[id] = projection;
            return id;
        }
    }, {
        key: "getView",
        value: function getView(id) {
            return this.views[id] || this.internalViews[id];
        }
    }, {
        key: "getMousePos",
        value: function getMousePos(e) {
            var rect = this.canvas.getBoundingClientRect();
            return {
                // TODO: scale
                x: e.clientX - rect.left,
                y: e.clientY - rect.top
            };
        }

        /**
         * Given a rectangular area, move it minimally to fit within the
         * stage bounds.
         */

    }, {
        key: "findSafePosition",
        value: function findSafePosition(x, y, w, h) {
            var MARGIN = 20;
            var minX = MARGIN;
            var maxX = this.width - MARGIN - w;
            var minY = MARGIN;
            var maxY = this.height - this.toolbox.size.h - 20 - h;

            x = Math.max(minX, Math.min(x, maxX));
            y = Math.max(minY, Math.min(y, maxY));

            if (x >= this.width - w - 250 && y <= 120) {
                // Overlaps buttons in corner
                if (y >= 60) {
                    y = 130;
                } else {
                    x = this.width - w - 250;
                }
            }

            return { x: x, y: y };
        }
    }, {
        key: "getState",
        value: function getState() {
            return this.store.getState().getIn(["program", "$present"]);
        }
    }, {
        key: "makeBaseOffset",
        value: function makeBaseOffset() {
            var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            return Object.assign({
                x: 0,
                y: 0,
                sx: 1,
                sy: 1,
                opacity: 1
            }, opt);
        }
    }, {
        key: "drawProjection",
        value: function drawProjection(state, nodeId) {
            var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            var projection = this.views[nodeId];
            // TODO: autoresizing
            projection.parent = null;
            projection.prepare(nodeId, nodeId, state, this);
            projection.draw(nodeId, nodeId, state, this, offset || this.makeBaseOffset());
        }
    }, {
        key: "drawInternalProjection",
        value: function drawInternalProjection(state, nodeId) {
            var exprId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

            var projection = this.internalViews[nodeId];
            projection.parent = null;
            projection.prepare(nodeId, exprId, state, this);
            projection.draw(nodeId, exprId, state, this, offset || this.makeBaseOffset());
        }
    }, {
        key: "drawContents",
        value: function drawContents() {}
    }, {
        key: "drawImpl",
        value: function drawImpl() {
            this.drawContents();

            this._redrawPending = false;
        }
    }, {
        key: "draw",
        value: function draw() {
            var _this = this;

            if (this._redrawPending) return;
            this._redrawPending = true;
            window.requestAnimationFrame(function () {
                _this.drawImpl();
            });
        }

        /**
         * Get the node at the given position.
         *
         * TODO: return all possible nodes?
         */

    }, {
        key: "getNodeAtPos",
        value: function getNodeAtPos(pos) {
            var selectedId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return [null, null];
        }
    }, {
        key: "computeDragAnchor",
        value: function computeDragAnchor(pos, topNode, targetNode) {
            var dragAnchor = { x: 0, y: 0 };
            if (targetNode !== null) {
                var view = this.getView(topNode);
                var absPos = gfxCore.absolutePos(view);
                var absSize = gfxCore.absoluteSize(view);
                dragAnchor.x = (pos.x - absPos.x) / absSize.w;
                dragAnchor.y = (pos.y - absPos.y) / absSize.h;
            }
            return dragAnchor;
        }
    }, {
        key: "addEffect",
        value: function addEffect(fx) {
            var id = (0, _reducer.nextId)();
            this.effects[id] = fx;
            return id;
        }
    }, {
        key: "removeEffect",
        value: function removeEffect(id) {
            delete this.effects[id];
            this.draw();
        }
    }, {
        key: "isSelected",
        value: function isSelected(id) {
            if (id === null) return false;

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this._touches.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var touch = _step.value;

                    if (touch.targetNode === id) {
                        return true;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return false;
        }
    }, {
        key: "isHovered",
        value: function isHovered(id) {
            if (id === null) return false;

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this._touches.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var touch = _step2.value;

                    // Light up topNode if hoverNode present
                    if (touch.hoverNode === id || touch.hoverNode !== null && touch.topNode === id) {
                        return true;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return false;
        }
    }, {
        key: "setCursor",
        value: function setCursor(cursor) {
            // Try fallbacks because Chrome (e.g. -webkit-grab is recognized, but not grab)
            this.canvas.style.cursor = "-moz-" + cursor;
            this.canvas.style.cursor = "-webkit-" + cursor;
            this.canvas.style.cursor = cursor;
        }
    }, {
        key: "updateCursor",
        value: function updateCursor(touchRecord) {
            var moved = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (moved && touchRecord.isExpr && touchRecord.topNode !== null && touchRecord.hoverNode !== null) {
                this.setCursor("copy");
            } else if (touchRecord.topNode !== null) {
                if (touchRecord.isExpr) {
                    this.setCursor("grabbing");
                }
            } else if (touchRecord.hoverNode !== null) {
                var node = this.getState().getIn(["nodes", touchRecord.hoverNode]);
                if (this.semantics.kind(node) === "expression") {
                    this.setCursor("pointer");
                } else {
                    this.setCursor("grab");
                }
            } else {
                this.setCursor("default");
            }
        }
    }, {
        key: "_touchstart",
        value: function _touchstart(e) {
            e.preventDefault();

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = e.changedTouches[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var touch = _step3.value;

                    var pos = this.getMousePos(touch);

                    var _getNodeAtPos = this.getNodeAtPos(pos),
                        _getNodeAtPos2 = _slicedToArray(_getNodeAtPos, 3),
                        topNode = _getNodeAtPos2[0],
                        targetNode = _getNodeAtPos2[1],
                        fromToolbox = _getNodeAtPos2[2];

                    if (topNode === null) continue;

                    var dragAnchor = this.computeDragAnchor(pos, topNode, targetNode);

                    var touchRecord = new this.touchRecordClass(this, topNode, targetNode, fromToolbox, dragAnchor, pos);
                    touchRecord.onstart(pos);
                    this._touches.set(touch.identifier, touchRecord);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    }, {
        key: "_touchmove",
        value: function _touchmove(e) {
            e.preventDefault();
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = e.changedTouches[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var touch = _step4.value;

                    if (this._touches.has(touch.identifier)) {
                        this._touches.get(touch.identifier).onmove(true, this.getMousePos(touch));
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            this.draw();
        }
    }, {
        key: "_touchend",
        value: function _touchend(e) {
            e.preventDefault();
            var state = this.getState();
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = e.changedTouches[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var touch = _step5.value;

                    if (this._touches.has(touch.identifier)) {
                        this._touches.get(touch.identifier).onend(state, this.getMousePos(touch));
                        this._touches.delete(touch.identifier);
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            this.draw();
        }
    }, {
        key: "_mousedown",
        value: function _mousedown(e) {
            var pos = this.getMousePos(e);

            var _getNodeAtPos3 = this.getNodeAtPos(pos),
                _getNodeAtPos4 = _slicedToArray(_getNodeAtPos3, 3),
                topNode = _getNodeAtPos4[0],
                targetNode = _getNodeAtPos4[1],
                fromToolbox = _getNodeAtPos4[2];

            if (topNode === null) return null;

            var dragAnchor = this.computeDragAnchor(pos, topNode, targetNode);

            var touch = this._touches.get("mouse");
            touch.reset();
            touch.topNode = topNode;
            touch.targetNode = targetNode;
            touch.fromToolbox = fromToolbox;
            touch.dragAnchor = dragAnchor;
            touch.dragStart = pos;
            this.updateCursor(touch);
            touch.onstart(pos);

            this.draw();

            return touch;
        }
    }, {
        key: "_mousemove",
        value: function _mousemove(e) {
            var buttons = typeof e.buttons !== "undefined" ? e.buttons : e.which;
            var mouse = this._touches.get("mouse");
            mouse.onmove(buttons > 0, this.getMousePos(e));

            this.updateCursor(mouse, true);

            this.draw();
        }
    }, {
        key: "_mouseup",
        value: function _mouseup(e) {
            var mouse = this._touches.get("mouse");
            mouse.onend(this.getState(), this.getMousePos(e));
            mouse.reset();
            this.updateCursor(mouse);
            this.draw();
        }
    }, {
        key: "touchRecordClass",
        get: function get() {
            return _touchrecord2.default;
        }
    }, {
        key: "width",
        get: function get() {
            return this._width;
        }
    }, {
        key: "height",
        get: function get() {
            return this._height;
        }
    }]);

    return BaseStage;
}();

exports.default = BaseStage;
},{"../gfx/core":4,"../reducer/reducer":6,"./touchrecord":46}],44:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _chromaJs = require("chroma-js");

var _chromaJs2 = _interopRequireDefault(_chromaJs);

var _immutable = require("immutable");

var immutable = _interopRequireWildcard(_immutable);

var _action = require("../reducer/action");

var action = _interopRequireWildcard(_action);

var _level = require("../game/level");

var level = _interopRequireWildcard(_level);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _audio = require("../resource/audio");

var _audio2 = _interopRequireDefault(_audio);

var _core = require("../gfx/core");

var gfxCore = _interopRequireWildcard(_core);

var _progression = require("../game/progression");

var progression = _interopRequireWildcard(_progression);

var _goal = require("../ui/goal");

var _goal2 = _interopRequireDefault(_goal);

var _toolbox = require("../ui/toolbox");

var _toolbox2 = _interopRequireDefault(_toolbox);

var _sidebar = require("../ui/sidebar");

var _sidebar2 = _interopRequireDefault(_sidebar);

var _syntaxjournal = require("../ui/syntaxjournal");

var _syntaxjournal2 = _interopRequireDefault(_syntaxjournal);

var _functiondef = require("../ui/functiondef");

var _functiondef2 = _interopRequireDefault(_functiondef);

var _loader = require("../loader");

var _loader2 = _interopRequireDefault(_loader);

var _logging = require("../logging/logging");

var _logging2 = _interopRequireDefault(_logging);

var _network = require("../logging/network");

var _network2 = _interopRequireDefault(_network);

var _touchrecord = require("./touchrecord");

var _touchrecord2 = _interopRequireDefault(_touchrecord);

var _basestage = require("./basestage");

var _basestage2 = _interopRequireDefault(_basestage);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DOUBLE_CLICK_THRESHOLD_MS = 250;

var TouchRecord = function (_BaseTouchRecord) {
    _inherits(TouchRecord, _BaseTouchRecord);

    function TouchRecord() {
        var _ref;

        _classCallCheck(this, TouchRecord);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, (_ref = TouchRecord.__proto__ || Object.getPrototypeOf(TouchRecord)).call.apply(_ref, [this].concat(args)));

        _this.dropTargets = [];
        _this.dropTweens = new Map();
        _this.highlightAnimation = null;
        _this.scaleAnimation = null;
        _this.hoverStartPos = null;
        _this.clonable = false;
        return _this;
    }

    _createClass(TouchRecord, [{
        key: "reset",
        value: function reset() {
            _get(TouchRecord.prototype.__proto__ || Object.getPrototypeOf(TouchRecord.prototype), "reset", this).call(this);
            this.stopHighlight();
            this.highlightAnimation = null;
            this.dropTargets = [];
            this.dropTweens = new Map();
            this.hoverStartPos = null;
            this.clonable = false;
        }

        // TODO: refactor this onto the stage

    }, {
        key: "stopHighlight",
        value: function stopHighlight() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.dropTargets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var id = _step.value;

                    this.stage.getView(id).stroke = null;
                    this.stage.getView(id).outerStroke = null;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.dropTweens.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _ref2 = _step2.value;

                    var _ref3 = _slicedToArray(_ref2, 2);

                    var tween = _ref3[0];
                    var isExpand = _ref3[1];

                    if (isExpand) {
                        tween.completed();
                        tween.undo();
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.stage.sidebar.resetIndicator();

            if (this.highlightAnimation) {
                this.highlightAnimation.stop();
            }
        }
    }, {
        key: "startHighlight",
        value: function startHighlight() {
            var _this2 = this;

            var state = this.stage.getState();
            var nodes = state.get("nodes");

            var topNode = nodes.get(this.topNode);
            var highlightSidebar = topNode.get("type") === "define";

            var sidebarScale = null;
            var sidebarHoverScale = null;
            if (highlightSidebar) {
                sidebarScale = _chromaJs2.default.scale(["#594764", "#02d8f9"]).mode("lab");
                sidebarHoverScale = _chromaJs2.default.scale(["#594764", "gold"]).mode("lab");

                var indicator = this.stage.getView(this.stage.sidebar.indicator);
                indicator.tween = animate.tween(indicator, {
                    padding: { top: 50, bottom: 50 },
                    opacity: 1
                }, {
                    duration: 300,
                    easing: animate.Easing.Cubic.In
                });
            }

            state.get("board").forEach(function (id) {
                if (id === _this2.topNode) return;

                _this2.dropTargets = _this2.dropTargets.concat(_this2.stage.semantics.search(nodes, id, function (_, subId) {
                    var droppable = _this2.stage.semantics.droppable(state, _this2.topNode, subId);
                    var other = nodes.get(subId);
                    var compatible = _this2.stage.semantics.notchesCompatible(topNode, other);
                    return droppable || compatible && compatible.length > 0;
                }));
            });

            var time = 0;
            this.highlightAnimation = animate.infinite(function (dt) {
                var state = _this2.stage.getState();
                time += dt;

                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = _this2.dropTargets[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var targetId = _step3.value;

                        var view = _this2.stage.getView(targetId);
                        var stroke = {
                            color: targetId === _this2.hoverNode ? "gold" : "#02d8f9",
                            lineWidth: 3 + 1.5 * Math.cos(time / 750)
                        };

                        if (state.getIn(["nodes", targetId, "type"]) === "lambdaArg") {
                            view.outerStroke = stroke;
                        } else {
                            view.stroke = stroke;
                        }
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                if (highlightSidebar) {
                    var s = 0.5 + 0.5 * (1 - (1 + Math.cos(time / 750)) / 2);
                    var scale = _this2.hoverSidebar ? sidebarHoverScale : sidebarScale;
                    _this2.stage.getView(_this2.stage.sidebar.indicator).stroke.color = scale(s);
                }
            });
        }
    }, {
        key: "useToolboxItem",
        value: function useToolboxItem() {
            _logging2.default.log("toolbox-remove", this.stage.saveNode(this.topNode));
            this.stage.store.dispatch(action.useToolbox(this.topNode));
            animate.fx.expandingShape(this.stage, this.stage.getView(this.topNode));
        }
    }, {
        key: "onstart",
        value: function onstart(mousePos) {
            _get(TouchRecord.prototype.__proto__ || Object.getPrototypeOf(TouchRecord.prototype), "onstart", this).call(this, mousePos);

            this.isExpr = this.stage.getState().get("nodes").has(this.topNode);
            if (this.isExpr && this.topNode) {
                this.stage.store.dispatch(action.raise(this.topNode));

                var state = this.stage.getState();
                var selected = state.getIn(["nodes", this.topNode]);
                this.clonable = this.fromToolbox && selected.has("__meta") && selected.get("__meta").toolbox.unlimited;
            }

            var view = this.stage.getView(this.topNode);
            if (view && view.onmousedown) {
                view.onmousedown();
            }

            var referenceId = this.stage.getReferenceNameAtPos(mousePos);
            if (referenceId) {
                this.stage.showReferenceDefinition(this.stage.getState(), referenceId);
            }
        }
    }, {
        key: "onmove",
        value: function onmove(mouseDown, mousePos) {
            if (mouseDown && this.topNode !== null && (!this.targetNode || !this.stage.isDetachable(this.targetNode))) {
                // Tolerance before a click becomes a drag
                if (this.dragged || gfxCore.distance(this.dragStart, mousePos) > 10) {
                    if (this.stage.functionDef) {
                        this.stage.functionDef = null;
                    }

                    if (this.isExpr && !this.dragged && this.fromToolbox) {
                        _logging2.default.log("toolbox-dragout", this.stage.saveNode(this.topNode));
                    }

                    if (!this.dragged) {
                        // Highlight droppable holes
                        this.startHighlight();
                    }
                    this.dragged = true;

                    if (this.isExpr && this.fromToolbox) {
                        var resultNode = this.stage.cloneToolboxItem(this.topNode);
                        if (resultNode !== null) {
                            _logging2.default.log("toolbox-remove", this.stage.saveNode(this.topNode));
                            this.stage.views[this.topNode].opacity = 1.0;
                            // Selected node was an __unlimited node
                            this.topNode = resultNode;
                            this.targetNode = resultNode;
                            this.fromToolbox = false;
                            this.clonable = false;
                        }
                    }
                }

                if (!this.clonable) {
                    var view = this.stage.getView(this.topNode);
                    this.stage.views[this.topNode].anchor = {
                        x: this.dragAnchor.x,
                        y: this.dragAnchor.y
                    };
                    view.pos.x = mousePos.x;
                    view.pos.y = mousePos.y;

                    if (this.isExpr && this.targetNode !== null) {
                        this.stage.views[this.topNode].opacity = 0.7;
                    }
                }
            }

            if (this.isExpr && mouseDown && this.targetNode && gfxCore.distance(this.dragStart, mousePos) > 10) {
                var newSelected = this.stage.detachFromHole(this.topNode, this.targetNode);
                if (newSelected !== null) {
                    // Highlight droppable holes
                    this.startHighlight();

                    this.stage.views[this.topNode].opacity = 1.0;
                    this.topNode = newSelected;
                    this.dragAnchor = this.stage.computeDragAnchor(this.dragStart, newSelected, newSelected);
                }
            }

            // Previewing application can cause holes to jump around a
            // lot, making it frustrating to use. This makes holes
            // "sticky".
            var oldHover = this.hoverNode;
            this.findHoverNode(mousePos);
            if (this.topNode !== null && (this.hoverNode === null || !this.stage.semantics.droppable(this.stage.getState(), this.topNode, this.hoverNode)) && oldHover !== null && this.hoverStartPos && gfxCore.distance(mousePos, this.hoverStartPos) < 50) {
                this.hoverNode = oldHover;
            } else if (this.topNode !== null && this.hoverNode !== null) {
                this.hoverStartPos = Object.assign({}, mousePos);
            }

            if (this.isExpr && this.topNode && this.hoverNode) {
                var state = this.stage.getState();
                var holeExprType = state.getIn(["nodes", this.hoverNode, "type"]);
                var holeType = state.getIn(["nodes", this.hoverNode, "ty"]);
                var exprType = state.getIn(["nodes", this.topNode, "ty"]);
                // TODO: don't hardcode these checks
                if (holeExprType !== "missing" && holeExprType !== "lambdaArg" || holeType && exprType && holeType !== exprType) {
                    this.hoverNode = null;
                }
            }

            // onmouseenter/onmouseexit for views (e.g. buttons)
            if (this.hoverNode !== this.prevHoverNode) {
                var _view = this.stage.getView(this.hoverNode);
                var prevView = this.stage.getView(this.prevHoverNode);
                if (_view && _view.onmouseenter) {
                    _view.onmouseenter();
                }
                if (prevView && prevView.onmouseexit) {
                    prevView.onmouseexit();
                }

                if (this.topNode !== null && this.isExpr && this.hoverNode !== null) {
                    // Scale holes up when something is dragged over them
                    var targetSize = gfxCore.absoluteSize(this.stage.getView(this.topNode));

                    var _state = this.stage.getState();
                    if (this.stage.semantics.droppable(_state, this.topNode, this.hoverNode)) {
                        var _view2 = this.stage.getView(this.hoverNode);
                        if (_view2.padding) {
                            var curSize = gfxCore.absoluteSize(_view2);
                            var lr = Math.min(Math.max((targetSize.w - curSize.w) / 1.5, 15), 60);
                            var tb = Math.min(Math.max((targetSize.h - curSize.h) / 1.5, 10), 30);

                            if (this.dropTweens.has(this.hoverNode)) {
                                var _dropTweens$get = this.dropTweens.get(this.hoverNode),
                                    _dropTweens$get2 = _slicedToArray(_dropTweens$get, 2),
                                    _tween = _dropTweens$get2[0],
                                    isExpand = _dropTweens$get2[1];

                                _tween.completed();
                                if (isExpand) {
                                    _tween.undo();
                                }
                            }
                            var tween = animate.tween(_view2, {
                                padding: {
                                    left: _view2.padding.left + lr,
                                    right: _view2.padding.right + lr,
                                    top: _view2.padding.top + tb,
                                    bottom: _view2.padding.bottom + tb
                                }
                            }, {
                                duration: 600,
                                easing: animate.Easing.Cubic.Out,
                                // Don't override layout
                                setAnimatingFlag: false
                            });
                            this.dropTweens.set(this.hoverNode, [tween, true]);
                        }
                    }
                }

                if (this.prevHoverNode !== null && this.dropTweens.has(this.prevHoverNode)) {
                    var record = this.dropTweens.get(this.prevHoverNode);
                    if (record[1]) {
                        record[0].completed();
                        record[0] = record[0].undo(true);
                        record[1] = false;
                    }
                }
            }

            if (this.isExpr && this.topNode !== null) {
                // Show previews for lambda application, if applicable
                this.stage.previewApplication(this.topNode, this.hoverNode, this.prevHoverNode);
            }

            if (this.topNode && this.isExpr) {
                // Scale things down when they're over a hole
                if (this.hoverNode) {
                    if (this.scaleAnimation) this.scaleAnimation.cancel();
                    this.scaleAnimation = animate.tween(this.stage.getView(this.topNode), {
                        scale: { x: 0.6, y: 0.6 }
                    }, {
                        easing: animate.Easing.Cubic.Out,
                        setAnimatingFlag: false,
                        duration: 300
                    });
                } else if (this.stage.getView(this.topNode).scale.x < 1) {
                    if (this.scaleAnimation) this.scaleAnimation.cancel();
                    this.scaleAnimation = animate.tween(this.stage.getView(this.topNode), {
                        scale: { x: 1, y: 1 }
                    }, {
                        easing: animate.Easing.Cubic.Out,
                        setAnimatingFlag: false,
                        duration: 300
                    });
                }
            }

            // Highlight nearby compatible notches, if applicable
            this.stage.highlightNotches(this.topNode);
        }
    }, {
        key: "onend",
        value: function onend(state, mousePos) {
            this.stopHighlight();
            if (this.scaleAnimation) this.scaleAnimation.cancel();
            if (this.isExpr && this.topNode) {
                var view = this.stage.getView(this.topNode);
                view.scale = { x: 1, y: 1 };
                var cp = gfxCore.centerPos(view);
                view.anchor = { x: 0.5, y: 0.5 };
                view.pos = cp;
            }

            if (!this.dragged) {
                var _view3 = this.stage.getView(this.topNode);
                if (_view3 && _view3.onclick) {
                    _view3.onclick();
                }
            }

            if (this.isExpr && !this.dragged && this.topNode !== null && !this.fromToolbox) {
                if (Date.now() - this.currTime < 1000) {
                    // Click on object to reduce; always targets toplevel node
                    if (this.stage.functionDef) {
                        this.stage.functionDef = null;
                    }
                    this.stage.step(state, this.topNode);
                }
            } else if (this.isExpr && this.stage.snapNotches(this.topNode)) {
                // Prioritize snapping over filling
            } else if (mousePos.sidebar && this.isExpr && this.stage.dropDefines(this.topNode)) {
                // Drop definitions in sidebar to activate them
            } else if (this.isExpr && this.dragged && this.hoverNode && this.stage.semantics.droppable(state, this.topNode, this.hoverNode) === "hole") {
                // Drag something into hole

                if (this.fromToolbox) this.useToolboxItem();

                _audio2.default.play("pop");
                this.stage.store.dispatch(action.fillHole(this.hoverNode, this.topNode));
                animate.fx.expandingShape(this.stage, this.stage.getView(this.topNode));
            } else if (this.isExpr && this.dragged && this.hoverNode && this.topNode) {
                if (this.fromToolbox) this.useToolboxItem();
                // Clear application previews (otherwise they stick around
                // if beta-reduction is undone)
                this.stage.previewApplication(this.topNode, null, this.hoverNode);
                // Apply to lambda
                var arg = this.topNode;
                var target = this.hoverNode;
                this.stage.betaReduce(state, target, arg);
            } else if (this.isExpr && this.dragged && this.fromToolbox) {
                var projection = this.stage.views[this.topNode];
                var useItem = true;
                // Allow items to be placed back in toolbox if and only if
                // they were dragged from and released in the toolbox in
                // one motion
                if (projection) {
                    var topLeft = gfxCore.absolutePos(projection);
                    var bottom = { x: 0, y: topLeft.y + projection.size.h };
                    if (this.stage.toolbox.containsPoint(bottom)) {
                        useItem = false;
                    }
                }
                if (useItem) {
                    // Take item out of toolbox
                    this.useToolboxItem();
                } else {
                    _logging2.default.log("toolbox-addback", this.stage.saveNode(this.topNode));
                }
            }

            // Bump items out of toolbox
            if (this.isExpr && this.topNode !== null) {
                var _projection = this.stage.views[this.topNode];
                var _topLeft = gfxCore.absolutePos(_projection);
                var _bottom = { x: 0, y: _topLeft.y + _projection.size.h };
                if (this.stage.toolbox.containsPoint(_bottom) && !this.stage.getState().get("toolbox").includes(this.topNode)) {
                    _logging2.default.log("toolbox-reject", this.stage.saveNode(this.topNode));
                }
                this.stage.bumpAwayFromEdges(this.topNode);
                this.stage.views[this.topNode].opacity = 1.0;
            }

            this.findHoverNode(mousePos);
        }
    }]);

    return TouchRecord;
}(_touchrecord2.default);

exports.default = TouchRecord;
},{"chroma-js":71,"immutable":70,"../reducer/action":30,"../game/level":7,"../gfx/animate":5,"../resource/audio":36,"../gfx/core":4,"../game/progression":8,"../ui/goal":35,"../ui/toolbox":37,"../ui/sidebar":38,"../ui/syntaxjournal":40,"../ui/functiondef":41,"../loader":3,"../logging/logging":15,"../logging/network":42,"./touchrecord":46,"./basestage":43}],10:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _chromaJs = require("chroma-js");

var chroma = _interopRequireWildcard(_chromaJs);

var _immutable = require("immutable");

var immutable = _interopRequireWildcard(_immutable);

var _action = require("../reducer/action");

var action = _interopRequireWildcard(_action);

var _level = require("../game/level");

var level = _interopRequireWildcard(_level);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _audio = require("../resource/audio");

var _audio2 = _interopRequireDefault(_audio);

var _core = require("../gfx/core");

var gfxCore = _interopRequireWildcard(_core);

var _progression = require("../game/progression");

var progression = _interopRequireWildcard(_progression);

var _goal = require("../ui/goal");

var _goal2 = _interopRequireDefault(_goal);

var _toolbox = require("../ui/toolbox");

var _toolbox2 = _interopRequireDefault(_toolbox);

var _sidebar = require("../ui/sidebar");

var _sidebar2 = _interopRequireDefault(_sidebar);

var _stuck = require("../ui/stuck");

var _stuck2 = _interopRequireDefault(_stuck);

var _syntaxjournal = require("../ui/syntaxjournal");

var _syntaxjournal2 = _interopRequireDefault(_syntaxjournal);

var _functiondef = require("../ui/functiondef");

var _functiondef2 = _interopRequireDefault(_functiondef);

var _loader = require("../loader");

var _loader2 = _interopRequireDefault(_loader);

var _logging = require("../logging/logging");

var _logging2 = _interopRequireDefault(_logging);

var _network = require("../logging/network");

var _network2 = _interopRequireDefault(_network);

var _basestage = require("./basestage");

var _basestage2 = _interopRequireDefault(_basestage);

var _stagetouchrecord = require("./stagetouchrecord");

var _stagetouchrecord2 = _interopRequireDefault(_stagetouchrecord);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DOUBLE_CLICK_THRESHOLD_MS = 250;

var DoubleClickLayer = function () {
    function DoubleClickLayer(mousedown, mousemove, mouseup, doubleclick) {
        _classCallCheck(this, DoubleClickLayer);

        this._mousedownInner = mousedown;
        this._mousemoveInner = mousemove;
        this._mouseupInner = mouseup;
        this._doubleclickInner = doubleclick;

        // Keep track of click times for double-click.
        this.clickTimer = null;
        this.clickStartTime = null;
        this.clickState = "reset";
        this.clickPos = null;
    }

    _createClass(DoubleClickLayer, [{
        key: "_resetmouse",
        value: function _resetmouse() {
            if (this.clickTimer !== null) window.clearTimeout(this.clickTimer);
            this.clickState = "reset";
            this.clickStartTime = null;
            this.clickTimer = null;
            this.clickPos = null;
        }
    }, {
        key: "onmousedown",
        value: function onmousedown(e) {
            var _this = this;

            if (this.clickState === "reset") {
                this.clickState = "down";
                this.clickStartTime = Date.now();
                this.clickPos = e;
                this.clickTimer = window.setTimeout(function () {
                    _this._mousedownInner(e);
                    _this._resetmouse();
                }, DOUBLE_CLICK_THRESHOLD_MS);
            } else if (this.clickState === "up") {
                if (this.clickTimer !== null) window.clearTimeout(this.clickTimer);
                this.clickState = "down2";
                var cp = this.clickPos;
                this.clickPos = e;

                this.clickTimer = window.setTimeout(function () {
                    _this._mousedownInner(cp);
                    _this._mouseupInner(cp);
                    _this._mousedownInner(e);
                    _this._resetmouse();
                }, DOUBLE_CLICK_THRESHOLD_MS - (Date.now() - this.clickStartTime));
            }
        }
    }, {
        key: "onmousemove",
        value: function onmousemove(e) {
            if (this.clickState !== "reset") {
                this._mousedownInner(this.clickPos);
                if (this.clickState === "up" || this.clickState === "down2") {
                    this._mouseupInner(this.clickPos);
                }

                if (this.clickState === "down2") {
                    this._mousedownInner(this.clickPos);
                }

                this._mousemoveInner(e);
                this._resetmouse();
                this.clickState = "reset";
            } else {
                this._mousemoveInner(e);
            }
        }
    }, {
        key: "onmouseup",
        value: function onmouseup(e) {
            var _this2 = this;

            if (this.clickState === "down") {
                if (this.clickTimer !== null) window.clearTimeout(this.clickTimer);
                this.clickState = "up";
                this.clickTimer = window.setTimeout(function () {
                    _this2._mousedownInner(_this2.clickPos);
                    _this2._mouseupInner(e);
                    _this2._resetmouse();
                }, Math.max(0, DOUBLE_CLICK_THRESHOLD_MS - (Date.now() - this.clickStartTime)));
            } else if (this.clickState === "down2") {
                this._doubleclickInner(e);
                if (this.clickTimer !== null) window.clearTimeout(this.clickTimer);
                this._resetmouse();
            } else {
                this._mouseupInner(e);
                this._resetmouse();
            }
        }
    }]);

    return DoubleClickLayer;
}();

/**
 * Handle drawing responsibilites for Reduct.
 */


var Stage = function (_BaseStage) {
    _inherits(Stage, _BaseStage);

    function Stage(canvas, width, height, store, views, semantics) {
        _classCallCheck(this, Stage);

        // Un-hide control panel
        var _this3 = _possibleConstructorReturn(this, (Stage.__proto__ || Object.getPrototypeOf(Stage)).call(this, canvas, width, height, store, views, semantics));

        document.querySelector("#overlay-nav").style.display = "block";

        _this3.sidebarWidth = 0;

        _this3.stateGraph = new _network2.default();
        _this3.alreadyWon = false;

        _this3.timer = null;
        _this3.color = "#EEEEEE";

        _this3.toolbox = new _toolbox2.default(_this3);
        _this3.goal = new _goal2.default(_this3);
        _this3.sidebar = new _sidebar2.default(_this3);
        _this3.syntaxJournal = new _syntaxjournal2.default(_this3);
        // TODO: this only allows one function definition be shown at
        // a time - this will break with multitouch
        _this3.functionDef = null;

        _this3._currentlyReducing = {};
        _this3._newSyntax = [];

        // Track of which function names are newly defined so that we
        // big-step it during reduction.
        _this3.newDefinedNames = [];
        // Keep track of the reduction mode.
        _this3.mode = "over";

        _this3.clickWrapper = new DoubleClickLayer(_this3._mousedownInner.bind(_this3), _this3._mousemoveInner.bind(_this3), _this3._mouseupInner.bind(_this3), _this3._doubleclickInner.bind(_this3));
        return _this3;
    }

    _createClass(Stage, [{
        key: "getNodeAtPos",
        value: function getNodeAtPos(pos) {
            var _this4 = this;

            var selectedId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (this.syntaxJournal.isOpen) {
                var _syntaxJournal$getNod = this.syntaxJournal.getNodeAtPos(state, pos),
                    _syntaxJournal$getNod2 = _slicedToArray(_syntaxJournal$getNod, 2),
                    _result = _syntaxJournal$getNod2[0],
                    _root = _syntaxJournal$getNod2[1];

                if (_result) {
                    return [_root, _result, true];
                }

                return [null, null, false];
            }

            var state = this.getState();
            var check = function check(curPos, curProjId, curExprId, curRoot, curOffset) {
                var curNode = state.getIn(["nodes", curExprId]);
                var projection = _this4.views[curProjId];
                var res = null;

                var topLeft = gfxCore.util.topLeftPos(projection, curOffset);
                if (projection.containsPoint(curPos, curOffset)) {
                    if (curRoot === null) {
                        curRoot = curExprId;
                        res = curExprId;
                    } else if (curNode && _this4.semantics.targetable(state, curNode)) {
                        res = curExprId;
                    }

                    if (curRoot === curExprId && curNode && !_this4.semantics.targetable(state, curNode)) {
                        return null;
                    }

                    var subpos = {
                        x: curPos.x - topLeft.x,
                        y: curPos.y - topLeft.y
                    };
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = projection.children(curExprId, state)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var _ref = _step.value;

                            var _ref2 = _slicedToArray(_ref, 2);

                            var childId = _ref2[0];
                            var subexprId = _ref2[1];

                            var subresult = check(subpos, childId, subexprId, curRoot, {
                                x: 0,
                                y: 0,
                                sx: curOffset.sx * projection.scale.x,
                                sy: curOffset.sy * projection.scale.y
                            });
                            if (subresult) {
                                return subresult;
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    if (res) {
                        return [curRoot, res];
                    }
                }
                return null;
            };

            var result = null;
            var root = null;

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = state.get("board").toArray().reverse()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var nodeId = _step2.value;

                    if (nodeId === selectedId) continue;

                    var res = check(pos, nodeId, nodeId, null, this.makeBaseOffset());
                    if (res) {
                        var _res = _slicedToArray(res, 2);

                        root = _res[0];
                        result = _res[1];

                        break;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            if (!result && !root) {
                var _toolbox$getNodeAtPos = this.toolbox.getNodeAtPos(state, pos);

                var _toolbox$getNodeAtPos2 = _slicedToArray(_toolbox$getNodeAtPos, 2);

                result = _toolbox$getNodeAtPos2[0];
                root = _toolbox$getNodeAtPos2[1];

                if (result) {
                    return [root, result, true];
                }

                var _syntaxJournal$getNod3 = this.syntaxJournal.getNodeAtPos(state, pos);

                var _syntaxJournal$getNod4 = _slicedToArray(_syntaxJournal$getNod3, 2);

                result = _syntaxJournal$getNod4[0];
                root = _syntaxJournal$getNod4[1];

                if (result) {
                    return [root, result, true];
                }
            }
            return [root, result, false];
        }
    }, {
        key: "getReferenceNameAtPos",
        value: function getReferenceNameAtPos(pos) {
            var _this5 = this;

            var state = this.getState();
            var check = function check(curPos, curProjId, curExprId, curRoot, curOffset) {
                var curNode = state.getIn(["nodes", curExprId]);
                var projection = _this5.views[curProjId];
                var res = null;

                var topLeft = gfxCore.util.topLeftPos(projection, curOffset);
                if (projection.containsPoint(curPos, curOffset)) {
                    if (curNode && curNode.get("type") == "reference") {
                        res = curExprId;
                    }

                    var subpos = {
                        x: curPos.x - topLeft.x,
                        y: curPos.y - topLeft.y
                    };
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                        for (var _iterator3 = projection.children(curExprId, state)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var _ref3 = _step3.value;

                            var _ref4 = _slicedToArray(_ref3, 2);

                            var childId = _ref4[0];
                            var subexprId = _ref4[1];

                            var subresult = check(subpos, childId, subexprId, curRoot, {
                                x: 0,
                                y: 0,
                                sx: curOffset.sx * projection.scale.x,
                                sy: curOffset.sy * projection.scale.y
                            });
                            if (subresult) {
                                return subresult;
                            }
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }

                    if (res) {
                        return res;
                    }
                }
                return null;
            };

            var result = null;

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = state.get("board").toArray().reverse()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var nodeId = _step4.value;

                    var res = check(pos, nodeId, nodeId, null, this.makeBaseOffset());
                    if (res) {
                        result = res;
                        break;
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            return result;
        }

        /**
         * Log the current game state.
         *
         * @param changeData Data associated with this edge in the graph.
         */

    }, {
        key: "saveState",
        value: function saveState() {
            var changeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            var state = level.serialize(this.getState(), this.semantics);
            var changed = this.stateGraph.push(state, changeData);
            _logging2.default.log("state-save", state);
            _logging2.default.log("state-path-save", this.stateGraph.serialize());

            if (changed && window.updateStateGraph) {
                // See index.js
                window.updateStateGraph(this.stateGraph.toVisJSNetworkData());
            }
        }
    }, {
        key: "saveNode",
        value: function saveNode(id) {
            var nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            nodes = nodes === null ? this.getState().get("nodes") : nodes;
            return this.semantics.parser.unparse(this.semantics.hydrate(nodes, nodes.get(id)));
        }

        /**
         * Push and save a special state onto the state graph.
         */

    }, {
        key: "pushState",
        value: function pushState(label) {
            var edge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            this.stateGraph.push(label, edge);
            _logging2.default.log("state-save", label);
            _logging2.default.log("state-path-save", this.stateGraph.serialize());
            if (window.updateStateGraph) {
                window.updateStateGraph(this.stateGraph.toVisJSNetworkData());
            }
        }
    }, {
        key: "resize",
        value: function resize() {
            var _this6 = this;

            _get(Stage.prototype.__proto__ || Object.getPrototypeOf(Stage.prototype), "resize", this).call(this);
            this.toolbox.resizeRows(this.getState());
            if (this.timer !== null) {
                window.clearTimeout(this.timer);
            }
            this.timer = window.setTimeout(function () {
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = _this6.getState().get("board")[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var id = _step5.value;

                        _this6.bumpAwayFromEdges(id);
                    }
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }
            }, 500);
        }
    }, {
        key: "startLevel",
        value: function startLevel(textGoal, showConcreteGoal) {
            var state = this.getState();

            var showSidebar = this.sidebar.startLevel(state);
            if (showSidebar) {
                this.sidebarWidth = 250;
            } else {
                this.sidebarWidth = 0;
            }

            this.goal.startLevel(textGoal, showConcreteGoal);
            this.toolbox.startLevel(state);
        }
    }, {
        key: "registerNewDefinedNames",
        value: function registerNewDefinedNames(names) {
            this.newDefinedNames = names;
        }
    }, {
        key: "getState",
        value: function getState() {
            return this.store.getState().getIn(["program", "$present"]);
        }
    }, {
        key: "getMousePos",
        value: function getMousePos(e) {
            var rect = this.canvas.getBoundingClientRect();
            var x = e.clientX - rect.left;
            var y = e.clientY - rect.top;

            return { x: x - this.sidebarWidth, y: y, sidebar: x - this.sidebarWidth < 0 };
        }
    }, {
        key: "drawContents",
        value: function drawContents() {
            var state = this.getState();

            this.sidebar.drawImpl(state);

            this.ctx.save();
            this.ctx.translate(this.sidebarWidth, 0);
            this.ctx.fillStyle = this.color;
            this.ctx.fillRect(0, 0, this.width, this.height);

            this.toolbox.drawBase(state);
            // this.syntaxJournal.drawBase(state);
            this.goal.drawImpl(state);

            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = Object.values(this.effects)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var fx = _step6.value;

                    if (fx.under) {
                        fx.prepare();
                        fx.draw();
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = state.get("board")[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var nodeId = _step7.value;

                    this.drawProjection(state, nodeId);
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            this.toolbox.drawImpl(state);
            // this.syntaxJournal.drawImpl(state);

            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = this._newSyntax[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var id = _step8.value;

                    this.drawInternalProjection(state, id);
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            if (this.functionDef) {
                this.functionDef.drawImpl(state);
            }

            var _iteratorNormalCompletion9 = true;
            var _didIteratorError9 = false;
            var _iteratorError9 = undefined;

            try {
                for (var _iterator9 = Object.values(this.effects)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                    var _fx = _step9.value;

                    if (!_fx.under) {
                        _fx.prepare();
                        _fx.draw();
                    }
                }
            } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion9 && _iterator9.return) {
                        _iterator9.return();
                    }
                } finally {
                    if (_didIteratorError9) {
                        throw _iteratorError9;
                    }
                }
            }

            this.ctx.restore();
        }

        /**
         * Helper that clones an item from the toolbox.
         */

    }, {
        key: "cloneToolboxItem",
        value: function cloneToolboxItem(selectedNode) {
            var state = this.getState();
            var selected = state.getIn(["nodes", selectedNode]);
            // TODO: fix this check/use Record
            if (selected.has("__meta") && selected.get("__meta").toolbox.unlimited) {
                // If node has __meta indicating infinite uses,
                // clone instead.
                var _semantics$clone = this.semantics.clone(selectedNode, state.get("nodes")),
                    _semantics$clone2 = _slicedToArray(_semantics$clone, 2),
                    clonedNode = _semantics$clone2[0],
                    addedNodes = _semantics$clone2[1];

                // TODO: make clone include result in addedNodes


                var tempNodes = state.get("nodes").withMutations(function (nodes) {
                    var _iteratorNormalCompletion10 = true;
                    var _didIteratorError10 = false;
                    var _iteratorError10 = undefined;

                    try {
                        for (var _iterator10 = addedNodes[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                            var node = _step10.value;

                            nodes.set(node.get("id"), node);
                        }
                    } catch (err) {
                        _didIteratorError10 = true;
                        _iteratorError10 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion10 && _iterator10.return) {
                                _iterator10.return();
                            }
                        } finally {
                            if (_didIteratorError10) {
                                throw _iteratorError10;
                            }
                        }
                    }

                    nodes.set(clonedNode.get("id"), clonedNode);
                });
                var _iteratorNormalCompletion11 = true;
                var _didIteratorError11 = false;
                var _iteratorError11 = undefined;

                try {
                    for (var _iterator11 = addedNodes.concat([clonedNode])[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                        var node = _step11.value;

                        this.views[node.get("id")] = this.semantics.project(this, tempNodes, node);
                    }
                } catch (err) {
                    _didIteratorError11 = true;
                    _iteratorError11 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion11 && _iterator11.return) {
                            _iterator11.return();
                        }
                    } finally {
                        if (_didIteratorError11) {
                            throw _iteratorError11;
                        }
                    }
                }

                this.views[clonedNode.get("id")].pos.x = this.views[selectedNode].pos.x;
                this.views[clonedNode.get("id")].pos.y = this.views[selectedNode].pos.y;

                _audio2.default.play("place_from_toolbox");

                this.store.dispatch(action.useToolbox(selectedNode, clonedNode.get("id"), addedNodes.concat([clonedNode])));
                return clonedNode.get("id");
            }
            return null;
        }
    }, {
        key: "isDetachable",
        value: function isDetachable(targetNode) {
            var state = this.getState();
            var target = state.getIn(["nodes", targetNode]);
            if (!target.get("locked") && target.get("parent") && target.get("type") !== "missing") {
                return this.semantics.detachable(state, target.get("parent"), targetNode);
            }
            return false;
        }

        /**
         * Helper that detaches an item from its parent.
         */

    }, {
        key: "detachFromHole",
        value: function detachFromHole(selectedNode, targetNode) {
            if (this.isDetachable(targetNode)) {
                var pos = gfxCore.absolutePos(this.views[targetNode]);
                this.store.dispatch(action.detach(targetNode));
                this.views[targetNode].pos = pos;
                this.views[targetNode].parent = null;
                this.views[targetNode].scale.x = 1;
                this.views[targetNode].scale.y = 1;
                return targetNode;
            }
            return null;
        }

        /**
         * Bump items away from toolbox/edges
         */

    }, {
        key: "bumpAwayFromEdges",
        value: function bumpAwayFromEdges(id) {
            var currentView = this.views[id];
            // Make sure result stays on screen
            var pos = gfxCore.absolutePos(currentView);
            var sz = gfxCore.absoluteSize(currentView);

            var _findSafePosition = this.findSafePosition(pos.x, pos.y, sz.w, sz.h),
                safeX = _findSafePosition.x,
                safeY = _findSafePosition.y;

            animate.tween(currentView.pos, {
                x: safeX + currentView.anchor.x * sz.w,
                y: safeY + currentView.anchor.y * sz.h
            }, {
                duration: 250,
                easing: animate.Easing.Cubic.Out
            });
        }

        /**
         * Helper to highlight applicable notches near a given expression.
         */

    }, {
        key: "highlightNotches",
        value: function highlightNotches(id) {
            var state = this.getState();
            var nodes = state.get("nodes");
            var selected = nodes.get(id);
            if (selected && this.semantics.hasNotches(selected)) {
                var _iteratorNormalCompletion12 = true;
                var _didIteratorError12 = false;
                var _iteratorError12 = undefined;

                try {
                    for (var _iterator12 = state.get("board")[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                        var nodeId = _step12.value;

                        var node = nodes.get(nodeId);
                        var compatible = this.semantics.notchesCompatible(selected, node);
                        if (compatible && compatible.length > 0) {
                            var _iteratorNormalCompletion13 = true;
                            var _didIteratorError13 = false;
                            var _iteratorError13 = undefined;

                            try {
                                for (var _iterator13 = compatible[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                                    var _ref5 = _step13.value;

                                    var _ref6 = _slicedToArray(_ref5, 2);

                                    var selNotchIdx = _ref6[0];
                                    var nodeNotchIdx = _ref6[1];

                                    var distance = gfxCore.distance(this.views[nodeId].notchPos(nodeId, nodeId, nodeNotchIdx), this.views[id].notchPos(id, id, selNotchIdx));
                                    if (distance < 50) {
                                        this.views[nodeId].highlighted = true;
                                    } else {
                                        this.views[nodeId].highlighted = false;
                                    }
                                }
                            } catch (err) {
                                _didIteratorError13 = true;
                                _iteratorError13 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion13 && _iterator13.return) {
                                        _iterator13.return();
                                    }
                                } finally {
                                    if (_didIteratorError13) {
                                        throw _iteratorError13;
                                    }
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError12 = true;
                    _iteratorError12 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion12 && _iterator12.return) {
                            _iterator12.return();
                        }
                    } finally {
                        if (_didIteratorError12) {
                            throw _iteratorError12;
                        }
                    }
                }
            }
        }
    }, {
        key: "previewApplication",
        value: function previewApplication(arg, target, prevTarget) {
            var _this7 = this;

            if (target === prevTarget) return;

            var state = this.getState();
            var nodes = state.get("nodes");

            if (prevTarget !== null) {
                var prevTargetNode = nodes.get(prevTarget);
                if (prevTargetNode.has("parent") && nodes.get(prevTargetNode.get("parent")).has("body")) {
                    // Clear previous preview
                    this.semantics.map(nodes, nodes.get(prevTargetNode.get("parent")).get("body"), function (nodes, id) {
                        if (_this7.views[id]) {
                            delete _this7.views[id].preview;
                        }
                        return [nodes.get(id), nodes];
                    }, function () {
                        return true;
                    });
                }
            }

            if (target === null) return;

            if (this.semantics.search(nodes, arg, function (_, id) {
                return nodes.get(id).get("type") === "missing";
            }).length > 0) {
                return;
            }

            var targetNode = nodes.get(target);
            if (targetNode.get("type") !== "lambdaArg") return;

            var lambdaBody = nodes.get(targetNode.get("parent")).get("body");

            var targetName = targetNode.get("name");
            this.semantics.searchNoncapturing(nodes, targetName, lambdaBody).forEach(function (id) {
                if (_this7.views[id]) {
                    _this7.views[id].preview = arg;
                }
            });
        }

        /**
         * Helper to activate definitions by placing them in sidebar.
         */

    }, {
        key: "dropDefines",
        value: function dropDefines(selectedNode) {
            var _this8 = this;

            var state = this.getState();
            var nodes = state.get("nodes");

            if (nodes.get(selectedNode).get("type") !== "define") {
                return false;
            }

            var missingNodes = this.semantics.search(nodes, selectedNode, function (nodes, id) {
                return nodes.get(id).get("type") === "missing";
            }).filter(function (id) {
                var node = nodes.get(id);
                if (!node.get("parent")) return true;
                var parent = nodes.get(node.get("parent"));
                var substepFilter = _this8.semantics.interpreter.substepFilter(parent.get("type"));
                return substepFilter(_this8.semantics, state, parent, node.get("parentField"));
            });

            if (missingNodes.length > 0) {
                _logging2.default.log("define-failed", {
                    item: this.saveNode(selectedNode),
                    blocking: missingNodes.map(function (id) {
                        return _this8.saveNode(id);
                    })
                });
                missingNodes.forEach(function (id) {
                    animate.fx.error(_this8, _this8.getView(id));
                });
                return false;
            }

            var name = nodes.getIn([selectedNode, "name"]);
            this.store.dispatch(action.define(name, selectedNode));
            this.sidebar.addGlobal(this.getState(), name);
        }

        /**
         * Helper to combine notches where needed.
         */

    }, {
        key: "snapNotches",
        value: function snapNotches(selectedNode) {
            var state = this.getState();

            var board = state.get("board");
            var nodes = state.get("nodes");

            var _iteratorNormalCompletion14 = true;
            var _didIteratorError14 = false;
            var _iteratorError14 = undefined;

            try {
                for (var _iterator14 = board[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                    var nodeId = _step14.value;

                    if (this.views[nodeId].highlighted) {
                        this.views[nodeId].highlighted = false;
                    }
                }
            } catch (err) {
                _didIteratorError14 = true;
                _iteratorError14 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion14 && _iterator14.return) {
                        _iterator14.return();
                    }
                } finally {
                    if (_didIteratorError14) {
                        throw _iteratorError14;
                    }
                }
            }

            var selected = nodes.get(selectedNode);
            if (selected && this.semantics.hasNotches(selected)) {
                var leastDistance = 9999;
                var closestNotch = null;

                var _iteratorNormalCompletion15 = true;
                var _didIteratorError15 = false;
                var _iteratorError15 = undefined;

                try {
                    for (var _iterator15 = state.get("board")[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                        var _nodeId = _step15.value;

                        if (_nodeId === selectedNode) continue;

                        var node = nodes.get(_nodeId);
                        var compatible = this.semantics.notchesCompatible(selected, node);
                        // TODO: actually check distance to notch
                        if (compatible && compatible.length > 0) {
                            var _iteratorNormalCompletion16 = true;
                            var _didIteratorError16 = false;
                            var _iteratorError16 = undefined;

                            try {
                                for (var _iterator16 = compatible[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                                    var _ref7 = _step16.value;

                                    var _ref8 = _slicedToArray(_ref7, 2);

                                    var selNotchIdx = _ref8[0];
                                    var nodeNotchIdx = _ref8[1];

                                    var distance = gfxCore.distance(this.views[_nodeId].notchPos(_nodeId, _nodeId, nodeNotchIdx), this.views[selectedNode].notchPos(selectedNode, selectedNode, selNotchIdx));
                                    if (distance < 50) {
                                        this.views[_nodeId].highlighted = true;
                                    } else {
                                        this.views[_nodeId].highlighted = false;
                                    }

                                    if (distance < leastDistance) {
                                        leastDistance = distance;
                                        closestNotch = [_nodeId, compatible];
                                    }
                                }
                            } catch (err) {
                                _didIteratorError16 = true;
                                _iteratorError16 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion16 && _iterator16.return) {
                                        _iterator16.return();
                                    }
                                } finally {
                                    if (_didIteratorError16) {
                                        throw _iteratorError16;
                                    }
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError15 = true;
                    _iteratorError15 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion15 && _iterator15.return) {
                            _iterator15.return();
                        }
                    } finally {
                        if (_didIteratorError15) {
                            throw _iteratorError15;
                        }
                    }
                }

                if (leastDistance <= 150 && closestNotch !== null) {
                    // TODO: actually check the matched notches
                    var _closestNotch = closestNotch,
                        _closestNotch2 = _slicedToArray(_closestNotch, 2),
                        parent = _closestNotch2[0],
                        notchPair = _closestNotch2[1];
                    // Don't reattach to the same notch


                    this.views[parent].highlighted = false;
                    if (selected.get("parent") === parent) {
                        return false;
                    }

                    if (this.semantics.notchesAttachable(this, this.getState(), parent, selectedNode, notchPair[0])) {
                        animate.fx.blink(this, this.views[parent], {
                            times: 2,
                            color: "magenta",
                            speed: 100,
                            lineWidth: 5
                        });
                        animate.fx.blink(this, this.views[selectedNode], {
                            times: 2,
                            color: "magenta",
                            speed: 100,
                            lineWidth: 5
                        });
                        this.store.dispatch(action.attachNotch(parent, 0, selectedNode, 0));
                        return true;
                    }
                }
            }
            return false;
        }

        /**
         * Helper that handles animation and updating the store for a small-step.
         */

    }, {
        key: "step",
        value: function step(state, selectedNode) {
            var _this9 = this;

            var overrideMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            var nodes = state.get("nodes");
            var node = nodes.get(selectedNode);

            if (this.semantics.kind(node) !== "expression") {
                return;
            }

            if (this._currentlyReducing[selectedNode]) {
                return;
            }

            this._currentlyReducing[selectedNode] = true;

            var reducing = [];
            var time = 0;
            var reductionAnimation = animate.infinite(function (dt) {
                time += dt;
                var _iteratorNormalCompletion17 = true;
                var _didIteratorError17 = false;
                var _iteratorError17 = undefined;

                try {
                    for (var _iterator17 = reducing[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                        var id = _step17.value;

                        _this9.views[id].stroke = {
                            color: "lightblue",
                            lineWidth: 5,
                            lineDash: [5, 10],
                            lineDashOffset: time
                        };
                    }
                } catch (err) {
                    _didIteratorError17 = true;
                    _iteratorError17 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion17 && _iterator17.return) {
                            _iterator17.return();
                        }
                    } finally {
                        if (_didIteratorError17) {
                            throw _iteratorError17;
                        }
                    }
                }
            });

            var finishReducing = function finishReducing() {
                reductionAnimation.stop();
                delete _this9._currentlyReducing[selectedNode];
                var _iteratorNormalCompletion18 = true;
                var _didIteratorError18 = false;
                var _iteratorError18 = undefined;

                try {
                    for (var _iterator18 = reducing[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
                        var id = _step18.value;

                        _this9.views[id].stroke = null;
                        delete _this9._currentlyReducing[id];
                    }
                } catch (err) {
                    _didIteratorError18 = true;
                    _iteratorError18 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion18 && _iterator18.return) {
                            _iterator18.return();
                        }
                    } finally {
                        if (_didIteratorError18) {
                            throw _iteratorError18;
                        }
                    }
                }
            };

            // Assumes clicks always dispatched to top-level node
            var origPos = {
                x: gfxCore.centerPos(this.getView(selectedNode)).x,
                y: gfxCore.centerPos(this.getView(selectedNode)).y
            };

            var mode = overrideMode || this.mode;
            // const mode = document.querySelector("#evaluation-mode").value;
            this.semantics.interpreter.reduce(this, state, node, mode, {
                update: function update(topNodeId, newNodeIds, addedNodes, recordUndo) {
                    if (_this9.alreadyWon) return Promise.resolve(_this9.getState());

                    var topView = _this9.views[topNodeId];

                    if (newNodeIds.length !== 1) {
                        throw "Stepping to produce multiple expressions is currently unsupported.";
                    }

                    var state = _this9.getState();
                    var tempNodes = state.get("nodes").withMutations(function (nodes) {
                        var _iteratorNormalCompletion19 = true;
                        var _didIteratorError19 = false;
                        var _iteratorError19 = undefined;

                        try {
                            for (var _iterator19 = addedNodes[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
                                var _node = _step19.value;

                                nodes.set(_node.get("id"), _node);
                            }
                        } catch (err) {
                            _didIteratorError19 = true;
                            _iteratorError19 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion19 && _iterator19.return) {
                                    _iterator19.return();
                                }
                            } finally {
                                if (_didIteratorError19) {
                                    throw _iteratorError19;
                                }
                            }
                        }
                    });

                    var origNode = state.getIn(["nodes", selectedNode]);
                    var origNodeDefn = _this9.semantics.definitionOf(origNode);
                    if (origNodeDefn && origNodeDefn.stepPosition) {
                        origPos = origNodeDefn.stepPosition(_this9.semantics, _this9, state, origNode);
                    }

                    // Project after getting position so that projecting
                    // doesn't recreate existing view and thus mess up
                    // view hierarchy. (We also can't run prepare() since
                    // that might relayout things.)
                    var _iteratorNormalCompletion20 = true;
                    var _didIteratorError20 = false;
                    var _iteratorError20 = undefined;

                    try {
                        for (var _iterator20 = addedNodes[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
                            var _node2 = _step20.value;

                            _this9.views[_node2.get("id")] = _this9.semantics.project(_this9, tempNodes, _node2);
                        }

                        // Preserve position
                    } catch (err) {
                        _didIteratorError20 = true;
                        _iteratorError20 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion20 && _iterator20.return) {
                                _iterator20.return();
                            }
                        } finally {
                            if (_didIteratorError20) {
                                throw _iteratorError20;
                            }
                        }
                    }

                    _this9.views[newNodeIds[0]].anchor.x = 0.5;
                    _this9.views[newNodeIds[0]].anchor.y = 0.5;
                    _this9.views[newNodeIds[0]].pos.x = origPos.x;
                    _this9.views[newNodeIds[0]].pos.y = origPos.y;

                    var act = action.smallStep(topNodeId, newNodeIds, addedNodes);
                    _logging2.default.log("reduction", {
                        before: _this9.saveNode(topNodeId),
                        after: newNodeIds.map(function (id) {
                            return _this9.saveNode(id, tempNodes);
                        })
                    });
                    if (!recordUndo) {
                        act = action.skipUndo(act);
                    }
                    _this9.store.dispatch(act);

                    var _iteratorNormalCompletion21 = true;
                    var _didIteratorError21 = false;
                    var _iteratorError21 = undefined;

                    try {
                        for (var _iterator21 = _this9.getState().get("board")[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
                            var topViewId = _step21.value;

                            // Make sure result stays on screen
                            _this9.bumpAwayFromEdges(topViewId);
                        }
                    } catch (err) {
                        _didIteratorError21 = true;
                        _iteratorError21 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion21 && _iterator21.return) {
                                _iterator21.return();
                            }
                        } finally {
                            if (_didIteratorError21) {
                                throw _iteratorError21;
                            }
                        }
                    }

                    var updatedNodes = _this9.getState().get("nodes");
                    var _iteratorNormalCompletion22 = true;
                    var _didIteratorError22 = false;
                    var _iteratorError22 = undefined;

                    try {
                        for (var _iterator22 = newNodeIds[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
                            var id = _step22.value;

                            var n = updatedNodes.get(id);
                            while (n.has("parent")) {
                                n = updatedNodes.get(n.get("parent"));
                            }
                            reducing.push(n.get("id"));
                            _this9._currentlyReducing[n.get("id")] = true;
                        }
                    } catch (err) {
                        _didIteratorError22 = true;
                        _iteratorError22 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion22 && _iterator22.return) {
                                _iterator22.return();
                            }
                        } finally {
                            if (_didIteratorError22) {
                                throw _iteratorError22;
                            }
                        }
                    }

                    return Promise.resolve(_this9.getState());
                },
                error: function error(errorNodeId) {
                    animate.fx.error(_this9, _this9.views[errorNodeId]);
                    _logging2.default.log("reduction-error", {
                        clicked: _this9.saveNode(selectedNode),
                        cause: _this9.saveNode(errorNodeId)
                    });
                }
            }).catch(function (_errorNodeId) {
                // Ignore reduction errors, the reducer already handled it
            }).finally(finishReducing);

            if (this.mode === "big") {
                this.mode = "over";
                document.querySelector("#ffwd").classList.remove("active");
            }
        }

        /**
         * Helper that handles animation and updating the store for a beta reduction.
         */

    }, {
        key: "betaReduce",
        value: function betaReduce(state, target, arg) {
            var _this10 = this;

            var result = this.semantics.interpreter.betaReduce(this, state, target, [arg]);
            if (result) {
                var _result2 = _slicedToArray(result, 3),
                    topNode = _result2[0],
                    resultNodeIds = _result2[1],
                    newNodes = _result2[2];

                var origExp = this.saveNode(topNode);
                var origArg = this.saveNode(arg);
                var tempNodes = state.get("nodes").withMutations(function (nodes) {
                    var _iteratorNormalCompletion23 = true;
                    var _didIteratorError23 = false;
                    var _iteratorError23 = undefined;

                    try {
                        for (var _iterator23 = newNodes[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
                            var node = _step23.value;

                            nodes.set(node.get("id"), node);
                        }
                    } catch (err) {
                        _didIteratorError23 = true;
                        _iteratorError23 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion23 && _iterator23.return) {
                                _iterator23.return();
                            }
                        } finally {
                            if (_didIteratorError23) {
                                throw _iteratorError23;
                            }
                        }
                    }
                });

                var topNodeRecord = state.getIn(["nodes", topNode]);
                if (topNodeRecord.get("body") && this.views[topNodeRecord.get("body")]) {
                    var body = topNodeRecord.get("body");
                    _audio2.default.play("pop");

                    this.views[topNode].pos = gfxCore.centerPos(this.views[topNode]);
                    this.views[topNode].anchor = { x: 0.5, y: 0.5 };

                    var bodyPos = gfxCore.absolutePos(this.views[body]);
                    var bodySize = gfxCore.absoluteSize(this.views[body]);
                    // Project after measuring sizes
                    var _iteratorNormalCompletion24 = true;
                    var _didIteratorError24 = false;
                    var _iteratorError24 = undefined;

                    try {
                        for (var _iterator24 = newNodes[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
                            var node = _step24.value;

                            this.views[node.get("id")] = this.semantics.project(this, tempNodes, node);
                        }
                    } catch (err) {
                        _didIteratorError24 = true;
                        _iteratorError24 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion24 && _iterator24.return) {
                                _iterator24.return();
                            }
                        } finally {
                            if (_didIteratorError24) {
                                throw _iteratorError24;
                            }
                        }
                    }

                    this.store.dispatch(action.betaReduce(topNode, arg, resultNodeIds, newNodes));

                    Promise.all([animate.fx.keepAlive(this, topNode, animate.tween(this.views[topNode], {
                        opacity: 0,
                        pos: { y: this.views[topNode].pos.y + 50 },
                        scale: { x: 0, y: 0 }
                    }, {
                        duration: 1000,
                        easing: animate.Easing.Cubic.Out
                    }).delay(350), true), animate.fx.emerge(this, this.getState(), bodyPos, bodySize, resultNodeIds)]).then(function () {
                        _this10.views[topNode].opacity = 1;
                    }).then(function () {
                        _this10.views[arg].opacity = 1;
                        _this10.views[topNode].anchor = { x: 0, y: 0.5 };
                        _this10.views[topNode].scale = { x: 1, y: 1 };
                        _this10.views[topNode].pos.y = _this10.views[topNode].pos.y - 50;
                    });

                    animate.tween(this.views[arg], { opacity: 0 }, {
                        duration: 250,
                        easing: animate.Easing.Cubic.Out
                    });
                } else {
                    var _iteratorNormalCompletion25 = true;
                    var _didIteratorError25 = false;
                    var _iteratorError25 = undefined;

                    try {
                        for (var _iterator25 = resultNodeIds[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
                            var newNodeId = _step25.value;

                            this.views[newNodeId].pos.x = this.views[topNode].pos.x;
                            this.views[newNodeId].pos.y = this.views[topNode].pos.y;
                        }
                    } catch (err) {
                        _didIteratorError25 = true;
                        _iteratorError25 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion25 && _iterator25.return) {
                                _iterator25.return();
                            }
                        } finally {
                            if (_didIteratorError25) {
                                throw _iteratorError25;
                            }
                        }
                    }

                    _audio2.default.play("pop");

                    // Project after measuring sizes
                    var _iteratorNormalCompletion26 = true;
                    var _didIteratorError26 = false;
                    var _iteratorError26 = undefined;

                    try {
                        for (var _iterator26 = newNodes[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
                            var _node3 = _step26.value;

                            this.views[_node3.get("id")] = this.semantics.project(this, tempNodes, _node3);
                        }
                    } catch (err) {
                        _didIteratorError26 = true;
                        _iteratorError26 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion26 && _iterator26.return) {
                                _iterator26.return();
                            }
                        } finally {
                            if (_didIteratorError26) {
                                throw _iteratorError26;
                            }
                        }
                    }

                    this.store.dispatch(action.betaReduce(topNode, arg, resultNodeIds, newNodes));
                }

                _logging2.default.log("reduction-lambda", {
                    before: origExp,
                    applied: origArg,
                    after: resultNodeIds.map(function (id) {
                        return _this10.saveNode(id, tempNodes);
                    })
                });
            } else {
                var applyTarget = target;
                var targetNode = state.get("nodes").get(target);
                if (targetNode.has("parent")) {
                    applyTarget = targetNode.get("parent");
                }
                _logging2.default.log("reduction-lambda-failed", {
                    target: this.saveNode(applyTarget),
                    arg: this.saveNode(arg)
                });
            }
        }
    }, {
        key: "animateVictory",
        value: function animateVictory(_matching) {
            var _this11 = this;

            this.alreadyWon = true;
            var state = this.getState();
            var tweens = [];
            var views = [];
            var _iteratorNormalCompletion27 = true;
            var _didIteratorError27 = false;
            var _iteratorError27 = undefined;

            try {
                for (var _iterator27 = state.get("goal").concat(state.get("board"))[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
                    var nodeId = _step27.value;

                    views.push([nodeId, this.views[nodeId]]);
                }
            } catch (err) {
                _didIteratorError27 = true;
                _iteratorError27 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion27 && _iterator27.return) {
                        _iterator27.return();
                    }
                } finally {
                    if (_didIteratorError27) {
                        throw _iteratorError27;
                    }
                }
            }

            var _iteratorNormalCompletion28 = true;
            var _didIteratorError28 = false;
            var _iteratorError28 = undefined;

            try {
                for (var _iterator28 = this.goal.animatedNodes()[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
                    var _nodeId2 = _step28.value;

                    views.push([_nodeId2, this.views[_nodeId2]]);
                }
            } catch (err) {
                _didIteratorError28 = true;
                _iteratorError28 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion28 && _iterator28.return) {
                        _iterator28.return();
                    }
                } finally {
                    if (_didIteratorError28) {
                        throw _iteratorError28;
                    }
                }
            }

            var _iteratorNormalCompletion29 = true;
            var _didIteratorError29 = false;
            var _iteratorError29 = undefined;

            try {
                for (var _iterator29 = views[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
                    var _ref9 = _step29.value;

                    var _ref10 = _slicedToArray(_ref9, 2);

                    var _nodeId3 = _ref10[0];
                    var view = _ref10[1];

                    if (state.getIn(["nodes", _nodeId3]) && this.semantics.ignoreForVictory(state.getIn(["nodes", _nodeId3]))) {
                        continue;
                    }

                    tweens.push(animate.fx.blink(this, view, {
                        times: progression.currentLevel() === 0 ? 2 : 1,
                        color: "#0FF"
                    }));
                }
            } catch (err) {
                _didIteratorError29 = true;
                _iteratorError29 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion29 && _iterator29.return) {
                        _iterator29.return();
                    }
                } finally {
                    if (_didIteratorError29) {
                        throw _iteratorError29;
                    }
                }
            }

            _audio2.default.play("matching-the-goal2");

            return Promise.all(tweens).then(function () {
                var subtweens = [];
                var _iteratorNormalCompletion30 = true;
                var _didIteratorError30 = false;
                var _iteratorError30 = undefined;

                try {
                    for (var _iterator30 = views[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
                        var _ref11 = _step30.value;

                        var _ref12 = _slicedToArray(_ref11, 2);

                        var _ = _ref12[0];
                        var _view = _ref12[1];

                        subtweens.push(animate.fx.splosion(_this11, gfxCore.centerPos(_view)));
                    }
                } catch (err) {
                    _didIteratorError30 = true;
                    _iteratorError30 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion30 && _iterator30.return) {
                            _iterator30.return();
                        }
                    } finally {
                        if (_didIteratorError30) {
                            throw _iteratorError30;
                        }
                    }
                }

                _this11.goal.victory();
                _this11.store.dispatch(action.victory());
                _audio2.default.play("firework1");
                return Promise.all(subtweens);
            }).then(function () {
                var title = gfxCore.sprite({
                    image: _loader2.default.images["you_win"],
                    size: { w: 509, h: 110.0 }
                });
                var titleId = _this11.allocate(title);

                var starList = [];
                var chapter = progression.currentChapter();
                for (var _i = 0; _i < chapter.levels.length; _i++) {
                    var star = gfxCore.shapes.star({
                        color: progression.currentLevel() > chapter.startIdx + _i ? "gold" : "gray"
                    });
                    star.opacity = 0;

                    var delay = 300;
                    if (chapter.startIdx + _i <= progression.currentLevel()) {
                        delay = _i * (300 / (progression.currentLevel() - chapter.startIdx));
                    }

                    animate.tween(star, { opacity: 1 }, {
                        easing: animate.Easing.Cubic.In,
                        duration: 300,
                        setAnimatingFlag: false
                    }).delay(delay);
                    starList.push(_this11.allocate(star));
                }

                var rows = [titleId];
                var layout = gfxCore.layout.sticky(gfxCore.layout.vbox(function () {
                    return rows;
                }, {
                    subexpScale: 1
                }, gfxCore.baseProjection), "center", {});
                var layoutId = _this11.allocate(layout);

                var i = 0;

                var _loop = function _loop() {
                    var j = i;
                    rows.push(_this11.allocate(gfxCore.layout.hbox(function () {
                        return starList.slice(j, j + 9);
                    }, {}, gfxCore.baseProjection)));
                    i += 9;
                };

                while (i < starList.length) {
                    _loop();
                }

                _this11.addEffect({
                    prepare: function prepare() {
                        var state = _this11.getState();
                        layout.prepare(layoutId, null, state, _this11);
                    },

                    draw: function draw() {
                        var state = _this11.getState();
                        var offset = _this11.makeBaseOffset();
                        layout.draw(layoutId, null, state, _this11, offset);
                    }
                });

                var thisStar = _this11.getView(starList[progression.currentLevel() - chapter.startIdx]);
                return Promise.all([animate.tween(thisStar, {
                    color: "#F00"
                }, {
                    duration: 1500,
                    setAnimatingFlag: false,
                    easing: animate.Easing.Color(animate.Easing.Cubic.In, thisStar.color, "#F00")
                }), animate.tween(thisStar, {
                    offset: { x: 0 }
                }, {
                    duration: 1500,
                    setAnimatingFlag: false,
                    easing: animate.Easing.Sinusoid(0, 25, animate.Easing.Cubic.In, 20)
                }), animate.tween(thisStar, {
                    offset: { y: 0 }
                }, {
                    duration: 1500,
                    setAnimatingFlag: false,
                    easing: animate.Easing.Sinusoid(0, 25, animate.Easing.Cubic.In, 22)
                })]).then(function () {
                    thisStar.color = "gold";
                    var scale = chroma.scale("Spectral").mode("lab");
                    return animate.fx.splosion(_this11, gfxCore.centerPos(thisStar), {
                        explosionRadius: 600,
                        numOfParticles: 60,
                        duration: 800,
                        color: function color(idx) {
                            return scale(idx / 60.0);
                        },
                        angle: function angle(idx) {
                            return 2 * Math.PI * (idx / 60.0);
                        }
                    });
                }).then(function () {
                    return Promise.all([animate.tween(title, {
                        opacity: 0
                    }, {
                        duration: 200,
                        setAnimatingFlag: false,
                        easing: animate.Easing.Cubic.In
                    }), animate.tween(layout, {
                        opacity: 0
                    }, {
                        duration: 200,
                        setAnimatingFlag: false,
                        easing: animate.Easing.Cubic.In
                    })]);
                });
            });
        }
    }, {
        key: "animateStuck",
        value: function animateStuck() {
            this.addEffect(new _stuck2.default(this));
            this.alreadyWon = true;
        }

        /**
         * Add new items to the syntax journal.
         */

    }, {
        key: "learnSyntax",
        value: function learnSyntax(syntaxes) {
            var _this12 = this;

            return; // Disabled for now
            var journalButton = this.internalViews[this.syntaxJournal.button];

            var step = function step() {
                var syntax = syntaxes.shift();
                if (!syntax) {
                    _this12.draw();
                    return;
                }

                progression.learnSyntax(syntax);

                var defn = progression.getSyntaxDefinition(syntax);

                var image = _loader2.default.images[defn.header];
                var sprite = gfxCore.sprite({
                    image: image,
                    size: { w: image.naturalWidth, h: image.naturalHeight }
                });
                var id = _this12.allocateInternal(sprite);

                sprite.opacity = 0;
                sprite.pos = {
                    x: _this12.width / 2,
                    y: _this12.height / 2
                };
                sprite.anchor = { x: 0.5, y: 0.5 };
                animate.tween(sprite, { opacity: 1 }, {
                    duration: 800,
                    easing: animate.Easing.Cubic.Out
                }).then(function () {
                    animate.tween(sprite.scale, { x: 0.1, y: 0.1 }, {
                        duration: 1000,
                        easing: animate.Easing.Cubic.Out
                    });

                    return animate.tween(sprite.pos, {
                        x: journalButton.pos.x + journalButton.size.w / 2,
                        y: journalButton.pos.y + journalButton.size.h / 2
                    }, {
                        duration: 2000,
                        easing: animate.Easing.Cubic.InOut
                    });
                }).then(function () {
                    journalButton.highlight();
                    _this12._newSyntax.shift();
                    step();
                });

                _this12._newSyntax.push(id);
            };
            step();
        }

        /**
         * Show the definition of the given reference under its view.
         */

    }, {
        key: "showReferenceDefinition",
        value: function showReferenceDefinition(state, referenceId) {
            var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var referenceNameNode = state.getIn(["nodes", referenceId]);
            var name = referenceNameNode.get("name");
            // TODO: don't hardcode repeat (also see ui/sidebar.js)
            if (name === "repeat") return;
            var functionNodeId = state.get("globals").get(name);
            var functionNode = state.get("nodes").get(functionNodeId);
            if (!functionNode) return;

            var type = functionNode.get("type");
            if (type === "define") {
                var functionBodyId = state.get("nodes").get(functionNodeId).get("body");
                this.functionDef = new _functiondef2.default(this, name, functionBodyId, referenceId, immediate ? 0 : 500);
            } else {
                this.functionDef = new _functiondef2.default(this, name, functionNodeId, referenceId, immediate ? 0 : 500);
            }
        }

        // TODO: refactor these methods onto the touchrecord
        /**
         * @returns {Boolean} ``true`` if the click was intercepted
         */

    }, {
        key: "hideReferenceDefinition",
        value: function hideReferenceDefinition(mousePos) {
            if (this.functionDef && mousePos) {
                var _state = this.getState();
                var nodes = _state.get("nodes");
                var contains = this.functionDef.containsPoint(_state, mousePos);
                if (contains) {
                    var body = this.semantics.hydrate(nodes, nodes.get(this.functionDef.id));
                    if (body.parent) delete body.parent;
                    if (body.parentField) delete body.parentField;

                    var origRef = nodes.get(this.functionDef.referenceId);
                    var subexprs = this.semantics.subexpressions(origRef);
                    var hasArgs = subexprs.some(function (field) {
                        return nodes.getIn([origRef.get(field), "type"]) !== "missing";
                    });

                    var result = body;

                    if (hasArgs) {
                        var _iteratorNormalCompletion31 = true;
                        var _didIteratorError31 = false;
                        var _iteratorError31 = undefined;

                        try {
                            for (var _iterator31 = subexprs[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
                                var field = _step31.value;

                                var hydrated = this.semantics.hydrate(nodes, nodes.get(origRef.get(field)));
                                result = this.semantics.apply(result, hydrated);
                            }
                        } catch (err) {
                            _didIteratorError31 = true;
                            _iteratorError31 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion31 && _iterator31.return) {
                                    _iterator31.return();
                                }
                            } finally {
                                if (_didIteratorError31) {
                                    throw _iteratorError31;
                                }
                            }
                        }
                    }

                    // Add parent field so that when projected, the
                    // unfolded reference isn't hoverable
                    if (origRef.get("parent")) {
                        result.parent = origRef.get("parent");
                        result.parentField = origRef.get("parentField");
                    }

                    var fullNodes = this.semantics.flatten(result).map(function (n) {
                        n.locked = true;
                        return immutable.Map(n);
                    });
                    var tempNodes = _state.get("nodes").withMutations(function (n) {
                        var _iteratorNormalCompletion32 = true;
                        var _didIteratorError32 = false;
                        var _iteratorError32 = undefined;

                        try {
                            for (var _iterator32 = fullNodes[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
                                var node = _step32.value;

                                n.set(node.get("id"), node);
                            }
                        } catch (err) {
                            _didIteratorError32 = true;
                            _iteratorError32 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion32 && _iterator32.return) {
                                    _iterator32.return();
                                }
                            } finally {
                                if (_didIteratorError32) {
                                    throw _iteratorError32;
                                }
                            }
                        }
                    });
                    var _iteratorNormalCompletion33 = true;
                    var _didIteratorError33 = false;
                    var _iteratorError33 = undefined;

                    try {
                        for (var _iterator33 = fullNodes[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
                            var node = _step33.value;

                            this.views[node.get("id")] = this.semantics.project(this, tempNodes, node);
                        }
                    } catch (err) {
                        _didIteratorError33 = true;
                        _iteratorError33 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion33 && _iterator33.return) {
                                _iterator33.return();
                            }
                        } finally {
                            if (_didIteratorError33) {
                                throw _iteratorError33;
                            }
                        }
                    }

                    var newView = this.views[fullNodes[0].get("id")];
                    var oldView = this.views[this.functionDef.referenceId];
                    newView.anchor.x = oldView.anchor.x;
                    newView.anchor.y = oldView.anchor.y;
                    newView.pos.x = oldView.pos.x;
                    newView.pos.y = oldView.pos.y;

                    this.store.dispatch(action.unfold(this.functionDef.referenceId, fullNodes[0].get("id"), fullNodes));
                } else {
                    _logging2.default.log("unfold-cancel", {
                        item: this.saveNode(this.functionDef.referenceId)
                    });
                }
                this.functionDef = null;
                return true;
            }
            this.functionDef = null;
            return false;
        }

        /**
         * Replace an unfaded expression with its faded equivalent.
         */

    }, {
        key: "fade",
        value: function fade(source, unfadedId, fadedId) {
            var _this13 = this;

            this.store.dispatch(action.fade(source, unfadedId, fadedId));

            var fxId = this.addEffect({
                prepare: function prepare() {
                    _this13.getView(unfadedId).prepare(unfadedId, unfadedId, _this13.getState(), _this13);
                },
                draw: function draw() {
                    _this13.getView(unfadedId).draw(unfadedId, unfadedId, _this13.getState(), _this13, _this13.makeBaseOffset());
                }
            });

            this.getView(fadedId).opacity = 0;
            this.getView(fadedId).anchor = this.getView(unfadedId).anchor;

            return Promise.all([animate.tween(this.getView(unfadedId), {
                opacity: 0
            }, {
                duration: 2000,
                easing: animate.Easing.Cubic.InOut
            }), animate.tween(this.getView(fadedId), {
                opacity: 1
            }, {
                duration: 2000,
                easing: animate.Easing.Cubic.InOut
            })]).then(function () {
                _this13.removeEffect(fxId);
            });
        }
    }, {
        key: "togglePause",
        value: function togglePause() {
            if (this.mode === "hybrid") {
                this.mode = "over";
            } else {
                this.mode = "hybrid";
            }
        }
    }, {
        key: "setFfwd",
        value: function setFfwd() {
            this.mode = "big";
        }
    }, {
        key: "_mousedownInner",
        value: function _mousedownInner(e) {
            var pos = this.getMousePos(e);

            if (pos.sidebar) {
                this.sidebar.toggle();
                return null;
            }

            if (this.syntaxJournal.isOpen) {
                var _syntaxJournal$getNod5 = this.syntaxJournal.getNodeAtPos(this.getState(), pos),
                    _syntaxJournal$getNod6 = _slicedToArray(_syntaxJournal$getNod5, 1),
                    topNode = _syntaxJournal$getNod6[0];

                if (topNode === null) {
                    this.syntaxJournal.close();
                }
            }

            if (this.hideReferenceDefinition(pos)) {
                return null;
            }

            return _get(Stage.prototype.__proto__ || Object.getPrototypeOf(Stage.prototype), "_mousedown", this).call(this, e);
        }
    }, {
        key: "_mousemoveInner",
        value: function _mousemoveInner(e) {
            _get(Stage.prototype.__proto__ || Object.getPrototypeOf(Stage.prototype), "_mousemove", this).call(this, e);
        }
    }, {
        key: "_mouseupInner",
        value: function _mouseupInner(e) {
            _get(Stage.prototype.__proto__ || Object.getPrototypeOf(Stage.prototype), "_mouseup", this).call(this, e);
        }
    }, {
        key: "_doubleclickInner",
        value: function _doubleclickInner(e) {
            var pos = this.getMousePos(e);
            if (pos.sidebar) return;

            var targetNode = this.getReferenceNameAtPos(pos);

            if (targetNode !== null) {
                var _state2 = this.getState();
                var node = _state2.getIn(["nodes", targetNode]);
                if (node.get("type") === "reference") {
                    this.showReferenceDefinition(this.getState(), targetNode, true);
                }
            }
        }

        /* ~~~~ Implement a double-click layer on top of click methods ~~~~ */

    }, {
        key: "_mousedown",
        value: function _mousedown(e) {
            if (this.alreadyWon) return;
            this.clickWrapper.onmousedown(e);
        }
    }, {
        key: "_mousemove",
        value: function _mousemove(e) {
            if (this.alreadyWon) return;
            this.clickWrapper.onmousemove(e);
        }
    }, {
        key: "_mouseup",
        value: function _mouseup(e) {
            if (this.alreadyWon) return;
            this.clickWrapper.onmouseup(e);
        }
    }, {
        key: "_touchstart",
        value: function _touchstart(e) {
            if (this.alreadyWon) return;
            if (this.getMousePos(e).sidebar) {
                this.sidebar.toggle();
                return;
            }

            if (this.syntaxJournal.isOpen) {
                this.syntaxJournal.close();
            }

            _get(Stage.prototype.__proto__ || Object.getPrototypeOf(Stage.prototype), "_touchstart", this).call(this, e);
        }
    }, {
        key: "_touchmove",
        value: function _touchmove(e) {
            if (this.alreadyWon) return;
            if (this.getMousePos(e).sidebar) {
                return;
            }

            _get(Stage.prototype.__proto__ || Object.getPrototypeOf(Stage.prototype), "_touchmove", this).call(this, e);
        }
    }, {
        key: "_touchend",
        value: function _touchend(e) {
            if (this.alreadyWon) return;
            if (this.getMousePos(e).sidebar) {
                return;
            }

            if (this.hideReferenceDefinition(this.getMousePos(e))) {
                return;
            }

            _get(Stage.prototype.__proto__ || Object.getPrototypeOf(Stage.prototype), "_touchend", this).call(this, e);
        }
    }, {
        key: "touchRecordClass",
        get: function get() {
            return _stagetouchrecord2.default;
        }
    }, {
        key: "width",
        get: function get() {
            return this._width - this.sidebarWidth;
        }
    }]);

    return Stage;
}(_basestage2.default);

exports.default = Stage;
},{"chroma-js":71,"immutable":70,"../reducer/action":30,"../game/level":7,"../gfx/animate":5,"../resource/audio":36,"../gfx/core":4,"../game/progression":8,"../ui/goal":35,"../ui/toolbox":37,"../ui/sidebar":38,"../ui/stuck":39,"../ui/syntaxjournal":40,"../ui/functiondef":41,"../loader":3,"../logging/logging":15,"../logging/network":42,"./basestage":43,"./stagetouchrecord":44}],11:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _core = require("../gfx/core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _logging = require("../logging/logging");

var _logging2 = _interopRequireDefault(_logging);

var _stage2 = require("./stage");

var _stage3 = _interopRequireDefault(_stage2);

var _goal = require("../ui/goal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The level stage with a tutorial overlay.
 */
var TutorialStage = function (_Stage) {
    _inherits(TutorialStage, _Stage);

    function TutorialStage() {
        var _ref;

        _classCallCheck(this, TutorialStage);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, (_ref = TutorialStage.__proto__ || Object.getPrototypeOf(TutorialStage)).call.apply(_ref, [this].concat(args)));

        _this.tutorialState = new GoalTutorial(_this);
        return _this;
    }

    _createClass(TutorialStage, [{
        key: "drawContents",
        value: function drawContents() {
            _get(TutorialStage.prototype.__proto__ || Object.getPrototypeOf(TutorialStage.prototype), "drawContents", this).call(this);

            if (this.tutorialState) {
                this.tutorialState.drawContents();
            }
        }
    }, {
        key: "_mousedown",
        value: function _mousedown(e) {
            if (!this.tutorialState.next() && this.tutorialState.allowEvents) {
                _get(TutorialStage.prototype.__proto__ || Object.getPrototypeOf(TutorialStage.prototype), "_mousedown", this).call(this, e);
            }
        }
    }, {
        key: "_touchstart",
        value: function _touchstart(e) {
            if (!this.tutorialState.next() && this.tutorialState.allowEvents) {
                _get(TutorialStage.prototype.__proto__ || Object.getPrototypeOf(TutorialStage.prototype), "_touchstart", this).call(this, e);
            }
        }
    }]);

    return TutorialStage;
}(_stage3.default);

exports.default = TutorialStage;

var GoalTutorial = function () {
    function GoalTutorial(stage) {
        var _this2 = this;

        _classCallCheck(this, GoalTutorial);

        this.stage = stage;
        this.r = stage.width;
        this.x = 0;
        this.y = 0;
        this.opacity = 0;

        this.state = "started";
        this.ready = false;

        var goalText = gfx.text((0, _goal.templateText)(stage.semantics, "The alien needs {a star}!"), {
            font: gfx.text.script,
            opacity: 0,
            color: "#FFF",
            fontSize: 42
        });
        this.goalText = stage.allocate(goalText);

        this.boardText = stage.allocate(gfx.text((0, _goal.templateText)(stage.semantics, "Drag the {star} into the (x)!"), {
            font: gfx.text.script,
            opacity: 0,
            color: "#FFF",
            fontSize: 42
        }));

        this.continueText = stage.allocate(gfx.layout.sticky(gfx.text("Click to continue", {
            font: gfx.text.script,
            opacity: 1,
            color: "#FFF",
            fontSize: 48
        }), "bottom", {
            align: "center",
            margin: 15
        }));

        var time = 0;
        this.infinite = animate.infinite(function (dt) {
            time += dt;

            if (_this2.ready && _this2.state === "goal") {
                var state = _this2.stage.getState();

                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = state.get("goal")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var id = _step.value;

                        _this2.stage.getView(id).stroke = {
                            color: "#0FF",
                            lineWidth: 2 - Math.cos(time / 600)
                        };
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }

            if (_this2.ready && _this2.state !== "done") {
                _this2.stage.getView(_this2.continueText).opacity = 0.5 - 0.5 * Math.cos(time / 600);
            } else {
                _this2.stage.getView(_this2.continueText).opacity = 0;
                time = 0;
            }

            if (_this2.state === "done") {
                _this2.infinite.stop();
            }
        });
    }

    _createClass(GoalTutorial, [{
        key: "startLevel",
        value: function startLevel() {
            var _get2;

            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            (_get2 = _get(GoalTutorial.prototype.__proto__ || Object.getPrototypeOf(GoalTutorial.prototype), "startLevel", this)).call.apply(_get2, [this].concat(args));

            _logging2.default.log("tutorial-state-next", this.state);
        }
    }, {
        key: "next",
        value: function next() {
            var _this3 = this;

            if (!this.ready) return true;

            if (this.state === "goal") {
                this.ready = false;
                var bbx = 10000;
                var bby = 10000;
                var bbmx = 0;
                var bbmy = 0;
                var bbw = 0;
                var bbh = 0;

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = this.stage.getState().get("board")[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var id = _step2.value;

                        var view = this.stage.getView(id);
                        var pos = gfx.absolutePos(view);
                        bbx = Math.min(bbx, pos.x);
                        bby = Math.min(bby, pos.y);
                        bbmx = Math.max(bbmx, pos.x + view.size.w);
                        bbmy = Math.max(bbmy, pos.y + view.size.h);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                bbw = bbmx - bbx;
                bbh = bbmy - bby;

                var afterR = 1.1 * (Math.max(bbw, bbh) * (Math.sqrt(2) / 2));
                var afterX = bbx + bbw / 2;
                var afterY = bby + bbh / 2;

                var goalText = this.stage.getView(this.goalText);
                var boardText = this.stage.getView(this.boardText);

                boardText.pos.x = afterX;
                boardText.pos.y = afterY + afterR;

                var state = this.stage.getState();

                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = state.get("goal")[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var _id = _step3.value;

                        this.stage.getView(_id).stroke = null;
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                animate.tween(goalText, { opacity: 0 }, {
                    duration: 1000,
                    easing: animate.Easing.Cubic.In
                });
                animate.tween(this, { x: afterX, y: afterY, r: afterR }, {
                    duration: 3000,
                    easing: animate.Easing.Cubic.InOut
                }).then(function () {
                    _this3.state = "board";
                    _logging2.default.log("tutorial-state-next", _this3.state);
                    animate.tween(boardText, { opacity: 1 }, {
                        duration: 1000,
                        easing: animate.Easing.Cubic.In
                    });
                }).then(function () {
                    _this3.ready = true;
                    _this3.stage.getView(_this3.continueText).text = "Drag the star to continue";
                    _this3.stage.draw();
                });
            } else if (this.state === "board") {
                animate.tween(this, { opacity: 0 }, {
                    duration: 500,
                    easing: animate.Easing.Cubic.In
                }).then(function () {
                    _this3.state = "done";
                    _logging2.default.log("tutorial-state-next", _this3.state);
                    _this3.ready = true;
                    _this3.stage.draw();
                });
            }

            return false;
        }
    }, {
        key: "drawContents",
        value: function drawContents() {
            var _this4 = this;

            var _stage = this.stage,
                ctx = _stage.ctx,
                width = _stage.width,
                height = _stage.height;
            var x = this.x,
                y = this.y,
                r = this.r,
                opacity = this.opacity;


            if (this.state === "started") {
                this.state = "goal";
                var goalContainer = this.stage.getView(this.stage.goal.container);
                var alienView = this.stage.getView(this.stage.goal.alien);
                var targetR = gfx.absoluteSize(goalContainer).w + alienView.size.w;

                var goalText = this.stage.getView(this.goalText);
                goalText.pos.x = targetR;
                goalText.pos.y = 20;

                animate.after(1000).then(function () {
                    return animate.tween(_this4, { r: targetR, opacity: 0.7 }, {
                        duration: 2000,
                        easing: animate.Easing.Cubic.InOut
                    });
                }).then(function () {
                    return animate.tween(goalText, { opacity: 1 }, {
                        duration: 1000,
                        easing: animate.Easing.Cubic.In
                    });
                }).then(function () {
                    _this4.ready = true;
                    _this4.stage.draw();
                });
            }

            var state = this.stage.getState();
            if (this.state !== "done") {
                ctx.save();
                ctx.fillStyle = "black";
                ctx.globalAlpha = opacity;
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(width, 0);
                ctx.lineTo(width, height);
                ctx.lineTo(0, height);
                ctx.lineTo(0, 0);
                ctx.arc(x, y, r, 2 * Math.PI, false);
                ctx.fill("evenodd");
                ctx.restore();

                if (this.ready) {
                    this.stage.drawProjection(state, this.continueText);
                }
            }

            if (this.state === "goal") {
                this.stage.drawProjection(state, this.goalText);

                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = state.get("goal")[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var id = _step4.value;

                        var _goalText = this.stage.getView(this.goalText);
                        this.stage.getView(id).pos.x = 0;
                        this.stage.drawProjection(state, id, this.stage.makeBaseOffset({
                            x: _goalText.pos.x + _goalText.size.w + 10,
                            y: _goalText.pos.y,
                            opacity: _goalText.opacity
                        }));
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }
            } else if (this.state === "board") {
                this.stage.drawProjection(state, this.boardText);
            }
        }
    }, {
        key: "allowEvents",
        get: function get() {
            return (this.state === "board" || this.state === "done") && this.ready;
        }
    }]);

    return GoalTutorial;
}();
},{"../gfx/core":4,"../gfx/animate":5,"../logging/logging":15,"./stage":10,"../ui/goal":35}],16:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = password;

var _logging = require("../../logging/logging");

/**
 * Display a dialog prompt and resolve when successful (reject if
 * canceled).
 */
function password(promptText, password) {
    return new Promise(function (resolve, reject) {
        if (_logging.DEVELOPMENT_BUILD) {
            resolve();
            return;
        }

        var outerContainer = document.createElement("div");
        outerContainer.classList.add("fade-container");

        var modal = document.createElement("div");
        outerContainer.appendChild(modal);

        var container = document.createElement("div");
        container.classList.add("password-prompt");
        modal.appendChild(container);

        var prompt = document.createElement("p");
        container.appendChild(prompt);
        prompt.innerText = promptText;

        var message = document.createElement("p");
        message.style.color = "#F00";
        container.appendChild(message);

        var form = document.createElement("form");
        container.appendChild(form);

        var input = document.createElement("input");
        form.appendChild(input);
        input.setAttribute("type", "password");
        input.setAttribute("autocomplete", "password");
        var submit = document.createElement("button");
        form.appendChild(submit);
        submit.innerText = "Submit";
        var cancel = document.createElement("button");
        form.appendChild(cancel);
        cancel.setAttribute("type", "button");
        cancel.innerText = "Never Mind!";

        var next = function next(then) {
            return function (ev) {
                ev.preventDefault();
                outerContainer.classList.remove("visible");
                outerContainer.addEventListener("transitionend", function () {
                    outerContainer.remove();
                    then();
                });
            };
        };

        form.addEventListener("submit", function (ev) {
            ev.preventDefault();
            if (input.value === password) {
                next(resolve)(ev);
            } else {
                message.innerText = "Wrong password!";
            }
        });
        cancel.addEventListener("click", next(reject));

        document.body.appendChild(outerContainer);

        window.setTimeout(function () {
            outerContainer.classList.add("visible");
        }, 200);
    });
}
},{"../../logging/logging":15}],12:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _chromaJs = require("chroma-js");

var chroma = _interopRequireWildcard(_chromaJs);

var _core = require("../gfx/core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _progression = require("../game/progression");

var progression = _interopRequireWildcard(_progression);

var _audio = require("../resource/audio");

var _audio2 = _interopRequireDefault(_audio);

var _random = require("../util/random");

var random = _interopRequireWildcard(_random);

var _loader = require("../loader");

var _loader2 = _interopRequireDefault(_loader);

var _password = require("../ui/instructor/password");

var _password2 = _interopRequireDefault(_password);

var _basestage = require("./basestage");

var _basestage2 = _interopRequireDefault(_basestage);

var _touchrecord = require("./touchrecord");

var _touchrecord2 = _interopRequireDefault(_touchrecord);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ChapterEndStage = function (_BaseStage) {
    _inherits(ChapterEndStage, _BaseStage);

    function ChapterEndStage() {
        var _ref;

        _classCallCheck(this, ChapterEndStage);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, (_ref = ChapterEndStage.__proto__ || Object.getPrototypeOf(ChapterEndStage)).call.apply(_ref, [this].concat(args)));

        _this.opacity = 1.0;
        _this.color = "#594764";

        if (progression.isGameEnd()) {
            _audio2.default.play("game-complete");
        }

        _this.title = _this.allocateInternal(gfx.layout.sticky(gfx.text(progression.isGameEnd() ? "You win!" : "Chapter Finished!", {
            fontSize: 96,
            color: "#FFF",
            font: gfx.text.script
        }), "top", {
            align: "center",
            margin: 20
        }));

        _this.stars = [];
        _this.bgStars = [];
        _this.levelStars = [];

        // Generate random background stars (distributed across grid
        // cells to make it more even)
        var X_CELLS = 5;
        var Y_CELLS = 5;
        var X_WIDTH = 1.0 / X_CELLS;
        var Y_WIDTH = 1.0 / Y_CELLS;
        for (var i = 0; i < X_CELLS; i++) {
            for (var j = 0; j < Y_CELLS; j++) {
                for (var k = 0; k < 5; k++) {
                    var idx = random.getRandInt(1, 15);
                    var x = X_WIDTH * i + X_WIDTH * Math.random();
                    var y = Y_WIDTH * j + Y_WIDTH * Math.random();

                    var star = gfx.layout.ratioPlacer(gfx.sprite({
                        image: _loader2.default.images["mainmenu-star" + idx],
                        size: { h: 15, w: 15 },
                        anchor: { x: 0.5, y: 0.5 },
                        opacity: 0.0,
                        opacityDelta: 0.01 + Math.random() / 10
                    }), x, y);

                    var id = _this.allocateInternal(star);
                    _this.stars.push(id);
                    _this.bgStars.push(id);
                    animate.tween(star, { opacity: 0.5 * Math.random() + 0.3 }, {
                        duration: 2500,
                        easing: animate.Easing.Cubic.Out
                    });
                }
            }
        }

        // Generate clusters of stars representing each chapter
        var numChapters = progression.ACTIVE_PROGRESSION_DEFINITION.progression.linearChapters.length;
        var bandWidth = _this.width / numChapters;

        var scale = chroma.scale("Spectral").mode("lab");

        // Center of cluster of stars representing just-finished chapter
        var newStarX = 0;
        var newStarY = 0;

        var newCenterStar = null;

        for (var _j = 0; _j < numChapters; _j++) {
            var lit = _j < progression.chapterIdx();
            var lighting = _j === progression.chapterIdx();
            var clusterX = (_j + 0.5) * bandWidth;
            var clusterY = 0.6 * _this.height + 0.2 * _this.height * Math.sin(2 * Math.PI * (clusterX / _this.width));
            var clusterR = 0.4 * bandWidth;

            if (lighting) {
                newStarX = clusterX;
                newStarY = clusterY;
            }

            var lineWidth = 2;
            if (lighting) lineWidth = 4;
            _this.stars.push(_this.allocateInternal(gfx.shapes.circle({
                color: null,
                shadow: false,
                pos: { x: clusterX, y: clusterY },
                size: { w: 2.2 * clusterR, h: 2.2 * clusterR },
                anchor: { x: 0.5, y: 0.5 },
                stroke: {
                    color: scale(_j / numChapters),
                    lineWidth: lineWidth,
                    lineDash: [10, 5]
                }
            })));

            // Add center star
            if (lit || lighting) {
                var starIdx = _j % 3;
                var _star = gfx.sprite({
                    image: _loader2.default.images["star_" + (starIdx + 1)],
                    size: { h: clusterR, w: clusterR },
                    anchor: { x: 0.5, y: 0.5 },
                    pos: { x: clusterX, y: clusterY },
                    opacity: lighting ? 0 : 1,
                    scale: { x: lighting ? 0 : 1, y: lighting ? 0 : 1 }
                });
                _this.stars.push(_this.allocateInternal(_star));
                newCenterStar = _star;
            }
        }

        // Create rows of stars representing levels of current chapter
        var chapter = progression.currentChapter();
        var spacing = 60;
        var rowStart = _this.width / 2 - 4 * spacing;
        var colStart = _this.height / 3;
        var starTweens = [];
        var levelStars = [];
        for (var _i = 0; _i < chapter.levels.length; _i++) {
            var remainingLevels = chapter.levels.length - _i;
            if (remainingLevels < 9 && _i % 9 === 0) {
                var spacingOffset = Math.floor(remainingLevels / 2);
                if (remainingLevels % 2 === 0) spacingOffset -= 0.5;
                rowStart = _this.width / 2 - spacingOffset * spacing;
            }

            var col = _i % 9;
            var row = Math.floor(_i / 9);
            var _star2 = gfx.shapes.star({
                color: "gold",
                anchor: { x: 0.5, y: 0.5 },
                pos: { x: rowStart + col * spacing, y: colStart + row * spacing },
                scale: { x: 0, y: 0 }
            });

            starTweens.push(animate.tween(_star2, {
                scale: { x: 1, y: 1 }
            }, {
                easing: animate.Easing.Anticipate.BackOut(1.8),
                duration: 500,
                setAnimatingFlag: false
            }).delay(_i * 30));

            var _id = _this.allocateInternal(_star2);
            _this.levelStars.push(_id);
            levelStars.push([_id, _star2]);
        }

        Promise.all(starTweens).then(function () {
            var splosions = [];

            var _loop = function _loop(_i2) {
                var _levelStars$_i = _slicedToArray(levelStars[_i2], 2),
                    id = _levelStars$_i[0],
                    star = _levelStars$_i[1];

                splosions.push(animate.tween(star, {
                    pos: {
                        x: newStarX + (Math.random() - 0.5) * bandWidth,
                        y: newStarY + (Math.random() - 0.5) * bandWidth
                    },
                    scale: { x: 0.3, y: 0.3 }
                }, {
                    easing: animate.Easing.Cubic.In,
                    duration: 500
                }).delay(_i2 * 30).then(function () {
                    _this.levelStars.splice(_this.levelStars.indexOf(id), 1);
                    if (_i2 % 3 === 0) {
                        var particles = random.getRandInt(20, 50);
                        var rotation = Math.random() * (Math.PI / 2);
                        return animate.fx.splosion(_this, star.pos, {
                            explosionRadius: 500,
                            numOfParticles: particles,
                            duration: 600,
                            color: function color(idx) {
                                return scale(idx / particles);
                            },
                            angle: function angle(idx) {
                                return rotation + 2 * Math.PI * (idx / particles);
                            }
                        });
                    }
                    return null;
                }));
            };

            for (var _i2 = 0; _i2 < levelStars.length; _i2++) {
                _loop(_i2);
            }
            return Promise.all(splosions);
        }).then(function () {
            animate.tween(newCenterStar, {
                opacity: 1,
                scale: { x: 1, y: 1 }
            }, {
                easing: animate.Easing.Anticipate.BackOut(10),
                duration: 500,
                setAnimatingFlag: false
            });
        });

        animate.infinite(function (dt) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = _this.bgStars[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _id2 = _step.value;

                    var view = _this.internalViews[_id2];

                    view.opacity += view.opacityDelta * (dt / 100);
                    if (view.opacity > 1.0) {
                        view.opacity = 1.0;
                        view.opacityDelta *= -1;
                    } else if (view.opacity < 0.2) {
                        view.opacity = 0.2;
                        view.opacityDelta *= -1;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        });

        _this.draw();

        if (!progression.isGameEnd()) {
            var continueButton = gfx.layout.sticky(gfx.ui.button(_this, "Next Chapter", {
                color: "#e95888",
                click: function click() {
                    (0, _password2.default)("Ask the teacher to continue on!", "cornell").then(function () {
                        _this.continue(false);
                    }, function () {});
                }
            }), "top", {
                align: "center",
                margin: 150
            });
            _this.continueButtonId = _this.allocateInternal(continueButton);
            _this.continueButton = _this.internalViews[_this.continueButtonId];
            _this.continueButton.opacity = 0;
            animate.tween(_this.continueButton, { opacity: 1 }, {
                duration: 1000,
                easing: animate.Easing.Cubic.Out
            }).delay(1000);

            if (progression.hasChallengeChapter()) {
                var challengeButton = gfx.layout.sticky(gfx.ui.button(_this, "Try Challenges", {
                    color: "#e95888",
                    click: function click() {
                        _this.continue(true);
                    }
                }), "top", {
                    align: "center",
                    margin: 200
                });
                _this.challengeButtonId = _this.allocateInternal(challengeButton);
                challengeButton.opacity = 0;
                animate.tween(challengeButton, { opacity: 1 }, {
                    duration: 1000,
                    easing: animate.Easing.Cubic.Out
                }).delay(1000);
            }
        }
        return _this;
    }

    _createClass(ChapterEndStage, [{
        key: "continue",
        value: function _continue(challenge) {
            animate.tween(this, {
                color: "#EEE"
            }, {
                duration: 800,
                setAnimatingFlag: false,
                easing: animate.Easing.Color(animate.Easing.Cubic.In, this.color, "#EEE")
            }).then(function () {
                window.next(challenge, false);
            });
            animate.tween(this, {
                opacity: 0.0
            }, {
                duration: 500,
                setAnimatingFlag: false,
                easing: animate.Easing.Cubic.Out
            });
        }
    }, {
        key: "spawnFirework",
        value: function spawnFirework(startPos, targetPos, delay) {
            var _this2 = this;

            var firework = gfx.sprite({
                image: _loader2.default.images["mainmenu-star1"],
                size: { h: 40, w: 40 }
            });
            firework.anchor = { x: 0.5, y: 0.5 };
            firework.pos = startPos;
            this.stars.push(this.allocateInternal(firework));
            animate.tween(firework, { opacity: 0.0 }, {
                reverse: true,
                repeat: 5,
                duration: 200
            }).delay(delay);

            animate.tween(firework.pos, { y: targetPos.y }, {
                duration: 2000,
                easing: animate.Easing.Projectile(animate.Easing.Linear)
            }).delay(delay);

            animate.tween(firework.pos, { x: targetPos.x }, {
                duration: 1000
            }).delay(delay).then(function () {
                _this2.stars.shift();
                var scale = { x: 0.1, y: 0.1 };
                var rad = Math.min(_this2.width, _this2.height) / 2.5;
                var count = random.getRandInt(15, 30);
                var size = random.getRandInt(25, 40);

                var duration = random.getRandInt(600, 1200);

                var _loop2 = function _loop2(i) {
                    var idx = random.getRandInt(1, 15);
                    var spark = gfx.sprite({
                        image: _loader2.default.images["mainmenu-star" + idx],
                        size: { h: size, w: size }
                    });
                    spark.anchor = { x: 0.5, y: 0.5 };
                    spark.scale = scale;
                    spark.pos = { x: firework.pos.x, y: firework.pos.y };
                    spark.opacity = 0.0;
                    _this2.stars.push(_this2.allocateInternal(spark));

                    animate.tween(spark, { opacity: 1 }, {
                        duration: duration,
                        easing: animate.Easing.Cubic.Out
                    }).then(function () {
                        animate.tween(spark, { opacity: 0 }, {
                            duration: duration / 3,
                            easing: animate.Easing.Cubic.Out
                        });
                    });
                    animate.tween(spark.pos, {
                        x: spark.pos.x + rad * Math.cos(i * 2 * Math.PI / count),
                        y: spark.pos.y + rad * Math.sin(i * 2 * Math.PI / count)
                    }, {
                        duration: 1.25 * duration,
                        easing: animate.Easing.Cubic.Out
                    });
                };

                for (var i = 0; i < count; i++) {
                    _loop2(i);
                }
                return animate.tween(scale, { x: 1, y: 1 }, {
                    duration: 1000,
                    easing: animate.Easing.Cubic.Out
                });
            });
        }
    }, {
        key: "drawContents",
        value: function drawContents() {
            var state = this.getState();

            this.ctx.save();
            this.ctx.fillStyle = this.color;
            this.ctx.fillRect(0, 0, this.width, this.height);
            this.ctx.restore();

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.stars[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var starId = _step2.value;

                    this.drawInternalProjection(state, starId, starId, this.makeBaseOffset({ opacity: this.opacity }));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.levelStars[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _starId = _step3.value;

                    this.drawInternalProjection(state, _starId, _starId, this.makeBaseOffset({ opacity: this.opacity }));
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            this.drawInternalProjection(state, this.title, this.title, this.makeBaseOffset({ opacity: this.opacity }));

            if (this.continueButtonId) {
                this.continueButton.prepare(this.continueButtonId, this.continueButtonId, state, this);
                this.continueButton.draw(this.continueButtonId, this.continueButtonId, state, this, this.makeBaseOffset({ opacity: this.opacity }));
            }
            if (this.challengeButtonId) {
                var view = this.internalViews[this.challengeButtonId];
                view.prepare(this.challengeButtonId, this.challengeButtonId, state, this);
                view.draw(this.challengeButtonId, this.challengeButtonId, state, this, this.makeBaseOffset({ opacity: this.opacity }));
            }

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = Object.values(this.effects)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var fx = _step4.value;

                    fx.prepare();
                    fx.draw();
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    }, {
        key: "getNodeAtPos",
        value: function getNodeAtPos(pos) {
            var selectedId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            var projection = this.continueButton;
            var offset = this.makeBaseOffset();

            if (this.continueButtonId) {
                if (projection.containsPoint(pos, offset)) {
                    return [this.continueButtonId, this.continueButtonId];
                }
            }

            if (this.challengeButtonId) {
                if (this.internalViews[this.challengeButtonId].containsPoint(pos, offset)) {
                    return [this.challengeButtonId, this.challengeButtonId];
                }
            }
            return [null, null];
        }
    }, {
        key: "updateCursor",
        value: function updateCursor(touchRecord) {
            var moved = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (touchRecord.hoverNode !== null) {
                this.setCursor("pointer");
            } else {
                this.setCursor("default");
            }
        }
    }, {
        key: "touchRecordClass",
        get: function get() {
            return TouchRecord;
        }
    }]);

    return ChapterEndStage;
}(_basestage2.default);

exports.default = ChapterEndStage;

var TouchRecord = function (_BaseTouchRecord) {
    _inherits(TouchRecord, _BaseTouchRecord);

    function TouchRecord() {
        _classCallCheck(this, TouchRecord);

        return _possibleConstructorReturn(this, (TouchRecord.__proto__ || Object.getPrototypeOf(TouchRecord)).apply(this, arguments));
    }

    _createClass(TouchRecord, [{
        key: "onstart",
        value: function onstart(mousePos) {
            if (this.topNode && this.stage.internalViews[this.topNode]) {
                var view = this.stage.internalViews[this.topNode];
                if (view.onmousedown) {
                    view.onmousedown();
                }
            }
        }
    }, {
        key: "onend",
        value: function onend() {
            var _get2;

            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            (_get2 = _get(TouchRecord.prototype.__proto__ || Object.getPrototypeOf(TouchRecord.prototype), "onend", this)).call.apply(_get2, [this].concat(args));

            if (this.topNode && this.stage.internalViews[this.topNode]) {
                var view = this.stage.internalViews[this.topNode];
                if (view.onclick) {
                    view.onclick();
                }
            }
        }
    }]);

    return TouchRecord;
}(_touchrecord2.default);
},{"chroma-js":71,"../gfx/core":4,"../gfx/animate":5,"../game/progression":8,"../resource/audio":36,"../util/random":54,"../loader":3,"../ui/instructor/password":16,"./basestage":43,"./touchrecord":46}],13:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _core = require("../gfx/core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("../gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _progression = require("../game/progression");

var progression = _interopRequireWildcard(_progression);

var _audio = require("../resource/audio");

var _audio2 = _interopRequireDefault(_audio);

var _loader = require("../loader");

var _loader2 = _interopRequireDefault(_loader);

var _basestage = require("./basestage");

var _basestage2 = _interopRequireDefault(_basestage);

var _touchrecord = require("./touchrecord");

var _touchrecord2 = _interopRequireDefault(_touchrecord);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TitleStage = function (_BaseStage) {
    _inherits(TitleStage, _BaseStage);

    function TitleStage(startGame) {
        var _ref;

        _classCallCheck(this, TitleStage);

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, (_ref = TitleStage.__proto__ || Object.getPrototypeOf(TitleStage)).call.apply(_ref, [this].concat(args)));

        _this.startGame = startGame;
        _this.color = "#594764";

        var title = gfx.layout.sticky(gfx.layout.ratioSizer(gfx.sprite({
            image: _loader2.default.images["reduct_title"],
            size: { h: 213, w: 899 }
        }), 213 / 899, 0.6), "center", {});
        title.opacity = 0;
        _this.title = _this.allocateInternal(title);

        var buttons = [];

        var shapeIds = [gfx.shapes.star(), gfx.shapes.triangle()].map(function (view) {
            return _this.allocate(view);
        });
        var foodIds = [_loader2.default.images["food_1"], _loader2.default.images["food_2"]].map(function (image) {
            return _this.allocate(gfx.sprite({
                image: image,
                size: image.naturalHeight / image.naturalWidth > 1.5 ? {
                    w: 25,
                    h: image.naturalHeight / image.naturalWidth * 25
                } : {
                    w: 50,
                    h: image.naturalHeight / image.naturalWidth * 50
                }
            }));
        });
        var views = [[0, gfx.layout.hbox(function () {
            return shapeIds;
        }, {
            subexpScale: 1.0
        }, gfx.baseProjection)], [1, gfx.layout.hbox(function () {
            return foodIds;
        }, {
            subexpScale: 1.0
        }, gfx.baseProjection)]];

        var _loop = function _loop(symbolFadeLevel, view) {
            var theme = _this.allocate(view);
            var label = _this.allocate(gfx.text("I like", {
                fontSize: 50,
                font: gfx.text.script
            }));
            var label2 = _this.allocate(gfx.text("!", {
                fontSize: 50,
                font: gfx.text.script
            }));
            var button = gfx.layout.hbox(function () {
                return [label, theme, label2];
            }, {
                subexpScale: 1.0,
                color: "#e95888",
                shadow: true,
                shadowColor: "black"
            });
            button.onmouseexit = function () {
                button.shadow = true;
                button.offset.y = 0;
            };
            button.onmouseenter = function () {};
            button.onmousedown = function () {
                button.shadow = false;
                button.offset.y = 5;
            };
            button.onclick = function () {
                progression.forceFadeLevel("symbol", symbolFadeLevel);
                _this.animateStart();
                button.shadow = true;
                button.offset.y = 0;
            };

            buttons.push(_this.allocate(button));
        };

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = views[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _ref2 = _step.value;

                var _ref3 = _slicedToArray(_ref2, 2);

                var symbolFadeLevel = _ref3[0];
                var view = _ref3[1];

                _loop(symbolFadeLevel, view);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        _this.buttons = buttons;

        var layout = gfx.layout.sticky(gfx.layout.vbox(function () {
            return buttons;
        }, {
            subexpScale: 1.0,
            padding: {
                inner: 20
            }
        }, gfx.baseProjection), "center", {
            hAlign: 0.0
        });
        layout.opacity = 0.0;
        _this.layout = _this.allocate(layout);

        // ** Startup Animations ** //

        _this.state = "initializing";
        animate.tween(_this, {
            color: "#FFF"
        }, {
            duration: 500,
            setAnimatingFlag: false,
            easing: animate.Easing.Color(animate.Easing.Cubic.In, _this.color, "#FFF")
        }).then(function () {
            return animate.tween(title, {
                opacity: 1.0
            }, {
                duration: 500,
                easing: animate.Easing.Cubic.Out
            }).delay(1000);
        }).then(function () {
            return Promise.all([animate.tween(title, {
                scale: { x: 0.7, y: 0.7 },
                sticky: { marginY: -180 }
            }, {
                duration: 800,
                easing: animate.Easing.Cubic.Out
            }), animate.tween(layout, {
                opacity: 1.0
            }, {
                duration: 1000,
                easing: animate.Easing.Cubic.Out
            })]);
        }).then(function () {
            _this.state = "initialized";
        });
        return _this;
    }

    _createClass(TitleStage, [{
        key: "_mouseup",
        value: function _mouseup(e) {
            if (this.state === "initializing") {
                this.fastForward();
            }

            _get(TitleStage.prototype.__proto__ || Object.getPrototypeOf(TitleStage.prototype), "_mouseup", this).call(this, e);
        }
    }, {
        key: "fastForward",
        value: function fastForward() {
            animate.clock.cancelAll();
            this.state = "initialized";
            this.color = "#FFF";
            var title = this.getView(this.title);
            title.opacity = 1.0;
            title.scale = { x: 0.7, y: 0.7 };
            title.sticky.marginY = -180;
            this.getView(this.layout).opacity = 1.0;
        }
    }, {
        key: "animateStart",
        value: function animateStart() {
            var _this2 = this;

            this.state = "transitioning";

            Promise.all([animate.tween(this.getView(this.title), {
                scale: { x: 0.4, y: 0.4 },
                opacity: 0.5
            }, {
                duration: 800,
                easing: animate.Easing.Cubic.In
            }), animate.tween(this.getView(this.title), {
                sticky: { marginY: -this.height }
            }, {
                duration: 500,
                easing: animate.Easing.Anticipate.BackIn(1.5)
            }), animate.tween(this.getView(this.layout), {
                opacity: 0
            }, {
                duration: 500,
                easing: animate.Easing.Cubic.In
            }), animate.tween(this, {
                color: "#EEEEEE"
            }, {
                duration: 500,
                setAnimatingFlag: false,
                easing: animate.Easing.Color(animate.Easing.Cubic.In, this.color, "#EEEEEE")
            })]).then(function () {
                return _this2.startGame();
            });
        }
    }, {
        key: "drawContents",
        value: function drawContents() {
            var state = this.getState();

            this.ctx.save();
            this.ctx.fillStyle = this.color;
            this.ctx.fillRect(0, 0, this.width, this.height);
            this.ctx.restore();

            this.drawInternalProjection(state, this.title);
            this.drawProjection(state, this.layout);
        }
    }, {
        key: "getNodeAtPos",
        value: function getNodeAtPos(pos) {
            var selectedId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (this.state !== "initialized") return [null, null];

            var offset = this.makeBaseOffset();
            var buttonLayout = this.getView(this.layout);
            if (buttonLayout.containsPoint(pos, offset)) {
                var topLeft = gfx.util.topLeftPos(buttonLayout, offset);
                var subpos = {
                    x: pos.x - topLeft.x,
                    y: pos.y - topLeft.y
                };

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = this.buttons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var id = _step2.value;

                        var _button = this.getView(id);
                        if (_button.containsPoint(subpos, offset)) {
                            return [id, id];
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }

            return [null, null];
        }
    }, {
        key: "updateCursor",
        value: function updateCursor(touchRecord) {
            var moved = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (touchRecord.hoverNode !== null) {
                this.setCursor("pointer");
            } else {
                this.setCursor("default");
            }
        }
    }, {
        key: "touchRecordClass",
        get: function get() {
            return TouchRecord;
        }
    }]);

    return TitleStage;
}(_basestage2.default);

exports.default = TitleStage;

var TouchRecord = function (_BaseTouchRecord) {
    _inherits(TouchRecord, _BaseTouchRecord);

    function TouchRecord() {
        _classCallCheck(this, TouchRecord);

        return _possibleConstructorReturn(this, (TouchRecord.__proto__ || Object.getPrototypeOf(TouchRecord)).apply(this, arguments));
    }

    _createClass(TouchRecord, [{
        key: "onstart",
        value: function onstart() {
            var _get2;

            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            (_get2 = _get(TouchRecord.prototype.__proto__ || Object.getPrototypeOf(TouchRecord.prototype), "onstart", this)).call.apply(_get2, [this].concat(args));

            if (this.topNode) {
                var view = this.stage.getView(this.topNode);
                if (view.onmousedown) {
                    view.onmousedown();
                }
            }
        }
    }, {
        key: "onmove",
        value: function onmove() {
            var _get3;

            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
            }

            (_get3 = _get(TouchRecord.prototype.__proto__ || Object.getPrototypeOf(TouchRecord.prototype), "onmove", this)).call.apply(_get3, [this].concat(args));

            if (this.hoverNode !== this.prevHoverNode) {
                var view = this.stage.getView(this.hoverNode);
                var prevView = this.stage.getView(this.prevHoverNode);

                if (prevView && prevView.onmouseexit) {
                    prevView.onmouseexit();
                }

                if (view && view.onmouseenter) {
                    view.onmouseenter();
                }
            }
        }
    }, {
        key: "onend",
        value: function onend() {
            var _get4;

            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
            }

            (_get4 = _get(TouchRecord.prototype.__proto__ || Object.getPrototypeOf(TouchRecord.prototype), "onend", this)).call.apply(_get4, [this].concat(args));

            if (this.topNode) {
                var view = this.stage.getView(this.topNode);
                if (view.onclick) {
                    view.onclick();
                }
            }
        }
    }]);

    return TouchRecord;
}(_touchrecord2.default);
},{"../gfx/core":4,"../gfx/animate":5,"../game/progression":8,"../resource/audio":36,"../loader":3,"./basestage":43,"./touchrecord":46}],2:[function(require,module,exports) {
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

require("babel-polyfill");

var _vis = require("vis");

var _vis2 = _interopRequireDefault(_vis);

var _redux = require("redux");

var _core = require("./gfx/core");

var gfx = _interopRequireWildcard(_core);

var _animate = require("./gfx/animate");

var animate = _interopRequireWildcard(_animate);

var _reducer = require("./reducer/reducer");

var reducer = _interopRequireWildcard(_reducer);

var _level = require("./game/level");

var level = _interopRequireWildcard(_level);

var _progression = require("./game/progression");

var progression = _interopRequireWildcard(_progression);

var _es = require("./semantics/es6");

var _es2 = _interopRequireDefault(_es);

var _stage = require("./stage/stage");

var _stage2 = _interopRequireDefault(_stage);

var _tutorial = require("./stage/tutorial");

var _tutorial2 = _interopRequireDefault(_tutorial);

var _chapterend = require("./stage/chapterend");

var _chapterend2 = _interopRequireDefault(_chapterend);

var _title = require("./stage/title");

var _title2 = _interopRequireDefault(_title);

var _undo = require("./reducer/undo");

var undo = _interopRequireWildcard(_undo);

var _password = require("./ui/instructor/password");

var _password2 = _interopRequireDefault(_password);

var _loader = require("./loader");

var _loader2 = _interopRequireDefault(_loader);

var _logging = require("./logging/logging");

var _logging2 = _interopRequireDefault(_logging);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Globals to help you debug
window.gfx = gfx;
window.animate = animate;
window.Logging = _logging2.default;
window.progression = progression;

// Load assets.
_loader2.default.loadAudioSprite("sounds", "resources/audio/output.json", ["resources/audio/output.opus", "resources/audio/output.ogg", "resources/audio/output.mp3", "resources/audio/output.wav"]);
_loader2.default.loadImageAtlas("spritesheet", "resources/graphics/assets.json", "resources/graphics/assets.png");
_loader2.default.loadImageAtlas("titlesprites", "resources/graphics/title-assets.json", "resources/graphics/title-assets.png");
_loader2.default.loadImageAtlas("menusprites", "resources/graphics/menu-assets.json", "resources/graphics/menu-assets.png");
_loader2.default.loadChapters("Elementary", progression.ACTIVE_PROGRESSION_DEFINITION);
_loader2.default.waitForFonts(["Fira Mono", "Fira Sans", "Nanum Pen Script"]);

Promise.all([_loader2.default.finished]).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        _ = _ref2[0];

    var consented = false;
    console.log("User consented to logging: " + consented);
    if (!consented) {
        _logging2.default.resetState();
        _logging2.default.clearStaticLog();
        _logging2.default.saveState();
    }
    _logging2.default.config("enabled", consented);
    if (consented) _logging2.default.config("offline", false);
}).then(function () {
    return _logging2.default.startSession();
}).then(initialize);

var views = {};
var store = void 0;
var stg = void 0;
var canvas = void 0;

function initialize() {
    canvas = document.createElement("canvas");
    document.body.appendChild(canvas);

    // Reducer needs access to the views in order to save their state
    // for undo/redo.
    var reduct = reducer.reduct(_es2.default, views, function (id, _ref3) {
        var x = _ref3.x,
            y = _ref3.y;

        var _gfx$absoluteSize = gfx.absoluteSize(stg.getView(id)),
            w = _gfx$absoluteSize.w,
            h = _gfx$absoluteSize.h;

        return stg.findSafePosition(x, y, w, h);
    });
    store = (0, _redux.createStore)(reduct.reducer, undefined, (0, _redux.applyMiddleware)(_logging2.default.logMiddleware(function () {
        return stg.getState();
    }, function () {
        var _stg;

        return (_stg = stg).saveState.apply(_stg, arguments);
    }, function () {
        var _stg2;

        return (_stg2 = stg).pushState.apply(_stg2, arguments);
    }, function () {
        var _stg3;

        return (_stg3 = stg).saveNode.apply(_stg3, arguments);
    }, _es2.default)));
    stg = new _title2.default(startGame, canvas, 800, 600, store, views, _es2.default);
    window.stage = stg;

    window.Logging = _logging2.default;

    animate.addUpdateListener(function () {
        stg.draw();
    });

    // TODO: resize scene as whole, then resize stage
    window.addEventListener("resize", function () {
        stg.resize();
    });

    // TODO: dispatch events to scene, then to stage
    canvas.addEventListener("mousedown", function (e) {
        return stg._mousedown(e);
    });
    canvas.addEventListener("mousemove", function (e) {
        return stg._mousemove(e);
    });
    canvas.addEventListener("mouseup", function (e) {
        return stg._mouseup(e);
    });

    canvas.addEventListener("touchstart", function (e) {
        return stg._touchstart(e);
    });
    canvas.addEventListener("touchmove", function (e) {
        return stg._touchmove(e);
    });
    canvas.addEventListener("touchend", function (e) {
        return stg._touchend(e);
    });

    // When the state changes, redraw the state.
    store.subscribe(function () {
        stg.draw();

        if (!stg.alreadyWon) {
            var state = stg.getState();
            var matching = level.checkVictory(state, _es2.default);
            if (Object.keys(matching).length > 0) {
                var finalState = level.serialize(state, _es2.default);
                stg.animateVictory(matching).then(function () {
                    persistGraph();

                    _logging2.default.log("victory", {
                        final_state: finalState
                        // TODO: track num of moves via undo stack?
                        // num_of_moves: undefined,
                    });

                    nextLevel();
                });
            } else if (stg.semantics && !stg.semantics.mightBeCompleted(state, function (s) {
                return level.checkVictory(s, _es2.default);
            })) {
                _logging2.default.log("dead-end", {
                    final_state: level.serialize(state, _es2.default)
                });
                stg.animateStuck();
            }
        }
    });

    progression.restore();

    window.stage = stg;

    var pauseButton = document.querySelector("#pause");
    var ffwdButton = document.querySelector("#ffwd");

    document.querySelector("#undo").addEventListener("click", function () {
        store.dispatch(undo.undo());
    });
    document.querySelector("#redo").addEventListener("click", function () {
        store.dispatch(undo.redo());
    });
    document.querySelector("#prev").addEventListener("click", function () {
        window.prev();
    });
    document.querySelector("#reset").addEventListener("click", function () {
        window.reset();
    });
    document.querySelector("#next").addEventListener("click", function () {
        window.next();
    });
    document.querySelector("#download-log").addEventListener("click", function () {
        _logging2.default.downloadStaticLog();
    });
    pauseButton.addEventListener("click", function (b) {
        stg.togglePause();
        var button = document.querySelector("#pause");
        if (stg.mode === "over") {
            button.classList.remove("paused");
            ffwdButton.style.display = "block";
        } else {
            button.classList.add("paused");
            ffwdButton.style.display = "none";
        }
    });
    ffwdButton.addEventListener("click", function (b) {
        ffwdButton.classList.add("active");
        stg.setFfwd();
    });
    document.querySelector("#toggle-graph").addEventListener("click", function () {
        _logging2.default.toggleStateGraph();
        window.updateStateGraph();
    });
    window.toggleStateGraph = function () {
        _logging2.default.toggleStateGraph();
        window.updateStateGraph();
    };

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = _loader2.default.progressions["Elementary"].linearChapters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var chapterName = _step.value;

            var option = document.createElement("option");
            option.setAttribute("value", _loader2.default.progressions["Elementary"].chapters[chapterName].startIdx);
            option.innerText = "Chapter: " + chapterName;
            document.querySelector("#chapter").appendChild(option);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    document.querySelector("#chapter").addEventListener("change", function () {
        (0, _password2.default)("Ask the teacher to skip this level!", "cornell").then(function () {
            if (stg.pushState) stg.pushState("change-chapter");
            var lvl = window.parseInt(document.querySelector("#chapter").value, 10);
            start(function () {
                return progression.jumpToLevel(lvl);
            });
        }, function () {});
    });
}

function startGame() {
    // Un-hide control panel
    document.querySelector("#overlay-nav").style.display = "block";
    start(null, { persistGraph: false });
}

// Log state graph, using multiple requests to avoid problem of too-long URI.
var __monotonic = 0;
function persistGraph() {
    if (!stg || !stg.stateGraph) return;

    try {
        var graph = stg.stateGraph.serialize();

        // Up to 2000 characters, as per
        // https://stackoverflow.com/a/417184, minus some for other
        // parameters
        var MAX_BLOB_LENGTH = 1500;

        var persistArray = function persistArray(array, action) {
            var serialized = 0;
            var counter = 0;

            while (serialized < array.length) {
                var attempt = {
                    graphSequenceID: __monotonic,
                    payloadSequenceID: counter,
                    partialData: [array[serialized]]
                };

                while (JSON.stringify(attempt).length < MAX_BLOB_LENGTH && serialized + attempt.partialData.length < array.length) {
                    attempt.partialData.push(array[serialized + attempt.partialData.length]);
                }
                if (attempt.partialData.length > 1 && JSON.stringify(attempt).length > MAX_BLOB_LENGTH) {
                    attempt.partialData.pop();
                }
                serialized += attempt.partialData.length;
                _logging2.default.log(action, attempt);

                counter += 1;
            }

            return counter - 1;
        };
        var lastNodeCounter = persistArray(graph.nodes, "state-path-save-nodes");
        var lastEdgeCounter = persistArray(graph.edges, "state-path-save-edges");
        _logging2.default.log("state-path-save-graph", {
            "nodePayloadSequenceIDEnd": lastNodeCounter,
            "edgePayloadSequenceIDEnd": lastEdgeCounter,
            "graphSequenceId": __monotonic
        });
    } finally {
        __monotonic += 1;
    }
}

function start(updateLevel) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    animate.clock.cancelAll();

    if (options.persistGraph !== false) persistGraph();

    // Take thunk that updates the level
    if (updateLevel) updateLevel();

    if (progression.currentLevel() === 0) {
        stg = new _tutorial2.default(canvas, 800, 600, store, views, _es2.default);
    } else {
        stg = new _stage2.default(canvas, 800, 600, store, views, _es2.default);
    }
    window.stage = stg;

    var levelDefinition = _loader2.default.progressions["Elementary"].levels[progression.currentLevel()];

    _logging2.default.transitionToTask(progression.currentLevel(), levelDefinition).finally(function () {
        level.startLevel(levelDefinition, _es2.default.parser.parse, store, stg);
        stg.drawImpl();

        document.querySelector("#level").innerText = progression.currentLevel().toString();
        // Sync chapter dropdown with current level
        var prevOption = null;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = document.querySelectorAll("#chapter option")[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var option = _step2.value;

                if (window.parseInt(option.getAttribute("value"), 10) <= progression.currentLevel()) {
                    prevOption = option;
                } else {
                    break;
                }
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }

        document.querySelector("#chapter").value = prevOption.getAttribute("value");
    });

    // Reset buttons
    var pauseButton = document.querySelector("#pause");
    pauseButton.classList.forEach(function (x) {
        return pauseButton.classList.remove(x);
    });
    document.querySelector("#ffwd").style.display = "block";
    document.querySelector("#ffwd").classList.remove("active");
    window.updateStateGraph();
}

function showChapterEnd() {
    animate.clock.cancelAll();
    // TODO: bring back old reset
    // for (const key in views) delete views[key];
    stg = new _chapterend2.default(canvas, 800, 600, store, views, _es2.default);
    window.stage = stg;
    _logging2.default.transitionToTask(_logging2.default.VICTORY_LEVEL_ID);
}

function nextLevel(enableChallenge) {
    if (progression.isChapterEnd() && !(stg instanceof _chapterend2.default)) {
        if (progression.isGameEnd()) {
            _logging2.default.log("game-complete");
        }
        showChapterEnd();
    } else if (enableChallenge) {
        start(function () {
            return progression.nextChallengeLevel();
        });
    } else {
        start(function () {
            return progression.nextLevel();
        });
    }
}

window.reset = function reset() {
    if (stg.pushState) stg.pushState("reset");
    start();
};
window.next = function next(challenge) {
    var prompt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var doNext = function doNext() {
        if (stg.pushState) stg.pushState("next");
        nextLevel(challenge);
    };
    if (challenge) {
        doNext();
        return;
    }

    if (prompt) {
        (0, _password2.default)("Ask the teacher to skip this level!", "cornell").then(function () {
            return doNext();
        }, function () {});
    } else {
        doNext();
    }
};
window.prev = function prev() {
    if (stg.pushState) stg.pushState("prev");
    start(function () {
        return progression.prevLevel();
    });
};

window.updateStateGraph = function updateStateGraph(networkData) {
    if (!document.querySelector("#state-graph")) {
        var ctr = document.createElement("div");
        ctr.setAttribute("id", "state-graph");
        document.body.appendChild(ctr);
    }
    var container = document.querySelector("#state-graph");

    if (!_logging2.default.config("stateGraph")) {
        container.style.display = "none";
        return;
    }
    container.style.display = "unset";

    if (!networkData) return;

    var options = {
        edges: {
            arrows: {
                to: { enabled: true, scaleFactor: 1 }
            },
            font: {
                color: "lightgray",
                strokeWidth: 0,
                background: "#222"
            }
        },
        nodes: {
            shape: "box"
        }
    };
    return new _vis2.default.Network(container, networkData, options);
};
},{"babel-polyfill":58,"vis":59,"redux":60,"./gfx/core":4,"./gfx/animate":5,"./reducer/reducer":6,"./game/level":7,"./game/progression":8,"./semantics/es6":9,"./stage/stage":10,"./stage/tutorial":11,"./stage/chapterend":12,"./stage/title":13,"./reducer/undo":14,"./ui/instructor/password":16,"./loader":3,"./logging/logging":15}]},{},[2])
//# sourceMappingURL=/reduct-redux.map